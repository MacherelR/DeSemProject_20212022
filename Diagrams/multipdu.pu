@startuml
title Creation et ecriture MPDU

participant NetworkEntity as ne
participant "responseMPDU" as mpdu
participant "buffer" as buf
participant AbstractApplication as aa

--> ne : beacon reception
create mpdu
ne -> mpdu : reset()
create buf
mpdu -> buf : reinitialize buffer (Type,EPDUCount,sensorId,etc.)
buf --> mpdu
mpdu --> ne : ready
loop over all sync registered applications
ne -> aa : svSyncIndication(beacon.NetworkTime())
return
end loop

loop over all asked groups by the beacon groupMask
ne -> mpdu : insertBuffer()
activate mpdu
mpdu -> mpdu : buffer proxy creation
return svBuff
deactivate mpdu
ne -> aa : publishArray[svGroupIt]->svPublishIndication(svGroupIt, svBuff)
activate aa
aa -> aa : Writes values into svBuff
return copied size
deactivate aa
ne -> mpdu : commitSv(svGroupIt, length)
activate mpdu
mpdu -> mpdu : writes EPDU header
mpdu -> mpdu : increments EPDU count
mpdu -> mpdu : update frame buffer length
return
deactivate mpdu
end loop

loop while there's enough space remaining in the MPDU frame and evQueue is not empty
ne -> mpdu : ePDUWrite(evQueue.begin()->data)
activate mpdu
mpdu -> mpdu : copy data in MPDU frame buffer
return length
deactivate mpdu
ne -> mpdu : commitEv(evQueue.begin()->id,length)
activate mpdu
mpdu -> mpdu : writes EPDU header
mpdu -> mpdu : increments EPDU count
mpdu -> mpdu : update frame buffer length
return
deactivate mpdu
ne -> ne : evQueue.pop_front() 
end loop
--> ne : onTimeSlotSignal()
<-- ne : transceiver().transmit(responseMPDU.getBuffer(),responseMPDU.length())


@enduml