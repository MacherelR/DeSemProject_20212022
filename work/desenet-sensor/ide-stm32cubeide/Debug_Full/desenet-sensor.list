
desenet-sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017ab8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000066c8  08017c48  08017c48  00027c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e310  0801e310  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  0801e310  0801e310  0002e310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e318  0801e318  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000068  0801e318  0801e318  0002e318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000068  0801e380  0801e380  0002e380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0801e3e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001eb0  20000080  0801e468  00030080  2**3
                  ALLOC
 10 ._user_heap_stack 00001000  20001f30  0801e468  00031f30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   001491e0  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0001b4c8  00000000  00000000  00179290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00005828  00000000  00000000  00194758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00005408  00000000  00000000  00199f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003fe23  00000000  00000000  0019f388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005cd5d  00000000  00000000  001df1ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014ceac  00000000  00000000  0023bf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00388db4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001a390  00000000  00000000  00388e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017c30 	.word	0x08017c30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08017c30 	.word	0x08017c30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 ff12 	bl	80013a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f81a 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 fa0a 	bl	800099c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000588:	f000 f9a8 	bl	80008dc <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800058c:	f000 f8b6 	bl	80006fc <MX_SPI2_Init>
  MX_SPI3_Init();
 8000590:	f000 f8f2 	bl	8000778 <MX_SPI3_Init>
  MX_I2C3_Init();
 8000594:	f000 f872 	bl	800067c <MX_I2C3_Init>
  MX_USART3_UART_Init();
 8000598:	f000 f9d0 	bl	800093c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800059c:	f000 f92a 	bl	80007f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  Factory_init(0, NULL);
 80005a0:	2100      	movs	r1, #0
 80005a2:	2000      	movs	r0, #0
 80005a4:	f006 ffda 	bl	800755c <Factory_init>
  XF_init(10);
 80005a8:	200a      	movs	r0, #10
 80005aa:	f013 fe41 	bl	8014230 <XF_init>

  Factory_buildApplication();
 80005ae:	f007 f803 	bl	80075b8 <Factory_buildApplication>
  XF_start();
 80005b2:	f013 fe48 	bl	8014246 <XF_start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b6:	e7fe      	b.n	80005b6 <main+0x3e>

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b096      	sub	sp, #88	; 0x58
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	2244      	movs	r2, #68	; 0x44
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f016 f8d0 	bl	801676c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	463b      	mov	r3, r7
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005de:	f002 f857 	bl	8002690 <HAL_PWREx_ControlVoltageScaling>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e8:	f000 fb26 	bl	8000c38 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005ec:	f002 f832 	bl	8002654 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005f0:	4b21      	ldr	r3, [pc, #132]	; (8000678 <SystemClock_Config+0xc0>)
 80005f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005f6:	4a20      	ldr	r2, [pc, #128]	; (8000678 <SystemClock_Config+0xc0>)
 80005f8:	f023 0318 	bic.w	r3, r3, #24
 80005fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000600:	2314      	movs	r3, #20
 8000602:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000610:	2360      	movs	r3, #96	; 0x60
 8000612:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000618:	2301      	movs	r3, #1
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800061c:	2301      	movs	r3, #1
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000620:	2310      	movs	r3, #16
 8000622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000624:	2307      	movs	r3, #7
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	4618      	mov	r0, r3
 8000636:	f002 f881 	bl	800273c <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000640:	f000 fafa 	bl	8000c38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000648:	2303      	movs	r3, #3
 800064a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	2101      	movs	r1, #1
 800065c:	4618      	mov	r0, r3
 800065e:	f002 fc53 	bl	8002f08 <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000668:	f000 fae6 	bl	8000c38 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800066c:	f003 f93c 	bl	80038e8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000670:	bf00      	nop
 8000672:	3758      	adds	r7, #88	; 0x58
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40021000 	.word	0x40021000

0800067c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_I2C3_Init+0x74>)
 8000682:	4a1c      	ldr	r2, [pc, #112]	; (80006f4 <MX_I2C3_Init+0x78>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x008081B5;
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <MX_I2C3_Init+0x74>)
 8000688:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <MX_I2C3_Init+0x7c>)
 800068a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_I2C3_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_I2C3_Init+0x74>)
 8000694:	2201      	movs	r2, #1
 8000696:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_I2C3_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_I2C3_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_I2C3_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_I2C3_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_I2C3_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80006b6:	480e      	ldr	r0, [pc, #56]	; (80006f0 <MX_I2C3_Init+0x74>)
 80006b8:	f001 fada 	bl	8001c70 <HAL_I2C_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80006c2:	f000 fab9 	bl	8000c38 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006c6:	2100      	movs	r1, #0
 80006c8:	4809      	ldr	r0, [pc, #36]	; (80006f0 <MX_I2C3_Init+0x74>)
 80006ca:	f001 ff2b 	bl	8002524 <HAL_I2CEx_ConfigAnalogFilter>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80006d4:	f000 fab0 	bl	8000c38 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80006d8:	2100      	movs	r1, #0
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_I2C3_Init+0x74>)
 80006dc:	f001 ff6d 	bl	80025ba <HAL_I2CEx_ConfigDigitalFilter>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80006e6:	f000 faa7 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20001cb4 	.word	0x20001cb4
 80006f4:	40005c00 	.word	0x40005c00
 80006f8:	008081b5 	.word	0x008081b5

080006fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_SPI2_Init+0x74>)
 8000702:	4a1c      	ldr	r2, [pc, #112]	; (8000774 <MX_SPI2_Init+0x78>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <MX_SPI2_Init+0x74>)
 8000708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_SPI2_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_SPI2_Init+0x74>)
 8000716:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800071a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_SPI2_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_SPI2_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_SPI2_Init+0x74>)
 800072a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800072e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_SPI2_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_SPI2_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_SPI2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_SPI2_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_SPI2_Init+0x74>)
 800074a:	2207      	movs	r2, #7
 800074c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_SPI2_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_SPI2_Init+0x74>)
 8000756:	2208      	movs	r2, #8
 8000758:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_SPI2_Init+0x74>)
 800075c:	f003 faa6 	bl	8003cac <HAL_SPI_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000766:	f000 fa67 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20001d00 	.word	0x20001d00
 8000774:	40003800 	.word	0x40003800

08000778 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800077c:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_SPI3_Init+0x74>)
 800077e:	4a1c      	ldr	r2, [pc, #112]	; (80007f0 <MX_SPI3_Init+0x78>)
 8000780:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <MX_SPI3_Init+0x74>)
 8000784:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000788:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800078a:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_SPI3_Init+0x74>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000790:	4b16      	ldr	r3, [pc, #88]	; (80007ec <MX_SPI3_Init+0x74>)
 8000792:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000796:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000798:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_SPI3_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <MX_SPI3_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_SPI3_Init+0x74>)
 80007a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007aa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_SPI3_Init+0x74>)
 80007ae:	2218      	movs	r2, #24
 80007b0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_SPI3_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_SPI3_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_SPI3_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_SPI3_Init+0x74>)
 80007c6:	2207      	movs	r2, #7
 80007c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_SPI3_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_SPI3_Init+0x74>)
 80007d2:	2208      	movs	r2, #8
 80007d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_SPI3_Init+0x74>)
 80007d8:	f003 fa68 	bl	8003cac <HAL_SPI_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007e2:	f000 fa29 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20001de8 	.word	0x20001de8
 80007f0:	40003c00 	.word	0x40003c00

080007f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08e      	sub	sp, #56	; 0x38
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000814:	463b      	mov	r3, r7
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
 8000822:	615a      	str	r2, [r3, #20]
 8000824:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000826:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <MX_TIM2_Init+0xe4>)
 8000828:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800082c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 800082e:	4b2a      	ldr	r3, [pc, #168]	; (80008d8 <MX_TIM2_Init+0xe4>)
 8000830:	2220      	movs	r2, #32
 8000832:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000834:	4b28      	ldr	r3, [pc, #160]	; (80008d8 <MX_TIM2_Init+0xe4>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800083a:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <MX_TIM2_Init+0xe4>)
 800083c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000840:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000842:	4b25      	ldr	r3, [pc, #148]	; (80008d8 <MX_TIM2_Init+0xe4>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000848:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <MX_TIM2_Init+0xe4>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800084e:	4822      	ldr	r0, [pc, #136]	; (80008d8 <MX_TIM2_Init+0xe4>)
 8000850:	f003 ffb0 	bl	80047b4 <HAL_TIM_Base_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800085a:	f000 f9ed 	bl	8000c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000864:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000868:	4619      	mov	r1, r3
 800086a:	481b      	ldr	r0, [pc, #108]	; (80008d8 <MX_TIM2_Init+0xe4>)
 800086c:	f004 fc74 	bl	8005158 <HAL_TIM_ConfigClockSource>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000876:	f000 f9df 	bl	8000c38 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800087a:	4817      	ldr	r0, [pc, #92]	; (80008d8 <MX_TIM2_Init+0xe4>)
 800087c:	f004 f84d 	bl	800491a <HAL_TIM_OC_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000886:	f000 f9d7 	bl	8000c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 800088a:	2340      	movs	r3, #64	; 0x40
 800088c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	480f      	ldr	r0, [pc, #60]	; (80008d8 <MX_TIM2_Init+0xe4>)
 800089a:	f005 f97b 	bl	8005b94 <HAL_TIMEx_MasterConfigSynchronization>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80008a4:	f000 f9c8 	bl	8000c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80008a8:	2300      	movs	r3, #0
 80008aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b8:	463b      	mov	r3, r7
 80008ba:	2200      	movs	r2, #0
 80008bc:	4619      	mov	r1, r3
 80008be:	4806      	ldr	r0, [pc, #24]	; (80008d8 <MX_TIM2_Init+0xe4>)
 80008c0:	f004 fbd4 	bl	800506c <HAL_TIM_OC_ConfigChannel>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80008ca:	f000 f9b5 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	3738      	adds	r7, #56	; 0x38
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20001e4c 	.word	0x20001e4c

080008dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_USART2_UART_Init+0x58>)
 80008e2:	4a15      	ldr	r2, [pc, #84]	; (8000938 <MX_USART2_UART_Init+0x5c>)
 80008e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008e6:	4b13      	ldr	r3, [pc, #76]	; (8000934 <MX_USART2_UART_Init+0x58>)
 80008e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_USART2_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_USART2_UART_Init+0x58>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_USART2_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_USART2_UART_Init+0x58>)
 8000902:	220c      	movs	r2, #12
 8000904:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_USART2_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_USART2_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_USART2_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_USART2_UART_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_USART2_UART_Init+0x58>)
 8000920:	f005 f9de 	bl	8005ce0 <HAL_UART_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800092a:	f000 f985 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20001e98 	.word	0x20001e98
 8000938:	40004400 	.word	0x40004400

0800093c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <MX_USART3_UART_Init+0x58>)
 8000942:	4a15      	ldr	r2, [pc, #84]	; (8000998 <MX_USART3_UART_Init+0x5c>)
 8000944:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000946:	4b13      	ldr	r3, [pc, #76]	; (8000994 <MX_USART3_UART_Init+0x58>)
 8000948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800094c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_USART3_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_USART3_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_USART3_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_USART3_UART_Init+0x58>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <MX_USART3_UART_Init+0x58>)
 8000968:	f44f 7240 	mov.w	r2, #768	; 0x300
 800096c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_USART3_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <MX_USART3_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_USART3_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <MX_USART3_UART_Init+0x58>)
 8000982:	f005 f9ad 	bl	8005ce0 <HAL_UART_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 800098c:	f000 f954 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20001d64 	.word	0x20001d64
 8000998:	40004800 	.word	0x40004800

0800099c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	4b9a      	ldr	r3, [pc, #616]	; (8000c1c <MX_GPIO_Init+0x280>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a99      	ldr	r2, [pc, #612]	; (8000c1c <MX_GPIO_Init+0x280>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b97      	ldr	r3, [pc, #604]	; (8000c1c <MX_GPIO_Init+0x280>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ca:	4b94      	ldr	r3, [pc, #592]	; (8000c1c <MX_GPIO_Init+0x280>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	4a93      	ldr	r2, [pc, #588]	; (8000c1c <MX_GPIO_Init+0x280>)
 80009d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d6:	4b91      	ldr	r3, [pc, #580]	; (8000c1c <MX_GPIO_Init+0x280>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	4b8e      	ldr	r3, [pc, #568]	; (8000c1c <MX_GPIO_Init+0x280>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4a8d      	ldr	r2, [pc, #564]	; (8000c1c <MX_GPIO_Init+0x280>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ee:	4b8b      	ldr	r3, [pc, #556]	; (8000c1c <MX_GPIO_Init+0x280>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	4b88      	ldr	r3, [pc, #544]	; (8000c1c <MX_GPIO_Init+0x280>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	4a87      	ldr	r2, [pc, #540]	; (8000c1c <MX_GPIO_Init+0x280>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a06:	4b85      	ldr	r3, [pc, #532]	; (8000c1c <MX_GPIO_Init+0x280>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	4b82      	ldr	r3, [pc, #520]	; (8000c1c <MX_GPIO_Init+0x280>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4a81      	ldr	r2, [pc, #516]	; (8000c1c <MX_GPIO_Init+0x280>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4b7f      	ldr	r3, [pc, #508]	; (8000c1c <MX_GPIO_Init+0x280>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ACCEL_CS_Pin|DISP_RESET_Pin, GPIO_PIN_SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2184      	movs	r1, #132	; 0x84
 8000a2e:	487c      	ldr	r0, [pc, #496]	; (8000c20 <MX_GPIO_Init+0x284>)
 8000a30:	f001 f8ee 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DISP_DATA_Pin|NRF_CS_Pin, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	f248 2120 	movw	r1, #33312	; 0x8220
 8000a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3e:	f001 f8e7 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2104      	movs	r1, #4
 8000a46:	4877      	ldr	r0, [pc, #476]	; (8000c24 <MX_GPIO_Init+0x288>)
 8000a48:	f001 f8e2 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a52:	4b75      	ldr	r3, [pc, #468]	; (8000c28 <MX_GPIO_Init+0x28c>)
 8000a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	486f      	ldr	r0, [pc, #444]	; (8000c20 <MX_GPIO_Init+0x284>)
 8000a62:	f000 ff13 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_CS_Pin */
  GPIO_InitStruct.Pin = ACCEL_CS_Pin;
 8000a66:	2304      	movs	r3, #4
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a6a:	2311      	movs	r3, #17
 8000a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACCEL_CS_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4868      	ldr	r0, [pc, #416]	; (8000c20 <MX_GPIO_Init+0x284>)
 8000a7e:	f000 ff05 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_IRQ1_Pin */
  GPIO_InitStruct.Pin = ACCEL_IRQ1_Pin;
 8000a82:	2308      	movs	r3, #8
 8000a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a86:	4b69      	ldr	r3, [pc, #420]	; (8000c2c <MX_GPIO_Init+0x290>)
 8000a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCEL_IRQ1_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	4862      	ldr	r0, [pc, #392]	; (8000c20 <MX_GPIO_Init+0x284>)
 8000a96:	f000 fef9 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_ADC1_Pin ACCEL_ADC2_Pin ACCEL_ADC3_Pin */
  GPIO_InitStruct.Pin = ACCEL_ADC1_Pin|ACCEL_ADC2_Pin|ACCEL_ADC3_Pin;
 8000a9a:	2313      	movs	r3, #19
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a9e:	230b      	movs	r3, #11
 8000aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab0:	f000 feec 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin NRF_CS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|NRF_CS_Pin;
 8000ab4:	f248 0320 	movw	r3, #32800	; 0x8020
 8000ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad0:	f000 fedc 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_IRQ2_Pin */
  GPIO_InitStruct.Pin = ACCEL_IRQ2_Pin;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad8:	4b54      	ldr	r3, [pc, #336]	; (8000c2c <MX_GPIO_Init+0x290>)
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCEL_IRQ2_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4852      	ldr	r0, [pc, #328]	; (8000c30 <MX_GPIO_Init+0x294>)
 8000ae8:	f000 fed0 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_RESET_Pin */
  GPIO_InitStruct.Pin = DISP_RESET_Pin;
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_RESET_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	4847      	ldr	r0, [pc, #284]	; (8000c20 <MX_GPIO_Init+0x284>)
 8000b04:	f000 fec2 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pins : NAVS_RIGHT_Pin NAVS_UP_Pin */
  GPIO_InitStruct.Pin = NAVS_RIGHT_Pin|NAVS_UP_Pin;
 8000b08:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b0e:	4b49      	ldr	r3, [pc, #292]	; (8000c34 <MX_GPIO_Init+0x298>)
 8000b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4840      	ldr	r0, [pc, #256]	; (8000c20 <MX_GPIO_Init+0x284>)
 8000b1e:	f000 feb5 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_DATA_Pin */
  GPIO_InitStruct.Pin = DISP_DATA_Pin;
 8000b22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISP_DATA_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3e:	f000 fea5 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : NAVS_DOWN_Pin */
  GPIO_InitStruct.Pin = NAVS_DOWN_Pin;
 8000b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b48:	4b3a      	ldr	r3, [pc, #232]	; (8000c34 <MX_GPIO_Init+0x298>)
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NAVS_DOWN_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5a:	f000 fe97 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	482b      	ldr	r0, [pc, #172]	; (8000c24 <MX_GPIO_Init+0x288>)
 8000b76:	f000 fe89 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pins : NAVS_LEFT_Pin NAVS_CENTER_Pin */
  GPIO_InitStruct.Pin = NAVS_LEFT_Pin|NAVS_CENTER_Pin;
 8000b7a:	2330      	movs	r3, #48	; 0x30
 8000b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b7e:	4b2d      	ldr	r3, [pc, #180]	; (8000c34 <MX_GPIO_Init+0x298>)
 8000b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4828      	ldr	r0, [pc, #160]	; (8000c30 <MX_GPIO_Init+0x294>)
 8000b8e:	f000 fe7d 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_BUSY_Pin */
  GPIO_InitStruct.Pin = DISP_BUSY_Pin;
 8000b92:	2340      	movs	r3, #64	; 0x40
 8000b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISP_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4822      	ldr	r0, [pc, #136]	; (8000c30 <MX_GPIO_Init+0x294>)
 8000ba6:	f000 fe71 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bae:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <MX_GPIO_Init+0x28c>)
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	481c      	ldr	r0, [pc, #112]	; (8000c30 <MX_GPIO_Init+0x294>)
 8000bbe:	f000 fe65 	bl	800188c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 10, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	210a      	movs	r1, #10
 8000bc6:	2006      	movs	r0, #6
 8000bc8:	f000 fd8b 	bl	80016e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bcc:	2006      	movs	r0, #6
 8000bce:	f000 fda4 	bl	800171a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 10, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	210a      	movs	r1, #10
 8000bd6:	2009      	movs	r0, #9
 8000bd8:	f000 fd83 	bl	80016e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000bdc:	2009      	movs	r0, #9
 8000bde:	f000 fd9c 	bl	800171a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 10, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	210a      	movs	r1, #10
 8000be6:	200a      	movs	r0, #10
 8000be8:	f000 fd7b 	bl	80016e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000bec:	200a      	movs	r0, #10
 8000bee:	f000 fd94 	bl	800171a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 10, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	210a      	movs	r1, #10
 8000bf6:	2017      	movs	r0, #23
 8000bf8:	f000 fd73 	bl	80016e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bfc:	2017      	movs	r0, #23
 8000bfe:	f000 fd8c 	bl	800171a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	210a      	movs	r1, #10
 8000c06:	2028      	movs	r0, #40	; 0x28
 8000c08:	f000 fd6b 	bl	80016e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c0c:	2028      	movs	r0, #40	; 0x28
 8000c0e:	f000 fd84 	bl	800171a <HAL_NVIC_EnableIRQ>

}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	; 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	48000800 	.word	0x48000800
 8000c24:	48000c00 	.word	0x48000c00
 8000c28:	10210000 	.word	0x10210000
 8000c2c:	10110000 	.word	0x10110000
 8000c30:	48000400 	.word	0x48000400
 8000c34:	10310000 	.word	0x10310000

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <Error_Handler+0x8>
	...

08000c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <HAL_MspInit+0x44>)
 8000c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4e:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <HAL_MspInit+0x44>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6613      	str	r3, [r2, #96]	; 0x60
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <HAL_MspInit+0x44>)
 8000c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_MspInit+0x44>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c66:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <HAL_MspInit+0x44>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_MspInit+0x44>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40021000 	.word	0x40021000

08000c8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b0ac      	sub	sp, #176	; 0xb0
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2288      	movs	r2, #136	; 0x88
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f015 fd5d 	bl	801676c <memset>
  if(hi2c->Instance==I2C3)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a21      	ldr	r2, [pc, #132]	; (8000d3c <HAL_I2C_MspInit+0xb0>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d13b      	bne.n	8000d34 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f002 fb22 	bl	8003314 <HAL_RCCEx_PeriphCLKConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000cd6:	f7ff ffaf 	bl	8000c38 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cda:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <HAL_I2C_MspInit+0xb4>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <HAL_I2C_MspInit+0xb4>)
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce6:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <HAL_I2C_MspInit+0xb4>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	f003 0304 	and.w	r3, r3, #4
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf8:	2312      	movs	r3, #18
 8000cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d04:	2301      	movs	r3, #1
 8000d06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d14:	4619      	mov	r1, r3
 8000d16:	480b      	ldr	r0, [pc, #44]	; (8000d44 <HAL_I2C_MspInit+0xb8>)
 8000d18:	f000 fdb8 	bl	800188c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_I2C_MspInit+0xb4>)
 8000d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <HAL_I2C_MspInit+0xb4>)
 8000d22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d26:	6593      	str	r3, [r2, #88]	; 0x58
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <HAL_I2C_MspInit+0xb4>)
 8000d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000d34:	bf00      	nop
 8000d36:	37b0      	adds	r7, #176	; 0xb0
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40005c00 	.word	0x40005c00
 8000d40:	40021000 	.word	0x40021000
 8000d44:	48000800 	.word	0x48000800

08000d48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08c      	sub	sp, #48	; 0x30
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a2f      	ldr	r2, [pc, #188]	; (8000e24 <HAL_SPI_MspInit+0xdc>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d129      	bne.n	8000dbe <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d6a:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <HAL_SPI_MspInit+0xe0>)
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6e:	4a2e      	ldr	r2, [pc, #184]	; (8000e28 <HAL_SPI_MspInit+0xe0>)
 8000d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d74:	6593      	str	r3, [r2, #88]	; 0x58
 8000d76:	4b2c      	ldr	r3, [pc, #176]	; (8000e28 <HAL_SPI_MspInit+0xe0>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7e:	61bb      	str	r3, [r7, #24]
 8000d80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	4b29      	ldr	r3, [pc, #164]	; (8000e28 <HAL_SPI_MspInit+0xe0>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	4a28      	ldr	r2, [pc, #160]	; (8000e28 <HAL_SPI_MspInit+0xe0>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8e:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <HAL_SPI_MspInit+0xe0>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697b      	ldr	r3, [r7, #20]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|DISP_SPI2_SCK_Pin|DISP_SPI2_MISO_Pin|DISP_SPI2_MOSI_Pin;
 8000d9a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dac:	2305      	movs	r3, #5
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	4619      	mov	r1, r3
 8000db6:	481d      	ldr	r0, [pc, #116]	; (8000e2c <HAL_SPI_MspInit+0xe4>)
 8000db8:	f000 fd68 	bl	800188c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000dbc:	e02d      	b.n	8000e1a <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a1b      	ldr	r2, [pc, #108]	; (8000e30 <HAL_SPI_MspInit+0xe8>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d128      	bne.n	8000e1a <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dc8:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <HAL_SPI_MspInit+0xe0>)
 8000dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dcc:	4a16      	ldr	r2, [pc, #88]	; (8000e28 <HAL_SPI_MspInit+0xe0>)
 8000dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8000dd4:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <HAL_SPI_MspInit+0xe0>)
 8000dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <HAL_SPI_MspInit+0xe0>)
 8000de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de4:	4a10      	ldr	r2, [pc, #64]	; (8000e28 <HAL_SPI_MspInit+0xe0>)
 8000de6:	f043 0304 	orr.w	r3, r3, #4
 8000dea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_SPI_MspInit+0xe0>)
 8000dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = NRF_CLK_Pin|NRF_MISO_Pin|NRF_MOSI_Pin;
 8000df8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000e06:	2301      	movs	r3, #1
 8000e08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e0a:	2306      	movs	r3, #6
 8000e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	4807      	ldr	r0, [pc, #28]	; (8000e34 <HAL_SPI_MspInit+0xec>)
 8000e16:	f000 fd39 	bl	800188c <HAL_GPIO_Init>
}
 8000e1a:	bf00      	nop
 8000e1c:	3730      	adds	r7, #48	; 0x30
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40003800 	.word	0x40003800
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	48000400 	.word	0x48000400
 8000e30:	40003c00 	.word	0x40003c00
 8000e34:	48000800 	.word	0x48000800

08000e38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e48:	d113      	bne.n	8000e72 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <HAL_TIM_Base_MspInit+0x44>)
 8000e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <HAL_TIM_Base_MspInit+0x44>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6593      	str	r3, [r2, #88]	; 0x58
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <HAL_TIM_Base_MspInit+0x44>)
 8000e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2103      	movs	r1, #3
 8000e66:	201c      	movs	r0, #28
 8000e68:	f000 fc3b 	bl	80016e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e6c:	201c      	movs	r0, #28
 8000e6e:	f000 fc54 	bl	800171a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40021000 	.word	0x40021000

08000e80 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e90:	d108      	bne.n	8000ea4 <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_TIM_Base_MspDeInit+0x2c>)
 8000e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <HAL_TIM_Base_MspDeInit+0x2c>)
 8000e98:	f023 0301 	bic.w	r3, r3, #1
 8000e9c:	6593      	str	r3, [r2, #88]	; 0x58

    /* TIM2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8000e9e:	201c      	movs	r0, #28
 8000ea0:	f000 fc49 	bl	8001736 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM2_MspDeInit 1 */

  /* USER CODE END TIM2_MspDeInit 1 */
  }

}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40021000 	.word	0x40021000

08000eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b0b0      	sub	sp, #192	; 0xc0
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ecc:	2288      	movs	r2, #136	; 0x88
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f015 fc4b 	bl	801676c <memset>
  if(huart->Instance==USART2)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a63      	ldr	r2, [pc, #396]	; (8001068 <HAL_UART_MspInit+0x1b8>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d13c      	bne.n	8000f5a <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eec:	4618      	mov	r0, r3
 8000eee:	f002 fa11 	bl	8003314 <HAL_RCCEx_PeriphCLKConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ef8:	f7ff fe9e 	bl	8000c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000efc:	4b5b      	ldr	r3, [pc, #364]	; (800106c <HAL_UART_MspInit+0x1bc>)
 8000efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f00:	4a5a      	ldr	r2, [pc, #360]	; (800106c <HAL_UART_MspInit+0x1bc>)
 8000f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f06:	6593      	str	r3, [r2, #88]	; 0x58
 8000f08:	4b58      	ldr	r3, [pc, #352]	; (800106c <HAL_UART_MspInit+0x1bc>)
 8000f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f10:	623b      	str	r3, [r7, #32]
 8000f12:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	4b55      	ldr	r3, [pc, #340]	; (800106c <HAL_UART_MspInit+0x1bc>)
 8000f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f18:	4a54      	ldr	r2, [pc, #336]	; (800106c <HAL_UART_MspInit+0x1bc>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f20:	4b52      	ldr	r3, [pc, #328]	; (800106c <HAL_UART_MspInit+0x1bc>)
 8000f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	61fb      	str	r3, [r7, #28]
 8000f2a:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000f2c:	230c      	movs	r3, #12
 8000f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f44:	2307      	movs	r3, #7
 8000f46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f54:	f000 fc9a 	bl	800188c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f58:	e082      	b.n	8001060 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a44      	ldr	r2, [pc, #272]	; (8001070 <HAL_UART_MspInit+0x1c0>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d17d      	bne.n	8001060 <HAL_UART_MspInit+0x1b0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f64:	2304      	movs	r3, #4
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 f9cf 	bl	8003314 <HAL_RCCEx_PeriphCLKConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000f7c:	f7ff fe5c 	bl	8000c38 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f80:	4b3a      	ldr	r3, [pc, #232]	; (800106c <HAL_UART_MspInit+0x1bc>)
 8000f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f84:	4a39      	ldr	r2, [pc, #228]	; (800106c <HAL_UART_MspInit+0x1bc>)
 8000f86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f8a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f8c:	4b37      	ldr	r3, [pc, #220]	; (800106c <HAL_UART_MspInit+0x1bc>)
 8000f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f94:	61bb      	str	r3, [r7, #24]
 8000f96:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f98:	4b34      	ldr	r3, [pc, #208]	; (800106c <HAL_UART_MspInit+0x1bc>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9c:	4a33      	ldr	r2, [pc, #204]	; (800106c <HAL_UART_MspInit+0x1bc>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa4:	4b31      	ldr	r3, [pc, #196]	; (800106c <HAL_UART_MspInit+0x1bc>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb0:	4b2e      	ldr	r3, [pc, #184]	; (800106c <HAL_UART_MspInit+0x1bc>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb4:	4a2d      	ldr	r2, [pc, #180]	; (800106c <HAL_UART_MspInit+0x1bc>)
 8000fb6:	f043 0304 	orr.w	r3, r3, #4
 8000fba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbc:	4b2b      	ldr	r3, [pc, #172]	; (800106c <HAL_UART_MspInit+0x1bc>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc0:	f003 0304 	and.w	r3, r3, #4
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc8:	4b28      	ldr	r3, [pc, #160]	; (800106c <HAL_UART_MspInit+0x1bc>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fcc:	4a27      	ldr	r2, [pc, #156]	; (800106c <HAL_UART_MspInit+0x1bc>)
 8000fce:	f043 0302 	orr.w	r3, r3, #2
 8000fd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd4:	4b25      	ldr	r3, [pc, #148]	; (800106c <HAL_UART_MspInit+0x1bc>)
 8000fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TRACE_CTS_Pin;
 8000fe0:	2340      	movs	r3, #64	; 0x40
 8000fe2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ff8:	2307      	movs	r3, #7
 8000ffa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(TRACE_CTS_GPIO_Port, &GPIO_InitStruct);
 8000ffe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001002:	4619      	mov	r1, r3
 8001004:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001008:	f000 fc40 	bl	800188c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TRACE_TX_Pin|TRACE_RX_Pin;
 800100c:	2330      	movs	r3, #48	; 0x30
 800100e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001024:	2307      	movs	r3, #7
 8001026:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800102e:	4619      	mov	r1, r3
 8001030:	4810      	ldr	r0, [pc, #64]	; (8001074 <HAL_UART_MspInit+0x1c4>)
 8001032:	f000 fc2b 	bl	800188c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TRACE_RTS_Pin;
 8001036:	2302      	movs	r3, #2
 8001038:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800104e:	2307      	movs	r3, #7
 8001050:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(TRACE_RTS_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001058:	4619      	mov	r1, r3
 800105a:	4807      	ldr	r0, [pc, #28]	; (8001078 <HAL_UART_MspInit+0x1c8>)
 800105c:	f000 fc16 	bl	800188c <HAL_GPIO_Init>
}
 8001060:	bf00      	nop
 8001062:	37c0      	adds	r7, #192	; 0xc0
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40004400 	.word	0x40004400
 800106c:	40021000 	.word	0x40021000
 8001070:	40004800 	.word	0x40004800
 8001074:	48000800 	.word	0x48000800
 8001078:	48000400 	.word	0x48000400

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <NMI_Handler+0x4>

08001082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <HardFault_Handler+0x4>

08001088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <MemManage_Handler+0x4>

0800108e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <BusFault_Handler+0x4>

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <UsageFault_Handler+0x4>

0800109a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c4:	b598      	push	{r3, r4, r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c8:	f000 f9c8 	bl	800145c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  // SysTick handler gets called every millisecond (is given by code
  // generated by STM32CubeIDE). Check which interval is needed by the
  // XF (typically slower) and call XF_tick() accordingly.
  if (XF_isRunning() &&
 80010cc:	f013 f8c1 	bl	8014252 <XF_isRunning>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00e      	beq.n	80010f4 <SysTick_Handler+0x30>
      (HAL_GetTick() % XF_tickIntervalInMilliseconds()) == 0)
 80010d6:	f000 f9d5 	bl	8001484 <HAL_GetTick>
 80010da:	4604      	mov	r4, r0
 80010dc:	f013 f8d8 	bl	8014290 <XF_tickIntervalInMilliseconds>
 80010e0:	4603      	mov	r3, r0
 80010e2:	fbb4 f2f3 	udiv	r2, r4, r3
 80010e6:	fb03 f302 	mul.w	r3, r3, r2
 80010ea:	1ae3      	subs	r3, r4, r3
  if (XF_isRunning() &&
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <SysTick_Handler+0x30>
  {
    XF_tick();
 80010f0:	f013 f8b6 	bl	8014260 <XF_tick>
  }

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	bd98      	pop	{r3, r4, r7, pc}

080010f8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f000 fd9f 	bl	8001c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}

08001106 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800110a:	2008      	movs	r0, #8
 800110c:	f000 fd98 	bl	8001c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}

08001114 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001118:	2010      	movs	r0, #16
 800111a:	f000 fd91 	bl	8001c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}

08001122 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001126:	2020      	movs	r0, #32
 8001128:	f000 fd8a 	bl	8001c40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800112c:	2080      	movs	r0, #128	; 0x80
 800112e:	f000 fd87 	bl	8001c40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001132:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001136:	f000 fd83 	bl	8001c40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800113a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800113e:	f000 fd7f 	bl	8001c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <TIM2_IRQHandler+0x10>)
 800114e:	f003 fe6d 	bl	8004e2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20001e4c 	.word	0x20001e4c

0800115c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001160:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001164:	f000 fd6c 	bl	8001c40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001168:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800116c:	f000 fd68 	bl	8001c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}

08001174 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
	return 1;
 8001178:	2301      	movs	r3, #1
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <_kill>:

int _kill(int pid, int sig)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800118e:	f015 fa79 	bl	8016684 <__errno>
 8001192:	4603      	mov	r3, r0
 8001194:	2216      	movs	r2, #22
 8001196:	601a      	str	r2, [r3, #0]
	return -1;
 8001198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <_exit>:

void _exit (int status)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ffe7 	bl	8001184 <_kill>
  __ASM volatile ("cpsid i" : : : "memory");
 80011b6:	b672      	cpsid	i
}
 80011b8:	bf00      	nop
	__disable_irq();
	while (1)   /* Make sure we hang here */
	{
	    // Add breakpoint only during development
#ifndef NDEBUG
	    __asm__("BKPT");
 80011ba:	be00      	bkpt	0x0000
 80011bc:	e7fd      	b.n	80011ba <_exit+0x16>

080011be <_read>:
#endif
	}
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	e00a      	b.n	80011e6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011d0:	f3af 8000 	nop.w
 80011d4:	4601      	mov	r1, r0
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	1c5a      	adds	r2, r3, #1
 80011da:	60ba      	str	r2, [r7, #8]
 80011dc:	b2ca      	uxtb	r2, r1
 80011de:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	3301      	adds	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	dbf0      	blt.n	80011d0 <_read+0x12>
	}

return len;
 80011ee:	687b      	ldr	r3, [r7, #4]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
	trace(ptr, len);
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	68b8      	ldr	r0, [r7, #8]
 8001208:	f00e fcc2 	bl	800fb90 <trace>
	return len;
 800120c:	687b      	ldr	r3, [r7, #4]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <_close>:

int _close(int file)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
	return -1;
 800121e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800123e:	605a      	str	r2, [r3, #4]
	return 0;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <_isatty>:

int _isatty(int file)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
	return 1;
 8001256:	2301      	movs	r3, #1
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
	return 0;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001288:	4a14      	ldr	r2, [pc, #80]	; (80012dc <_sbrk+0x5c>)
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <_sbrk+0x60>)
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <_sbrk+0x64>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d102      	bne.n	80012a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <_sbrk+0x64>)
 800129e:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <_sbrk+0x68>)
 80012a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <_sbrk+0x64>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d207      	bcs.n	80012c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b0:	f015 f9e8 	bl	8016684 <__errno>
 80012b4:	4603      	mov	r3, r0
 80012b6:	220c      	movs	r2, #12
 80012b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012be:	e009      	b.n	80012d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012c6:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <_sbrk+0x64>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	4a05      	ldr	r2, [pc, #20]	; (80012e4 <_sbrk+0x64>)
 80012d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012d2:	68fb      	ldr	r3, [r7, #12]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20018000 	.word	0x20018000
 80012e0:	00000800 	.word	0x00000800
 80012e4:	2000009c 	.word	0x2000009c
 80012e8:	20001f30 	.word	0x20001f30

080012ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <SystemInit+0x5c>)
 80012f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012f6:	4a14      	ldr	r2, [pc, #80]	; (8001348 <SystemInit+0x5c>)
 80012f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <SystemInit+0x60>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a11      	ldr	r2, [pc, #68]	; (800134c <SystemInit+0x60>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <SystemInit+0x60>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <SystemInit+0x60>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a0d      	ldr	r2, [pc, #52]	; (800134c <SystemInit+0x60>)
 8001318:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800131c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001320:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <SystemInit+0x60>)
 8001324:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001328:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <SystemInit+0x60>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a07      	ldr	r2, [pc, #28]	; (800134c <SystemInit+0x60>)
 8001330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001334:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <SystemInit+0x60>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000ed00 	.word	0xe000ed00
 800134c:	40021000 	.word	0x40021000

08001350 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001388 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001354:	f7ff ffca 	bl	80012ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001358:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800135a:	e003      	b.n	8001364 <LoopCopyDataInit>

0800135c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800135e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001360:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001362:	3104      	adds	r1, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001364:	480a      	ldr	r0, [pc, #40]	; (8001390 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001368:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800136a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800136c:	d3f6      	bcc.n	800135c <CopyDataInit>
	ldr	r2, =_sbss
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001370:	e002      	b.n	8001378 <LoopFillZerobss>

08001372 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001372:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001374:	f842 3b04 	str.w	r3, [r2], #4

08001378 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <LoopForever+0x16>)
	cmp	r2, r3
 800137a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800137c:	d3f9      	bcc.n	8001372 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800137e:	f015 f999 	bl	80166b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001382:	f7ff f8f9 	bl	8000578 <main>

08001386 <LoopForever>:

LoopForever:
    b LoopForever
 8001386:	e7fe      	b.n	8001386 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001388:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800138c:	0801e3e8 	.word	0x0801e3e8
	ldr	r0, =_sdata
 8001390:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001394:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 8001398:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 800139c:	20001f30 	.word	0x20001f30

080013a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC1_2_IRQHandler>
	...

080013a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <HAL_Init+0x3c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <HAL_Init+0x3c>)
 80013b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ba:	2003      	movs	r0, #3
 80013bc:	f000 f986 	bl	80016cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013c0:	2000      	movs	r0, #0
 80013c2:	f000 f80f 	bl	80013e4 <HAL_InitTick>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d002      	beq.n	80013d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	71fb      	strb	r3, [r7, #7]
 80013d0:	e001      	b.n	80013d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013d2:	f7ff fc37 	bl	8000c44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013d6:	79fb      	ldrb	r3, [r7, #7]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40022000 	.word	0x40022000

080013e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013f0:	4b17      	ldr	r3, [pc, #92]	; (8001450 <HAL_InitTick+0x6c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d023      	beq.n	8001440 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <HAL_InitTick+0x70>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b14      	ldr	r3, [pc, #80]	; (8001450 <HAL_InitTick+0x6c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001406:	fbb3 f3f1 	udiv	r3, r3, r1
 800140a:	fbb2 f3f3 	udiv	r3, r2, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f99f 	bl	8001752 <HAL_SYSTICK_Config>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10f      	bne.n	800143a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b0f      	cmp	r3, #15
 800141e:	d809      	bhi.n	8001434 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001420:	2200      	movs	r2, #0
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001428:	f000 f95b 	bl	80016e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800142c:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <HAL_InitTick+0x74>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e007      	b.n	8001444 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	e004      	b.n	8001444 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	e001      	b.n	8001444 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000008 	.word	0x20000008
 8001454:	20000000 	.word	0x20000000
 8001458:	20000004 	.word	0x20000004

0800145c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_IncTick+0x20>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_IncTick+0x24>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	4a04      	ldr	r2, [pc, #16]	; (8001480 <HAL_IncTick+0x24>)
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000008 	.word	0x20000008
 8001480:	20001f1c 	.word	0x20001f1c

08001484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return uwTick;
 8001488:	4b03      	ldr	r3, [pc, #12]	; (8001498 <HAL_GetTick+0x14>)
 800148a:	681b      	ldr	r3, [r3, #0]
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20001f1c 	.word	0x20001f1c

0800149c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a4:	f7ff ffee 	bl	8001484 <HAL_GetTick>
 80014a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014b4:	d005      	beq.n	80014c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_Delay+0x44>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4413      	add	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014c2:	bf00      	nop
 80014c4:	f7ff ffde 	bl	8001484 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d8f7      	bhi.n	80014c4 <HAL_Delay+0x28>
  {
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000008 	.word	0x20000008

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4907      	ldr	r1, [pc, #28]	; (8001580 <__NVIC_EnableIRQ+0x38>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000e100 	.word	0xe000e100

08001584 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	2b00      	cmp	r3, #0
 8001594:	db12      	blt.n	80015bc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	f003 021f 	and.w	r2, r3, #31
 800159c:	490a      	ldr	r1, [pc, #40]	; (80015c8 <__NVIC_DisableIRQ+0x44>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	095b      	lsrs	r3, r3, #5
 80015a4:	2001      	movs	r0, #1
 80015a6:	fa00 f202 	lsl.w	r2, r0, r2
 80015aa:	3320      	adds	r3, #32
 80015ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015b0:	f3bf 8f4f 	dsb	sy
}
 80015b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015b6:	f3bf 8f6f 	isb	sy
}
 80015ba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000e100 	.word	0xe000e100

080015cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	db0a      	blt.n	80015f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	490c      	ldr	r1, [pc, #48]	; (8001618 <__NVIC_SetPriority+0x4c>)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	0112      	lsls	r2, r2, #4
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	440b      	add	r3, r1
 80015f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f4:	e00a      	b.n	800160c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4908      	ldr	r1, [pc, #32]	; (800161c <__NVIC_SetPriority+0x50>)
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	3b04      	subs	r3, #4
 8001604:	0112      	lsls	r2, r2, #4
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	440b      	add	r3, r1
 800160a:	761a      	strb	r2, [r3, #24]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000e100 	.word	0xe000e100
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001620:	b480      	push	{r7}
 8001622:	b089      	sub	sp, #36	; 0x24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f1c3 0307 	rsb	r3, r3, #7
 800163a:	2b04      	cmp	r3, #4
 800163c:	bf28      	it	cs
 800163e:	2304      	movcs	r3, #4
 8001640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3304      	adds	r3, #4
 8001646:	2b06      	cmp	r3, #6
 8001648:	d902      	bls.n	8001650 <NVIC_EncodePriority+0x30>
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3b03      	subs	r3, #3
 800164e:	e000      	b.n	8001652 <NVIC_EncodePriority+0x32>
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43da      	mvns	r2, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	401a      	ands	r2, r3
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001668:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	43d9      	mvns	r1, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	4313      	orrs	r3, r2
         );
}
 800167a:	4618      	mov	r0, r3
 800167c:	3724      	adds	r7, #36	; 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001698:	d301      	bcc.n	800169e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800169a:	2301      	movs	r3, #1
 800169c:	e00f      	b.n	80016be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <SysTick_Config+0x40>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a6:	210f      	movs	r1, #15
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016ac:	f7ff ff8e 	bl	80015cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <SysTick_Config+0x40>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b6:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <SysTick_Config+0x40>)
 80016b8:	2207      	movs	r2, #7
 80016ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	e000e010 	.word	0xe000e010

080016cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ff05 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b086      	sub	sp, #24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
 80016ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016f4:	f7ff ff1a 	bl	800152c <__NVIC_GetPriorityGrouping>
 80016f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	6978      	ldr	r0, [r7, #20]
 8001700:	f7ff ff8e 	bl	8001620 <NVIC_EncodePriority>
 8001704:	4602      	mov	r2, r0
 8001706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff5d 	bl	80015cc <__NVIC_SetPriority>
}
 8001712:	bf00      	nop
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff0d 	bl	8001548 <__NVIC_EnableIRQ>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	4603      	mov	r3, r0
 800173e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff1d 	bl	8001584 <__NVIC_DisableIRQ>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ff94 	bl	8001688 <SysTick_Config>
 8001760:	4603      	mov	r3, r0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001782:	2b01      	cmp	r3, #1
 8001784:	d101      	bne.n	800178a <HAL_DMA_Start_IT+0x20>
 8001786:	2302      	movs	r3, #2
 8001788:	e04b      	b.n	8001822 <HAL_DMA_Start_IT+0xb8>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b01      	cmp	r3, #1
 800179c:	d13a      	bne.n	8001814 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2202      	movs	r2, #2
 80017a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0201 	bic.w	r2, r2, #1
 80017ba:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 f831 	bl	800182a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 020e 	orr.w	r2, r2, #14
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	e00f      	b.n	8001802 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0204 	bic.w	r2, r2, #4
 80017f0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f042 020a 	orr.w	r2, r2, #10
 8001800:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f042 0201 	orr.w	r2, r2, #1
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	e005      	b.n	8001820 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800181c:	2302      	movs	r3, #2
 800181e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001820:	7dfb      	ldrb	r3, [r7, #23]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800182a:	b480      	push	{r7}
 800182c:	b085      	sub	sp, #20
 800182e:	af00      	add	r7, sp, #0
 8001830:	60f8      	str	r0, [r7, #12]
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183c:	f003 021c 	and.w	r2, r3, #28
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	2101      	movs	r1, #1
 8001846:	fa01 f202 	lsl.w	r2, r1, r2
 800184a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b10      	cmp	r3, #16
 800185a:	d108      	bne.n	800186e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800186c:	e007      	b.n	800187e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	60da      	str	r2, [r3, #12]
}
 800187e:	bf00      	nop
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	b480      	push	{r7}
 800188e:	b087      	sub	sp, #28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189a:	e17f      	b.n	8001b9c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	2101      	movs	r1, #1
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	fa01 f303 	lsl.w	r3, r1, r3
 80018a8:	4013      	ands	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 8171 	beq.w	8001b96 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d00b      	beq.n	80018d4 <HAL_GPIO_Init+0x48>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d007      	beq.n	80018d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018c8:	2b11      	cmp	r3, #17
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b12      	cmp	r3, #18
 80018d2:	d130      	bne.n	8001936 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	2203      	movs	r2, #3
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800190a:	2201      	movs	r2, #1
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	091b      	lsrs	r3, r3, #4
 8001920:	f003 0201 	and.w	r2, r3, #1
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b03      	cmp	r3, #3
 8001940:	d118      	bne.n	8001974 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001948:	2201      	movs	r2, #1
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	08db      	lsrs	r3, r3, #3
 800195e:	f003 0201 	and.w	r2, r3, #1
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	2203      	movs	r2, #3
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x128>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b12      	cmp	r3, #18
 80019b2:	d123      	bne.n	80019fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	08da      	lsrs	r2, r3, #3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3208      	adds	r2, #8
 80019bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	220f      	movs	r2, #15
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	691a      	ldr	r2, [r3, #16]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	08da      	lsrs	r2, r3, #3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3208      	adds	r2, #8
 80019f6:	6939      	ldr	r1, [r7, #16]
 80019f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	2203      	movs	r2, #3
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 0203 	and.w	r2, r3, #3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 80ac 	beq.w	8001b96 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3e:	4b5f      	ldr	r3, [pc, #380]	; (8001bbc <HAL_GPIO_Init+0x330>)
 8001a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a42:	4a5e      	ldr	r2, [pc, #376]	; (8001bbc <HAL_GPIO_Init+0x330>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6613      	str	r3, [r2, #96]	; 0x60
 8001a4a:	4b5c      	ldr	r3, [pc, #368]	; (8001bbc <HAL_GPIO_Init+0x330>)
 8001a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a56:	4a5a      	ldr	r2, [pc, #360]	; (8001bc0 <HAL_GPIO_Init+0x334>)
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	089b      	lsrs	r3, r3, #2
 8001a5c:	3302      	adds	r3, #2
 8001a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a62:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	220f      	movs	r2, #15
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a80:	d025      	beq.n	8001ace <HAL_GPIO_Init+0x242>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a4f      	ldr	r2, [pc, #316]	; (8001bc4 <HAL_GPIO_Init+0x338>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d01f      	beq.n	8001aca <HAL_GPIO_Init+0x23e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4e      	ldr	r2, [pc, #312]	; (8001bc8 <HAL_GPIO_Init+0x33c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d019      	beq.n	8001ac6 <HAL_GPIO_Init+0x23a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4d      	ldr	r2, [pc, #308]	; (8001bcc <HAL_GPIO_Init+0x340>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d013      	beq.n	8001ac2 <HAL_GPIO_Init+0x236>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4c      	ldr	r2, [pc, #304]	; (8001bd0 <HAL_GPIO_Init+0x344>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d00d      	beq.n	8001abe <HAL_GPIO_Init+0x232>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4b      	ldr	r2, [pc, #300]	; (8001bd4 <HAL_GPIO_Init+0x348>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d007      	beq.n	8001aba <HAL_GPIO_Init+0x22e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4a      	ldr	r2, [pc, #296]	; (8001bd8 <HAL_GPIO_Init+0x34c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d101      	bne.n	8001ab6 <HAL_GPIO_Init+0x22a>
 8001ab2:	2306      	movs	r3, #6
 8001ab4:	e00c      	b.n	8001ad0 <HAL_GPIO_Init+0x244>
 8001ab6:	2307      	movs	r3, #7
 8001ab8:	e00a      	b.n	8001ad0 <HAL_GPIO_Init+0x244>
 8001aba:	2305      	movs	r3, #5
 8001abc:	e008      	b.n	8001ad0 <HAL_GPIO_Init+0x244>
 8001abe:	2304      	movs	r3, #4
 8001ac0:	e006      	b.n	8001ad0 <HAL_GPIO_Init+0x244>
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e004      	b.n	8001ad0 <HAL_GPIO_Init+0x244>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e002      	b.n	8001ad0 <HAL_GPIO_Init+0x244>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <HAL_GPIO_Init+0x244>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	f002 0203 	and.w	r2, r2, #3
 8001ad6:	0092      	lsls	r2, r2, #2
 8001ad8:	4093      	lsls	r3, r2
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ae0:	4937      	ldr	r1, [pc, #220]	; (8001bc0 <HAL_GPIO_Init+0x334>)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	089b      	lsrs	r3, r3, #2
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001aee:	4b3b      	ldr	r3, [pc, #236]	; (8001bdc <HAL_GPIO_Init+0x350>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b12:	4a32      	ldr	r2, [pc, #200]	; (8001bdc <HAL_GPIO_Init+0x350>)
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001b18:	4b30      	ldr	r3, [pc, #192]	; (8001bdc <HAL_GPIO_Init+0x350>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b3c:	4a27      	ldr	r2, [pc, #156]	; (8001bdc <HAL_GPIO_Init+0x350>)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b42:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <HAL_GPIO_Init+0x350>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b66:	4a1d      	ldr	r2, [pc, #116]	; (8001bdc <HAL_GPIO_Init+0x350>)
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b6c:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <HAL_GPIO_Init+0x350>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b90:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <HAL_GPIO_Init+0x350>)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f47f ae78 	bne.w	800189c <HAL_GPIO_Init+0x10>
  }
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	371c      	adds	r7, #28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40010000 	.word	0x40010000
 8001bc4:	48000400 	.word	0x48000400
 8001bc8:	48000800 	.word	0x48000800
 8001bcc:	48000c00 	.word	0x48000c00
 8001bd0:	48001000 	.word	0x48001000
 8001bd4:	48001400 	.word	0x48001400
 8001bd8:	48001800 	.word	0x48001800
 8001bdc:	40010400 	.word	0x40010400

08001be0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	887b      	ldrh	r3, [r7, #2]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d002      	beq.n	8001bfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	73fb      	strb	r3, [r7, #15]
 8001bfc:	e001      	b.n	8001c02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	807b      	strh	r3, [r7, #2]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c20:	787b      	ldrb	r3, [r7, #1]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c26:	887a      	ldrh	r2, [r7, #2]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c2c:	e002      	b.n	8001c34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c2e:	887a      	ldrh	r2, [r7, #2]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d006      	beq.n	8001c64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c56:	4a05      	ldr	r2, [pc, #20]	; (8001c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f012 f93c 	bl	8013edc <HAL_GPIO_EXTI_Callback>
  }
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40010400 	.word	0x40010400

08001c70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e081      	b.n	8001d86 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d106      	bne.n	8001c9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7fe fff8 	bl	8000c8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2224      	movs	r2, #36	; 0x24
 8001ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0201 	bic.w	r2, r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d107      	bne.n	8001cea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	e006      	b.n	8001cf8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001cf6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d104      	bne.n	8001d0a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691a      	ldr	r2, [r3, #16]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	ea42 0103 	orr.w	r1, r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	021a      	lsls	r2, r3, #8
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69d9      	ldr	r1, [r3, #28]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a1a      	ldr	r2, [r3, #32]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0201 	orr.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2220      	movs	r2, #32
 8001d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af02      	add	r7, sp, #8
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	607a      	str	r2, [r7, #4]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	817b      	strh	r3, [r7, #10]
 8001da0:	4613      	mov	r3, r2
 8001da2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b20      	cmp	r3, #32
 8001dae:	f040 80da 	bne.w	8001f66 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_I2C_Master_Transmit+0x30>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e0d3      	b.n	8001f68 <HAL_I2C_Master_Transmit+0x1d8>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001dc8:	f7ff fb5c 	bl	8001484 <HAL_GetTick>
 8001dcc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	2319      	movs	r3, #25
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 f9e6 	bl	80021ac <I2C_WaitOnFlagUntilTimeout>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e0be      	b.n	8001f68 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2221      	movs	r2, #33	; 0x21
 8001dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2210      	movs	r2, #16
 8001df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	893a      	ldrh	r2, [r7, #8]
 8001e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	2bff      	cmp	r3, #255	; 0xff
 8001e1a:	d90e      	bls.n	8001e3a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	22ff      	movs	r2, #255	; 0xff
 8001e20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	8979      	ldrh	r1, [r7, #10]
 8001e2a:	4b51      	ldr	r3, [pc, #324]	; (8001f70 <HAL_I2C_Master_Transmit+0x1e0>)
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f000 fb48 	bl	80024c8 <I2C_TransferConfig>
 8001e38:	e06c      	b.n	8001f14 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	8979      	ldrh	r1, [r7, #10]
 8001e4c:	4b48      	ldr	r3, [pc, #288]	; (8001f70 <HAL_I2C_Master_Transmit+0x1e0>)
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f000 fb37 	bl	80024c8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001e5a:	e05b      	b.n	8001f14 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	6a39      	ldr	r1, [r7, #32]
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f000 f9e3 	bl	800222c <I2C_WaitOnTXISFlagUntilTimeout>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e07b      	b.n	8001f68 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	781a      	ldrb	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d034      	beq.n	8001f14 <HAL_I2C_Master_Transmit+0x184>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d130      	bne.n	8001f14 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2180      	movs	r1, #128	; 0x80
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f975 	bl	80021ac <I2C_WaitOnFlagUntilTimeout>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e04d      	b.n	8001f68 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	2bff      	cmp	r3, #255	; 0xff
 8001ed4:	d90e      	bls.n	8001ef4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	22ff      	movs	r2, #255	; 0xff
 8001eda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	8979      	ldrh	r1, [r7, #10]
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 faeb 	bl	80024c8 <I2C_TransferConfig>
 8001ef2:	e00f      	b.n	8001f14 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	8979      	ldrh	r1, [r7, #10]
 8001f06:	2300      	movs	r3, #0
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 fada 	bl	80024c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d19e      	bne.n	8001e5c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	6a39      	ldr	r1, [r7, #32]
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 f9c2 	bl	80022ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e01a      	b.n	8001f68 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2220      	movs	r2, #32
 8001f38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6859      	ldr	r1, [r3, #4]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <HAL_I2C_Master_Transmit+0x1e4>)
 8001f46:	400b      	ands	r3, r1
 8001f48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	e000      	b.n	8001f68 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001f66:	2302      	movs	r3, #2
  }
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	80002000 	.word	0x80002000
 8001f74:	fe00e800 	.word	0xfe00e800

08001f78 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af02      	add	r7, sp, #8
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	461a      	mov	r2, r3
 8001f84:	460b      	mov	r3, r1
 8001f86:	817b      	strh	r3, [r7, #10]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b20      	cmp	r3, #32
 8001f96:	f040 80db 	bne.w	8002150 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_I2C_Master_Receive+0x30>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e0d4      	b.n	8002152 <HAL_I2C_Master_Receive+0x1da>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fb0:	f7ff fa68 	bl	8001484 <HAL_GetTick>
 8001fb4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	2319      	movs	r3, #25
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 f8f2 	bl	80021ac <I2C_WaitOnFlagUntilTimeout>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e0bf      	b.n	8002152 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2222      	movs	r2, #34	; 0x22
 8001fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2210      	movs	r2, #16
 8001fde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	893a      	ldrh	r2, [r7, #8]
 8001ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	2bff      	cmp	r3, #255	; 0xff
 8002002:	d90e      	bls.n	8002022 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	22ff      	movs	r2, #255	; 0xff
 8002008:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200e:	b2da      	uxtb	r2, r3
 8002010:	8979      	ldrh	r1, [r7, #10]
 8002012:	4b52      	ldr	r3, [pc, #328]	; (800215c <HAL_I2C_Master_Receive+0x1e4>)
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 fa54 	bl	80024c8 <I2C_TransferConfig>
 8002020:	e06d      	b.n	80020fe <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002026:	b29a      	uxth	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002030:	b2da      	uxtb	r2, r3
 8002032:	8979      	ldrh	r1, [r7, #10]
 8002034:	4b49      	ldr	r3, [pc, #292]	; (800215c <HAL_I2C_Master_Receive+0x1e4>)
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 fa43 	bl	80024c8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002042:	e05c      	b.n	80020fe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	6a39      	ldr	r1, [r7, #32]
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f000 f96b 	bl	8002324 <I2C_WaitOnRXNEFlagUntilTimeout>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e07c      	b.n	8002152 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002074:	3b01      	subs	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002080:	b29b      	uxth	r3, r3
 8002082:	3b01      	subs	r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208e:	b29b      	uxth	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d034      	beq.n	80020fe <HAL_I2C_Master_Receive+0x186>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002098:	2b00      	cmp	r3, #0
 800209a:	d130      	bne.n	80020fe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	6a3b      	ldr	r3, [r7, #32]
 80020a2:	2200      	movs	r2, #0
 80020a4:	2180      	movs	r1, #128	; 0x80
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f880 	bl	80021ac <I2C_WaitOnFlagUntilTimeout>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e04d      	b.n	8002152 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	2bff      	cmp	r3, #255	; 0xff
 80020be:	d90e      	bls.n	80020de <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	22ff      	movs	r2, #255	; 0xff
 80020c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	8979      	ldrh	r1, [r7, #10]
 80020ce:	2300      	movs	r3, #0
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 f9f6 	bl	80024c8 <I2C_TransferConfig>
 80020dc:	e00f      	b.n	80020fe <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	8979      	ldrh	r1, [r7, #10]
 80020f0:	2300      	movs	r3, #0
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 f9e5 	bl	80024c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002102:	b29b      	uxth	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	d19d      	bne.n	8002044 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	6a39      	ldr	r1, [r7, #32]
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 f8cd 	bl	80022ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e01a      	b.n	8002152 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2220      	movs	r2, #32
 8002122:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6859      	ldr	r1, [r3, #4]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <HAL_I2C_Master_Receive+0x1e8>)
 8002130:	400b      	ands	r3, r1
 8002132:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2220      	movs	r2, #32
 8002138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	e000      	b.n	8002152 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002150:	2302      	movs	r3, #2
  }
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	80002400 	.word	0x80002400
 8002160:	fe00e800 	.word	0xfe00e800

08002164 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b02      	cmp	r3, #2
 8002178:	d103      	bne.n	8002182 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2200      	movs	r2, #0
 8002180:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b01      	cmp	r3, #1
 800218e:	d007      	beq.n	80021a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699a      	ldr	r2, [r3, #24]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	619a      	str	r2, [r3, #24]
  }
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	4613      	mov	r3, r2
 80021ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021bc:	e022      	b.n	8002204 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021c4:	d01e      	beq.n	8002204 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021c6:	f7ff f95d 	bl	8001484 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d302      	bcc.n	80021dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d113      	bne.n	8002204 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e0:	f043 0220 	orr.w	r2, r3, #32
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e00f      	b.n	8002224 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	699a      	ldr	r2, [r3, #24]
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	4013      	ands	r3, r2
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	429a      	cmp	r2, r3
 8002212:	bf0c      	ite	eq
 8002214:	2301      	moveq	r3, #1
 8002216:	2300      	movne	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	461a      	mov	r2, r3
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	429a      	cmp	r2, r3
 8002220:	d0cd      	beq.n	80021be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002238:	e02c      	b.n	8002294 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 f8dc 	bl	80023fc <I2C_IsAcknowledgeFailed>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e02a      	b.n	80022a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002254:	d01e      	beq.n	8002294 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002256:	f7ff f915 	bl	8001484 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	429a      	cmp	r2, r3
 8002264:	d302      	bcc.n	800226c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d113      	bne.n	8002294 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002270:	f043 0220 	orr.w	r2, r3, #32
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e007      	b.n	80022a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d1cb      	bne.n	800223a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022b8:	e028      	b.n	800230c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f89c 	bl	80023fc <I2C_IsAcknowledgeFailed>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e026      	b.n	800231c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ce:	f7ff f8d9 	bl	8001484 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d302      	bcc.n	80022e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d113      	bne.n	800230c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e8:	f043 0220 	orr.w	r2, r3, #32
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e007      	b.n	800231c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f003 0320 	and.w	r3, r3, #32
 8002316:	2b20      	cmp	r3, #32
 8002318:	d1cf      	bne.n	80022ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002330:	e055      	b.n	80023de <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 f860 	bl	80023fc <I2C_IsAcknowledgeFailed>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e053      	b.n	80023ee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b20      	cmp	r3, #32
 8002352:	d129      	bne.n	80023a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	2b04      	cmp	r3, #4
 8002360:	d105      	bne.n	800236e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	e03f      	b.n	80023ee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2220      	movs	r2, #32
 8002374:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002382:	400b      	ands	r3, r1
 8002384:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e022      	b.n	80023ee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023a8:	f7ff f86c 	bl	8001484 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d302      	bcc.n	80023be <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10f      	bne.n	80023de <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	f043 0220 	orr.w	r2, r3, #32
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2220      	movs	r2, #32
 80023ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e007      	b.n	80023ee <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d1a2      	bne.n	8002332 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	fe00e800 	.word	0xfe00e800

080023fc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f003 0310 	and.w	r3, r3, #16
 8002412:	2b10      	cmp	r3, #16
 8002414:	d151      	bne.n	80024ba <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002416:	e022      	b.n	800245e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800241e:	d01e      	beq.n	800245e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002420:	f7ff f830 	bl	8001484 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	429a      	cmp	r2, r3
 800242e:	d302      	bcc.n	8002436 <I2C_IsAcknowledgeFailed+0x3a>
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d113      	bne.n	800245e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	f043 0220 	orr.w	r2, r3, #32
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2220      	movs	r2, #32
 8002446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e02e      	b.n	80024bc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b20      	cmp	r3, #32
 800246a:	d1d5      	bne.n	8002418 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2210      	movs	r2, #16
 8002472:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2220      	movs	r2, #32
 800247a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f7ff fe71 	bl	8002164 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6859      	ldr	r1, [r3, #4]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <I2C_IsAcknowledgeFailed+0xc8>)
 800248e:	400b      	ands	r3, r1
 8002490:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	f043 0204 	orr.w	r2, r3, #4
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2220      	movs	r2, #32
 80024a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	fe00e800 	.word	0xfe00e800

080024c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	607b      	str	r3, [r7, #4]
 80024d2:	460b      	mov	r3, r1
 80024d4:	817b      	strh	r3, [r7, #10]
 80024d6:	4613      	mov	r3, r2
 80024d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	0d5b      	lsrs	r3, r3, #21
 80024e4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80024e8:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <I2C_TransferConfig+0x58>)
 80024ea:	430b      	orrs	r3, r1
 80024ec:	43db      	mvns	r3, r3
 80024ee:	ea02 0103 	and.w	r1, r2, r3
 80024f2:	897b      	ldrh	r3, [r7, #10]
 80024f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024f8:	7a7b      	ldrb	r3, [r7, #9]
 80024fa:	041b      	lsls	r3, r3, #16
 80024fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	431a      	orrs	r2, r3
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	431a      	orrs	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	03ff63ff 	.word	0x03ff63ff

08002524 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b20      	cmp	r3, #32
 8002538:	d138      	bne.n	80025ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002544:	2302      	movs	r3, #2
 8002546:	e032      	b.n	80025ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2224      	movs	r2, #36	; 0x24
 8002554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0201 	bic.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002576:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6819      	ldr	r1, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	e000      	b.n	80025ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025ac:	2302      	movs	r3, #2
  }
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b085      	sub	sp, #20
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	d139      	bne.n	8002644 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d101      	bne.n	80025de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025da:	2302      	movs	r3, #2
 80025dc:	e033      	b.n	8002646 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2224      	movs	r2, #36	; 0x24
 80025ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0201 	bic.w	r2, r2, #1
 80025fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800260c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4313      	orrs	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0201 	orr.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	e000      	b.n	8002646 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002644:	2302      	movs	r3, #2
  }
}
 8002646:	4618      	mov	r0, r3
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a04      	ldr	r2, [pc, #16]	; (8002670 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800265e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002662:	6013      	str	r3, [r2, #0]
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40007000 	.word	0x40007000

08002674 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002678:	4b04      	ldr	r3, [pc, #16]	; (800268c <HAL_PWREx_GetVoltageRange+0x18>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40007000 	.word	0x40007000

08002690 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800269e:	d130      	bne.n	8002702 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026a0:	4b23      	ldr	r3, [pc, #140]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ac:	d038      	beq.n	8002720 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026ae:	4b20      	ldr	r3, [pc, #128]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026b6:	4a1e      	ldr	r2, [pc, #120]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026be:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2232      	movs	r2, #50	; 0x32
 80026c4:	fb02 f303 	mul.w	r3, r2, r3
 80026c8:	4a1b      	ldr	r2, [pc, #108]	; (8002738 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	0c9b      	lsrs	r3, r3, #18
 80026d0:	3301      	adds	r3, #1
 80026d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026d4:	e002      	b.n	80026dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3b01      	subs	r3, #1
 80026da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026dc:	4b14      	ldr	r3, [pc, #80]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e8:	d102      	bne.n	80026f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1f2      	bne.n	80026d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026f0:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fc:	d110      	bne.n	8002720 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e00f      	b.n	8002722 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800270a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270e:	d007      	beq.n	8002720 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002710:	4b07      	ldr	r3, [pc, #28]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002718:	4a05      	ldr	r2, [pc, #20]	; (8002730 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800271a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800271e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40007000 	.word	0x40007000
 8002734:	20000000 	.word	0x20000000
 8002738:	431bde83 	.word	0x431bde83

0800273c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e3d4      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800274e:	4ba1      	ldr	r3, [pc, #644]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 030c 	and.w	r3, r3, #12
 8002756:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002758:	4b9e      	ldr	r3, [pc, #632]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0310 	and.w	r3, r3, #16
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 80e4 	beq.w	8002938 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d007      	beq.n	8002786 <HAL_RCC_OscConfig+0x4a>
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	2b0c      	cmp	r3, #12
 800277a:	f040 808b 	bne.w	8002894 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2b01      	cmp	r3, #1
 8002782:	f040 8087 	bne.w	8002894 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002786:	4b93      	ldr	r3, [pc, #588]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d005      	beq.n	800279e <HAL_RCC_OscConfig+0x62>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e3ac      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1a      	ldr	r2, [r3, #32]
 80027a2:	4b8c      	ldr	r3, [pc, #560]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d004      	beq.n	80027b8 <HAL_RCC_OscConfig+0x7c>
 80027ae:	4b89      	ldr	r3, [pc, #548]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027b6:	e005      	b.n	80027c4 <HAL_RCC_OscConfig+0x88>
 80027b8:	4b86      	ldr	r3, [pc, #536]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 80027ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027be:	091b      	lsrs	r3, r3, #4
 80027c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d223      	bcs.n	8002810 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 fd41 	bl	8003254 <RCC_SetFlashLatencyFromMSIRange>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e38d      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027dc:	4b7d      	ldr	r3, [pc, #500]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a7c      	ldr	r2, [pc, #496]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 80027e2:	f043 0308 	orr.w	r3, r3, #8
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	4b7a      	ldr	r3, [pc, #488]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	4977      	ldr	r1, [pc, #476]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027fa:	4b76      	ldr	r3, [pc, #472]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	4972      	ldr	r1, [pc, #456]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]
 800280e:	e025      	b.n	800285c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002810:	4b70      	ldr	r3, [pc, #448]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a6f      	ldr	r2, [pc, #444]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 8002816:	f043 0308 	orr.w	r3, r3, #8
 800281a:	6013      	str	r3, [r2, #0]
 800281c:	4b6d      	ldr	r3, [pc, #436]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	496a      	ldr	r1, [pc, #424]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800282e:	4b69      	ldr	r3, [pc, #420]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	4965      	ldr	r1, [pc, #404]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 800283e:	4313      	orrs	r3, r2
 8002840:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d109      	bne.n	800285c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	4618      	mov	r0, r3
 800284e:	f000 fd01 	bl	8003254 <RCC_SetFlashLatencyFromMSIRange>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e34d      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800285c:	f000 fc36 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 8002860:	4602      	mov	r2, r0
 8002862:	4b5c      	ldr	r3, [pc, #368]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	495a      	ldr	r1, [pc, #360]	; (80029d8 <HAL_RCC_OscConfig+0x29c>)
 800286e:	5ccb      	ldrb	r3, [r1, r3]
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
 8002878:	4a58      	ldr	r2, [pc, #352]	; (80029dc <HAL_RCC_OscConfig+0x2a0>)
 800287a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800287c:	4b58      	ldr	r3, [pc, #352]	; (80029e0 <HAL_RCC_OscConfig+0x2a4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7fe fdaf 	bl	80013e4 <HAL_InitTick>
 8002886:	4603      	mov	r3, r0
 8002888:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d052      	beq.n	8002936 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	e331      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d032      	beq.n	8002902 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800289c:	4b4d      	ldr	r3, [pc, #308]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a4c      	ldr	r2, [pc, #304]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028a8:	f7fe fdec 	bl	8001484 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028b0:	f7fe fde8 	bl	8001484 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e31a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028c2:	4b44      	ldr	r3, [pc, #272]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028ce:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a40      	ldr	r2, [pc, #256]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 80028d4:	f043 0308 	orr.w	r3, r3, #8
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	4b3e      	ldr	r3, [pc, #248]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	493b      	ldr	r1, [pc, #236]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028ec:	4b39      	ldr	r3, [pc, #228]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	021b      	lsls	r3, r3, #8
 80028fa:	4936      	ldr	r1, [pc, #216]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]
 8002900:	e01a      	b.n	8002938 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002902:	4b34      	ldr	r3, [pc, #208]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a33      	ldr	r2, [pc, #204]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800290e:	f7fe fdb9 	bl	8001484 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002916:	f7fe fdb5 	bl	8001484 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e2e7      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002928:	4b2a      	ldr	r3, [pc, #168]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f0      	bne.n	8002916 <HAL_RCC_OscConfig+0x1da>
 8002934:	e000      	b.n	8002938 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002936:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d074      	beq.n	8002a2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2b08      	cmp	r3, #8
 8002948:	d005      	beq.n	8002956 <HAL_RCC_OscConfig+0x21a>
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	2b0c      	cmp	r3, #12
 800294e:	d10e      	bne.n	800296e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	2b03      	cmp	r3, #3
 8002954:	d10b      	bne.n	800296e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002956:	4b1f      	ldr	r3, [pc, #124]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d064      	beq.n	8002a2c <HAL_RCC_OscConfig+0x2f0>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d160      	bne.n	8002a2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e2c4      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002976:	d106      	bne.n	8002986 <HAL_RCC_OscConfig+0x24a>
 8002978:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a15      	ldr	r2, [pc, #84]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 800297e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	e01d      	b.n	80029c2 <HAL_RCC_OscConfig+0x286>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800298e:	d10c      	bne.n	80029aa <HAL_RCC_OscConfig+0x26e>
 8002990:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a0f      	ldr	r2, [pc, #60]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 8002996:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a0c      	ldr	r2, [pc, #48]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 80029a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	e00b      	b.n	80029c2 <HAL_RCC_OscConfig+0x286>
 80029aa:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a09      	ldr	r2, [pc, #36]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 80029b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a06      	ldr	r2, [pc, #24]	; (80029d4 <HAL_RCC_OscConfig+0x298>)
 80029bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d01c      	beq.n	8002a04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ca:	f7fe fd5b 	bl	8001484 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029d0:	e011      	b.n	80029f6 <HAL_RCC_OscConfig+0x2ba>
 80029d2:	bf00      	nop
 80029d4:	40021000 	.word	0x40021000
 80029d8:	0801bd24 	.word	0x0801bd24
 80029dc:	20000000 	.word	0x20000000
 80029e0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e4:	f7fe fd4e 	bl	8001484 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	; 0x64
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e280      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029f6:	4baf      	ldr	r3, [pc, #700]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0x2a8>
 8002a02:	e014      	b.n	8002a2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a04:	f7fe fd3e 	bl	8001484 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a0c:	f7fe fd3a 	bl	8001484 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b64      	cmp	r3, #100	; 0x64
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e26c      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a1e:	4ba5      	ldr	r3, [pc, #660]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0x2d0>
 8002a2a:	e000      	b.n	8002a2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d060      	beq.n	8002afc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d005      	beq.n	8002a4c <HAL_RCC_OscConfig+0x310>
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	2b0c      	cmp	r3, #12
 8002a44:	d119      	bne.n	8002a7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d116      	bne.n	8002a7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a4c:	4b99      	ldr	r3, [pc, #612]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_OscConfig+0x328>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e249      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a64:	4b93      	ldr	r3, [pc, #588]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	061b      	lsls	r3, r3, #24
 8002a72:	4990      	ldr	r1, [pc, #576]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a78:	e040      	b.n	8002afc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d023      	beq.n	8002aca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a82:	4b8c      	ldr	r3, [pc, #560]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a8b      	ldr	r2, [pc, #556]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8e:	f7fe fcf9 	bl	8001484 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a96:	f7fe fcf5 	bl	8001484 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e227      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aa8:	4b82      	ldr	r3, [pc, #520]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0f0      	beq.n	8002a96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab4:	4b7f      	ldr	r3, [pc, #508]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	061b      	lsls	r3, r3, #24
 8002ac2:	497c      	ldr	r1, [pc, #496]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	604b      	str	r3, [r1, #4]
 8002ac8:	e018      	b.n	8002afc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aca:	4b7a      	ldr	r3, [pc, #488]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a79      	ldr	r2, [pc, #484]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad6:	f7fe fcd5 	bl	8001484 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ade:	f7fe fcd1 	bl	8001484 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e203      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002af0:	4b70      	ldr	r3, [pc, #448]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1f0      	bne.n	8002ade <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d03c      	beq.n	8002b82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d01c      	beq.n	8002b4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b10:	4b68      	ldr	r3, [pc, #416]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b16:	4a67      	ldr	r2, [pc, #412]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b20:	f7fe fcb0 	bl	8001484 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b28:	f7fe fcac 	bl	8001484 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e1de      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b3a:	4b5e      	ldr	r3, [pc, #376]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0ef      	beq.n	8002b28 <HAL_RCC_OscConfig+0x3ec>
 8002b48:	e01b      	b.n	8002b82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b4a:	4b5a      	ldr	r3, [pc, #360]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b50:	4a58      	ldr	r2, [pc, #352]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002b52:	f023 0301 	bic.w	r3, r3, #1
 8002b56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5a:	f7fe fc93 	bl	8001484 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b62:	f7fe fc8f 	bl	8001484 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e1c1      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b74:	4b4f      	ldr	r3, [pc, #316]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1ef      	bne.n	8002b62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 80a6 	beq.w	8002cdc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b90:	2300      	movs	r3, #0
 8002b92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b94:	4b47      	ldr	r3, [pc, #284]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10d      	bne.n	8002bbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ba0:	4b44      	ldr	r3, [pc, #272]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba4:	4a43      	ldr	r2, [pc, #268]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002baa:	6593      	str	r3, [r2, #88]	; 0x58
 8002bac:	4b41      	ldr	r3, [pc, #260]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bbc:	4b3e      	ldr	r3, [pc, #248]	; (8002cb8 <HAL_RCC_OscConfig+0x57c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d118      	bne.n	8002bfa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bc8:	4b3b      	ldr	r3, [pc, #236]	; (8002cb8 <HAL_RCC_OscConfig+0x57c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a3a      	ldr	r2, [pc, #232]	; (8002cb8 <HAL_RCC_OscConfig+0x57c>)
 8002bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bd4:	f7fe fc56 	bl	8001484 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bdc:	f7fe fc52 	bl	8001484 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e184      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bee:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <HAL_RCC_OscConfig+0x57c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f0      	beq.n	8002bdc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d108      	bne.n	8002c14 <HAL_RCC_OscConfig+0x4d8>
 8002c02:	4b2c      	ldr	r3, [pc, #176]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c08:	4a2a      	ldr	r2, [pc, #168]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002c0a:	f043 0301 	orr.w	r3, r3, #1
 8002c0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c12:	e024      	b.n	8002c5e <HAL_RCC_OscConfig+0x522>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b05      	cmp	r3, #5
 8002c1a:	d110      	bne.n	8002c3e <HAL_RCC_OscConfig+0x502>
 8002c1c:	4b25      	ldr	r3, [pc, #148]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c22:	4a24      	ldr	r2, [pc, #144]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002c24:	f043 0304 	orr.w	r3, r3, #4
 8002c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c2c:	4b21      	ldr	r3, [pc, #132]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c32:	4a20      	ldr	r2, [pc, #128]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c3c:	e00f      	b.n	8002c5e <HAL_RCC_OscConfig+0x522>
 8002c3e:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c44:	4a1b      	ldr	r2, [pc, #108]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002c46:	f023 0301 	bic.w	r3, r3, #1
 8002c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c4e:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c54:	4a17      	ldr	r2, [pc, #92]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002c56:	f023 0304 	bic.w	r3, r3, #4
 8002c5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d016      	beq.n	8002c94 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c66:	f7fe fc0d 	bl	8001484 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c6c:	e00a      	b.n	8002c84 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6e:	f7fe fc09 	bl	8001484 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e139      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_RCC_OscConfig+0x578>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0ed      	beq.n	8002c6e <HAL_RCC_OscConfig+0x532>
 8002c92:	e01a      	b.n	8002cca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c94:	f7fe fbf6 	bl	8001484 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c9a:	e00f      	b.n	8002cbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9c:	f7fe fbf2 	bl	8001484 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d906      	bls.n	8002cbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e122      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7bc>
 8002cb2:	bf00      	nop
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cbc:	4b90      	ldr	r3, [pc, #576]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1e8      	bne.n	8002c9c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cca:	7ffb      	ldrb	r3, [r7, #31]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d105      	bne.n	8002cdc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cd0:	4b8b      	ldr	r3, [pc, #556]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd4:	4a8a      	ldr	r2, [pc, #552]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cda:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 8108 	beq.w	8002ef6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	f040 80d0 	bne.w	8002e90 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002cf0:	4b83      	ldr	r3, [pc, #524]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f003 0203 	and.w	r2, r3, #3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d130      	bne.n	8002d66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d127      	bne.n	8002d66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d20:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d11f      	bne.n	8002d66 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d30:	2a07      	cmp	r2, #7
 8002d32:	bf14      	ite	ne
 8002d34:	2201      	movne	r2, #1
 8002d36:	2200      	moveq	r2, #0
 8002d38:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d113      	bne.n	8002d66 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d48:	085b      	lsrs	r3, r3, #1
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d109      	bne.n	8002d66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	085b      	lsrs	r3, r3, #1
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d06e      	beq.n	8002e44 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	2b0c      	cmp	r3, #12
 8002d6a:	d069      	beq.n	8002e40 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d6c:	4b64      	ldr	r3, [pc, #400]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d105      	bne.n	8002d84 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d78:	4b61      	ldr	r3, [pc, #388]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0b7      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d88:	4b5d      	ldr	r3, [pc, #372]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a5c      	ldr	r2, [pc, #368]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d92:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d94:	f7fe fb76 	bl	8001484 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9c:	f7fe fb72 	bl	8001484 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e0a4      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dae:	4b54      	ldr	r3, [pc, #336]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dba:	4b51      	ldr	r3, [pc, #324]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	4b51      	ldr	r3, [pc, #324]	; (8002f04 <HAL_RCC_OscConfig+0x7c8>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002dca:	3a01      	subs	r2, #1
 8002dcc:	0112      	lsls	r2, r2, #4
 8002dce:	4311      	orrs	r1, r2
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dd4:	0212      	lsls	r2, r2, #8
 8002dd6:	4311      	orrs	r1, r2
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ddc:	0852      	lsrs	r2, r2, #1
 8002dde:	3a01      	subs	r2, #1
 8002de0:	0552      	lsls	r2, r2, #21
 8002de2:	4311      	orrs	r1, r2
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002de8:	0852      	lsrs	r2, r2, #1
 8002dea:	3a01      	subs	r2, #1
 8002dec:	0652      	lsls	r2, r2, #25
 8002dee:	4311      	orrs	r1, r2
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002df4:	0912      	lsrs	r2, r2, #4
 8002df6:	0452      	lsls	r2, r2, #17
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	4941      	ldr	r1, [pc, #260]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e00:	4b3f      	ldr	r3, [pc, #252]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a3e      	ldr	r2, [pc, #248]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e0c:	4b3c      	ldr	r3, [pc, #240]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4a3b      	ldr	r2, [pc, #236]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e18:	f7fe fb34 	bl	8001484 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e20:	f7fe fb30 	bl	8001484 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e062      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e32:	4b33      	ldr	r3, [pc, #204]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e3e:	e05a      	b.n	8002ef6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e059      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e44:	4b2e      	ldr	r3, [pc, #184]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d152      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e50:	4b2b      	ldr	r3, [pc, #172]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a2a      	ldr	r2, [pc, #168]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002e56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e5c:	4b28      	ldr	r3, [pc, #160]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4a27      	ldr	r2, [pc, #156]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e68:	f7fe fb0c 	bl	8001484 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e70:	f7fe fb08 	bl	8001484 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e03a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e82:	4b1f      	ldr	r3, [pc, #124]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x734>
 8002e8e:	e032      	b.n	8002ef6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	2b0c      	cmp	r3, #12
 8002e94:	d02d      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e96:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a19      	ldr	r2, [pc, #100]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002e9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ea0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002ea2:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d105      	bne.n	8002eba <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002eae:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	4a13      	ldr	r2, [pc, #76]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002eb4:	f023 0303 	bic.w	r3, r3, #3
 8002eb8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002eba:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	4a10      	ldr	r2, [pc, #64]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002ec0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eca:	f7fe fadb 	bl	8001484 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed2:	f7fe fad7 	bl	8001484 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e009      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee4:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <HAL_RCC_OscConfig+0x7c4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1f0      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x796>
 8002ef0:	e001      	b.n	8002ef6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3720      	adds	r7, #32
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40021000 	.word	0x40021000
 8002f04:	f99d808c 	.word	0xf99d808c

08002f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0c8      	b.n	80030ae <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f1c:	4b66      	ldr	r3, [pc, #408]	; (80030b8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d910      	bls.n	8002f4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2a:	4b63      	ldr	r3, [pc, #396]	; (80030b8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 0207 	bic.w	r2, r3, #7
 8002f32:	4961      	ldr	r1, [pc, #388]	; (80030b8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b5f      	ldr	r3, [pc, #380]	; (80030b8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0b0      	b.n	80030ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d04c      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d107      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f60:	4b56      	ldr	r3, [pc, #344]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d121      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e09e      	b.n	80030ae <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d107      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f78:	4b50      	ldr	r3, [pc, #320]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d115      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e092      	b.n	80030ae <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d107      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f90:	4b4a      	ldr	r3, [pc, #296]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d109      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e086      	b.n	80030ae <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fa0:	4b46      	ldr	r3, [pc, #280]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e07e      	b.n	80030ae <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fb0:	4b42      	ldr	r3, [pc, #264]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f023 0203 	bic.w	r2, r3, #3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	493f      	ldr	r1, [pc, #252]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fc2:	f7fe fa5f 	bl	8001484 <HAL_GetTick>
 8002fc6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fca:	f7fe fa5b 	bl	8001484 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e066      	b.n	80030ae <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe0:	4b36      	ldr	r3, [pc, #216]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 020c 	and.w	r2, r3, #12
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d1eb      	bne.n	8002fca <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d008      	beq.n	8003010 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ffe:	4b2f      	ldr	r3, [pc, #188]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	492c      	ldr	r1, [pc, #176]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 800300c:	4313      	orrs	r3, r2
 800300e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003010:	4b29      	ldr	r3, [pc, #164]	; (80030b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d210      	bcs.n	8003040 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301e:	4b26      	ldr	r3, [pc, #152]	; (80030b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 0207 	bic.w	r2, r3, #7
 8003026:	4924      	ldr	r1, [pc, #144]	; (80030b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	4313      	orrs	r3, r2
 800302c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302e:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d001      	beq.n	8003040 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e036      	b.n	80030ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800304c:	4b1b      	ldr	r3, [pc, #108]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4918      	ldr	r1, [pc, #96]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 800305a:	4313      	orrs	r3, r2
 800305c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d009      	beq.n	800307e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800306a:	4b14      	ldr	r3, [pc, #80]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4910      	ldr	r1, [pc, #64]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800307e:	f000 f825 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 8003082:	4602      	mov	r2, r0
 8003084:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <HAL_RCC_ClockConfig+0x1b4>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	490c      	ldr	r1, [pc, #48]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003090:	5ccb      	ldrb	r3, [r1, r3]
 8003092:	f003 031f 	and.w	r3, r3, #31
 8003096:	fa22 f303 	lsr.w	r3, r2, r3
 800309a:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800309e:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fe f99e 	bl	80013e4 <HAL_InitTick>
 80030a8:	4603      	mov	r3, r0
 80030aa:	72fb      	strb	r3, [r7, #11]

  return status;
 80030ac:	7afb      	ldrb	r3, [r7, #11]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40022000 	.word	0x40022000
 80030bc:	40021000 	.word	0x40021000
 80030c0:	0801bd24 	.word	0x0801bd24
 80030c4:	20000000 	.word	0x20000000
 80030c8:	20000004 	.word	0x20000004

080030cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b089      	sub	sp, #36	; 0x24
 80030d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
 80030d6:	2300      	movs	r3, #0
 80030d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030da:	4b3e      	ldr	r3, [pc, #248]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030e4:	4b3b      	ldr	r3, [pc, #236]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_GetSysClockFreq+0x34>
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	2b0c      	cmp	r3, #12
 80030f8:	d121      	bne.n	800313e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d11e      	bne.n	800313e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003100:	4b34      	ldr	r3, [pc, #208]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d107      	bne.n	800311c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800310c:	4b31      	ldr	r3, [pc, #196]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800310e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	e005      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800311c:	4b2d      	ldr	r3, [pc, #180]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	091b      	lsrs	r3, r3, #4
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003128:	4a2b      	ldr	r2, [pc, #172]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003130:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10d      	bne.n	8003154 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800313c:	e00a      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	2b04      	cmp	r3, #4
 8003142:	d102      	bne.n	800314a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003144:	4b25      	ldr	r3, [pc, #148]	; (80031dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003146:	61bb      	str	r3, [r7, #24]
 8003148:	e004      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2b08      	cmp	r3, #8
 800314e:	d101      	bne.n	8003154 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003150:	4b23      	ldr	r3, [pc, #140]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003152:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	2b0c      	cmp	r3, #12
 8003158:	d134      	bne.n	80031c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800315a:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d003      	beq.n	8003172 <HAL_RCC_GetSysClockFreq+0xa6>
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b03      	cmp	r3, #3
 800316e:	d003      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0xac>
 8003170:	e005      	b.n	800317e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003172:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003174:	617b      	str	r3, [r7, #20]
      break;
 8003176:	e005      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003178:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800317a:	617b      	str	r3, [r7, #20]
      break;
 800317c:	e002      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	617b      	str	r3, [r7, #20]
      break;
 8003182:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003184:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	3301      	adds	r3, #1
 8003190:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003192:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	0a1b      	lsrs	r3, r3, #8
 8003198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	fb02 f203 	mul.w	r2, r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031aa:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	0e5b      	lsrs	r3, r3, #25
 80031b0:	f003 0303 	and.w	r3, r3, #3
 80031b4:	3301      	adds	r3, #1
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031c4:	69bb      	ldr	r3, [r7, #24]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3724      	adds	r7, #36	; 0x24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000
 80031d8:	0801bd3c 	.word	0x0801bd3c
 80031dc:	00f42400 	.word	0x00f42400
 80031e0:	007a1200 	.word	0x007a1200

080031e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e8:	4b03      	ldr	r3, [pc, #12]	; (80031f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031ea:	681b      	ldr	r3, [r3, #0]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20000000 	.word	0x20000000

080031fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003200:	f7ff fff0 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 8003204:	4602      	mov	r2, r0
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	0a1b      	lsrs	r3, r3, #8
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	4904      	ldr	r1, [pc, #16]	; (8003224 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003212:	5ccb      	ldrb	r3, [r1, r3]
 8003214:	f003 031f 	and.w	r3, r3, #31
 8003218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800321c:	4618      	mov	r0, r3
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40021000 	.word	0x40021000
 8003224:	0801bd34 	.word	0x0801bd34

08003228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800322c:	f7ff ffda 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 8003230:	4602      	mov	r2, r0
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	0adb      	lsrs	r3, r3, #11
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	4904      	ldr	r1, [pc, #16]	; (8003250 <HAL_RCC_GetPCLK2Freq+0x28>)
 800323e:	5ccb      	ldrb	r3, [r1, r3]
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003248:	4618      	mov	r0, r3
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40021000 	.word	0x40021000
 8003250:	0801bd34 	.word	0x0801bd34

08003254 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800325c:	2300      	movs	r3, #0
 800325e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003260:	4b2a      	ldr	r3, [pc, #168]	; (800330c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800326c:	f7ff fa02 	bl	8002674 <HAL_PWREx_GetVoltageRange>
 8003270:	6178      	str	r0, [r7, #20]
 8003272:	e014      	b.n	800329e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003274:	4b25      	ldr	r3, [pc, #148]	; (800330c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003278:	4a24      	ldr	r2, [pc, #144]	; (800330c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800327a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327e:	6593      	str	r3, [r2, #88]	; 0x58
 8003280:	4b22      	ldr	r3, [pc, #136]	; (800330c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800328c:	f7ff f9f2 	bl	8002674 <HAL_PWREx_GetVoltageRange>
 8003290:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003292:	4b1e      	ldr	r3, [pc, #120]	; (800330c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003296:	4a1d      	ldr	r2, [pc, #116]	; (800330c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800329c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032a4:	d10b      	bne.n	80032be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b80      	cmp	r3, #128	; 0x80
 80032aa:	d919      	bls.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2ba0      	cmp	r3, #160	; 0xa0
 80032b0:	d902      	bls.n	80032b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032b2:	2302      	movs	r3, #2
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	e013      	b.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032b8:	2301      	movs	r3, #1
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	e010      	b.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b80      	cmp	r3, #128	; 0x80
 80032c2:	d902      	bls.n	80032ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032c4:	2303      	movs	r3, #3
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	e00a      	b.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b80      	cmp	r3, #128	; 0x80
 80032ce:	d102      	bne.n	80032d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032d0:	2302      	movs	r3, #2
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	e004      	b.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b70      	cmp	r3, #112	; 0x70
 80032da:	d101      	bne.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032dc:	2301      	movs	r3, #1
 80032de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032e0:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f023 0207 	bic.w	r2, r3, #7
 80032e8:	4909      	ldr	r1, [pc, #36]	; (8003310 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032f0:	4b07      	ldr	r3, [pc, #28]	; (8003310 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d001      	beq.n	8003302 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40021000 	.word	0x40021000
 8003310:	40022000 	.word	0x40022000

08003314 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800331c:	2300      	movs	r3, #0
 800331e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003320:	2300      	movs	r3, #0
 8003322:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800332c:	2b00      	cmp	r3, #0
 800332e:	d041      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003334:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003338:	d02a      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800333a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800333e:	d824      	bhi.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003340:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003344:	d008      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003346:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800334a:	d81e      	bhi.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003350:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003354:	d010      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003356:	e018      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003358:	4b86      	ldr	r3, [pc, #536]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	4a85      	ldr	r2, [pc, #532]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003362:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003364:	e015      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3304      	adds	r3, #4
 800336a:	2100      	movs	r1, #0
 800336c:	4618      	mov	r0, r3
 800336e:	f000 facb 	bl	8003908 <RCCEx_PLLSAI1_Config>
 8003372:	4603      	mov	r3, r0
 8003374:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003376:	e00c      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3320      	adds	r3, #32
 800337c:	2100      	movs	r1, #0
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fbb6 	bl	8003af0 <RCCEx_PLLSAI2_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003388:	e003      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	74fb      	strb	r3, [r7, #19]
      break;
 800338e:	e000      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003390:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003392:	7cfb      	ldrb	r3, [r7, #19]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10b      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003398:	4b76      	ldr	r3, [pc, #472]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033a6:	4973      	ldr	r1, [pc, #460]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033ae:	e001      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b0:	7cfb      	ldrb	r3, [r7, #19]
 80033b2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d041      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033c8:	d02a      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80033ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033ce:	d824      	bhi.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033d4:	d008      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80033d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033da:	d81e      	bhi.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00a      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80033e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033e4:	d010      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033e6:	e018      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033e8:	4b62      	ldr	r3, [pc, #392]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	4a61      	ldr	r2, [pc, #388]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033f4:	e015      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3304      	adds	r3, #4
 80033fa:	2100      	movs	r1, #0
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fa83 	bl	8003908 <RCCEx_PLLSAI1_Config>
 8003402:	4603      	mov	r3, r0
 8003404:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003406:	e00c      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3320      	adds	r3, #32
 800340c:	2100      	movs	r1, #0
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fb6e 	bl	8003af0 <RCCEx_PLLSAI2_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003418:	e003      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	74fb      	strb	r3, [r7, #19]
      break;
 800341e:	e000      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003420:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003422:	7cfb      	ldrb	r3, [r7, #19]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10b      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003428:	4b52      	ldr	r3, [pc, #328]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003436:	494f      	ldr	r1, [pc, #316]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800343e:	e001      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80a0 	beq.w	8003592 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003452:	2300      	movs	r3, #0
 8003454:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003456:	4b47      	ldr	r3, [pc, #284]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003466:	2300      	movs	r3, #0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00d      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800346c:	4b41      	ldr	r3, [pc, #260]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800346e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003470:	4a40      	ldr	r2, [pc, #256]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003476:	6593      	str	r3, [r2, #88]	; 0x58
 8003478:	4b3e      	ldr	r3, [pc, #248]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003484:	2301      	movs	r3, #1
 8003486:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003488:	4b3b      	ldr	r3, [pc, #236]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a3a      	ldr	r2, [pc, #232]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800348e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003492:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003494:	f7fd fff6 	bl	8001484 <HAL_GetTick>
 8003498:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800349a:	e009      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800349c:	f7fd fff2 	bl	8001484 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d902      	bls.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	74fb      	strb	r3, [r7, #19]
        break;
 80034ae:	e005      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034b0:	4b31      	ldr	r3, [pc, #196]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0ef      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80034bc:	7cfb      	ldrb	r3, [r7, #19]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d15c      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034c2:	4b2c      	ldr	r3, [pc, #176]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d01f      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d019      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034e0:	4b24      	ldr	r3, [pc, #144]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034ec:	4b21      	ldr	r3, [pc, #132]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f2:	4a20      	ldr	r2, [pc, #128]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034fc:	4b1d      	ldr	r3, [pc, #116]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003502:	4a1c      	ldr	r2, [pc, #112]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800350c:	4a19      	ldr	r2, [pc, #100]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d016      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351e:	f7fd ffb1 	bl	8001484 <HAL_GetTick>
 8003522:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003524:	e00b      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003526:	f7fd ffad 	bl	8001484 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	f241 3288 	movw	r2, #5000	; 0x1388
 8003534:	4293      	cmp	r3, r2
 8003536:	d902      	bls.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	74fb      	strb	r3, [r7, #19]
            break;
 800353c:	e006      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800353e:	4b0d      	ldr	r3, [pc, #52]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0ec      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800354c:	7cfb      	ldrb	r3, [r7, #19]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10c      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003552:	4b08      	ldr	r3, [pc, #32]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003558:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003562:	4904      	ldr	r1, [pc, #16]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800356a:	e009      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800356c:	7cfb      	ldrb	r3, [r7, #19]
 800356e:	74bb      	strb	r3, [r7, #18]
 8003570:	e006      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003572:	bf00      	nop
 8003574:	40021000 	.word	0x40021000
 8003578:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800357c:	7cfb      	ldrb	r3, [r7, #19]
 800357e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003580:	7c7b      	ldrb	r3, [r7, #17]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d105      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003586:	4b9e      	ldr	r3, [pc, #632]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358a:	4a9d      	ldr	r2, [pc, #628]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003590:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800359e:	4b98      	ldr	r3, [pc, #608]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a4:	f023 0203 	bic.w	r2, r3, #3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	4994      	ldr	r1, [pc, #592]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035c0:	4b8f      	ldr	r3, [pc, #572]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c6:	f023 020c 	bic.w	r2, r3, #12
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ce:	498c      	ldr	r1, [pc, #560]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035e2:	4b87      	ldr	r3, [pc, #540]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	4983      	ldr	r1, [pc, #524]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003604:	4b7e      	ldr	r3, [pc, #504]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003612:	497b      	ldr	r1, [pc, #492]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003626:	4b76      	ldr	r3, [pc, #472]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003634:	4972      	ldr	r1, [pc, #456]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0320 	and.w	r3, r3, #32
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003648:	4b6d      	ldr	r3, [pc, #436]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003656:	496a      	ldr	r1, [pc, #424]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800366a:	4b65      	ldr	r3, [pc, #404]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003670:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003678:	4961      	ldr	r1, [pc, #388]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00a      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800368c:	4b5c      	ldr	r3, [pc, #368]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003692:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369a:	4959      	ldr	r1, [pc, #356]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036ae:	4b54      	ldr	r3, [pc, #336]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036bc:	4950      	ldr	r1, [pc, #320]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00a      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036d0:	4b4b      	ldr	r3, [pc, #300]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036de:	4948      	ldr	r1, [pc, #288]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036f2:	4b43      	ldr	r3, [pc, #268]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003700:	493f      	ldr	r1, [pc, #252]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d028      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003714:	4b3a      	ldr	r3, [pc, #232]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003722:	4937      	ldr	r1, [pc, #220]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800372e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003732:	d106      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003734:	4b32      	ldr	r3, [pc, #200]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4a31      	ldr	r2, [pc, #196]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800373e:	60d3      	str	r3, [r2, #12]
 8003740:	e011      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003746:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800374a:	d10c      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3304      	adds	r3, #4
 8003750:	2101      	movs	r1, #1
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f8d8 	bl	8003908 <RCCEx_PLLSAI1_Config>
 8003758:	4603      	mov	r3, r0
 800375a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800375c:	7cfb      	ldrb	r3, [r7, #19]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003762:	7cfb      	ldrb	r3, [r7, #19]
 8003764:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d028      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003772:	4b23      	ldr	r3, [pc, #140]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003778:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003780:	491f      	ldr	r1, [pc, #124]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003790:	d106      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003792:	4b1b      	ldr	r3, [pc, #108]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	4a1a      	ldr	r2, [pc, #104]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003798:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800379c:	60d3      	str	r3, [r2, #12]
 800379e:	e011      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3304      	adds	r3, #4
 80037ae:	2101      	movs	r1, #1
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 f8a9 	bl	8003908 <RCCEx_PLLSAI1_Config>
 80037b6:	4603      	mov	r3, r0
 80037b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037ba:	7cfb      	ldrb	r3, [r7, #19]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d02b      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037d0:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037de:	4908      	ldr	r1, [pc, #32]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037ee:	d109      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037f0:	4b03      	ldr	r3, [pc, #12]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4a02      	ldr	r2, [pc, #8]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037fa:	60d3      	str	r3, [r2, #12]
 80037fc:	e014      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003808:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800380c:	d10c      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3304      	adds	r3, #4
 8003812:	2101      	movs	r1, #1
 8003814:	4618      	mov	r0, r3
 8003816:	f000 f877 	bl	8003908 <RCCEx_PLLSAI1_Config>
 800381a:	4603      	mov	r3, r0
 800381c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800381e:	7cfb      	ldrb	r3, [r7, #19]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d02f      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003834:	4b2b      	ldr	r3, [pc, #172]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003842:	4928      	ldr	r1, [pc, #160]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800384e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003852:	d10d      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3304      	adds	r3, #4
 8003858:	2102      	movs	r1, #2
 800385a:	4618      	mov	r0, r3
 800385c:	f000 f854 	bl	8003908 <RCCEx_PLLSAI1_Config>
 8003860:	4603      	mov	r3, r0
 8003862:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003864:	7cfb      	ldrb	r3, [r7, #19]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d014      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800386a:	7cfb      	ldrb	r3, [r7, #19]
 800386c:	74bb      	strb	r3, [r7, #18]
 800386e:	e011      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003878:	d10c      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3320      	adds	r3, #32
 800387e:	2102      	movs	r1, #2
 8003880:	4618      	mov	r0, r3
 8003882:	f000 f935 	bl	8003af0 <RCCEx_PLLSAI2_Config>
 8003886:	4603      	mov	r3, r0
 8003888:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800388a:	7cfb      	ldrb	r3, [r7, #19]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003890:	7cfb      	ldrb	r3, [r7, #19]
 8003892:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038a0:	4b10      	ldr	r3, [pc, #64]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ae:	490d      	ldr	r1, [pc, #52]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00b      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038c2:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038d2:	4904      	ldr	r1, [pc, #16]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038da:	7cbb      	ldrb	r3, [r7, #18]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40021000 	.word	0x40021000

080038e8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80038ec:	4b05      	ldr	r3, [pc, #20]	; (8003904 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a04      	ldr	r2, [pc, #16]	; (8003904 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038f2:	f043 0304 	orr.w	r3, r3, #4
 80038f6:	6013      	str	r3, [r2, #0]
}
 80038f8:	bf00      	nop
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40021000 	.word	0x40021000

08003908 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003916:	4b75      	ldr	r3, [pc, #468]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d018      	beq.n	8003954 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003922:	4b72      	ldr	r3, [pc, #456]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f003 0203 	and.w	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d10d      	bne.n	800394e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
       ||
 8003936:	2b00      	cmp	r3, #0
 8003938:	d009      	beq.n	800394e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800393a:	4b6c      	ldr	r3, [pc, #432]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	091b      	lsrs	r3, r3, #4
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
       ||
 800394a:	429a      	cmp	r2, r3
 800394c:	d047      	beq.n	80039de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	73fb      	strb	r3, [r7, #15]
 8003952:	e044      	b.n	80039de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b03      	cmp	r3, #3
 800395a:	d018      	beq.n	800398e <RCCEx_PLLSAI1_Config+0x86>
 800395c:	2b03      	cmp	r3, #3
 800395e:	d825      	bhi.n	80039ac <RCCEx_PLLSAI1_Config+0xa4>
 8003960:	2b01      	cmp	r3, #1
 8003962:	d002      	beq.n	800396a <RCCEx_PLLSAI1_Config+0x62>
 8003964:	2b02      	cmp	r3, #2
 8003966:	d009      	beq.n	800397c <RCCEx_PLLSAI1_Config+0x74>
 8003968:	e020      	b.n	80039ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800396a:	4b60      	ldr	r3, [pc, #384]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d11d      	bne.n	80039b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800397a:	e01a      	b.n	80039b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800397c:	4b5b      	ldr	r3, [pc, #364]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003984:	2b00      	cmp	r3, #0
 8003986:	d116      	bne.n	80039b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800398c:	e013      	b.n	80039b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800398e:	4b57      	ldr	r3, [pc, #348]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10f      	bne.n	80039ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800399a:	4b54      	ldr	r3, [pc, #336]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039aa:	e006      	b.n	80039ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
      break;
 80039b0:	e004      	b.n	80039bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039b2:	bf00      	nop
 80039b4:	e002      	b.n	80039bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039b6:	bf00      	nop
 80039b8:	e000      	b.n	80039bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10d      	bne.n	80039de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039c2:	4b4a      	ldr	r3, [pc, #296]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6819      	ldr	r1, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	430b      	orrs	r3, r1
 80039d8:	4944      	ldr	r1, [pc, #272]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d17d      	bne.n	8003ae0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039e4:	4b41      	ldr	r3, [pc, #260]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a40      	ldr	r2, [pc, #256]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f0:	f7fd fd48 	bl	8001484 <HAL_GetTick>
 80039f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039f6:	e009      	b.n	8003a0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039f8:	f7fd fd44 	bl	8001484 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d902      	bls.n	8003a0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	73fb      	strb	r3, [r7, #15]
        break;
 8003a0a:	e005      	b.n	8003a18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a0c:	4b37      	ldr	r3, [pc, #220]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1ef      	bne.n	80039f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d160      	bne.n	8003ae0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d111      	bne.n	8003a48 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a24:	4b31      	ldr	r3, [pc, #196]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6892      	ldr	r2, [r2, #8]
 8003a34:	0211      	lsls	r1, r2, #8
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	68d2      	ldr	r2, [r2, #12]
 8003a3a:	0912      	lsrs	r2, r2, #4
 8003a3c:	0452      	lsls	r2, r2, #17
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	492a      	ldr	r1, [pc, #168]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	610b      	str	r3, [r1, #16]
 8003a46:	e027      	b.n	8003a98 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d112      	bne.n	8003a74 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a4e:	4b27      	ldr	r3, [pc, #156]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6892      	ldr	r2, [r2, #8]
 8003a5e:	0211      	lsls	r1, r2, #8
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6912      	ldr	r2, [r2, #16]
 8003a64:	0852      	lsrs	r2, r2, #1
 8003a66:	3a01      	subs	r2, #1
 8003a68:	0552      	lsls	r2, r2, #21
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	491f      	ldr	r1, [pc, #124]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	610b      	str	r3, [r1, #16]
 8003a72:	e011      	b.n	8003a98 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a74:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6892      	ldr	r2, [r2, #8]
 8003a84:	0211      	lsls	r1, r2, #8
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6952      	ldr	r2, [r2, #20]
 8003a8a:	0852      	lsrs	r2, r2, #1
 8003a8c:	3a01      	subs	r2, #1
 8003a8e:	0652      	lsls	r2, r2, #25
 8003a90:	430a      	orrs	r2, r1
 8003a92:	4916      	ldr	r1, [pc, #88]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a98:	4b14      	ldr	r3, [pc, #80]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a13      	ldr	r2, [pc, #76]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003aa2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa4:	f7fd fcee 	bl	8001484 <HAL_GetTick>
 8003aa8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003aaa:	e009      	b.n	8003ac0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003aac:	f7fd fcea 	bl	8001484 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d902      	bls.n	8003ac0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	73fb      	strb	r3, [r7, #15]
          break;
 8003abe:	e005      	b.n	8003acc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ac0:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0ef      	beq.n	8003aac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ad2:	4b06      	ldr	r3, [pc, #24]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad4:	691a      	ldr	r2, [r3, #16]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	4904      	ldr	r1, [pc, #16]	; (8003aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40021000 	.word	0x40021000

08003af0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003afe:	4b6a      	ldr	r3, [pc, #424]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d018      	beq.n	8003b3c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b0a:	4b67      	ldr	r3, [pc, #412]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f003 0203 	and.w	r2, r3, #3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d10d      	bne.n	8003b36 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
       ||
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d009      	beq.n	8003b36 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b22:	4b61      	ldr	r3, [pc, #388]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	091b      	lsrs	r3, r3, #4
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
       ||
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d047      	beq.n	8003bc6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	73fb      	strb	r3, [r7, #15]
 8003b3a:	e044      	b.n	8003bc6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d018      	beq.n	8003b76 <RCCEx_PLLSAI2_Config+0x86>
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	d825      	bhi.n	8003b94 <RCCEx_PLLSAI2_Config+0xa4>
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d002      	beq.n	8003b52 <RCCEx_PLLSAI2_Config+0x62>
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d009      	beq.n	8003b64 <RCCEx_PLLSAI2_Config+0x74>
 8003b50:	e020      	b.n	8003b94 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b52:	4b55      	ldr	r3, [pc, #340]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d11d      	bne.n	8003b9a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b62:	e01a      	b.n	8003b9a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b64:	4b50      	ldr	r3, [pc, #320]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d116      	bne.n	8003b9e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b74:	e013      	b.n	8003b9e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b76:	4b4c      	ldr	r3, [pc, #304]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10f      	bne.n	8003ba2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b82:	4b49      	ldr	r3, [pc, #292]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b92:	e006      	b.n	8003ba2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
      break;
 8003b98:	e004      	b.n	8003ba4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b9a:	bf00      	nop
 8003b9c:	e002      	b.n	8003ba4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b9e:	bf00      	nop
 8003ba0:	e000      	b.n	8003ba4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ba2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10d      	bne.n	8003bc6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003baa:	4b3f      	ldr	r3, [pc, #252]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6819      	ldr	r1, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	430b      	orrs	r3, r1
 8003bc0:	4939      	ldr	r1, [pc, #228]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d167      	bne.n	8003c9c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003bcc:	4b36      	ldr	r3, [pc, #216]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a35      	ldr	r2, [pc, #212]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bd8:	f7fd fc54 	bl	8001484 <HAL_GetTick>
 8003bdc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bde:	e009      	b.n	8003bf4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003be0:	f7fd fc50 	bl	8001484 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d902      	bls.n	8003bf4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	73fb      	strb	r3, [r7, #15]
        break;
 8003bf2:	e005      	b.n	8003c00 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bf4:	4b2c      	ldr	r3, [pc, #176]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1ef      	bne.n	8003be0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d14a      	bne.n	8003c9c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d111      	bne.n	8003c30 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c0c:	4b26      	ldr	r3, [pc, #152]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6892      	ldr	r2, [r2, #8]
 8003c1c:	0211      	lsls	r1, r2, #8
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	68d2      	ldr	r2, [r2, #12]
 8003c22:	0912      	lsrs	r2, r2, #4
 8003c24:	0452      	lsls	r2, r2, #17
 8003c26:	430a      	orrs	r2, r1
 8003c28:	491f      	ldr	r1, [pc, #124]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	614b      	str	r3, [r1, #20]
 8003c2e:	e011      	b.n	8003c54 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c30:	4b1d      	ldr	r3, [pc, #116]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6892      	ldr	r2, [r2, #8]
 8003c40:	0211      	lsls	r1, r2, #8
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6912      	ldr	r2, [r2, #16]
 8003c46:	0852      	lsrs	r2, r2, #1
 8003c48:	3a01      	subs	r2, #1
 8003c4a:	0652      	lsls	r2, r2, #25
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	4916      	ldr	r1, [pc, #88]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c54:	4b14      	ldr	r3, [pc, #80]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a13      	ldr	r2, [pc, #76]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c60:	f7fd fc10 	bl	8001484 <HAL_GetTick>
 8003c64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c66:	e009      	b.n	8003c7c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c68:	f7fd fc0c 	bl	8001484 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d902      	bls.n	8003c7c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	73fb      	strb	r3, [r7, #15]
          break;
 8003c7a:	e005      	b.n	8003c88 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0ef      	beq.n	8003c68 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c8e:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	4904      	ldr	r1, [pc, #16]	; (8003ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40021000 	.word	0x40021000

08003cac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e095      	b.n	8003dea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d108      	bne.n	8003cd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cce:	d009      	beq.n	8003ce4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	61da      	str	r2, [r3, #28]
 8003cd6:	e005      	b.n	8003ce4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d106      	bne.n	8003d04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fd f822 	bl	8000d48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d24:	d902      	bls.n	8003d2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	e002      	b.n	8003d32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003d3a:	d007      	beq.n	8003d4c <HAL_SPI_Init+0xa0>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d44:	d002      	beq.n	8003d4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	431a      	orrs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d84:	431a      	orrs	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8e:	ea42 0103 	orr.w	r1, r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d96:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	0c1b      	lsrs	r3, r3, #16
 8003da8:	f003 0204 	and.w	r2, r3, #4
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	f003 0310 	and.w	r3, r3, #16
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003dc8:	ea42 0103 	orr.w	r1, r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b088      	sub	sp, #32
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	603b      	str	r3, [r7, #0]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_SPI_Transmit+0x22>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e158      	b.n	80040c6 <HAL_SPI_Transmit+0x2d4>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e1c:	f7fd fb32 	bl	8001484 <HAL_GetTick>
 8003e20:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d002      	beq.n	8003e38 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e32:	2302      	movs	r3, #2
 8003e34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e36:	e13d      	b.n	80040b4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <HAL_SPI_Transmit+0x52>
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d102      	bne.n	8003e4a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e48:	e134      	b.n	80040b4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2203      	movs	r2, #3
 8003e4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	88fa      	ldrh	r2, [r7, #6]
 8003e62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	88fa      	ldrh	r2, [r7, #6]
 8003e68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e94:	d10f      	bne.n	8003eb6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ea4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eb4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec0:	2b40      	cmp	r3, #64	; 0x40
 8003ec2:	d007      	beq.n	8003ed4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ed2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003edc:	d94b      	bls.n	8003f76 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <HAL_SPI_Transmit+0xfa>
 8003ee6:	8afb      	ldrh	r3, [r7, #22]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d13e      	bne.n	8003f6a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef0:	881a      	ldrh	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	1c9a      	adds	r2, r3, #2
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f10:	e02b      	b.n	8003f6a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d112      	bne.n	8003f46 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	881a      	ldrh	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f30:	1c9a      	adds	r2, r3, #2
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f44:	e011      	b.n	8003f6a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f46:	f7fd fa9d 	bl	8001484 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d803      	bhi.n	8003f5e <HAL_SPI_Transmit+0x16c>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f5c:	d102      	bne.n	8003f64 <HAL_SPI_Transmit+0x172>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d102      	bne.n	8003f6a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f68:	e0a4      	b.n	80040b4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1ce      	bne.n	8003f12 <HAL_SPI_Transmit+0x120>
 8003f74:	e07c      	b.n	8004070 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <HAL_SPI_Transmit+0x192>
 8003f7e:	8afb      	ldrh	r3, [r7, #22]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d170      	bne.n	8004066 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d912      	bls.n	8003fb4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f92:	881a      	ldrh	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	1c9a      	adds	r2, r3, #2
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	3b02      	subs	r3, #2
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fb2:	e058      	b.n	8004066 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	330c      	adds	r3, #12
 8003fbe:	7812      	ldrb	r2, [r2, #0]
 8003fc0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003fda:	e044      	b.n	8004066 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d12b      	bne.n	8004042 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d912      	bls.n	800401a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff8:	881a      	ldrh	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004004:	1c9a      	adds	r2, r3, #2
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b02      	subs	r3, #2
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004018:	e025      	b.n	8004066 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	330c      	adds	r3, #12
 8004024:	7812      	ldrb	r2, [r2, #0]
 8004026:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004036:	b29b      	uxth	r3, r3
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004040:	e011      	b.n	8004066 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004042:	f7fd fa1f 	bl	8001484 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d803      	bhi.n	800405a <HAL_SPI_Transmit+0x268>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004058:	d102      	bne.n	8004060 <HAL_SPI_Transmit+0x26e>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d102      	bne.n	8004066 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004064:	e026      	b.n	80040b4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800406a:	b29b      	uxth	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1b5      	bne.n	8003fdc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	6839      	ldr	r1, [r7, #0]
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 fb57 	bl	8004728 <SPI_EndRxTxTransaction>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2220      	movs	r2, #32
 8004084:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10a      	bne.n	80040a4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800408e:	2300      	movs	r3, #0
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	77fb      	strb	r3, [r7, #31]
 80040b0:	e000      	b.n	80040b4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80040b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80040c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3720      	adds	r7, #32
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b08a      	sub	sp, #40	; 0x28
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	607a      	str	r2, [r7, #4]
 80040da:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040dc:	2301      	movs	r3, #1
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040e0:	2300      	movs	r3, #0
 80040e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d101      	bne.n	80040f4 <HAL_SPI_TransmitReceive+0x26>
 80040f0:	2302      	movs	r3, #2
 80040f2:	e1fb      	b.n	80044ec <HAL_SPI_TransmitReceive+0x41e>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040fc:	f7fd f9c2 	bl	8001484 <HAL_GetTick>
 8004100:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004108:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004110:	887b      	ldrh	r3, [r7, #2]
 8004112:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004114:	887b      	ldrh	r3, [r7, #2]
 8004116:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004118:	7efb      	ldrb	r3, [r7, #27]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d00e      	beq.n	800413c <HAL_SPI_TransmitReceive+0x6e>
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004124:	d106      	bne.n	8004134 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d102      	bne.n	8004134 <HAL_SPI_TransmitReceive+0x66>
 800412e:	7efb      	ldrb	r3, [r7, #27]
 8004130:	2b04      	cmp	r3, #4
 8004132:	d003      	beq.n	800413c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004134:	2302      	movs	r3, #2
 8004136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800413a:	e1cd      	b.n	80044d8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d005      	beq.n	800414e <HAL_SPI_TransmitReceive+0x80>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <HAL_SPI_TransmitReceive+0x80>
 8004148:	887b      	ldrh	r3, [r7, #2]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d103      	bne.n	8004156 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004154:	e1c0      	b.n	80044d8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b04      	cmp	r3, #4
 8004160:	d003      	beq.n	800416a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2205      	movs	r2, #5
 8004166:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	887a      	ldrh	r2, [r7, #2]
 800417a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	887a      	ldrh	r2, [r7, #2]
 8004182:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	887a      	ldrh	r2, [r7, #2]
 8004190:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	887a      	ldrh	r2, [r7, #2]
 8004196:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041ac:	d802      	bhi.n	80041b4 <HAL_SPI_TransmitReceive+0xe6>
 80041ae:	8a3b      	ldrh	r3, [r7, #16]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d908      	bls.n	80041c6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041c2:	605a      	str	r2, [r3, #4]
 80041c4:	e007      	b.n	80041d6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041d4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e0:	2b40      	cmp	r3, #64	; 0x40
 80041e2:	d007      	beq.n	80041f4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041fc:	d97c      	bls.n	80042f8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <HAL_SPI_TransmitReceive+0x13e>
 8004206:	8a7b      	ldrh	r3, [r7, #18]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d169      	bne.n	80042e0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004210:	881a      	ldrh	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	1c9a      	adds	r2, r3, #2
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004230:	e056      	b.n	80042e0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b02      	cmp	r3, #2
 800423e:	d11b      	bne.n	8004278 <HAL_SPI_TransmitReceive+0x1aa>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d016      	beq.n	8004278 <HAL_SPI_TransmitReceive+0x1aa>
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	2b01      	cmp	r3, #1
 800424e:	d113      	bne.n	8004278 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004254:	881a      	ldrh	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004260:	1c9a      	adds	r2, r3, #2
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b01      	cmp	r3, #1
 8004284:	d11c      	bne.n	80042c0 <HAL_SPI_TransmitReceive+0x1f2>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d016      	beq.n	80042c0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	b292      	uxth	r2, r2
 800429e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	1c9a      	adds	r2, r3, #2
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042bc:	2301      	movs	r3, #1
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80042c0:	f7fd f8e0 	bl	8001484 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d807      	bhi.n	80042e0 <HAL_SPI_TransmitReceive+0x212>
 80042d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042d6:	d003      	beq.n	80042e0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80042de:	e0fb      	b.n	80044d8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1a3      	bne.n	8004232 <HAL_SPI_TransmitReceive+0x164>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d19d      	bne.n	8004232 <HAL_SPI_TransmitReceive+0x164>
 80042f6:	e0df      	b.n	80044b8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_SPI_TransmitReceive+0x23a>
 8004300:	8a7b      	ldrh	r3, [r7, #18]
 8004302:	2b01      	cmp	r3, #1
 8004304:	f040 80cb 	bne.w	800449e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b01      	cmp	r3, #1
 8004310:	d912      	bls.n	8004338 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004316:	881a      	ldrh	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	1c9a      	adds	r2, r3, #2
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800432c:	b29b      	uxth	r3, r3
 800432e:	3b02      	subs	r3, #2
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004336:	e0b2      	b.n	800449e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	330c      	adds	r3, #12
 8004342:	7812      	ldrb	r2, [r2, #0]
 8004344:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004354:	b29b      	uxth	r3, r3
 8004356:	3b01      	subs	r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800435e:	e09e      	b.n	800449e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b02      	cmp	r3, #2
 800436c:	d134      	bne.n	80043d8 <HAL_SPI_TransmitReceive+0x30a>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004372:	b29b      	uxth	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d02f      	beq.n	80043d8 <HAL_SPI_TransmitReceive+0x30a>
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	2b01      	cmp	r3, #1
 800437c:	d12c      	bne.n	80043d8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004382:	b29b      	uxth	r3, r3
 8004384:	2b01      	cmp	r3, #1
 8004386:	d912      	bls.n	80043ae <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438c:	881a      	ldrh	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004398:	1c9a      	adds	r2, r3, #2
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	3b02      	subs	r3, #2
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043ac:	e012      	b.n	80043d4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	330c      	adds	r3, #12
 80043b8:	7812      	ldrb	r2, [r2, #0]
 80043ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d148      	bne.n	8004478 <HAL_SPI_TransmitReceive+0x3aa>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d042      	beq.n	8004478 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d923      	bls.n	8004446 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	b292      	uxth	r2, r2
 800440a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	1c9a      	adds	r2, r3, #2
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800441c:	b29b      	uxth	r3, r3
 800441e:	3b02      	subs	r3, #2
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b01      	cmp	r3, #1
 8004432:	d81f      	bhi.n	8004474 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004442:	605a      	str	r2, [r3, #4]
 8004444:	e016      	b.n	8004474 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f103 020c 	add.w	r2, r3, #12
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	7812      	ldrb	r2, [r2, #0]
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	1c5a      	adds	r2, r3, #1
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004468:	b29b      	uxth	r3, r3
 800446a:	3b01      	subs	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004474:	2301      	movs	r3, #1
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004478:	f7fd f804 	bl	8001484 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004484:	429a      	cmp	r2, r3
 8004486:	d803      	bhi.n	8004490 <HAL_SPI_TransmitReceive+0x3c2>
 8004488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800448e:	d102      	bne.n	8004496 <HAL_SPI_TransmitReceive+0x3c8>
 8004490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004492:	2b00      	cmp	r3, #0
 8004494:	d103      	bne.n	800449e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800449c:	e01c      	b.n	80044d8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f47f af5b 	bne.w	8004360 <HAL_SPI_TransmitReceive+0x292>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f47f af54 	bne.w	8004360 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 f933 	bl	8004728 <SPI_EndRxTxTransaction>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d006      	beq.n	80044d6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2220      	movs	r2, #32
 80044d2:	661a      	str	r2, [r3, #96]	; 0x60
 80044d4:	e000      	b.n	80044d8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80044d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80044e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3728      	adds	r7, #40	; 0x28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	603b      	str	r3, [r7, #0]
 8004500:	4613      	mov	r3, r2
 8004502:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004504:	f7fc ffbe 	bl	8001484 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	4413      	add	r3, r2
 8004512:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004514:	f7fc ffb6 	bl	8001484 <HAL_GetTick>
 8004518:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800451a:	4b39      	ldr	r3, [pc, #228]	; (8004600 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	015b      	lsls	r3, r3, #5
 8004520:	0d1b      	lsrs	r3, r3, #20
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	fb02 f303 	mul.w	r3, r2, r3
 8004528:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800452a:	e054      	b.n	80045d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004532:	d050      	beq.n	80045d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004534:	f7fc ffa6 	bl	8001484 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	429a      	cmp	r2, r3
 8004542:	d902      	bls.n	800454a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d13d      	bne.n	80045c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004558:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004562:	d111      	bne.n	8004588 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800456c:	d004      	beq.n	8004578 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004576:	d107      	bne.n	8004588 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004586:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004590:	d10f      	bne.n	80045b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e017      	b.n	80045f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4013      	ands	r3, r2
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	bf0c      	ite	eq
 80045e6:	2301      	moveq	r3, #1
 80045e8:	2300      	movne	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	461a      	mov	r2, r3
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d19b      	bne.n	800452c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3720      	adds	r7, #32
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20000000 	.word	0x20000000

08004604 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
 8004610:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004612:	f7fc ff37 	bl	8001484 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461a:	1a9b      	subs	r3, r3, r2
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	4413      	add	r3, r2
 8004620:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004622:	f7fc ff2f 	bl	8001484 <HAL_GetTick>
 8004626:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004628:	4b3e      	ldr	r3, [pc, #248]	; (8004724 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	00da      	lsls	r2, r3, #3
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	0d1b      	lsrs	r3, r3, #20
 8004638:	69fa      	ldr	r2, [r7, #28]
 800463a:	fb02 f303 	mul.w	r3, r2, r3
 800463e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8004640:	e062      	b.n	8004708 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004648:	d109      	bne.n	800465e <SPI_WaitFifoStateUntilTimeout+0x5a>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d106      	bne.n	800465e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	330c      	adds	r3, #12
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	b2db      	uxtb	r3, r3
 800465a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800465c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004664:	d050      	beq.n	8004708 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004666:	f7fc ff0d 	bl	8001484 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	69fa      	ldr	r2, [r7, #28]
 8004672:	429a      	cmp	r2, r3
 8004674:	d902      	bls.n	800467c <SPI_WaitFifoStateUntilTimeout+0x78>
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d13d      	bne.n	80046f8 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800468a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004694:	d111      	bne.n	80046ba <SPI_WaitFifoStateUntilTimeout+0xb6>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800469e:	d004      	beq.n	80046aa <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a8:	d107      	bne.n	80046ba <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c2:	d10f      	bne.n	80046e4 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e010      	b.n	800471a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	3b01      	subs	r3, #1
 8004706:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689a      	ldr	r2, [r3, #8]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	4013      	ands	r3, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	429a      	cmp	r2, r3
 8004716:	d194      	bne.n	8004642 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3720      	adds	r7, #32
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20000000 	.word	0x20000000

08004728 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af02      	add	r7, sp, #8
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2200      	movs	r2, #0
 800473c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f7ff ff5f 	bl	8004604 <SPI_WaitFifoStateUntilTimeout>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d007      	beq.n	800475c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004750:	f043 0220 	orr.w	r2, r3, #32
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e027      	b.n	80047ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2200      	movs	r2, #0
 8004764:	2180      	movs	r1, #128	; 0x80
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f7ff fec4 	bl	80044f4 <SPI_WaitFlagStateUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d007      	beq.n	8004782 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004776:	f043 0220 	orr.w	r2, r3, #32
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e014      	b.n	80047ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2200      	movs	r2, #0
 800478a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f7ff ff38 	bl	8004604 <SPI_WaitFifoStateUntilTimeout>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d007      	beq.n	80047aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800479e:	f043 0220 	orr.w	r2, r3, #32
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e000      	b.n	80047ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e049      	b.n	800485a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fc fb2c 	bl	8000e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3304      	adds	r3, #4
 80047f0:	4619      	mov	r1, r3
 80047f2:	4610      	mov	r0, r2
 80047f4:	f000 fd9e 	bl	8005334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b082      	sub	sp, #8
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2202      	movs	r2, #2
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6a1a      	ldr	r2, [r3, #32]
 8004878:	f241 1311 	movw	r3, #4369	; 0x1111
 800487c:	4013      	ands	r3, r2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10f      	bne.n	80048a2 <HAL_TIM_Base_DeInit+0x40>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6a1a      	ldr	r2, [r3, #32]
 8004888:	f240 4344 	movw	r3, #1092	; 0x444
 800488c:	4013      	ands	r3, r2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d107      	bne.n	80048a2 <HAL_TIM_Base_DeInit+0x40>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0201 	bic.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fc faec 	bl	8000e80 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b082      	sub	sp, #8
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e049      	b.n	80049c0 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d106      	bne.n	8004946 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f841 	bl	80049c8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2202      	movs	r2, #2
 800494a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	3304      	adds	r3, #4
 8004956:	4619      	mov	r1, r3
 8004958:	4610      	mov	r0, r2
 800495a:	f000 fceb 	bl	8005334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d109      	bne.n	8004a00 <HAL_TIM_OC_Start_IT+0x24>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	bf14      	ite	ne
 80049f8:	2301      	movne	r3, #1
 80049fa:	2300      	moveq	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	e03c      	b.n	8004a7a <HAL_TIM_OC_Start_IT+0x9e>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d109      	bne.n	8004a1a <HAL_TIM_OC_Start_IT+0x3e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	bf14      	ite	ne
 8004a12:	2301      	movne	r3, #1
 8004a14:	2300      	moveq	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	e02f      	b.n	8004a7a <HAL_TIM_OC_Start_IT+0x9e>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d109      	bne.n	8004a34 <HAL_TIM_OC_Start_IT+0x58>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	bf14      	ite	ne
 8004a2c:	2301      	movne	r3, #1
 8004a2e:	2300      	moveq	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	e022      	b.n	8004a7a <HAL_TIM_OC_Start_IT+0x9e>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2b0c      	cmp	r3, #12
 8004a38:	d109      	bne.n	8004a4e <HAL_TIM_OC_Start_IT+0x72>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	bf14      	ite	ne
 8004a46:	2301      	movne	r3, #1
 8004a48:	2300      	moveq	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	e015      	b.n	8004a7a <HAL_TIM_OC_Start_IT+0x9e>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d109      	bne.n	8004a68 <HAL_TIM_OC_Start_IT+0x8c>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	bf14      	ite	ne
 8004a60:	2301      	movne	r3, #1
 8004a62:	2300      	moveq	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	e008      	b.n	8004a7a <HAL_TIM_OC_Start_IT+0x9e>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	bf14      	ite	ne
 8004a74:	2301      	movne	r3, #1
 8004a76:	2300      	moveq	r3, #0
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <HAL_TIM_OC_Start_IT+0xa6>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e0e2      	b.n	8004c48 <HAL_TIM_OC_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d104      	bne.n	8004a92 <HAL_TIM_OC_Start_IT+0xb6>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a90:	e023      	b.n	8004ada <HAL_TIM_OC_Start_IT+0xfe>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d104      	bne.n	8004aa2 <HAL_TIM_OC_Start_IT+0xc6>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aa0:	e01b      	b.n	8004ada <HAL_TIM_OC_Start_IT+0xfe>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d104      	bne.n	8004ab2 <HAL_TIM_OC_Start_IT+0xd6>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ab0:	e013      	b.n	8004ada <HAL_TIM_OC_Start_IT+0xfe>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b0c      	cmp	r3, #12
 8004ab6:	d104      	bne.n	8004ac2 <HAL_TIM_OC_Start_IT+0xe6>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ac0:	e00b      	b.n	8004ada <HAL_TIM_OC_Start_IT+0xfe>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d104      	bne.n	8004ad2 <HAL_TIM_OC_Start_IT+0xf6>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ad0:	e003      	b.n	8004ada <HAL_TIM_OC_Start_IT+0xfe>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b0c      	cmp	r3, #12
 8004ade:	d841      	bhi.n	8004b64 <HAL_TIM_OC_Start_IT+0x188>
 8004ae0:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <HAL_TIM_OC_Start_IT+0x10c>)
 8004ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae6:	bf00      	nop
 8004ae8:	08004b1d 	.word	0x08004b1d
 8004aec:	08004b65 	.word	0x08004b65
 8004af0:	08004b65 	.word	0x08004b65
 8004af4:	08004b65 	.word	0x08004b65
 8004af8:	08004b2f 	.word	0x08004b2f
 8004afc:	08004b65 	.word	0x08004b65
 8004b00:	08004b65 	.word	0x08004b65
 8004b04:	08004b65 	.word	0x08004b65
 8004b08:	08004b41 	.word	0x08004b41
 8004b0c:	08004b65 	.word	0x08004b65
 8004b10:	08004b65 	.word	0x08004b65
 8004b14:	08004b65 	.word	0x08004b65
 8004b18:	08004b53 	.word	0x08004b53
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0202 	orr.w	r2, r2, #2
 8004b2a:	60da      	str	r2, [r3, #12]
      break;
 8004b2c:	e01b      	b.n	8004b66 <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f042 0204 	orr.w	r2, r2, #4
 8004b3c:	60da      	str	r2, [r3, #12]
      break;
 8004b3e:	e012      	b.n	8004b66 <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0208 	orr.w	r2, r2, #8
 8004b4e:	60da      	str	r2, [r3, #12]
      break;
 8004b50:	e009      	b.n	8004b66 <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f042 0210 	orr.w	r2, r2, #16
 8004b60:	60da      	str	r2, [r3, #12]
      break;
 8004b62:	e000      	b.n	8004b66 <HAL_TIM_OC_Start_IT+0x18a>
    }

    default:
      break;
 8004b64:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	6839      	ldr	r1, [r7, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 ffea 	bl	8005b48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a35      	ldr	r2, [pc, #212]	; (8004c50 <HAL_TIM_OC_Start_IT+0x274>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d013      	beq.n	8004ba6 <HAL_TIM_OC_Start_IT+0x1ca>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a34      	ldr	r2, [pc, #208]	; (8004c54 <HAL_TIM_OC_Start_IT+0x278>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00e      	beq.n	8004ba6 <HAL_TIM_OC_Start_IT+0x1ca>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a32      	ldr	r2, [pc, #200]	; (8004c58 <HAL_TIM_OC_Start_IT+0x27c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d009      	beq.n	8004ba6 <HAL_TIM_OC_Start_IT+0x1ca>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a31      	ldr	r2, [pc, #196]	; (8004c5c <HAL_TIM_OC_Start_IT+0x280>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d004      	beq.n	8004ba6 <HAL_TIM_OC_Start_IT+0x1ca>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a2f      	ldr	r2, [pc, #188]	; (8004c60 <HAL_TIM_OC_Start_IT+0x284>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d101      	bne.n	8004baa <HAL_TIM_OC_Start_IT+0x1ce>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <HAL_TIM_OC_Start_IT+0x1d0>
 8004baa:	2300      	movs	r3, #0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d007      	beq.n	8004bc0 <HAL_TIM_OC_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bbe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a22      	ldr	r2, [pc, #136]	; (8004c50 <HAL_TIM_OC_Start_IT+0x274>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d01d      	beq.n	8004c06 <HAL_TIM_OC_Start_IT+0x22a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd2:	d018      	beq.n	8004c06 <HAL_TIM_OC_Start_IT+0x22a>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a22      	ldr	r2, [pc, #136]	; (8004c64 <HAL_TIM_OC_Start_IT+0x288>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d013      	beq.n	8004c06 <HAL_TIM_OC_Start_IT+0x22a>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a21      	ldr	r2, [pc, #132]	; (8004c68 <HAL_TIM_OC_Start_IT+0x28c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00e      	beq.n	8004c06 <HAL_TIM_OC_Start_IT+0x22a>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a1f      	ldr	r2, [pc, #124]	; (8004c6c <HAL_TIM_OC_Start_IT+0x290>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d009      	beq.n	8004c06 <HAL_TIM_OC_Start_IT+0x22a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a17      	ldr	r2, [pc, #92]	; (8004c54 <HAL_TIM_OC_Start_IT+0x278>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d004      	beq.n	8004c06 <HAL_TIM_OC_Start_IT+0x22a>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a15      	ldr	r2, [pc, #84]	; (8004c58 <HAL_TIM_OC_Start_IT+0x27c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d115      	bne.n	8004c32 <HAL_TIM_OC_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	4b18      	ldr	r3, [pc, #96]	; (8004c70 <HAL_TIM_OC_Start_IT+0x294>)
 8004c0e:	4013      	ands	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b06      	cmp	r3, #6
 8004c16:	d015      	beq.n	8004c44 <HAL_TIM_OC_Start_IT+0x268>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c1e:	d011      	beq.n	8004c44 <HAL_TIM_OC_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0201 	orr.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c30:	e008      	b.n	8004c44 <HAL_TIM_OC_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f042 0201 	orr.w	r2, r2, #1
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	e000      	b.n	8004c46 <HAL_TIM_OC_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40012c00 	.word	0x40012c00
 8004c54:	40013400 	.word	0x40013400
 8004c58:	40014000 	.word	0x40014000
 8004c5c:	40014400 	.word	0x40014400
 8004c60:	40014800 	.word	0x40014800
 8004c64:	40000400 	.word	0x40000400
 8004c68:	40000800 	.word	0x40000800
 8004c6c:	40000c00 	.word	0x40000c00
 8004c70:	00010007 	.word	0x00010007

08004c74 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b0c      	cmp	r3, #12
 8004c82:	d841      	bhi.n	8004d08 <HAL_TIM_OC_Stop_IT+0x94>
 8004c84:	a201      	add	r2, pc, #4	; (adr r2, 8004c8c <HAL_TIM_OC_Stop_IT+0x18>)
 8004c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8a:	bf00      	nop
 8004c8c:	08004cc1 	.word	0x08004cc1
 8004c90:	08004d09 	.word	0x08004d09
 8004c94:	08004d09 	.word	0x08004d09
 8004c98:	08004d09 	.word	0x08004d09
 8004c9c:	08004cd3 	.word	0x08004cd3
 8004ca0:	08004d09 	.word	0x08004d09
 8004ca4:	08004d09 	.word	0x08004d09
 8004ca8:	08004d09 	.word	0x08004d09
 8004cac:	08004ce5 	.word	0x08004ce5
 8004cb0:	08004d09 	.word	0x08004d09
 8004cb4:	08004d09 	.word	0x08004d09
 8004cb8:	08004d09 	.word	0x08004d09
 8004cbc:	08004cf7 	.word	0x08004cf7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0202 	bic.w	r2, r2, #2
 8004cce:	60da      	str	r2, [r3, #12]
      break;
 8004cd0:	e01b      	b.n	8004d0a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 0204 	bic.w	r2, r2, #4
 8004ce0:	60da      	str	r2, [r3, #12]
      break;
 8004ce2:	e012      	b.n	8004d0a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68da      	ldr	r2, [r3, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0208 	bic.w	r2, r2, #8
 8004cf2:	60da      	str	r2, [r3, #12]
      break;
 8004cf4:	e009      	b.n	8004d0a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68da      	ldr	r2, [r3, #12]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0210 	bic.w	r2, r2, #16
 8004d04:	60da      	str	r2, [r3, #12]
      break;
 8004d06:	e000      	b.n	8004d0a <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8004d08:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	6839      	ldr	r1, [r7, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 ff18 	bl	8005b48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a3e      	ldr	r2, [pc, #248]	; (8004e18 <HAL_TIM_OC_Stop_IT+0x1a4>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d013      	beq.n	8004d4a <HAL_TIM_OC_Stop_IT+0xd6>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a3d      	ldr	r2, [pc, #244]	; (8004e1c <HAL_TIM_OC_Stop_IT+0x1a8>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d00e      	beq.n	8004d4a <HAL_TIM_OC_Stop_IT+0xd6>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a3b      	ldr	r2, [pc, #236]	; (8004e20 <HAL_TIM_OC_Stop_IT+0x1ac>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d009      	beq.n	8004d4a <HAL_TIM_OC_Stop_IT+0xd6>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a3a      	ldr	r2, [pc, #232]	; (8004e24 <HAL_TIM_OC_Stop_IT+0x1b0>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d004      	beq.n	8004d4a <HAL_TIM_OC_Stop_IT+0xd6>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a38      	ldr	r2, [pc, #224]	; (8004e28 <HAL_TIM_OC_Stop_IT+0x1b4>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d101      	bne.n	8004d4e <HAL_TIM_OC_Stop_IT+0xda>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e000      	b.n	8004d50 <HAL_TIM_OC_Stop_IT+0xdc>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d017      	beq.n	8004d84 <HAL_TIM_OC_Stop_IT+0x110>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6a1a      	ldr	r2, [r3, #32]
 8004d5a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d5e:	4013      	ands	r3, r2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10f      	bne.n	8004d84 <HAL_TIM_OC_Stop_IT+0x110>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6a1a      	ldr	r2, [r3, #32]
 8004d6a:	f240 4344 	movw	r3, #1092	; 0x444
 8004d6e:	4013      	ands	r3, r2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d107      	bne.n	8004d84 <HAL_TIM_OC_Stop_IT+0x110>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d82:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6a1a      	ldr	r2, [r3, #32]
 8004d8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d8e:	4013      	ands	r3, r2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10f      	bne.n	8004db4 <HAL_TIM_OC_Stop_IT+0x140>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6a1a      	ldr	r2, [r3, #32]
 8004d9a:	f240 4344 	movw	r3, #1092	; 0x444
 8004d9e:	4013      	ands	r3, r2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d107      	bne.n	8004db4 <HAL_TIM_OC_Stop_IT+0x140>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0201 	bic.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d104      	bne.n	8004dc4 <HAL_TIM_OC_Stop_IT+0x150>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dc2:	e023      	b.n	8004e0c <HAL_TIM_OC_Stop_IT+0x198>
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d104      	bne.n	8004dd4 <HAL_TIM_OC_Stop_IT+0x160>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dd2:	e01b      	b.n	8004e0c <HAL_TIM_OC_Stop_IT+0x198>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2b08      	cmp	r3, #8
 8004dd8:	d104      	bne.n	8004de4 <HAL_TIM_OC_Stop_IT+0x170>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004de2:	e013      	b.n	8004e0c <HAL_TIM_OC_Stop_IT+0x198>
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b0c      	cmp	r3, #12
 8004de8:	d104      	bne.n	8004df4 <HAL_TIM_OC_Stop_IT+0x180>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004df2:	e00b      	b.n	8004e0c <HAL_TIM_OC_Stop_IT+0x198>
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2b10      	cmp	r3, #16
 8004df8:	d104      	bne.n	8004e04 <HAL_TIM_OC_Stop_IT+0x190>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e02:	e003      	b.n	8004e0c <HAL_TIM_OC_Stop_IT+0x198>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	40012c00 	.word	0x40012c00
 8004e1c:	40013400 	.word	0x40013400
 8004e20:	40014000 	.word	0x40014000
 8004e24:	40014400 	.word	0x40014400
 8004e28:	40014800 	.word	0x40014800

08004e2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d122      	bne.n	8004e88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d11b      	bne.n	8004e88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f06f 0202 	mvn.w	r2, #2
 8004e58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fa42 	bl	80052f8 <HAL_TIM_IC_CaptureCallback>
 8004e74:	e005      	b.n	8004e82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f00f f8ae 	bl	8013fd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 fa45 	bl	800530c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0304 	and.w	r3, r3, #4
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d122      	bne.n	8004edc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d11b      	bne.n	8004edc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f06f 0204 	mvn.w	r2, #4
 8004eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fa18 	bl	80052f8 <HAL_TIM_IC_CaptureCallback>
 8004ec8:	e005      	b.n	8004ed6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f00f f884 	bl	8013fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 fa1b 	bl	800530c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	2b08      	cmp	r3, #8
 8004ee8:	d122      	bne.n	8004f30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f003 0308 	and.w	r3, r3, #8
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d11b      	bne.n	8004f30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f06f 0208 	mvn.w	r2, #8
 8004f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2204      	movs	r2, #4
 8004f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f9ee 	bl	80052f8 <HAL_TIM_IC_CaptureCallback>
 8004f1c:	e005      	b.n	8004f2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f00f f85a 	bl	8013fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f9f1 	bl	800530c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f003 0310 	and.w	r3, r3, #16
 8004f3a:	2b10      	cmp	r3, #16
 8004f3c:	d122      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d11b      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0210 	mvn.w	r2, #16
 8004f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2208      	movs	r2, #8
 8004f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f9c4 	bl	80052f8 <HAL_TIM_IC_CaptureCallback>
 8004f70:	e005      	b.n	8004f7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f00f f830 	bl	8013fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f9c7 	bl	800530c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d10e      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d107      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0201 	mvn.w	r2, #1
 8004fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f99a 	bl	80052e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fba:	2b80      	cmp	r3, #128	; 0x80
 8004fbc:	d10e      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc8:	2b80      	cmp	r3, #128	; 0x80
 8004fca:	d107      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fe6e 	bl	8005cb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fea:	d10e      	bne.n	800500a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff6:	2b80      	cmp	r3, #128	; 0x80
 8004ff8:	d107      	bne.n	800500a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 fe61 	bl	8005ccc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005014:	2b40      	cmp	r3, #64	; 0x40
 8005016:	d10e      	bne.n	8005036 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005022:	2b40      	cmp	r3, #64	; 0x40
 8005024:	d107      	bne.n	8005036 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800502e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f975 	bl	8005320 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	f003 0320 	and.w	r3, r3, #32
 8005040:	2b20      	cmp	r3, #32
 8005042:	d10e      	bne.n	8005062 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f003 0320 	and.w	r3, r3, #32
 800504e:	2b20      	cmp	r3, #32
 8005050:	d107      	bne.n	8005062 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f06f 0220 	mvn.w	r2, #32
 800505a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 fe21 	bl	8005ca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005062:	bf00      	nop
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800507e:	2b01      	cmp	r3, #1
 8005080:	d101      	bne.n	8005086 <HAL_TIM_OC_ConfigChannel+0x1a>
 8005082:	2302      	movs	r3, #2
 8005084:	e064      	b.n	8005150 <HAL_TIM_OC_ConfigChannel+0xe4>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b14      	cmp	r3, #20
 8005092:	d857      	bhi.n	8005144 <HAL_TIM_OC_ConfigChannel+0xd8>
 8005094:	a201      	add	r2, pc, #4	; (adr r2, 800509c <HAL_TIM_OC_ConfigChannel+0x30>)
 8005096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509a:	bf00      	nop
 800509c:	080050f1 	.word	0x080050f1
 80050a0:	08005145 	.word	0x08005145
 80050a4:	08005145 	.word	0x08005145
 80050a8:	08005145 	.word	0x08005145
 80050ac:	080050ff 	.word	0x080050ff
 80050b0:	08005145 	.word	0x08005145
 80050b4:	08005145 	.word	0x08005145
 80050b8:	08005145 	.word	0x08005145
 80050bc:	0800510d 	.word	0x0800510d
 80050c0:	08005145 	.word	0x08005145
 80050c4:	08005145 	.word	0x08005145
 80050c8:	08005145 	.word	0x08005145
 80050cc:	0800511b 	.word	0x0800511b
 80050d0:	08005145 	.word	0x08005145
 80050d4:	08005145 	.word	0x08005145
 80050d8:	08005145 	.word	0x08005145
 80050dc:	08005129 	.word	0x08005129
 80050e0:	08005145 	.word	0x08005145
 80050e4:	08005145 	.word	0x08005145
 80050e8:	08005145 	.word	0x08005145
 80050ec:	08005137 	.word	0x08005137
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68b9      	ldr	r1, [r7, #8]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 f9b6 	bl	8005468 <TIM_OC1_SetConfig>
      break;
 80050fc:	e023      	b.n	8005146 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	4618      	mov	r0, r3
 8005106:	f000 fa3f 	bl	8005588 <TIM_OC2_SetConfig>
      break;
 800510a:	e01c      	b.n	8005146 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fac2 	bl	800569c <TIM_OC3_SetConfig>
      break;
 8005118:	e015      	b.n	8005146 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	4618      	mov	r0, r3
 8005122:	f000 fb43 	bl	80057ac <TIM_OC4_SetConfig>
      break;
 8005126:	e00e      	b.n	8005146 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68b9      	ldr	r1, [r7, #8]
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fba6 	bl	8005880 <TIM_OC5_SetConfig>
      break;
 8005134:	e007      	b.n	8005146 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68b9      	ldr	r1, [r7, #8]
 800513c:	4618      	mov	r0, r3
 800513e:	f000 fc03 	bl	8005948 <TIM_OC6_SetConfig>
      break;
 8005142:	e000      	b.n	8005146 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8005144:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_TIM_ConfigClockSource+0x18>
 800516c:	2302      	movs	r3, #2
 800516e:	e0b5      	b.n	80052dc <HAL_TIM_ConfigClockSource+0x184>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800518e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005192:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800519a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ac:	d03e      	beq.n	800522c <HAL_TIM_ConfigClockSource+0xd4>
 80051ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b2:	f200 8087 	bhi.w	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
 80051b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ba:	f000 8085 	beq.w	80052c8 <HAL_TIM_ConfigClockSource+0x170>
 80051be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c2:	d87f      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
 80051c4:	2b70      	cmp	r3, #112	; 0x70
 80051c6:	d01a      	beq.n	80051fe <HAL_TIM_ConfigClockSource+0xa6>
 80051c8:	2b70      	cmp	r3, #112	; 0x70
 80051ca:	d87b      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
 80051cc:	2b60      	cmp	r3, #96	; 0x60
 80051ce:	d050      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x11a>
 80051d0:	2b60      	cmp	r3, #96	; 0x60
 80051d2:	d877      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
 80051d4:	2b50      	cmp	r3, #80	; 0x50
 80051d6:	d03c      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0xfa>
 80051d8:	2b50      	cmp	r3, #80	; 0x50
 80051da:	d873      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
 80051dc:	2b40      	cmp	r3, #64	; 0x40
 80051de:	d058      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x13a>
 80051e0:	2b40      	cmp	r3, #64	; 0x40
 80051e2:	d86f      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
 80051e4:	2b30      	cmp	r3, #48	; 0x30
 80051e6:	d064      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x15a>
 80051e8:	2b30      	cmp	r3, #48	; 0x30
 80051ea:	d86b      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
 80051ec:	2b20      	cmp	r3, #32
 80051ee:	d060      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x15a>
 80051f0:	2b20      	cmp	r3, #32
 80051f2:	d867      	bhi.n	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d05c      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x15a>
 80051f8:	2b10      	cmp	r3, #16
 80051fa:	d05a      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80051fc:	e062      	b.n	80052c4 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	6899      	ldr	r1, [r3, #8]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f000 fc7b 	bl	8005b08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005220:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	609a      	str	r2, [r3, #8]
      break;
 800522a:	e04e      	b.n	80052ca <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6818      	ldr	r0, [r3, #0]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	6899      	ldr	r1, [r3, #8]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f000 fc64 	bl	8005b08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800524e:	609a      	str	r2, [r3, #8]
      break;
 8005250:	e03b      	b.n	80052ca <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6859      	ldr	r1, [r3, #4]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	461a      	mov	r2, r3
 8005260:	f000 fbd8 	bl	8005a14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2150      	movs	r1, #80	; 0x50
 800526a:	4618      	mov	r0, r3
 800526c:	f000 fc31 	bl	8005ad2 <TIM_ITRx_SetConfig>
      break;
 8005270:	e02b      	b.n	80052ca <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6818      	ldr	r0, [r3, #0]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	6859      	ldr	r1, [r3, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	461a      	mov	r2, r3
 8005280:	f000 fbf7 	bl	8005a72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2160      	movs	r1, #96	; 0x60
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fc21 	bl	8005ad2 <TIM_ITRx_SetConfig>
      break;
 8005290:	e01b      	b.n	80052ca <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6818      	ldr	r0, [r3, #0]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	6859      	ldr	r1, [r3, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	461a      	mov	r2, r3
 80052a0:	f000 fbb8 	bl	8005a14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2140      	movs	r1, #64	; 0x40
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fc11 	bl	8005ad2 <TIM_ITRx_SetConfig>
      break;
 80052b0:	e00b      	b.n	80052ca <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4619      	mov	r1, r3
 80052bc:	4610      	mov	r0, r2
 80052be:	f000 fc08 	bl	8005ad2 <TIM_ITRx_SetConfig>
        break;
 80052c2:	e002      	b.n	80052ca <HAL_TIM_ConfigClockSource+0x172>
      break;
 80052c4:	bf00      	nop
 80052c6:	e000      	b.n	80052ca <HAL_TIM_ConfigClockSource+0x172>
      break;
 80052c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a40      	ldr	r2, [pc, #256]	; (8005448 <TIM_Base_SetConfig+0x114>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d013      	beq.n	8005374 <TIM_Base_SetConfig+0x40>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005352:	d00f      	beq.n	8005374 <TIM_Base_SetConfig+0x40>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a3d      	ldr	r2, [pc, #244]	; (800544c <TIM_Base_SetConfig+0x118>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d00b      	beq.n	8005374 <TIM_Base_SetConfig+0x40>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a3c      	ldr	r2, [pc, #240]	; (8005450 <TIM_Base_SetConfig+0x11c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d007      	beq.n	8005374 <TIM_Base_SetConfig+0x40>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a3b      	ldr	r2, [pc, #236]	; (8005454 <TIM_Base_SetConfig+0x120>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d003      	beq.n	8005374 <TIM_Base_SetConfig+0x40>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a3a      	ldr	r2, [pc, #232]	; (8005458 <TIM_Base_SetConfig+0x124>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d108      	bne.n	8005386 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a2f      	ldr	r2, [pc, #188]	; (8005448 <TIM_Base_SetConfig+0x114>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d01f      	beq.n	80053ce <TIM_Base_SetConfig+0x9a>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005394:	d01b      	beq.n	80053ce <TIM_Base_SetConfig+0x9a>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a2c      	ldr	r2, [pc, #176]	; (800544c <TIM_Base_SetConfig+0x118>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d017      	beq.n	80053ce <TIM_Base_SetConfig+0x9a>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a2b      	ldr	r2, [pc, #172]	; (8005450 <TIM_Base_SetConfig+0x11c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d013      	beq.n	80053ce <TIM_Base_SetConfig+0x9a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a2a      	ldr	r2, [pc, #168]	; (8005454 <TIM_Base_SetConfig+0x120>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00f      	beq.n	80053ce <TIM_Base_SetConfig+0x9a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a29      	ldr	r2, [pc, #164]	; (8005458 <TIM_Base_SetConfig+0x124>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00b      	beq.n	80053ce <TIM_Base_SetConfig+0x9a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a28      	ldr	r2, [pc, #160]	; (800545c <TIM_Base_SetConfig+0x128>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d007      	beq.n	80053ce <TIM_Base_SetConfig+0x9a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a27      	ldr	r2, [pc, #156]	; (8005460 <TIM_Base_SetConfig+0x12c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d003      	beq.n	80053ce <TIM_Base_SetConfig+0x9a>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a26      	ldr	r2, [pc, #152]	; (8005464 <TIM_Base_SetConfig+0x130>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d108      	bne.n	80053e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4313      	orrs	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a10      	ldr	r2, [pc, #64]	; (8005448 <TIM_Base_SetConfig+0x114>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d00f      	beq.n	800542c <TIM_Base_SetConfig+0xf8>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a12      	ldr	r2, [pc, #72]	; (8005458 <TIM_Base_SetConfig+0x124>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00b      	beq.n	800542c <TIM_Base_SetConfig+0xf8>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a11      	ldr	r2, [pc, #68]	; (800545c <TIM_Base_SetConfig+0x128>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d007      	beq.n	800542c <TIM_Base_SetConfig+0xf8>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a10      	ldr	r2, [pc, #64]	; (8005460 <TIM_Base_SetConfig+0x12c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d003      	beq.n	800542c <TIM_Base_SetConfig+0xf8>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a0f      	ldr	r2, [pc, #60]	; (8005464 <TIM_Base_SetConfig+0x130>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d103      	bne.n	8005434 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	615a      	str	r2, [r3, #20]
}
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40012c00 	.word	0x40012c00
 800544c:	40000400 	.word	0x40000400
 8005450:	40000800 	.word	0x40000800
 8005454:	40000c00 	.word	0x40000c00
 8005458:	40013400 	.word	0x40013400
 800545c:	40014000 	.word	0x40014000
 8005460:	40014400 	.word	0x40014400
 8005464:	40014800 	.word	0x40014800

08005468 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	f023 0201 	bic.w	r2, r3, #1
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 0303 	bic.w	r3, r3, #3
 80054a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f023 0302 	bic.w	r3, r3, #2
 80054b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a2c      	ldr	r2, [pc, #176]	; (8005574 <TIM_OC1_SetConfig+0x10c>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d00f      	beq.n	80054e8 <TIM_OC1_SetConfig+0x80>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a2b      	ldr	r2, [pc, #172]	; (8005578 <TIM_OC1_SetConfig+0x110>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00b      	beq.n	80054e8 <TIM_OC1_SetConfig+0x80>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a2a      	ldr	r2, [pc, #168]	; (800557c <TIM_OC1_SetConfig+0x114>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d007      	beq.n	80054e8 <TIM_OC1_SetConfig+0x80>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a29      	ldr	r2, [pc, #164]	; (8005580 <TIM_OC1_SetConfig+0x118>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d003      	beq.n	80054e8 <TIM_OC1_SetConfig+0x80>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a28      	ldr	r2, [pc, #160]	; (8005584 <TIM_OC1_SetConfig+0x11c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d10c      	bne.n	8005502 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f023 0308 	bic.w	r3, r3, #8
 80054ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f023 0304 	bic.w	r3, r3, #4
 8005500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a1b      	ldr	r2, [pc, #108]	; (8005574 <TIM_OC1_SetConfig+0x10c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00f      	beq.n	800552a <TIM_OC1_SetConfig+0xc2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a1a      	ldr	r2, [pc, #104]	; (8005578 <TIM_OC1_SetConfig+0x110>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00b      	beq.n	800552a <TIM_OC1_SetConfig+0xc2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a19      	ldr	r2, [pc, #100]	; (800557c <TIM_OC1_SetConfig+0x114>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d007      	beq.n	800552a <TIM_OC1_SetConfig+0xc2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a18      	ldr	r2, [pc, #96]	; (8005580 <TIM_OC1_SetConfig+0x118>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d003      	beq.n	800552a <TIM_OC1_SetConfig+0xc2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a17      	ldr	r2, [pc, #92]	; (8005584 <TIM_OC1_SetConfig+0x11c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d111      	bne.n	800554e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	4313      	orrs	r3, r2
 800554c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	621a      	str	r2, [r3, #32]
}
 8005568:	bf00      	nop
 800556a:	371c      	adds	r7, #28
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	40012c00 	.word	0x40012c00
 8005578:	40013400 	.word	0x40013400
 800557c:	40014000 	.word	0x40014000
 8005580:	40014400 	.word	0x40014400
 8005584:	40014800 	.word	0x40014800

08005588 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	f023 0210 	bic.w	r2, r3, #16
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	021b      	lsls	r3, r3, #8
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f023 0320 	bic.w	r3, r3, #32
 80055d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	011b      	lsls	r3, r3, #4
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a28      	ldr	r2, [pc, #160]	; (8005688 <TIM_OC2_SetConfig+0x100>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d003      	beq.n	80055f4 <TIM_OC2_SetConfig+0x6c>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a27      	ldr	r2, [pc, #156]	; (800568c <TIM_OC2_SetConfig+0x104>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d10d      	bne.n	8005610 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	011b      	lsls	r3, r3, #4
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	4313      	orrs	r3, r2
 8005606:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800560e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a1d      	ldr	r2, [pc, #116]	; (8005688 <TIM_OC2_SetConfig+0x100>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d00f      	beq.n	8005638 <TIM_OC2_SetConfig+0xb0>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a1c      	ldr	r2, [pc, #112]	; (800568c <TIM_OC2_SetConfig+0x104>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d00b      	beq.n	8005638 <TIM_OC2_SetConfig+0xb0>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a1b      	ldr	r2, [pc, #108]	; (8005690 <TIM_OC2_SetConfig+0x108>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d007      	beq.n	8005638 <TIM_OC2_SetConfig+0xb0>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a1a      	ldr	r2, [pc, #104]	; (8005694 <TIM_OC2_SetConfig+0x10c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d003      	beq.n	8005638 <TIM_OC2_SetConfig+0xb0>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a19      	ldr	r2, [pc, #100]	; (8005698 <TIM_OC2_SetConfig+0x110>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d113      	bne.n	8005660 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800563e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005646:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	4313      	orrs	r3, r2
 800565e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	621a      	str	r2, [r3, #32]
}
 800567a:	bf00      	nop
 800567c:	371c      	adds	r7, #28
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	40012c00 	.word	0x40012c00
 800568c:	40013400 	.word	0x40013400
 8005690:	40014000 	.word	0x40014000
 8005694:	40014400 	.word	0x40014400
 8005698:	40014800 	.word	0x40014800

0800569c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0303 	bic.w	r3, r3, #3
 80056d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	021b      	lsls	r3, r3, #8
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a27      	ldr	r2, [pc, #156]	; (8005798 <TIM_OC3_SetConfig+0xfc>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d003      	beq.n	8005706 <TIM_OC3_SetConfig+0x6a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a26      	ldr	r2, [pc, #152]	; (800579c <TIM_OC3_SetConfig+0x100>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d10d      	bne.n	8005722 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800570c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	021b      	lsls	r3, r3, #8
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	4313      	orrs	r3, r2
 8005718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a1c      	ldr	r2, [pc, #112]	; (8005798 <TIM_OC3_SetConfig+0xfc>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d00f      	beq.n	800574a <TIM_OC3_SetConfig+0xae>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a1b      	ldr	r2, [pc, #108]	; (800579c <TIM_OC3_SetConfig+0x100>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00b      	beq.n	800574a <TIM_OC3_SetConfig+0xae>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a1a      	ldr	r2, [pc, #104]	; (80057a0 <TIM_OC3_SetConfig+0x104>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d007      	beq.n	800574a <TIM_OC3_SetConfig+0xae>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a19      	ldr	r2, [pc, #100]	; (80057a4 <TIM_OC3_SetConfig+0x108>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d003      	beq.n	800574a <TIM_OC3_SetConfig+0xae>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a18      	ldr	r2, [pc, #96]	; (80057a8 <TIM_OC3_SetConfig+0x10c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d113      	bne.n	8005772 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	011b      	lsls	r3, r3, #4
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	4313      	orrs	r3, r2
 8005764:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	011b      	lsls	r3, r3, #4
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	4313      	orrs	r3, r2
 8005770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	621a      	str	r2, [r3, #32]
}
 800578c:	bf00      	nop
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	40012c00 	.word	0x40012c00
 800579c:	40013400 	.word	0x40013400
 80057a0:	40014000 	.word	0x40014000
 80057a4:	40014400 	.word	0x40014400
 80057a8:	40014800 	.word	0x40014800

080057ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	021b      	lsls	r3, r3, #8
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	031b      	lsls	r3, r3, #12
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a18      	ldr	r2, [pc, #96]	; (800586c <TIM_OC4_SetConfig+0xc0>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d00f      	beq.n	8005830 <TIM_OC4_SetConfig+0x84>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a17      	ldr	r2, [pc, #92]	; (8005870 <TIM_OC4_SetConfig+0xc4>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00b      	beq.n	8005830 <TIM_OC4_SetConfig+0x84>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a16      	ldr	r2, [pc, #88]	; (8005874 <TIM_OC4_SetConfig+0xc8>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d007      	beq.n	8005830 <TIM_OC4_SetConfig+0x84>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a15      	ldr	r2, [pc, #84]	; (8005878 <TIM_OC4_SetConfig+0xcc>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d003      	beq.n	8005830 <TIM_OC4_SetConfig+0x84>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a14      	ldr	r2, [pc, #80]	; (800587c <TIM_OC4_SetConfig+0xd0>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d109      	bne.n	8005844 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005836:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	019b      	lsls	r3, r3, #6
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4313      	orrs	r3, r2
 8005842:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	621a      	str	r2, [r3, #32]
}
 800585e:	bf00      	nop
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	40012c00 	.word	0x40012c00
 8005870:	40013400 	.word	0x40013400
 8005874:	40014000 	.word	0x40014000
 8005878:	40014400 	.word	0x40014400
 800587c:	40014800 	.word	0x40014800

08005880 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80058c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	041b      	lsls	r3, r3, #16
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a17      	ldr	r2, [pc, #92]	; (8005934 <TIM_OC5_SetConfig+0xb4>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00f      	beq.n	80058fa <TIM_OC5_SetConfig+0x7a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a16      	ldr	r2, [pc, #88]	; (8005938 <TIM_OC5_SetConfig+0xb8>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00b      	beq.n	80058fa <TIM_OC5_SetConfig+0x7a>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a15      	ldr	r2, [pc, #84]	; (800593c <TIM_OC5_SetConfig+0xbc>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d007      	beq.n	80058fa <TIM_OC5_SetConfig+0x7a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a14      	ldr	r2, [pc, #80]	; (8005940 <TIM_OC5_SetConfig+0xc0>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d003      	beq.n	80058fa <TIM_OC5_SetConfig+0x7a>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a13      	ldr	r2, [pc, #76]	; (8005944 <TIM_OC5_SetConfig+0xc4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d109      	bne.n	800590e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005900:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	021b      	lsls	r3, r3, #8
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	4313      	orrs	r3, r2
 800590c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	621a      	str	r2, [r3, #32]
}
 8005928:	bf00      	nop
 800592a:	371c      	adds	r7, #28
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	40012c00 	.word	0x40012c00
 8005938:	40013400 	.word	0x40013400
 800593c:	40014000 	.word	0x40014000
 8005940:	40014400 	.word	0x40014400
 8005944:	40014800 	.word	0x40014800

08005948 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800597a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	021b      	lsls	r3, r3, #8
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	4313      	orrs	r3, r2
 8005986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800598e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	051b      	lsls	r3, r3, #20
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	4313      	orrs	r3, r2
 800599a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a18      	ldr	r2, [pc, #96]	; (8005a00 <TIM_OC6_SetConfig+0xb8>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00f      	beq.n	80059c4 <TIM_OC6_SetConfig+0x7c>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a17      	ldr	r2, [pc, #92]	; (8005a04 <TIM_OC6_SetConfig+0xbc>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00b      	beq.n	80059c4 <TIM_OC6_SetConfig+0x7c>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a16      	ldr	r2, [pc, #88]	; (8005a08 <TIM_OC6_SetConfig+0xc0>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d007      	beq.n	80059c4 <TIM_OC6_SetConfig+0x7c>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a15      	ldr	r2, [pc, #84]	; (8005a0c <TIM_OC6_SetConfig+0xc4>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d003      	beq.n	80059c4 <TIM_OC6_SetConfig+0x7c>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a14      	ldr	r2, [pc, #80]	; (8005a10 <TIM_OC6_SetConfig+0xc8>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d109      	bne.n	80059d8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	029b      	lsls	r3, r3, #10
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	621a      	str	r2, [r3, #32]
}
 80059f2:	bf00      	nop
 80059f4:	371c      	adds	r7, #28
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	40012c00 	.word	0x40012c00
 8005a04:	40013400 	.word	0x40013400
 8005a08:	40014000 	.word	0x40014000
 8005a0c:	40014400 	.word	0x40014400
 8005a10:	40014800 	.word	0x40014800

08005a14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	f023 0201 	bic.w	r2, r3, #1
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f023 030a 	bic.w	r3, r3, #10
 8005a50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	621a      	str	r2, [r3, #32]
}
 8005a66:	bf00      	nop
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b087      	sub	sp, #28
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	60f8      	str	r0, [r7, #12]
 8005a7a:	60b9      	str	r1, [r7, #8]
 8005a7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	f023 0210 	bic.w	r2, r3, #16
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	031b      	lsls	r3, r3, #12
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005aae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	011b      	lsls	r3, r3, #4
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	621a      	str	r2, [r3, #32]
}
 8005ac6:	bf00      	nop
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b085      	sub	sp, #20
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	f043 0307 	orr.w	r3, r3, #7
 8005af4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	609a      	str	r2, [r3, #8]
}
 8005afc:	bf00      	nop
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	021a      	lsls	r2, r3, #8
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	609a      	str	r2, [r3, #8]
}
 8005b3c:	bf00      	nop
 8005b3e:	371c      	adds	r7, #28
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f003 031f 	and.w	r3, r3, #31
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6a1a      	ldr	r2, [r3, #32]
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	43db      	mvns	r3, r3
 8005b6a:	401a      	ands	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a1a      	ldr	r2, [r3, #32]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f003 031f 	and.w	r3, r3, #31
 8005b7a:	6879      	ldr	r1, [r7, #4]
 8005b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b80:	431a      	orrs	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	621a      	str	r2, [r3, #32]
}
 8005b86:	bf00      	nop
 8005b88:	371c      	adds	r7, #28
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
	...

08005b94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e068      	b.n	8005c7e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a2e      	ldr	r2, [pc, #184]	; (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d004      	beq.n	8005be0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a2d      	ldr	r2, [pc, #180]	; (8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d108      	bne.n	8005bf2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005be6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a1e      	ldr	r2, [pc, #120]	; (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d01d      	beq.n	8005c52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c1e:	d018      	beq.n	8005c52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a1b      	ldr	r2, [pc, #108]	; (8005c94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d013      	beq.n	8005c52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a1a      	ldr	r2, [pc, #104]	; (8005c98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d00e      	beq.n	8005c52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a18      	ldr	r2, [pc, #96]	; (8005c9c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d009      	beq.n	8005c52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a13      	ldr	r2, [pc, #76]	; (8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d004      	beq.n	8005c52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a14      	ldr	r2, [pc, #80]	; (8005ca0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d10c      	bne.n	8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	40012c00 	.word	0x40012c00
 8005c90:	40013400 	.word	0x40013400
 8005c94:	40000400 	.word	0x40000400
 8005c98:	40000800 	.word	0x40000800
 8005c9c:	40000c00 	.word	0x40000c00
 8005ca0:	40014000 	.word	0x40014000

08005ca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e040      	b.n	8005d74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d106      	bne.n	8005d08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7fb f8d4 	bl	8000eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2224      	movs	r2, #36	; 0x24
 8005d0c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0201 	bic.w	r2, r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f95c 	bl	8005fdc <UART_SetConfig>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d101      	bne.n	8005d2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e022      	b.n	8005d74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d002      	beq.n	8005d3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fbda 	bl	80064f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689a      	ldr	r2, [r3, #8]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0201 	orr.w	r2, r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fc61 	bl	8006634 <UART_CheckIdleState>
 8005d72:	4603      	mov	r3, r0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08a      	sub	sp, #40	; 0x28
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	603b      	str	r3, [r7, #0]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d90:	2b20      	cmp	r3, #32
 8005d92:	f040 8082 	bne.w	8005e9a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <HAL_UART_Transmit+0x26>
 8005d9c:	88fb      	ldrh	r3, [r7, #6]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e07a      	b.n	8005e9c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <HAL_UART_Transmit+0x38>
 8005db0:	2302      	movs	r3, #2
 8005db2:	e073      	b.n	8005e9c <HAL_UART_Transmit+0x120>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2221      	movs	r2, #33	; 0x21
 8005dc8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dca:	f7fb fb5b 	bl	8001484 <HAL_GetTick>
 8005dce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	88fa      	ldrh	r2, [r7, #6]
 8005dd4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	88fa      	ldrh	r2, [r7, #6]
 8005ddc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de8:	d108      	bne.n	8005dfc <HAL_UART_Transmit+0x80>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d104      	bne.n	8005dfc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005df2:	2300      	movs	r3, #0
 8005df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	61bb      	str	r3, [r7, #24]
 8005dfa:	e003      	b.n	8005e04 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e00:	2300      	movs	r3, #0
 8005e02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005e0c:	e02d      	b.n	8005e6a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2200      	movs	r2, #0
 8005e16:	2180      	movs	r1, #128	; 0x80
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 fc54 	bl	80066c6 <UART_WaitOnFlagUntilTimeout>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e039      	b.n	8005e9c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10b      	bne.n	8005e46 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	881a      	ldrh	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e3a:	b292      	uxth	r2, r2
 8005e3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	3302      	adds	r3, #2
 8005e42:	61bb      	str	r3, [r7, #24]
 8005e44:	e008      	b.n	8005e58 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	781a      	ldrb	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	b292      	uxth	r2, r2
 8005e50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	3301      	adds	r3, #1
 8005e56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	3b01      	subs	r3, #1
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1cb      	bne.n	8005e0e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2140      	movs	r1, #64	; 0x40
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 fc20 	bl	80066c6 <UART_WaitOnFlagUntilTimeout>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e005      	b.n	8005e9c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2220      	movs	r2, #32
 8005e94:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005e96:	2300      	movs	r3, #0
 8005e98:	e000      	b.n	8005e9c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005e9a:	2302      	movs	r3, #2
  }
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3720      	adds	r7, #32
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eb6:	2b20      	cmp	r3, #32
 8005eb8:	d166      	bne.n	8005f88 <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <HAL_UART_Transmit_DMA+0x22>
 8005ec0:	88fb      	ldrh	r3, [r7, #6]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e05f      	b.n	8005f8a <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_UART_Transmit_DMA+0x34>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e058      	b.n	8005f8a <HAL_UART_Transmit_DMA+0xe6>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	88fa      	ldrh	r2, [r7, #6]
 8005eea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	88fa      	ldrh	r2, [r7, #6]
 8005ef2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2221      	movs	r2, #33	; 0x21
 8005f02:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d02b      	beq.n	8005f64 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f10:	4a20      	ldr	r2, [pc, #128]	; (8005f94 <HAL_UART_Transmit_DMA+0xf0>)
 8005f12:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f18:	4a1f      	ldr	r2, [pc, #124]	; (8005f98 <HAL_UART_Transmit_DMA+0xf4>)
 8005f1a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f20:	4a1e      	ldr	r2, [pc, #120]	; (8005f9c <HAL_UART_Transmit_DMA+0xf8>)
 8005f22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f28:	2200      	movs	r2, #0
 8005f2a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f34:	4619      	mov	r1, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3328      	adds	r3, #40	; 0x28
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	88fb      	ldrh	r3, [r7, #6]
 8005f40:	f7fb fc13 	bl	800176a <HAL_DMA_Start_IT>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00c      	beq.n	8005f64 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2210      	movs	r2, #16
 8005f4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e012      	b.n	8005f8a <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2240      	movs	r2, #64	; 0x40
 8005f6a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689a      	ldr	r2, [r3, #8]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f82:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	e000      	b.n	8005f8a <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 8005f88:	2302      	movs	r3, #2
  }
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	08006847 	.word	0x08006847
 8005f98:	0800689b 	.word	0x0800689b
 8005f9c:	080068b7 	.word	0x080068b7

08005fa0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fdc:	b5b0      	push	{r4, r5, r7, lr}
 8005fde:	b088      	sub	sp, #32
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	4bad      	ldr	r3, [pc, #692]	; (80062bc <UART_SetConfig+0x2e0>)
 8006008:	4013      	ands	r3, r2
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	6812      	ldr	r2, [r2, #0]
 800600e:	69f9      	ldr	r1, [r7, #28]
 8006010:	430b      	orrs	r3, r1
 8006012:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68da      	ldr	r2, [r3, #12]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4aa2      	ldr	r2, [pc, #648]	; (80062c0 <UART_SetConfig+0x2e4>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d004      	beq.n	8006044 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	69fa      	ldr	r2, [r7, #28]
 8006040:	4313      	orrs	r3, r2
 8006042:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	69fa      	ldr	r2, [r7, #28]
 8006054:	430a      	orrs	r2, r1
 8006056:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a99      	ldr	r2, [pc, #612]	; (80062c4 <UART_SetConfig+0x2e8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d121      	bne.n	80060a6 <UART_SetConfig+0xca>
 8006062:	4b99      	ldr	r3, [pc, #612]	; (80062c8 <UART_SetConfig+0x2ec>)
 8006064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006068:	f003 0303 	and.w	r3, r3, #3
 800606c:	2b03      	cmp	r3, #3
 800606e:	d817      	bhi.n	80060a0 <UART_SetConfig+0xc4>
 8006070:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <UART_SetConfig+0x9c>)
 8006072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006076:	bf00      	nop
 8006078:	08006089 	.word	0x08006089
 800607c:	08006095 	.word	0x08006095
 8006080:	0800608f 	.word	0x0800608f
 8006084:	0800609b 	.word	0x0800609b
 8006088:	2301      	movs	r3, #1
 800608a:	76fb      	strb	r3, [r7, #27]
 800608c:	e0e7      	b.n	800625e <UART_SetConfig+0x282>
 800608e:	2302      	movs	r3, #2
 8006090:	76fb      	strb	r3, [r7, #27]
 8006092:	e0e4      	b.n	800625e <UART_SetConfig+0x282>
 8006094:	2304      	movs	r3, #4
 8006096:	76fb      	strb	r3, [r7, #27]
 8006098:	e0e1      	b.n	800625e <UART_SetConfig+0x282>
 800609a:	2308      	movs	r3, #8
 800609c:	76fb      	strb	r3, [r7, #27]
 800609e:	e0de      	b.n	800625e <UART_SetConfig+0x282>
 80060a0:	2310      	movs	r3, #16
 80060a2:	76fb      	strb	r3, [r7, #27]
 80060a4:	e0db      	b.n	800625e <UART_SetConfig+0x282>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a88      	ldr	r2, [pc, #544]	; (80062cc <UART_SetConfig+0x2f0>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d132      	bne.n	8006116 <UART_SetConfig+0x13a>
 80060b0:	4b85      	ldr	r3, [pc, #532]	; (80062c8 <UART_SetConfig+0x2ec>)
 80060b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b6:	f003 030c 	and.w	r3, r3, #12
 80060ba:	2b0c      	cmp	r3, #12
 80060bc:	d828      	bhi.n	8006110 <UART_SetConfig+0x134>
 80060be:	a201      	add	r2, pc, #4	; (adr r2, 80060c4 <UART_SetConfig+0xe8>)
 80060c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c4:	080060f9 	.word	0x080060f9
 80060c8:	08006111 	.word	0x08006111
 80060cc:	08006111 	.word	0x08006111
 80060d0:	08006111 	.word	0x08006111
 80060d4:	08006105 	.word	0x08006105
 80060d8:	08006111 	.word	0x08006111
 80060dc:	08006111 	.word	0x08006111
 80060e0:	08006111 	.word	0x08006111
 80060e4:	080060ff 	.word	0x080060ff
 80060e8:	08006111 	.word	0x08006111
 80060ec:	08006111 	.word	0x08006111
 80060f0:	08006111 	.word	0x08006111
 80060f4:	0800610b 	.word	0x0800610b
 80060f8:	2300      	movs	r3, #0
 80060fa:	76fb      	strb	r3, [r7, #27]
 80060fc:	e0af      	b.n	800625e <UART_SetConfig+0x282>
 80060fe:	2302      	movs	r3, #2
 8006100:	76fb      	strb	r3, [r7, #27]
 8006102:	e0ac      	b.n	800625e <UART_SetConfig+0x282>
 8006104:	2304      	movs	r3, #4
 8006106:	76fb      	strb	r3, [r7, #27]
 8006108:	e0a9      	b.n	800625e <UART_SetConfig+0x282>
 800610a:	2308      	movs	r3, #8
 800610c:	76fb      	strb	r3, [r7, #27]
 800610e:	e0a6      	b.n	800625e <UART_SetConfig+0x282>
 8006110:	2310      	movs	r3, #16
 8006112:	76fb      	strb	r3, [r7, #27]
 8006114:	e0a3      	b.n	800625e <UART_SetConfig+0x282>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a6d      	ldr	r2, [pc, #436]	; (80062d0 <UART_SetConfig+0x2f4>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d120      	bne.n	8006162 <UART_SetConfig+0x186>
 8006120:	4b69      	ldr	r3, [pc, #420]	; (80062c8 <UART_SetConfig+0x2ec>)
 8006122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006126:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800612a:	2b30      	cmp	r3, #48	; 0x30
 800612c:	d013      	beq.n	8006156 <UART_SetConfig+0x17a>
 800612e:	2b30      	cmp	r3, #48	; 0x30
 8006130:	d814      	bhi.n	800615c <UART_SetConfig+0x180>
 8006132:	2b20      	cmp	r3, #32
 8006134:	d009      	beq.n	800614a <UART_SetConfig+0x16e>
 8006136:	2b20      	cmp	r3, #32
 8006138:	d810      	bhi.n	800615c <UART_SetConfig+0x180>
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <UART_SetConfig+0x168>
 800613e:	2b10      	cmp	r3, #16
 8006140:	d006      	beq.n	8006150 <UART_SetConfig+0x174>
 8006142:	e00b      	b.n	800615c <UART_SetConfig+0x180>
 8006144:	2300      	movs	r3, #0
 8006146:	76fb      	strb	r3, [r7, #27]
 8006148:	e089      	b.n	800625e <UART_SetConfig+0x282>
 800614a:	2302      	movs	r3, #2
 800614c:	76fb      	strb	r3, [r7, #27]
 800614e:	e086      	b.n	800625e <UART_SetConfig+0x282>
 8006150:	2304      	movs	r3, #4
 8006152:	76fb      	strb	r3, [r7, #27]
 8006154:	e083      	b.n	800625e <UART_SetConfig+0x282>
 8006156:	2308      	movs	r3, #8
 8006158:	76fb      	strb	r3, [r7, #27]
 800615a:	e080      	b.n	800625e <UART_SetConfig+0x282>
 800615c:	2310      	movs	r3, #16
 800615e:	76fb      	strb	r3, [r7, #27]
 8006160:	e07d      	b.n	800625e <UART_SetConfig+0x282>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a5b      	ldr	r2, [pc, #364]	; (80062d4 <UART_SetConfig+0x2f8>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d120      	bne.n	80061ae <UART_SetConfig+0x1d2>
 800616c:	4b56      	ldr	r3, [pc, #344]	; (80062c8 <UART_SetConfig+0x2ec>)
 800616e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006172:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006176:	2bc0      	cmp	r3, #192	; 0xc0
 8006178:	d013      	beq.n	80061a2 <UART_SetConfig+0x1c6>
 800617a:	2bc0      	cmp	r3, #192	; 0xc0
 800617c:	d814      	bhi.n	80061a8 <UART_SetConfig+0x1cc>
 800617e:	2b80      	cmp	r3, #128	; 0x80
 8006180:	d009      	beq.n	8006196 <UART_SetConfig+0x1ba>
 8006182:	2b80      	cmp	r3, #128	; 0x80
 8006184:	d810      	bhi.n	80061a8 <UART_SetConfig+0x1cc>
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <UART_SetConfig+0x1b4>
 800618a:	2b40      	cmp	r3, #64	; 0x40
 800618c:	d006      	beq.n	800619c <UART_SetConfig+0x1c0>
 800618e:	e00b      	b.n	80061a8 <UART_SetConfig+0x1cc>
 8006190:	2300      	movs	r3, #0
 8006192:	76fb      	strb	r3, [r7, #27]
 8006194:	e063      	b.n	800625e <UART_SetConfig+0x282>
 8006196:	2302      	movs	r3, #2
 8006198:	76fb      	strb	r3, [r7, #27]
 800619a:	e060      	b.n	800625e <UART_SetConfig+0x282>
 800619c:	2304      	movs	r3, #4
 800619e:	76fb      	strb	r3, [r7, #27]
 80061a0:	e05d      	b.n	800625e <UART_SetConfig+0x282>
 80061a2:	2308      	movs	r3, #8
 80061a4:	76fb      	strb	r3, [r7, #27]
 80061a6:	e05a      	b.n	800625e <UART_SetConfig+0x282>
 80061a8:	2310      	movs	r3, #16
 80061aa:	76fb      	strb	r3, [r7, #27]
 80061ac:	e057      	b.n	800625e <UART_SetConfig+0x282>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a49      	ldr	r2, [pc, #292]	; (80062d8 <UART_SetConfig+0x2fc>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d125      	bne.n	8006204 <UART_SetConfig+0x228>
 80061b8:	4b43      	ldr	r3, [pc, #268]	; (80062c8 <UART_SetConfig+0x2ec>)
 80061ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061c6:	d017      	beq.n	80061f8 <UART_SetConfig+0x21c>
 80061c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061cc:	d817      	bhi.n	80061fe <UART_SetConfig+0x222>
 80061ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061d2:	d00b      	beq.n	80061ec <UART_SetConfig+0x210>
 80061d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061d8:	d811      	bhi.n	80061fe <UART_SetConfig+0x222>
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <UART_SetConfig+0x20a>
 80061de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061e2:	d006      	beq.n	80061f2 <UART_SetConfig+0x216>
 80061e4:	e00b      	b.n	80061fe <UART_SetConfig+0x222>
 80061e6:	2300      	movs	r3, #0
 80061e8:	76fb      	strb	r3, [r7, #27]
 80061ea:	e038      	b.n	800625e <UART_SetConfig+0x282>
 80061ec:	2302      	movs	r3, #2
 80061ee:	76fb      	strb	r3, [r7, #27]
 80061f0:	e035      	b.n	800625e <UART_SetConfig+0x282>
 80061f2:	2304      	movs	r3, #4
 80061f4:	76fb      	strb	r3, [r7, #27]
 80061f6:	e032      	b.n	800625e <UART_SetConfig+0x282>
 80061f8:	2308      	movs	r3, #8
 80061fa:	76fb      	strb	r3, [r7, #27]
 80061fc:	e02f      	b.n	800625e <UART_SetConfig+0x282>
 80061fe:	2310      	movs	r3, #16
 8006200:	76fb      	strb	r3, [r7, #27]
 8006202:	e02c      	b.n	800625e <UART_SetConfig+0x282>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a2d      	ldr	r2, [pc, #180]	; (80062c0 <UART_SetConfig+0x2e4>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d125      	bne.n	800625a <UART_SetConfig+0x27e>
 800620e:	4b2e      	ldr	r3, [pc, #184]	; (80062c8 <UART_SetConfig+0x2ec>)
 8006210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006214:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006218:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800621c:	d017      	beq.n	800624e <UART_SetConfig+0x272>
 800621e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006222:	d817      	bhi.n	8006254 <UART_SetConfig+0x278>
 8006224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006228:	d00b      	beq.n	8006242 <UART_SetConfig+0x266>
 800622a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800622e:	d811      	bhi.n	8006254 <UART_SetConfig+0x278>
 8006230:	2b00      	cmp	r3, #0
 8006232:	d003      	beq.n	800623c <UART_SetConfig+0x260>
 8006234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006238:	d006      	beq.n	8006248 <UART_SetConfig+0x26c>
 800623a:	e00b      	b.n	8006254 <UART_SetConfig+0x278>
 800623c:	2300      	movs	r3, #0
 800623e:	76fb      	strb	r3, [r7, #27]
 8006240:	e00d      	b.n	800625e <UART_SetConfig+0x282>
 8006242:	2302      	movs	r3, #2
 8006244:	76fb      	strb	r3, [r7, #27]
 8006246:	e00a      	b.n	800625e <UART_SetConfig+0x282>
 8006248:	2304      	movs	r3, #4
 800624a:	76fb      	strb	r3, [r7, #27]
 800624c:	e007      	b.n	800625e <UART_SetConfig+0x282>
 800624e:	2308      	movs	r3, #8
 8006250:	76fb      	strb	r3, [r7, #27]
 8006252:	e004      	b.n	800625e <UART_SetConfig+0x282>
 8006254:	2310      	movs	r3, #16
 8006256:	76fb      	strb	r3, [r7, #27]
 8006258:	e001      	b.n	800625e <UART_SetConfig+0x282>
 800625a:	2310      	movs	r3, #16
 800625c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a17      	ldr	r2, [pc, #92]	; (80062c0 <UART_SetConfig+0x2e4>)
 8006264:	4293      	cmp	r3, r2
 8006266:	f040 8087 	bne.w	8006378 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800626a:	7efb      	ldrb	r3, [r7, #27]
 800626c:	2b08      	cmp	r3, #8
 800626e:	d837      	bhi.n	80062e0 <UART_SetConfig+0x304>
 8006270:	a201      	add	r2, pc, #4	; (adr r2, 8006278 <UART_SetConfig+0x29c>)
 8006272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006276:	bf00      	nop
 8006278:	0800629d 	.word	0x0800629d
 800627c:	080062e1 	.word	0x080062e1
 8006280:	080062a5 	.word	0x080062a5
 8006284:	080062e1 	.word	0x080062e1
 8006288:	080062ab 	.word	0x080062ab
 800628c:	080062e1 	.word	0x080062e1
 8006290:	080062e1 	.word	0x080062e1
 8006294:	080062e1 	.word	0x080062e1
 8006298:	080062b3 	.word	0x080062b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800629c:	f7fc ffae 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 80062a0:	6178      	str	r0, [r7, #20]
        break;
 80062a2:	e022      	b.n	80062ea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062a4:	4b0d      	ldr	r3, [pc, #52]	; (80062dc <UART_SetConfig+0x300>)
 80062a6:	617b      	str	r3, [r7, #20]
        break;
 80062a8:	e01f      	b.n	80062ea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062aa:	f7fc ff0f 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 80062ae:	6178      	str	r0, [r7, #20]
        break;
 80062b0:	e01b      	b.n	80062ea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062b6:	617b      	str	r3, [r7, #20]
        break;
 80062b8:	e017      	b.n	80062ea <UART_SetConfig+0x30e>
 80062ba:	bf00      	nop
 80062bc:	efff69f3 	.word	0xefff69f3
 80062c0:	40008000 	.word	0x40008000
 80062c4:	40013800 	.word	0x40013800
 80062c8:	40021000 	.word	0x40021000
 80062cc:	40004400 	.word	0x40004400
 80062d0:	40004800 	.word	0x40004800
 80062d4:	40004c00 	.word	0x40004c00
 80062d8:	40005000 	.word	0x40005000
 80062dc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	76bb      	strb	r3, [r7, #26]
        break;
 80062e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 80f1 	beq.w	80064d4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	4613      	mov	r3, r2
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	4413      	add	r3, r2
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d305      	bcc.n	800630e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	429a      	cmp	r2, r3
 800630c:	d902      	bls.n	8006314 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	76bb      	strb	r3, [r7, #26]
 8006312:	e0df      	b.n	80064d4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	4618      	mov	r0, r3
 8006318:	f04f 0100 	mov.w	r1, #0
 800631c:	f04f 0200 	mov.w	r2, #0
 8006320:	f04f 0300 	mov.w	r3, #0
 8006324:	020b      	lsls	r3, r1, #8
 8006326:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800632a:	0202      	lsls	r2, r0, #8
 800632c:	6879      	ldr	r1, [r7, #4]
 800632e:	6849      	ldr	r1, [r1, #4]
 8006330:	0849      	lsrs	r1, r1, #1
 8006332:	4608      	mov	r0, r1
 8006334:	f04f 0100 	mov.w	r1, #0
 8006338:	1814      	adds	r4, r2, r0
 800633a:	eb43 0501 	adc.w	r5, r3, r1
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	461a      	mov	r2, r3
 8006344:	f04f 0300 	mov.w	r3, #0
 8006348:	4620      	mov	r0, r4
 800634a:	4629      	mov	r1, r5
 800634c:	f7f9 ff98 	bl	8000280 <__aeabi_uldivmod>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	4613      	mov	r3, r2
 8006356:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800635e:	d308      	bcc.n	8006372 <UART_SetConfig+0x396>
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006366:	d204      	bcs.n	8006372 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	60da      	str	r2, [r3, #12]
 8006370:	e0b0      	b.n	80064d4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	76bb      	strb	r3, [r7, #26]
 8006376:	e0ad      	b.n	80064d4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006380:	d15c      	bne.n	800643c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006382:	7efb      	ldrb	r3, [r7, #27]
 8006384:	2b08      	cmp	r3, #8
 8006386:	d828      	bhi.n	80063da <UART_SetConfig+0x3fe>
 8006388:	a201      	add	r2, pc, #4	; (adr r2, 8006390 <UART_SetConfig+0x3b4>)
 800638a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638e:	bf00      	nop
 8006390:	080063b5 	.word	0x080063b5
 8006394:	080063bd 	.word	0x080063bd
 8006398:	080063c5 	.word	0x080063c5
 800639c:	080063db 	.word	0x080063db
 80063a0:	080063cb 	.word	0x080063cb
 80063a4:	080063db 	.word	0x080063db
 80063a8:	080063db 	.word	0x080063db
 80063ac:	080063db 	.word	0x080063db
 80063b0:	080063d3 	.word	0x080063d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063b4:	f7fc ff22 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 80063b8:	6178      	str	r0, [r7, #20]
        break;
 80063ba:	e013      	b.n	80063e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063bc:	f7fc ff34 	bl	8003228 <HAL_RCC_GetPCLK2Freq>
 80063c0:	6178      	str	r0, [r7, #20]
        break;
 80063c2:	e00f      	b.n	80063e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063c4:	4b49      	ldr	r3, [pc, #292]	; (80064ec <UART_SetConfig+0x510>)
 80063c6:	617b      	str	r3, [r7, #20]
        break;
 80063c8:	e00c      	b.n	80063e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ca:	f7fc fe7f 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 80063ce:	6178      	str	r0, [r7, #20]
        break;
 80063d0:	e008      	b.n	80063e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063d6:	617b      	str	r3, [r7, #20]
        break;
 80063d8:	e004      	b.n	80063e4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80063da:	2300      	movs	r3, #0
 80063dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	76bb      	strb	r3, [r7, #26]
        break;
 80063e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d074      	beq.n	80064d4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	005a      	lsls	r2, r3, #1
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	085b      	lsrs	r3, r3, #1
 80063f4:	441a      	add	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fe:	b29b      	uxth	r3, r3
 8006400:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	2b0f      	cmp	r3, #15
 8006406:	d916      	bls.n	8006436 <UART_SetConfig+0x45a>
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800640e:	d212      	bcs.n	8006436 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	b29b      	uxth	r3, r3
 8006414:	f023 030f 	bic.w	r3, r3, #15
 8006418:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	085b      	lsrs	r3, r3, #1
 800641e:	b29b      	uxth	r3, r3
 8006420:	f003 0307 	and.w	r3, r3, #7
 8006424:	b29a      	uxth	r2, r3
 8006426:	89fb      	ldrh	r3, [r7, #14]
 8006428:	4313      	orrs	r3, r2
 800642a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	89fa      	ldrh	r2, [r7, #14]
 8006432:	60da      	str	r2, [r3, #12]
 8006434:	e04e      	b.n	80064d4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	76bb      	strb	r3, [r7, #26]
 800643a:	e04b      	b.n	80064d4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800643c:	7efb      	ldrb	r3, [r7, #27]
 800643e:	2b08      	cmp	r3, #8
 8006440:	d827      	bhi.n	8006492 <UART_SetConfig+0x4b6>
 8006442:	a201      	add	r2, pc, #4	; (adr r2, 8006448 <UART_SetConfig+0x46c>)
 8006444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006448:	0800646d 	.word	0x0800646d
 800644c:	08006475 	.word	0x08006475
 8006450:	0800647d 	.word	0x0800647d
 8006454:	08006493 	.word	0x08006493
 8006458:	08006483 	.word	0x08006483
 800645c:	08006493 	.word	0x08006493
 8006460:	08006493 	.word	0x08006493
 8006464:	08006493 	.word	0x08006493
 8006468:	0800648b 	.word	0x0800648b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800646c:	f7fc fec6 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8006470:	6178      	str	r0, [r7, #20]
        break;
 8006472:	e013      	b.n	800649c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006474:	f7fc fed8 	bl	8003228 <HAL_RCC_GetPCLK2Freq>
 8006478:	6178      	str	r0, [r7, #20]
        break;
 800647a:	e00f      	b.n	800649c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800647c:	4b1b      	ldr	r3, [pc, #108]	; (80064ec <UART_SetConfig+0x510>)
 800647e:	617b      	str	r3, [r7, #20]
        break;
 8006480:	e00c      	b.n	800649c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006482:	f7fc fe23 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 8006486:	6178      	str	r0, [r7, #20]
        break;
 8006488:	e008      	b.n	800649c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800648a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800648e:	617b      	str	r3, [r7, #20]
        break;
 8006490:	e004      	b.n	800649c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	76bb      	strb	r3, [r7, #26]
        break;
 800649a:	bf00      	nop
    }

    if (pclk != 0U)
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d018      	beq.n	80064d4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	085a      	lsrs	r2, r3, #1
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	441a      	add	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	2b0f      	cmp	r3, #15
 80064bc:	d908      	bls.n	80064d0 <UART_SetConfig+0x4f4>
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c4:	d204      	bcs.n	80064d0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	60da      	str	r2, [r3, #12]
 80064ce:	e001      	b.n	80064d4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80064e0:	7ebb      	ldrb	r3, [r7, #26]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3720      	adds	r7, #32
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bdb0      	pop	{r4, r5, r7, pc}
 80064ea:	bf00      	nop
 80064ec:	00f42400 	.word	0x00f42400

080064f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00a      	beq.n	800651a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00a      	beq.n	800655e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	f003 0308 	and.w	r3, r3, #8
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	f003 0310 	and.w	r3, r3, #16
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	f003 0320 	and.w	r3, r3, #32
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01a      	beq.n	8006606 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065ee:	d10a      	bne.n	8006606 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00a      	beq.n	8006628 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	605a      	str	r2, [r3, #4]
  }
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af02      	add	r7, sp, #8
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006644:	f7fa ff1e 	bl	8001484 <HAL_GetTick>
 8006648:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0308 	and.w	r3, r3, #8
 8006654:	2b08      	cmp	r3, #8
 8006656:	d10e      	bne.n	8006676 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006658:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f82d 	bl	80066c6 <UART_WaitOnFlagUntilTimeout>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e023      	b.n	80066be <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b04      	cmp	r3, #4
 8006682:	d10e      	bne.n	80066a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006684:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f817 	bl	80066c6 <UART_WaitOnFlagUntilTimeout>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e00d      	b.n	80066be <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2220      	movs	r2, #32
 80066a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2220      	movs	r2, #32
 80066ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	60f8      	str	r0, [r7, #12]
 80066ce:	60b9      	str	r1, [r7, #8]
 80066d0:	603b      	str	r3, [r7, #0]
 80066d2:	4613      	mov	r3, r2
 80066d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066d6:	e05e      	b.n	8006796 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066de:	d05a      	beq.n	8006796 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066e0:	f7fa fed0 	bl	8001484 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d302      	bcc.n	80066f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d11b      	bne.n	800672e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006704:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	689a      	ldr	r2, [r3, #8]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 0201 	bic.w	r2, r2, #1
 8006714:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2220      	movs	r2, #32
 800671a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2220      	movs	r2, #32
 8006720:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e043      	b.n	80067b6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0304 	and.w	r3, r3, #4
 8006738:	2b00      	cmp	r3, #0
 800673a:	d02c      	beq.n	8006796 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800674a:	d124      	bne.n	8006796 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006754:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006764:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689a      	ldr	r2, [r3, #8]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0201 	bic.w	r2, r2, #1
 8006774:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2220      	movs	r2, #32
 800677a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2220      	movs	r2, #32
 8006780:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2220      	movs	r2, #32
 8006786:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e00f      	b.n	80067b6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	69da      	ldr	r2, [r3, #28]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	4013      	ands	r3, r2
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	bf0c      	ite	eq
 80067a6:	2301      	moveq	r3, #1
 80067a8:	2300      	movne	r3, #0
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	461a      	mov	r2, r3
 80067ae:	79fb      	ldrb	r3, [r7, #7]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d091      	beq.n	80066d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80067be:	b480      	push	{r7}
 80067c0:	b083      	sub	sp, #12
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80067d4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2220      	movs	r2, #32
 80067da:	679a      	str	r2, [r3, #120]	; 0x78
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80067fe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689a      	ldr	r2, [r3, #8]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0201 	bic.w	r2, r2, #1
 800680e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006814:	2b01      	cmp	r3, #1
 8006816:	d107      	bne.n	8006828 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 0210 	bic.w	r2, r2, #16
 8006826:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2220      	movs	r2, #32
 800682c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	665a      	str	r2, [r3, #100]	; 0x64
}
 800683a:	bf00      	nop
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006852:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0320 	and.w	r3, r3, #32
 800685e:	2b00      	cmp	r3, #0
 8006860:	d114      	bne.n	800688c <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006878:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006888:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800688a:	e002      	b.n	8006892 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f7ff fb87 	bl	8005fa0 <HAL_UART_TxCpltCallback>
}
 8006892:	bf00      	nop
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f7ff fb83 	bl	8005fb4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068ae:	bf00      	nop
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b086      	sub	sp, #24
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068c8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068da:	2b80      	cmp	r3, #128	; 0x80
 80068dc:	d109      	bne.n	80068f2 <UART_DMAError+0x3c>
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	2b21      	cmp	r3, #33	; 0x21
 80068e2:	d106      	bne.n	80068f2 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80068ec:	6978      	ldr	r0, [r7, #20]
 80068ee:	f7ff ff66 	bl	80067be <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fc:	2b40      	cmp	r3, #64	; 0x40
 80068fe:	d109      	bne.n	8006914 <UART_DMAError+0x5e>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2b22      	cmp	r3, #34	; 0x22
 8006904:	d106      	bne.n	8006914 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2200      	movs	r2, #0
 800690a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800690e:	6978      	ldr	r0, [r7, #20]
 8006910:	f7ff ff6a 	bl	80067e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800691a:	f043 0210 	orr.w	r2, r3, #16
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006924:	6978      	ldr	r0, [r7, #20]
 8006926:	f7ff fb4f 	bl	8005fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800692a:	bf00      	nop
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <_ZNK8IXFEvent12getEventTypeEv>:

    /** \brief Returns the type of the event.
     *
     * Can be used to distinguish between an event or a timeout.
     */
    inline eEventType getEventType() const { return _eventType; }
 8006932:	b480      	push	{r7}
 8006934:	b083      	sub	sp, #12
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8006940:	4618      	mov	r0, r3
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <_ZNK8IXFEvent5getIdEv>:
    /** \brief Sets pointer to behavioral class (see #_pBehavior).
     * Sets the behavior in which the event should be executed.
     */
    inline void setBehavior(IXFReactive * pBehavior) { _pBehavior = pBehavior; }

    inline int getId() const { return _id; }		///< Returns #_id identifying the event in the behaviors context.
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	4618      	mov	r0, r3
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <_ZN11EventStatusC1ENS_12eEventStatusE>:
    /**
     * Constructor
     *
     * \param eventStatus Initial value of the event status.
     */
    EventStatus(eEventStatus eventStatus = Unknown) : _status(eventStatus) {}
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	460b      	mov	r3, r1
 800696e:	70fb      	strb	r3, [r7, #3]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	78fa      	ldrb	r2, [r7, #3]
 8006974:	701a      	strb	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4618      	mov	r0, r3
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <_ZNKSt16initializer_listIhE4sizeEv>:
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }

      // Number of elements.
      constexpr size_type
      size() const noexcept { return _M_len; }
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	4618      	mov	r0, r3
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <_ZNKSt16initializer_listIhE5beginEv>:

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4618      	mov	r0, r3
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <_ZN7desenet6sensor19AbstractApplicationC1Ev>:
     */
    class AbstractApplication
    {
        friend class NetworkEntity;
    public:
        AbstractApplication() {}				///< @brief Default constructor.
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	4a04      	ldr	r2, [pc, #16]	; (80069d0 <_ZN7desenet6sensor19AbstractApplicationC1Ev+0x1c>)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4618      	mov	r0, r3
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	0801bf14 	.word	0x0801bf14

080069d4 <_ZN7desenet6sensor19AbstractApplicationD1Ev>:
        virtual ~AbstractApplication() {}		///< @brief Destructor.
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	4a04      	ldr	r2, [pc, #16]	; (80069f0 <_ZN7desenet6sensor19AbstractApplicationD1Ev+0x1c>)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4618      	mov	r0, r3
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr
 80069f0:	0801bf14 	.word	0x0801bf14

080069f4 <_ZN7desenet6sensor19AbstractApplicationD0Ev>:
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7ff ffe9 	bl	80069d4 <_ZN7desenet6sensor19AbstractApplicationD1Ev>
 8006a02:	2104      	movs	r1, #4
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f00f fd2b 	bl	8016460 <_ZdlPvj>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <_ZN3app7Factory8instanceEv>:
public:
	Factory(int argc, char ** argv);

	void buildApplication();

	static Factory & instance() { assert(_pInstance); return *_pInstance; }
 8006a14:	b580      	push	{r7, lr}
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	4b06      	ldr	r3, [pc, #24]	; (8006a34 <_ZN3app7Factory8instanceEv+0x20>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d105      	bne.n	8006a2c <_ZN3app7Factory8instanceEv+0x18>
 8006a20:	4b05      	ldr	r3, [pc, #20]	; (8006a38 <_ZN3app7Factory8instanceEv+0x24>)
 8006a22:	4a06      	ldr	r2, [pc, #24]	; (8006a3c <_ZN3app7Factory8instanceEv+0x28>)
 8006a24:	2127      	movs	r1, #39	; 0x27
 8006a26:	4806      	ldr	r0, [pc, #24]	; (8006a40 <_ZN3app7Factory8instanceEv+0x2c>)
 8006a28:	f00f fe08 	bl	801663c <__assert_func>
 8006a2c:	4b01      	ldr	r3, [pc, #4]	; (8006a34 <_ZN3app7Factory8instanceEv+0x20>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4618      	mov	r0, r3
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	200000c0 	.word	0x200000c0
 8006a38:	08017c48 	.word	0x08017c48
 8006a3c:	08017c54 	.word	0x08017c54
 8006a40:	08017c84 	.word	0x08017c84

08006a44 <_ZN3app24AccelerometerApplicationC1Ev>:
#include "xf/xfevent.h"
#include "accelerometerapplication.h"

using app::AccelerometerApplication;

AccelerometerApplication::AccelerometerApplication()
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
: _currentState(STATE_UNKOWN)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2100      	movs	r1, #0
 8006a50:	4618      	mov	r0, r3
 8006a52:	f00d fd0b 	bl	801446c <_ZN10XFReactiveC1EP8XFThread>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	330c      	adds	r3, #12
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7ff ffaa 	bl	80069b4 <_ZN7desenet6sensor19AbstractApplicationC1Ev>
 8006a60:	4a0b      	ldr	r2, [pc, #44]	; (8006a90 <_ZN3app24AccelerometerApplicationC1Ev+0x4c>)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	4a0b      	ldr	r2, [pc, #44]	; (8006a94 <_ZN3app24AccelerometerApplicationC1Ev+0x50>)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	60da      	str	r2, [r3, #12]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	741a      	strb	r2, [r3, #16]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2202      	movs	r2, #2
 8006a76:	745a      	strb	r2, [r3, #17]
{
	memset(_accelValuesSyncArray, 0, sizeof(_accelValuesSyncArray));
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3312      	adds	r3, #18
 8006a7c:	2206      	movs	r2, #6
 8006a7e:	2100      	movs	r1, #0
 8006a80:	4618      	mov	r0, r3
 8006a82:	f00f fe73 	bl	801676c <memset>
}
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	0801bd74 	.word	0x0801bd74
 8006a94:	0801bda0 	.word	0x0801bda0

08006a98 <_ZN3app24AccelerometerApplicationD1Ev>:

AccelerometerApplication::~AccelerometerApplication()
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	4a09      	ldr	r2, [pc, #36]	; (8006ac8 <_ZN3app24AccelerometerApplicationD1Ev+0x30>)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	601a      	str	r2, [r3, #0]
 8006aa6:	4a09      	ldr	r2, [pc, #36]	; (8006acc <_ZN3app24AccelerometerApplicationD1Ev+0x34>)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	60da      	str	r2, [r3, #12]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	330c      	adds	r3, #12
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7ff ff8f 	bl	80069d4 <_ZN7desenet6sensor19AbstractApplicationD1Ev>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f00d fcf9 	bl	80144b0 <_ZN10XFReactiveD1Ev>
{
}
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	0801bd74 	.word	0x0801bd74
 8006acc:	0801bda0 	.word	0x0801bda0

08006ad0 <_ZThn12_N3app24AccelerometerApplicationD1Ev>:
class AccelerometerApplication : public XFReactive,
								 public desenet::sensor::AbstractApplication
{
public:
	AccelerometerApplication();
	virtual ~AccelerometerApplication();
 8006ad0:	f1a0 000c 	sub.w	r0, r0, #12
 8006ad4:	f7ff bfe0 	b.w	8006a98 <_ZN3app24AccelerometerApplicationD1Ev>

08006ad8 <_ZN3app24AccelerometerApplicationD0Ev>:
AccelerometerApplication::~AccelerometerApplication()
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
}
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7ff ffd9 	bl	8006a98 <_ZN3app24AccelerometerApplicationD1Ev>
 8006ae6:	2118      	movs	r1, #24
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f00f fcb9 	bl	8016460 <_ZdlPvj>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4618      	mov	r0, r3
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <_ZThn12_N3app24AccelerometerApplicationD0Ev>:
 8006af8:	f1a0 000c 	sub.w	r0, r0, #12
 8006afc:	f7ff bfec 	b.w	8006ad8 <_ZN3app24AccelerometerApplicationD0Ev>

08006b00 <_ZN3app24AccelerometerApplication10initializeEv>:

void AccelerometerApplication::initialize()
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
	// Register application to get informed about arrival of beacons.
	svSyncRequest();
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	330c      	adds	r3, #12
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f004 f8fb 	bl	800ad08 <_ZN7desenet6sensor19AbstractApplication13svSyncRequestEv>
	// Register to publish sampled values for a specific group.
	svPublishRequest(MY_GROUP);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f103 020c 	add.w	r2, r3, #12
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	7c5b      	ldrb	r3, [r3, #17]
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	4610      	mov	r0, r2
 8006b20:	f004 f901 	bl	800ad26 <_ZN7desenet6sensor19AbstractApplication16svPublishRequestEh>
}
 8006b24:	bf00      	nop
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <_ZN3app24AccelerometerApplication5startEv>:

void AccelerometerApplication::start()
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
	startBehavior();	// Start state machine
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3308      	adds	r3, #8
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4610      	mov	r0, r2
 8006b40:	4798      	blx	r3
}
 8006b42:	bf00      	nop
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <_ZN3app24AccelerometerApplication16svSyncIndicationEm>:

/**
 * Called by the network after reception of a beacon frame from gateway node.
 */
void AccelerometerApplication::svSyncIndication(NetworkTime time)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b082      	sub	sp, #8
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	6039      	str	r1, [r7, #0]
// Using the state machine to read accelerometer values does not work for the moment. To
// let it work with it, NetworkEntity must also implement a state machine and call
// svPublishIndication()'s asynchronously!

	// For the moment, read accelerator values directly here
	_readAccelerometerValues();
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f89f 	bl	8006c98 <_ZN3app24AccelerometerApplication24_readAccelerometerValuesEv>
}
 8006b5a:	bf00      	nop
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <_ZThn12_N3app24AccelerometerApplication16svSyncIndicationEm>:
	void initialize();
	void start();

	// desenet::AbstractApplication callback implementation
protected:
	virtual void svSyncIndication(NetworkTime time);
 8006b62:	f1a0 000c 	sub.w	r0, r0, #12
 8006b66:	f7ff bff0 	b.w	8006b4a <_ZN3app24AccelerometerApplication16svSyncIndicationEm>

08006b6a <_ZN3app24AccelerometerApplication19svPublishIndicationEhRN3hei12SharedBufferIhEE>:

desenet::SharedByteBuffer::sizeType AccelerometerApplication::svPublishIndication(desenet::SvGroup group, desenet::SharedByteBuffer & svData)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	460b      	mov	r3, r1
 8006b74:	607a      	str	r2, [r7, #4]
 8006b76:	72fb      	strb	r3, [r7, #11]
	if (group == MY_GROUP)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	7c5b      	ldrb	r3, [r3, #17]
 8006b7c:	7afa      	ldrb	r2, [r7, #11]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d11f      	bne.n	8006bc2 <_ZN3app24AccelerometerApplication19svPublishIndicationEhRN3hei12SharedBufferIhEE+0x58>
	{
		memcpy(&svData[0], &_accelValuesSyncArray[0], 2);
 8006b82:	2100      	movs	r1, #0
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 f8d1 	bl	8006d2c <_ZN3hei12SharedBufferIhEixEj>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	3312      	adds	r3, #18
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	8013      	strh	r3, [r2, #0]
		memcpy(&svData[2], &_accelValuesSyncArray[1], 2);
 8006b96:	2102      	movs	r1, #2
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f8c7 	bl	8006d2c <_ZN3hei12SharedBufferIhEixEj>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	3314      	adds	r3, #20
 8006ba4:	881b      	ldrh	r3, [r3, #0]
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	8013      	strh	r3, [r2, #0]
		memcpy(&svData[4], &_accelValuesSyncArray[2], 2);
 8006baa:	2104      	movs	r1, #4
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f8bd 	bl	8006d2c <_ZN3hei12SharedBufferIhEixEj>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	3316      	adds	r3, #22
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	8013      	strh	r3, [r2, #0]

		return sizeof(_accelValuesSyncArray);
 8006bbe:	2306      	movs	r3, #6
 8006bc0:	e000      	b.n	8006bc4 <_ZN3app24AccelerometerApplication19svPublishIndicationEhRN3hei12SharedBufferIhEE+0x5a>
	}
	return 0;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <_ZThn12_N3app24AccelerometerApplication19svPublishIndicationEhRN3hei12SharedBufferIhEE>:
	virtual desenet::SharedByteBuffer::sizeType svPublishIndication(desenet::SvGroup group, desenet::SharedByteBuffer & svData);
 8006bcc:	f1a0 000c 	sub.w	r0, r0, #12
 8006bd0:	f7ff bfcb 	b.w	8006b6a <_ZN3app24AccelerometerApplication19svPublishIndicationEhRN3hei12SharedBufferIhEE>

08006bd4 <_ZN3app24AccelerometerApplication12processEventEv>:

EventStatus AccelerometerApplication::processEvent()
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
	eMainState newState = _currentState;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	7c1b      	ldrb	r3, [r3, #16]
 8006be0:	73fb      	strb	r3, [r7, #15]

	switch (_currentState)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	7c1b      	ldrb	r3, [r3, #16]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	dc02      	bgt.n	8006bf0 <_ZN3app24AccelerometerApplication12processEventEv+0x1c>
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	da03      	bge.n	8006bf6 <_ZN3app24AccelerometerApplication12processEventEv+0x22>
 8006bee:	e036      	b.n	8006c5e <_ZN3app24AccelerometerApplication12processEventEv+0x8a>
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d013      	beq.n	8006c1c <_ZN3app24AccelerometerApplication12processEventEv+0x48>
 8006bf4:	e033      	b.n	8006c5e <_ZN3app24AccelerometerApplication12processEventEv+0x8a>
	{
	case STATE_UNKOWN:
	case STATE_INITIAL:
		if (getCurrentEvent()->getEventType() == IXFEvent::Initial)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f00d fd15 	bl	8014628 <_ZNK10XFReactive15getCurrentEventEv>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7ff fe96 	bl	8006932 <_ZNK8IXFEvent12getEventTypeEv>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	bf0c      	ite	eq
 8006c0c:	2301      	moveq	r3, #1
 8006c0e:	2300      	movne	r3, #0
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d020      	beq.n	8006c58 <_ZN3app24AccelerometerApplication12processEventEv+0x84>
		{
			newState = STATE_ROOT;	// Move to state ROOT
 8006c16:	2302      	movs	r3, #2
 8006c18:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8006c1a:	e01d      	b.n	8006c58 <_ZN3app24AccelerometerApplication12processEventEv+0x84>
	case STATE_ROOT:
		if (getCurrentEvent()->getEventType() == IXFEvent::Event &&
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f00d fd02 	bl	8014628 <_ZNK10XFReactive15getCurrentEventEv>
 8006c24:	4603      	mov	r3, r0
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7ff fe83 	bl	8006932 <_ZNK8IXFEvent12getEventTypeEv>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	d10c      	bne.n	8006c4c <_ZN3app24AccelerometerApplication12processEventEv+0x78>
			getCurrentEvent()->getId() == EV_SV_SYNC_id)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f00d fcf7 	bl	8014628 <_ZNK10XFReactive15getCurrentEventEv>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7ff fe85 	bl	800694c <_ZNK8IXFEvent5getIdEv>
 8006c42:	4603      	mov	r3, r0
		if (getCurrentEvent()->getEventType() == IXFEvent::Event &&
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d101      	bne.n	8006c4c <_ZN3app24AccelerometerApplication12processEventEv+0x78>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e000      	b.n	8006c4e <_ZN3app24AccelerometerApplication12processEventEv+0x7a>
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d004      	beq.n	8006c5c <_ZN3app24AccelerometerApplication12processEventEv+0x88>
		{
			newState = STATE_ROOT;	// Stay in state
 8006c52:	2302      	movs	r3, #2
 8006c54:	73fb      	strb	r3, [r7, #15]
#if (ACCELEROMETER_APP_VERBOSE != 0)
			// Show actual accelerometer values
			Trace::outln("App: acc (%5d, %5d, %5d)", _accelValuesSyncArray[0], _accelValuesSyncArray[1], _accelValuesSyncArray[2]);
#endif
		}
		break;
 8006c56:	e001      	b.n	8006c5c <_ZN3app24AccelerometerApplication12processEventEv+0x88>
		break;
 8006c58:	bf00      	nop
 8006c5a:	e000      	b.n	8006c5e <_ZN3app24AccelerometerApplication12processEventEv+0x8a>
		break;
 8006c5c:	bf00      	nop
	}

	_currentState = newState;		// Save new state to actual
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	7bfa      	ldrb	r2, [r7, #15]
 8006c62:	741a      	strb	r2, [r3, #16]

	return EventStatus::Consumed;	// We consume all given events/timeouts
 8006c64:	f107 030c 	add.w	r3, r7, #12
 8006c68:	2101      	movs	r1, #1
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7ff fe7a 	bl	8006964 <_ZN11EventStatusC1ENS_12eEventStatusE>
 8006c70:	7b3b      	ldrb	r3, [r7, #12]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <_ZN3app24AccelerometerApplication13accelerometerEv>:

board::Accelerometer & AccelerometerApplication::accelerometer()
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b082      	sub	sp, #8
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
	return Factory::instance().accelerometer();
 8006c82:	f7ff fec7 	bl	8006a14 <_ZN3app7Factory8instanceEv>
 8006c86:	4603      	mov	r3, r0
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 fb35 	bl	80072f8 <_ZNK3app7Factory13accelerometerEv>
 8006c8e:	4603      	mov	r3, r0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3708      	adds	r7, #8
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <_ZN3app24AccelerometerApplication24_readAccelerometerValuesEv>:

void AccelerometerApplication::_readAccelerometerValues()
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
	accelerometer().getAccelerationValues(_accelValuesSyncArray[0],	/* x */
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f7ff ffea 	bl	8006c7a <_ZN3app24AccelerometerApplication13accelerometerEv>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f103 0012 	add.w	r0, r3, #18
										  _accelValuesSyncArray[1],	/* x */
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f103 0114 	add.w	r1, r3, #20
										  _accelValuesSyncArray[2]	/* z */);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	3316      	adds	r3, #22
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f008 f8aa 	bl	800ee10 <_ZN5board13Accelerometer21getAccelerationValuesERsS1_S1_>
}
 8006cbc:	bf00      	nop
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>:
	/**
	 * @brief Initializer-list constructor
	 *
	 * Allows to initializes an address with an array initializer.
	 */
	Address(std::initializer_list<uint8_t> from)
 8006cc4:	b590      	push	{r4, r7, lr}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	1d3b      	adds	r3, r7, #4
 8006cce:	e883 0006 	stmia.w	r3, {r1, r2}
	{
 8006cd2:	4a12      	ldr	r2, [pc, #72]	; (8006d1c <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE+0x58>)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	601a      	str	r2, [r3, #0]
		assert(from.size() == size);
 8006cd8:	1d3b      	adds	r3, r7, #4
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7ff fe52 	bl	8006984 <_ZNKSt16initializer_listIhE4sizeEv>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b04      	cmp	r3, #4
 8006ce4:	d005      	beq.n	8006cf2 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE+0x2e>
 8006ce6:	4b0e      	ldr	r3, [pc, #56]	; (8006d20 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE+0x5c>)
 8006ce8:	4a0e      	ldr	r2, [pc, #56]	; (8006d24 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE+0x60>)
 8006cea:	2131      	movs	r1, #49	; 0x31
 8006cec:	480e      	ldr	r0, [pc, #56]	; (8006d28 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE+0x64>)
 8006cee:	f00f fca5 	bl	801663c <__assert_func>
		std::copy(from.begin(), from.end(), _address);
 8006cf2:	1d3b      	adds	r3, r7, #4
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7ff fe51 	bl	800699c <_ZNKSt16initializer_listIhE5beginEv>
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	1d3b      	adds	r3, r7, #4
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 f824 	bl	8006d4c <_ZNKSt16initializer_listIhE3endEv>
 8006d04:	4601      	mov	r1, r0
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	3304      	adds	r3, #4
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f000 f82e 	bl	8006d6e <_ZSt4copyIPKhPhET0_T_S4_S3_>
	}
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	4618      	mov	r0, r3
 8006d16:	3714      	adds	r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd90      	pop	{r4, r7, pc}
 8006d1c:	0801bdb8 	.word	0x0801bdb8
 8006d20:	08017ce8 	.word	0x08017ce8
 8006d24:	08017cfc 	.word	0x08017cfc
 8006d28:	08017d5c 	.word	0x08017d5c

08006d2c <_ZN3hei12SharedBufferIhEixEj>:
         * @brief Returns a reference to the element at specified location pos. No bounds checking is performed.
         *
         * @param pos   Position of the element to return.
         * @return      Reference to the requested element.
         */
        reference operator [](sizeType pos) {
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
            return data_.get()[pos];
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 f830 	bl	8006d9e <_ZNKSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	4413      	add	r3, r2
        }
 8006d44:	4618      	mov	r0, r3
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <_ZNKSt16initializer_listIhE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8006d4c:	b590      	push	{r4, r7, lr}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f7ff fe21 	bl	800699c <_ZNKSt16initializer_listIhE5beginEv>
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff fe11 	bl	8006984 <_ZNKSt16initializer_listIhE4sizeEv>
 8006d62:	4603      	mov	r3, r0
 8006d64:	4423      	add	r3, r4
 8006d66:	4618      	mov	r0, r3
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd90      	pop	{r4, r7, pc}

08006d6e <_ZSt4copyIPKhPhET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8006d6e:	b590      	push	{r4, r7, lr}
 8006d70:	b085      	sub	sp, #20
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	60f8      	str	r0, [r7, #12]
 8006d76:	60b9      	str	r1, [r7, #8]
 8006d78:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f000 f81b 	bl	8006db6 <_ZSt12__miter_baseIPKhET_S2_>
 8006d80:	4604      	mov	r4, r0
 8006d82:	68b8      	ldr	r0, [r7, #8]
 8006d84:	f000 f817 	bl	8006db6 <_ZSt12__miter_baseIPKhET_S2_>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f000 f81c 	bl	8006dcc <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>
 8006d94:	4603      	mov	r3, r0
    }
 8006d96:	4618      	mov	r0, r3
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd90      	pop	{r4, r7, pc}

08006d9e <_ZNKSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	_SafeConv<_Yp>
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      element_type*
      get() const noexcept
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4618      	mov	r0, r3
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <_ZSt12__miter_baseIPKhET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8006db6:	b480      	push	{r7}
 8006db8:	b083      	sub	sp, #12
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006dcc:	b5b0      	push	{r4, r5, r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f000 f81a 	bl	8006e12 <_ZSt12__niter_baseIPKhET_S2_>
 8006dde:	4604      	mov	r4, r0
 8006de0:	68b8      	ldr	r0, [r7, #8]
 8006de2:	f000 f816 	bl	8006e12 <_ZSt12__niter_baseIPKhET_S2_>
 8006de6:	4605      	mov	r5, r0
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f000 f81c 	bl	8006e28 <_ZSt12__niter_baseIPhET_S1_>
 8006df0:	4603      	mov	r3, r0
 8006df2:	461a      	mov	r2, r3
 8006df4:	4629      	mov	r1, r5
 8006df6:	4620      	mov	r0, r4
 8006df8:	f000 f821 	bl	8006e3e <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	1d3b      	adds	r3, r7, #4
 8006e00:	4611      	mov	r1, r2
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 f82d 	bl	8006e62 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8006e08:	4603      	mov	r3, r0
    }
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bdb0      	pop	{r4, r5, r7, pc}

08006e12 <_ZSt12__niter_baseIPKhET_S2_>:
    __niter_base(_Iterator __it)
 8006e12:	b480      	push	{r7}
 8006e14:	b083      	sub	sp, #12
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4618      	mov	r0, r3
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b086      	sub	sp, #24
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	68b9      	ldr	r1, [r7, #8]
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 f811 	bl	8006e7a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8006e58:	4603      	mov	r3, r0
    }
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3718      	adds	r7, #24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006e62:	b480      	push	{r7}
 8006e64:	b083      	sub	sp, #12
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
 8006e6a:	6039      	str	r1, [r7, #0]
    { return __res; }
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b086      	sub	sp, #24
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	60f8      	str	r0, [r7, #12]
 8006e82:	60b9      	str	r1, [r7, #8]
 8006e84:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d005      	beq.n	8006ea0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	461a      	mov	r2, r3
 8006e98:	68f9      	ldr	r1, [r7, #12]
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f00f fc4c 	bl	8016738 <memmove>
	  return __result + _Num;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	4413      	add	r3, r2
	}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3718      	adds	r7, #24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
	...

08006eb0 <_Z41__static_initialization_and_destruction_0ii>:
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b088      	sub	sp, #32
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d122      	bne.n	8006f06 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d11d      	bne.n	8006f06 <_Z41__static_initialization_and_destruction_0ii+0x56>
#define NRFTRANSCEIVER_TRACE_VERBOSE 	1

#define DESNET_NODE_NAME				"SENSOR"

#ifdef __cplusplus
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 8006eca:	4b18      	ldr	r3, [pc, #96]	; (8006f2c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	613b      	str	r3, [r7, #16]
 8006ed0:	f107 0310 	add.w	r3, r7, #16
 8006ed4:	60bb      	str	r3, [r7, #8]
 8006ed6:	2304      	movs	r3, #4
 8006ed8:	60fb      	str	r3, [r7, #12]
 8006eda:	f107 0308 	add.w	r3, r7, #8
 8006ede:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006ee2:	4813      	ldr	r0, [pc, #76]	; (8006f30 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006ee4:	f7ff feee 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
  static const desenet::Address SENSOR_ADDRESS({0xC7, 0xC7, 0xC7, 0xC7});	///< @brief Sensor's reception address.
 8006ee8:	4b12      	ldr	r3, [pc, #72]	; (8006f34 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	61fb      	str	r3, [r7, #28]
 8006eee:	f107 031c 	add.w	r3, r7, #28
 8006ef2:	617b      	str	r3, [r7, #20]
 8006ef4:	2304      	movs	r3, #4
 8006ef6:	61bb      	str	r3, [r7, #24]
 8006ef8:	f107 0314 	add.w	r3, r7, #20
 8006efc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006f00:	480d      	ldr	r0, [pc, #52]	; (8006f38 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006f02:	f7ff fedf 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10a      	bne.n	8006f22 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d105      	bne.n	8006f22 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8006f16:	4808      	ldr	r0, [pc, #32]	; (8006f38 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006f18:	f000 f810 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 8006f1c:	4804      	ldr	r0, [pc, #16]	; (8006f30 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006f1e:	f000 f80d 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
 8006f22:	bf00      	nop
 8006f24:	3720      	adds	r7, #32
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	08017dd4 	.word	0x08017dd4
 8006f30:	200000a0 	.word	0x200000a0
 8006f34:	08017dd8 	.word	0x08017dd8
 8006f38:	200000a8 	.word	0x200000a8

08006f3c <_ZN3phy7AddressILj4EED1Ev>:

	/**
	 * @brief Destructor, actually it does nothing @ all.
	 */
	virtual ~Address()
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
	{}
 8006f44:	4a04      	ldr	r2, [pc, #16]	; (8006f58 <_ZN3phy7AddressILj4EED1Ev+0x1c>)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	0801bdb8 	.word	0x0801bdb8

08006f5c <_ZN3phy7AddressILj4EED0Ev>:
	virtual ~Address()
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
	{}
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f7ff ffe9 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
 8006f6a:	2108      	movs	r1, #8
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f00f fa77 	bl	8016460 <_ZdlPvj>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4618      	mov	r0, r3
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <_GLOBAL__sub_I__ZN3app24AccelerometerApplicationC2Ev>:
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006f84:	2001      	movs	r0, #1
 8006f86:	f7ff ff93 	bl	8006eb0 <_Z41__static_initialization_and_destruction_0ii>
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <_GLOBAL__sub_D__ZN3app24AccelerometerApplicationC2Ev>:
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006f94:	2000      	movs	r0, #0
 8006f96:	f7ff ff8b 	bl	8006eb0 <_Z41__static_initialization_and_destruction_0ii>
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <_ZN18IMonochromeDisplay5PointC1ESt16initializer_listIhE>:
		 *
		 * @param x The X coordinate.
		 * @param y The Y coordinate.
		 */
		inline explicit Point( int x = 0 , int y = 0 ) : x( x ) , y( y ) {}
		inline Point(std::initializer_list<uint8_t> values)
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	1d3b      	adds	r3, r7, #4
 8006fa6:	e883 0006 	stmia.w	r3, {r1, r2}
		{
			assert(values.size() == 2);
 8006faa:	1d3b      	adds	r3, r7, #4
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7ff fce9 	bl	8006984 <_ZNKSt16initializer_listIhE4sizeEv>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d005      	beq.n	8006fc4 <_ZN18IMonochromeDisplay5PointC1ESt16initializer_listIhE+0x28>
 8006fb8:	4b0d      	ldr	r3, [pc, #52]	; (8006ff0 <_ZN18IMonochromeDisplay5PointC1ESt16initializer_listIhE+0x54>)
 8006fba:	4a0e      	ldr	r2, [pc, #56]	; (8006ff4 <_ZN18IMonochromeDisplay5PointC1ESt16initializer_listIhE+0x58>)
 8006fbc:	213e      	movs	r1, #62	; 0x3e
 8006fbe:	480e      	ldr	r0, [pc, #56]	; (8006ff8 <_ZN18IMonochromeDisplay5PointC1ESt16initializer_listIhE+0x5c>)
 8006fc0:	f00f fb3c 	bl	801663c <__assert_func>
			std::initializer_list<uint8_t>::const_iterator it = values.begin();
 8006fc4:	1d3b      	adds	r3, r7, #4
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7ff fce8 	bl	800699c <_ZNKSt16initializer_listIhE5beginEv>
 8006fcc:	6178      	str	r0, [r7, #20]

			x = *it++;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	617a      	str	r2, [r7, #20]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	601a      	str	r2, [r3, #0]
			y = *it;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	605a      	str	r2, [r3, #4]
		}
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3718      	adds	r7, #24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	08017ddc 	.word	0x08017ddc
 8006ff4:	08017df0 	.word	0x08017df0
 8006ff8:	08017e38 	.word	0x08017e38

08006ffc <_ZN5board13AccelerometerC1Ev>:
 * @brief Class interfacing the real accelerometer hardware.
 */
class Accelerometer
{
public:
	Accelerometer() {}
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4618      	mov	r0, r3
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <_ZN5board13AccelerometerD1Ev>:
	~Accelerometer() {}
 8007012:	b480      	push	{r7}
 8007014:	b083      	sub	sp, #12
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4618      	mov	r0, r3
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <_ZN9Clockwork10initializeEv>:
{
public:
	Clockwork();
	~Clockwork();

	void initialize() {}
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <_ZN3app7FactoryC1EiPPc>:

namespace app {

Factory * Factory::_pInstance(nullptr);

Factory::Factory(int argc, char ** argv)
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
{
    (void)(argc); (void)(argv);

    assert(!_pInstance);
 8007048:	4b08      	ldr	r3, [pc, #32]	; (800706c <_ZN3app7FactoryC1EiPPc+0x30>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d005      	beq.n	800705c <_ZN3app7FactoryC1EiPPc+0x20>
 8007050:	4b07      	ldr	r3, [pc, #28]	; (8007070 <_ZN3app7FactoryC1EiPPc+0x34>)
 8007052:	4a08      	ldr	r2, [pc, #32]	; (8007074 <_ZN3app7FactoryC1EiPPc+0x38>)
 8007054:	211e      	movs	r1, #30
 8007056:	4808      	ldr	r0, [pc, #32]	; (8007078 <_ZN3app7FactoryC1EiPPc+0x3c>)
 8007058:	f00f faf0 	bl	801663c <__assert_func>
    _pInstance = this;
 800705c:	4a03      	ldr	r2, [pc, #12]	; (800706c <_ZN3app7FactoryC1EiPPc+0x30>)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6013      	str	r3, [r2, #0]
                break;
            }
        }
    }
#endif // TC_MESHSIM
}
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	200000c0 	.word	0x200000c0
 8007070:	08017f74 	.word	0x08017f74
 8007074:	08017f80 	.word	0x08017f80
 8007078:	08017fa4 	.word	0x08017fa4

0800707c <_ZN3app7Factory16buildApplicationEv>:

void Factory::buildApplication()
{
 800707c:	b5b0      	push	{r4, r5, r7, lr}
 800707e:	b094      	sub	sp, #80	; 0x50
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
    board::initialize();	// Initialize board specific stuff
 8007084:	f007 fff8 	bl	800f078 <_ZN5board10initializeEv>

    Trace::outln("");
 8007088:	486f      	ldr	r0, [pc, #444]	; (8007248 <_ZN3app7Factory16buildApplicationEv+0x1cc>)
 800708a:	f008 fd67 	bl	800fb5c <_ZN5Trace5outlnEPKcz>
    Trace::outln("---------------------------------------------");
 800708e:	486f      	ldr	r0, [pc, #444]	; (800724c <_ZN3app7Factory16buildApplicationEv+0x1d0>)
 8007090:	f008 fd64 	bl	800fb5c <_ZN5Trace5outlnEPKcz>
    Trace::outln("-- Starting Desenet %s                 --", DESNET_NODE_NAME);
 8007094:	496e      	ldr	r1, [pc, #440]	; (8007250 <_ZN3app7Factory16buildApplicationEv+0x1d4>)
 8007096:	486f      	ldr	r0, [pc, #444]	; (8007254 <_ZN3app7Factory16buildApplicationEv+0x1d8>)
 8007098:	f008 fd60 	bl	800fb5c <_ZN5Trace5outlnEPKcz>
    Trace::outln("-- Compiled: %s %s          --", __DATE__, __TIME__);
 800709c:	4a6e      	ldr	r2, [pc, #440]	; (8007258 <_ZN3app7Factory16buildApplicationEv+0x1dc>)
 800709e:	496f      	ldr	r1, [pc, #444]	; (800725c <_ZN3app7Factory16buildApplicationEv+0x1e0>)
 80070a0:	486f      	ldr	r0, [pc, #444]	; (8007260 <_ZN3app7Factory16buildApplicationEv+0x1e4>)
 80070a2:	f008 fd5b 	bl	800fb5c <_ZN5Trace5outlnEPKcz>
    Trace::outln("---------------------------------------------");
 80070a6:	4869      	ldr	r0, [pc, #420]	; (800724c <_ZN3app7Factory16buildApplicationEv+0x1d0>)
 80070a8:	f008 fd58 	bl	800fb5c <_ZN5Trace5outlnEPKcz>
    // Initialize objects
    //
#ifdef TC_MESHSIM
    meshSimBoard().initialize();
#endif // TC_MESHSIM
    ledController().initialize();
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f9c9 	bl	8007444 <_ZNK3app7Factory13ledControllerEv>
 80070b2:	4603      	mov	r3, r0
 80070b4:	4618      	mov	r0, r3
 80070b6:	f008 fc4d 	bl	800f954 <_ZN13LedController10initializeEv>
    clockwork().initialize();
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f990 	bl	80073e0 <_ZNK3app7Factory9clockworkEv>
 80070c0:	4603      	mov	r3, r0
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7ff ffb0 	bl	8007028 <_ZN9Clockwork10initializeEv>
    accelerometer().initialize();
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f915 	bl	80072f8 <_ZNK3app7Factory13accelerometerEv>
 80070ce:	4603      	mov	r3, r0
 80070d0:	4618      	mov	r0, r3
 80070d2:	f007 fecd 	bl	800ee70 <_ZN5board13Accelerometer10initializeEv>
    net().initialize(__SLOT_NUMBER);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f948 	bl	800736c <_ZNK3app7Factory3netEv>
 80070dc:	4603      	mov	r3, r0
 80070de:	4961      	ldr	r1, [pc, #388]	; (8007264 <_ZN3app7Factory16buildApplicationEv+0x1e8>)
 80070e0:	4618      	mov	r0, r3
 80070e2:	f003 ff0d 	bl	800af00 <_ZN7desenet6sensor3Net10initializeERKh>
#ifdef USE_DISPLAY
    display().initialize();
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fa06 	bl	80074f8 <_ZN3app7Factory7displayEv>
 80070ec:	4603      	mov	r3, r0
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	3210      	adds	r2, #16
 80070f2:	6812      	ldr	r2, [r2, #0]
 80070f4:	4618      	mov	r0, r3
 80070f6:	4790      	blx	r2
#endif // USE_DISPLAY

    // Initialize applications
    accelerometerApplication().initialize();
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f8c3 	bl	8007284 <_ZNK3app7Factory24accelerometerApplicationEv>
 80070fe:	4603      	mov	r3, r0
 8007100:	4618      	mov	r0, r3
 8007102:	f7ff fcfd 	bl	8006b00 <_ZN3app24AccelerometerApplication10initializeEv>
    joystickApplication().initialize();
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f9b0 	bl	800746c <_ZNK3app7Factory19joystickApplicationEv>
 800710c:	4603      	mov	r3, r0
 800710e:	4618      	mov	r0, r3
 8007110:	f000 fbba 	bl	8007888 <_ZN3app19JoystickApplication10initializeEv>

    //
    // Initialize relations for the joystick app
    //
    joystick().initialize();
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 f9db 	bl	80074d0 <_ZNK3app7Factory8joystickEv>
 800711a:	4603      	mov	r3, r0
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	3208      	adds	r2, #8
 8007120:	6812      	ldr	r2, [r2, #0]
 8007122:	4618      	mov	r0, r3
 8007124:	4790      	blx	r2
    joystick().setObserver(&joystickApplication());
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f9d2 	bl	80074d0 <_ZNK3app7Factory8joystickEv>
 800712c:	4604      	mov	r4, r0
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	330c      	adds	r3, #12
 8007132:	681d      	ldr	r5, [r3, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f999 	bl	800746c <_ZNK3app7Factory19joystickApplicationEv>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d001      	beq.n	8007144 <_ZN3app7Factory16buildApplicationEv+0xc8>
 8007140:	3310      	adds	r3, #16
 8007142:	e000      	b.n	8007146 <_ZN3app7Factory16buildApplicationEv+0xca>
 8007144:	2300      	movs	r3, #0
 8007146:	4619      	mov	r1, r3
 8007148:	4620      	mov	r0, r4
 800714a:	47a8      	blx	r5

#ifdef USE_DISPLAY
    char str[32];
    display().clear();
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f9d3 	bl	80074f8 <_ZN3app7Factory7displayEv>
 8007152:	4603      	mov	r3, r0
 8007154:	4618      	mov	r0, r3
 8007156:	f009 ff03 	bl	8010f60 <_ZN13SimpleDisplay5clearEv>
#ifdef TC_STM32CUBEIDE
// Supporting for the moment two different display types:
// ePaper Display on Nucleo board
    // Draw title on display
    display().drawText(DESNET_NODE_NAME, 46, 2);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f9cc 	bl	80074f8 <_ZN3app7Factory7displayEv>
 8007160:	2302      	movs	r3, #2
 8007162:	222e      	movs	r2, #46	; 0x2e
 8007164:	493a      	ldr	r1, [pc, #232]	; (8007250 <_ZN3app7Factory16buildApplicationEv+0x1d4>)
 8007166:	f009 ff1b 	bl	8010fa0 <_ZN13SimpleDisplay8drawTextEPKctt>
    display().drawLine({5, 50}, {SimpleDisplay::X_MAX - 5, 50});
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f9c4 	bl	80074f8 <_ZN3app7Factory7displayEv>
 8007170:	4604      	mov	r4, r0
 8007172:	4b3d      	ldr	r3, [pc, #244]	; (8007268 <_ZN3app7Factory16buildApplicationEv+0x1ec>)
 8007174:	881b      	ldrh	r3, [r3, #0]
 8007176:	873b      	strh	r3, [r7, #56]	; 0x38
 8007178:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800717c:	633b      	str	r3, [r7, #48]	; 0x30
 800717e:	2302      	movs	r3, #2
 8007180:	637b      	str	r3, [r7, #52]	; 0x34
 8007182:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8007186:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800718a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800718e:	f7ff ff05 	bl	8006f9c <_ZN18IMonochromeDisplay5PointC1ESt16initializer_listIhE>
 8007192:	4b36      	ldr	r3, [pc, #216]	; (800726c <_ZN3app7Factory16buildApplicationEv+0x1f0>)
 8007194:	881b      	ldrh	r3, [r3, #0]
 8007196:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800719a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800719e:	647b      	str	r3, [r7, #68]	; 0x44
 80071a0:	2302      	movs	r3, #2
 80071a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80071a4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80071a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80071ac:	e893 0006 	ldmia.w	r3, {r1, r2}
 80071b0:	f7ff fef4 	bl	8006f9c <_ZN18IMonochromeDisplay5PointC1ESt16initializer_listIhE>
 80071b4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80071b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80071bc:	4619      	mov	r1, r3
 80071be:	4620      	mov	r0, r4
 80071c0:	f009 ff3d 	bl	801103e <_ZN13SimpleDisplay8drawLineERKN18IMonochromeDisplay5PointES3_>
    sprintf(str, "Slot #: %d", __SLOT_NUMBER);
 80071c4:	4b27      	ldr	r3, [pc, #156]	; (8007264 <_ZN3app7Factory16buildApplicationEv+0x1e8>)
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	461a      	mov	r2, r3
 80071ca:	f107 0308 	add.w	r3, r7, #8
 80071ce:	4928      	ldr	r1, [pc, #160]	; (8007270 <_ZN3app7Factory16buildApplicationEv+0x1f4>)
 80071d0:	4618      	mov	r0, r3
 80071d2:	f00f ff69 	bl	80170a8 <siprintf>
    display().drawText(str, 5, 10);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f98e 	bl	80074f8 <_ZN3app7Factory7displayEv>
 80071dc:	f107 0108 	add.w	r1, r7, #8
 80071e0:	230a      	movs	r3, #10
 80071e2:	2205      	movs	r2, #5
 80071e4:	f009 fedc 	bl	8010fa0 <_ZN13SimpleDisplay8drawTextEPKctt>
#endif // USE_DISPLAY

    //
    // Start threads and state-machines
    //
    ledController().start();
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f92b 	bl	8007444 <_ZNK3app7Factory13ledControllerEv>
 80071ee:	4603      	mov	r3, r0
 80071f0:	4618      	mov	r0, r3
 80071f2:	f008 fbc4 	bl	800f97e <_ZN13LedController5startEv>
    clockwork().start();
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f8f2 	bl	80073e0 <_ZNK3app7Factory9clockworkEv>
 80071fc:	4603      	mov	r3, r0
 80071fe:	4618      	mov	r0, r3
 8007200:	f001 f966 	bl	80084d0 <_ZN9Clockwork5startEv>
    net().start();
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f8b1 	bl	800736c <_ZNK3app7Factory3netEv>
 800720a:	4603      	mov	r3, r0
 800720c:	4618      	mov	r0, r3
 800720e:	f003 fed5 	bl	800afbc <_ZN7desenet6sensor3Net5startEv>
    accelerometerApplication().start();
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f836 	bl	8007284 <_ZNK3app7Factory24accelerometerApplicationEv>
 8007218:	4603      	mov	r3, r0
 800721a:	4618      	mov	r0, r3
 800721c:	f7ff fc86 	bl	8006b2c <_ZN3app24AccelerometerApplication5startEv>
    joystickApplication().start();
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f923 	bl	800746c <_ZNK3app7Factory19joystickApplicationEv>
 8007226:	4603      	mov	r3, r0
 8007228:	4618      	mov	r0, r3
 800722a:	f000 fb3a 	bl	80078a2 <_ZN3app19JoystickApplication5startEv>
    joystick().start();
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f94e 	bl	80074d0 <_ZNK3app7Factory8joystickEv>
 8007234:	4603      	mov	r3, r0
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	3210      	adds	r2, #16
 800723a:	6812      	ldr	r2, [r2, #0]
 800723c:	4618      	mov	r0, r3
 800723e:	4790      	blx	r2
}
 8007240:	bf00      	nop
 8007242:	3750      	adds	r7, #80	; 0x50
 8007244:	46bd      	mov	sp, r7
 8007246:	bdb0      	pop	{r4, r5, r7, pc}
 8007248:	0801800c 	.word	0x0801800c
 800724c:	08018010 	.word	0x08018010
 8007250:	08018040 	.word	0x08018040
 8007254:	08018048 	.word	0x08018048
 8007258:	08018074 	.word	0x08018074
 800725c:	08018080 	.word	0x08018080
 8007260:	0801808c 	.word	0x0801808c
 8007264:	20000009 	.word	0x20000009
 8007268:	080180b8 	.word	0x080180b8
 800726c:	080180bc 	.word	0x080180bc
 8007270:	080180ac 	.word	0x080180ac

08007274 <__tcf_0>:
}
#endif // TC_MESHSIM

app::AccelerometerApplication & Factory::accelerometerApplication() const
{
    static app::AccelerometerApplication accelerometerApp;
 8007274:	b580      	push	{r7, lr}
 8007276:	af00      	add	r7, sp, #0
 8007278:	4801      	ldr	r0, [pc, #4]	; (8007280 <__tcf_0+0xc>)
 800727a:	f7ff fc0d 	bl	8006a98 <_ZN3app24AccelerometerApplicationD1Ev>
 800727e:	bd80      	pop	{r7, pc}
 8007280:	200000c4 	.word	0x200000c4

08007284 <_ZNK3app7Factory24accelerometerApplicationEv>:
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
    static app::AccelerometerApplication accelerometerApp;
 800728c:	4b13      	ldr	r3, [pc, #76]	; (80072dc <_ZNK3app7Factory24accelerometerApplicationEv+0x58>)
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	f3bf 8f5b 	dmb	ish
 8007294:	b2db      	uxtb	r3, r3
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	2b00      	cmp	r3, #0
 800729c:	bf0c      	ite	eq
 800729e:	2301      	moveq	r3, #1
 80072a0:	2300      	movne	r3, #0
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d013      	beq.n	80072d0 <_ZNK3app7Factory24accelerometerApplicationEv+0x4c>
 80072a8:	480c      	ldr	r0, [pc, #48]	; (80072dc <_ZNK3app7Factory24accelerometerApplicationEv+0x58>)
 80072aa:	f00f f8dd 	bl	8016468 <__cxa_guard_acquire>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	bf14      	ite	ne
 80072b4:	2301      	movne	r3, #1
 80072b6:	2300      	moveq	r3, #0
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d008      	beq.n	80072d0 <_ZNK3app7Factory24accelerometerApplicationEv+0x4c>
 80072be:	4808      	ldr	r0, [pc, #32]	; (80072e0 <_ZNK3app7Factory24accelerometerApplicationEv+0x5c>)
 80072c0:	f7ff fbc0 	bl	8006a44 <_ZN3app24AccelerometerApplicationC1Ev>
 80072c4:	4805      	ldr	r0, [pc, #20]	; (80072dc <_ZNK3app7Factory24accelerometerApplicationEv+0x58>)
 80072c6:	f00f f8db 	bl	8016480 <__cxa_guard_release>
 80072ca:	4806      	ldr	r0, [pc, #24]	; (80072e4 <_ZNK3app7Factory24accelerometerApplicationEv+0x60>)
 80072cc:	f00f f9d4 	bl	8016678 <atexit>

    return accelerometerApp;
 80072d0:	4b03      	ldr	r3, [pc, #12]	; (80072e0 <_ZNK3app7Factory24accelerometerApplicationEv+0x5c>)
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	200000dc 	.word	0x200000dc
 80072e0:	200000c4 	.word	0x200000c4
 80072e4:	08007275 	.word	0x08007275

080072e8 <__tcf_1>:

board::Accelerometer & Factory::accelerometer() const
{
    static board::Accelerometer accelerometer;
 80072e8:	b580      	push	{r7, lr}
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	4801      	ldr	r0, [pc, #4]	; (80072f4 <__tcf_1+0xc>)
 80072ee:	f7ff fe90 	bl	8007012 <_ZN5board13AccelerometerD1Ev>
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	200000e0 	.word	0x200000e0

080072f8 <_ZNK3app7Factory13accelerometerEv>:
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
    static board::Accelerometer accelerometer;
 8007300:	4b13      	ldr	r3, [pc, #76]	; (8007350 <_ZNK3app7Factory13accelerometerEv+0x58>)
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	f3bf 8f5b 	dmb	ish
 8007308:	b2db      	uxtb	r3, r3
 800730a:	f003 0301 	and.w	r3, r3, #1
 800730e:	2b00      	cmp	r3, #0
 8007310:	bf0c      	ite	eq
 8007312:	2301      	moveq	r3, #1
 8007314:	2300      	movne	r3, #0
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b00      	cmp	r3, #0
 800731a:	d013      	beq.n	8007344 <_ZNK3app7Factory13accelerometerEv+0x4c>
 800731c:	480c      	ldr	r0, [pc, #48]	; (8007350 <_ZNK3app7Factory13accelerometerEv+0x58>)
 800731e:	f00f f8a3 	bl	8016468 <__cxa_guard_acquire>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	bf14      	ite	ne
 8007328:	2301      	movne	r3, #1
 800732a:	2300      	moveq	r3, #0
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d008      	beq.n	8007344 <_ZNK3app7Factory13accelerometerEv+0x4c>
 8007332:	4808      	ldr	r0, [pc, #32]	; (8007354 <_ZNK3app7Factory13accelerometerEv+0x5c>)
 8007334:	f7ff fe62 	bl	8006ffc <_ZN5board13AccelerometerC1Ev>
 8007338:	4805      	ldr	r0, [pc, #20]	; (8007350 <_ZNK3app7Factory13accelerometerEv+0x58>)
 800733a:	f00f f8a1 	bl	8016480 <__cxa_guard_release>
 800733e:	4806      	ldr	r0, [pc, #24]	; (8007358 <_ZNK3app7Factory13accelerometerEv+0x60>)
 8007340:	f00f f99a 	bl	8016678 <atexit>

    return accelerometer;
 8007344:	4b03      	ldr	r3, [pc, #12]	; (8007354 <_ZNK3app7Factory13accelerometerEv+0x5c>)
}
 8007346:	4618      	mov	r0, r3
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	200000e4 	.word	0x200000e4
 8007354:	200000e0 	.word	0x200000e0
 8007358:	080072e9 	.word	0x080072e9

0800735c <__tcf_2>:

Net & Factory::net() const
{
    static Net net;
 800735c:	b580      	push	{r7, lr}
 800735e:	af00      	add	r7, sp, #0
 8007360:	4801      	ldr	r0, [pc, #4]	; (8007368 <__tcf_2+0xc>)
 8007362:	f003 fda5 	bl	800aeb0 <_ZN7desenet6sensor3NetD1Ev>
 8007366:	bd80      	pop	{r7, pc}
 8007368:	200000e8 	.word	0x200000e8

0800736c <_ZNK3app7Factory3netEv>:
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
    static Net net;
 8007374:	4b13      	ldr	r3, [pc, #76]	; (80073c4 <_ZNK3app7Factory3netEv+0x58>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	f3bf 8f5b 	dmb	ish
 800737c:	b2db      	uxtb	r3, r3
 800737e:	f003 0301 	and.w	r3, r3, #1
 8007382:	2b00      	cmp	r3, #0
 8007384:	bf0c      	ite	eq
 8007386:	2301      	moveq	r3, #1
 8007388:	2300      	movne	r3, #0
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2b00      	cmp	r3, #0
 800738e:	d013      	beq.n	80073b8 <_ZNK3app7Factory3netEv+0x4c>
 8007390:	480c      	ldr	r0, [pc, #48]	; (80073c4 <_ZNK3app7Factory3netEv+0x58>)
 8007392:	f00f f869 	bl	8016468 <__cxa_guard_acquire>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	bf14      	ite	ne
 800739c:	2301      	movne	r3, #1
 800739e:	2300      	moveq	r3, #0
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d008      	beq.n	80073b8 <_ZNK3app7Factory3netEv+0x4c>
 80073a6:	4808      	ldr	r0, [pc, #32]	; (80073c8 <_ZNK3app7Factory3netEv+0x5c>)
 80073a8:	f003 fd50 	bl	800ae4c <_ZN7desenet6sensor3NetC1Ev>
 80073ac:	4805      	ldr	r0, [pc, #20]	; (80073c4 <_ZNK3app7Factory3netEv+0x58>)
 80073ae:	f00f f867 	bl	8016480 <__cxa_guard_release>
 80073b2:	4806      	ldr	r0, [pc, #24]	; (80073cc <_ZNK3app7Factory3netEv+0x60>)
 80073b4:	f00f f960 	bl	8016678 <atexit>

    return net;
 80073b8:	4b03      	ldr	r3, [pc, #12]	; (80073c8 <_ZNK3app7Factory3netEv+0x5c>)
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	200001ac 	.word	0x200001ac
 80073c8:	200000e8 	.word	0x200000e8
 80073cc:	0800735d 	.word	0x0800735d

080073d0 <__tcf_3>:

Clockwork & Factory::clockwork() const
{
    static Clockwork cw;
 80073d0:	b580      	push	{r7, lr}
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	4801      	ldr	r0, [pc, #4]	; (80073dc <__tcf_3+0xc>)
 80073d6:	f001 f853 	bl	8008480 <_ZN9ClockworkD1Ev>
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	200001b0 	.word	0x200001b0

080073e0 <_ZNK3app7Factory9clockworkEv>:
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
    static Clockwork cw;
 80073e8:	4b13      	ldr	r3, [pc, #76]	; (8007438 <_ZNK3app7Factory9clockworkEv+0x58>)
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	f3bf 8f5b 	dmb	ish
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	bf0c      	ite	eq
 80073fa:	2301      	moveq	r3, #1
 80073fc:	2300      	movne	r3, #0
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	d013      	beq.n	800742c <_ZNK3app7Factory9clockworkEv+0x4c>
 8007404:	480c      	ldr	r0, [pc, #48]	; (8007438 <_ZNK3app7Factory9clockworkEv+0x58>)
 8007406:	f00f f82f 	bl	8016468 <__cxa_guard_acquire>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	bf14      	ite	ne
 8007410:	2301      	movne	r3, #1
 8007412:	2300      	moveq	r3, #0
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d008      	beq.n	800742c <_ZNK3app7Factory9clockworkEv+0x4c>
 800741a:	4808      	ldr	r0, [pc, #32]	; (800743c <_ZNK3app7Factory9clockworkEv+0x5c>)
 800741c:	f000 fff6 	bl	800840c <_ZN9ClockworkC1Ev>
 8007420:	4805      	ldr	r0, [pc, #20]	; (8007438 <_ZNK3app7Factory9clockworkEv+0x58>)
 8007422:	f00f f82d 	bl	8016480 <__cxa_guard_release>
 8007426:	4806      	ldr	r0, [pc, #24]	; (8007440 <_ZNK3app7Factory9clockworkEv+0x60>)
 8007428:	f00f f926 	bl	8016678 <atexit>

    return cw;
 800742c:	4b03      	ldr	r3, [pc, #12]	; (800743c <_ZNK3app7Factory9clockworkEv+0x5c>)
}
 800742e:	4618      	mov	r0, r3
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	200001d0 	.word	0x200001d0
 800743c:	200001b0 	.word	0x200001b0
 8007440:	080073d1 	.word	0x080073d1

08007444 <_ZNK3app7Factory13ledControllerEv>:

LedController & Factory::ledController() const
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
    return LedController::instance();
 800744c:	f008 fa54 	bl	800f8f8 <_ZN13LedController8instanceEv>
 8007450:	4603      	mov	r3, r0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
	...

0800745c <__tcf_4>:

JoystickApplication &Factory::joystickApplication() const
{
    static app::JoystickApplication joystickApp; //return the joystick app
 800745c:	b580      	push	{r7, lr}
 800745e:	af00      	add	r7, sp, #0
 8007460:	4801      	ldr	r0, [pc, #4]	; (8007468 <__tcf_4+0xc>)
 8007462:	f000 f9cb 	bl	80077fc <_ZN3app19JoystickApplicationD1Ev>
 8007466:	bd80      	pop	{r7, pc}
 8007468:	200001d4 	.word	0x200001d4

0800746c <_ZNK3app7Factory19joystickApplicationEv>:
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
    static app::JoystickApplication joystickApp; //return the joystick app
 8007474:	4b13      	ldr	r3, [pc, #76]	; (80074c4 <_ZNK3app7Factory19joystickApplicationEv+0x58>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	f3bf 8f5b 	dmb	ish
 800747c:	b2db      	uxtb	r3, r3
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	bf0c      	ite	eq
 8007486:	2301      	moveq	r3, #1
 8007488:	2300      	movne	r3, #0
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b00      	cmp	r3, #0
 800748e:	d013      	beq.n	80074b8 <_ZNK3app7Factory19joystickApplicationEv+0x4c>
 8007490:	480c      	ldr	r0, [pc, #48]	; (80074c4 <_ZNK3app7Factory19joystickApplicationEv+0x58>)
 8007492:	f00e ffe9 	bl	8016468 <__cxa_guard_acquire>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	bf14      	ite	ne
 800749c:	2301      	movne	r3, #1
 800749e:	2300      	moveq	r3, #0
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d008      	beq.n	80074b8 <_ZNK3app7Factory19joystickApplicationEv+0x4c>
 80074a6:	4808      	ldr	r0, [pc, #32]	; (80074c8 <_ZNK3app7Factory19joystickApplicationEv+0x5c>)
 80074a8:	f000 f97a 	bl	80077a0 <_ZN3app19JoystickApplicationC1Ev>
 80074ac:	4805      	ldr	r0, [pc, #20]	; (80074c4 <_ZNK3app7Factory19joystickApplicationEv+0x58>)
 80074ae:	f00e ffe7 	bl	8016480 <__cxa_guard_release>
 80074b2:	4806      	ldr	r0, [pc, #24]	; (80074cc <_ZNK3app7Factory19joystickApplicationEv+0x60>)
 80074b4:	f00f f8e0 	bl	8016678 <atexit>
    return joystickApp;
 80074b8:	4b03      	ldr	r3, [pc, #12]	; (80074c8 <_ZNK3app7Factory19joystickApplicationEv+0x5c>)
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	200001ec 	.word	0x200001ec
 80074c8:	200001d4 	.word	0x200001d4
 80074cc:	0800745d 	.word	0x0800745d

080074d0 <_ZNK3app7Factory8joystickEv>:

board::Joystick &Factory::joystick() const //Get the current instance of the joystick
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
    return board::Joystick::instance();
 80074d8:	f007 fec4 	bl	800f264 <_ZN5board8Joystick8instanceEv>
 80074dc:	4603      	mov	r3, r0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
	...

080074e8 <__tcf_5>:

#ifdef USE_DISPLAY
SimpleDisplay & Factory::display()
{
    static SimpleDisplay display;
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	4801      	ldr	r0, [pc, #4]	; (80074f4 <__tcf_5+0xc>)
 80074ee:	f009 fd07 	bl	8010f00 <_ZN13SimpleDisplayD1Ev>
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	200001f0 	.word	0x200001f0

080074f8 <_ZN3app7Factory7displayEv>:
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
    static SimpleDisplay display;
 8007500:	4b13      	ldr	r3, [pc, #76]	; (8007550 <_ZN3app7Factory7displayEv+0x58>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	f3bf 8f5b 	dmb	ish
 8007508:	b2db      	uxtb	r3, r3
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	bf0c      	ite	eq
 8007512:	2301      	moveq	r3, #1
 8007514:	2300      	movne	r3, #0
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b00      	cmp	r3, #0
 800751a:	d013      	beq.n	8007544 <_ZN3app7Factory7displayEv+0x4c>
 800751c:	480c      	ldr	r0, [pc, #48]	; (8007550 <_ZN3app7Factory7displayEv+0x58>)
 800751e:	f00e ffa3 	bl	8016468 <__cxa_guard_acquire>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	bf14      	ite	ne
 8007528:	2301      	movne	r3, #1
 800752a:	2300      	moveq	r3, #0
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	d008      	beq.n	8007544 <_ZN3app7Factory7displayEv+0x4c>
 8007532:	4808      	ldr	r0, [pc, #32]	; (8007554 <_ZN3app7Factory7displayEv+0x5c>)
 8007534:	f009 fcd2 	bl	8010edc <_ZN13SimpleDisplayC1Ev>
 8007538:	4805      	ldr	r0, [pc, #20]	; (8007550 <_ZN3app7Factory7displayEv+0x58>)
 800753a:	f00e ffa1 	bl	8016480 <__cxa_guard_release>
 800753e:	4806      	ldr	r0, [pc, #24]	; (8007558 <_ZN3app7Factory7displayEv+0x60>)
 8007540:	f00f f89a 	bl	8016678 <atexit>

    return display;
 8007544:	4b03      	ldr	r3, [pc, #12]	; (8007554 <_ZN3app7Factory7displayEv+0x5c>)
}
 8007546:	4618      	mov	r0, r3
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	200015c8 	.word	0x200015c8
 8007554:	200001f0 	.word	0x200001f0
 8007558:	080074e9 	.word	0x080074e9

0800755c <Factory_init>:
#endif // USE_DISPLAY

} // namespace app

void Factory_init(int argc, char ** argv)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
    static app::Factory factory(argc, argv);
 8007566:	4b12      	ldr	r3, [pc, #72]	; (80075b0 <Factory_init+0x54>)
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	f3bf 8f5b 	dmb	ish
 800756e:	b2db      	uxtb	r3, r3
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	2b00      	cmp	r3, #0
 8007576:	bf0c      	ite	eq
 8007578:	2301      	moveq	r3, #1
 800757a:	2300      	movne	r3, #0
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	d012      	beq.n	80075a8 <Factory_init+0x4c>
 8007582:	480b      	ldr	r0, [pc, #44]	; (80075b0 <Factory_init+0x54>)
 8007584:	f00e ff70 	bl	8016468 <__cxa_guard_acquire>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	bf14      	ite	ne
 800758e:	2301      	movne	r3, #1
 8007590:	2300      	moveq	r3, #0
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	d007      	beq.n	80075a8 <Factory_init+0x4c>
 8007598:	683a      	ldr	r2, [r7, #0]
 800759a:	6879      	ldr	r1, [r7, #4]
 800759c:	4805      	ldr	r0, [pc, #20]	; (80075b4 <Factory_init+0x58>)
 800759e:	f7ff fd4d 	bl	800703c <_ZN3app7FactoryC1EiPPc>
 80075a2:	4803      	ldr	r0, [pc, #12]	; (80075b0 <Factory_init+0x54>)
 80075a4:	f00e ff6c 	bl	8016480 <__cxa_guard_release>
}
 80075a8:	bf00      	nop
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	200015d0 	.word	0x200015d0
 80075b4:	200015cc 	.word	0x200015cc

080075b8 <Factory_buildApplication>:

void Factory_buildApplication()
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	af00      	add	r7, sp, #0
    app::Factory::instance().buildApplication();
 80075bc:	f7ff fa2a 	bl	8006a14 <_ZN3app7Factory8instanceEv>
 80075c0:	4603      	mov	r3, r0
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7ff fd5a 	bl	800707c <_ZN3app7Factory16buildApplicationEv>
}
 80075c8:	bf00      	nop
 80075ca:	bd80      	pop	{r7, pc}

080075cc <_Z41__static_initialization_and_destruction_0ii>:
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d122      	bne.n	8007622 <_Z41__static_initialization_and_destruction_0ii+0x56>
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d11d      	bne.n	8007622 <_Z41__static_initialization_and_destruction_0ii+0x56>
 80075e6:	4b18      	ldr	r3, [pc, #96]	; (8007648 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	613b      	str	r3, [r7, #16]
 80075ec:	f107 0310 	add.w	r3, r7, #16
 80075f0:	60bb      	str	r3, [r7, #8]
 80075f2:	2304      	movs	r3, #4
 80075f4:	60fb      	str	r3, [r7, #12]
 80075f6:	f107 0308 	add.w	r3, r7, #8
 80075fa:	e893 0006 	ldmia.w	r3, {r1, r2}
 80075fe:	4813      	ldr	r0, [pc, #76]	; (800764c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8007600:	f7ff fb60 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
  static const desenet::Address SENSOR_ADDRESS({0xC7, 0xC7, 0xC7, 0xC7});	///< @brief Sensor's reception address.
 8007604:	4b12      	ldr	r3, [pc, #72]	; (8007650 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	61fb      	str	r3, [r7, #28]
 800760a:	f107 031c 	add.w	r3, r7, #28
 800760e:	617b      	str	r3, [r7, #20]
 8007610:	2304      	movs	r3, #4
 8007612:	61bb      	str	r3, [r7, #24]
 8007614:	f107 0314 	add.w	r3, r7, #20
 8007618:	e893 0006 	ldmia.w	r3, {r1, r2}
 800761c:	480d      	ldr	r0, [pc, #52]	; (8007654 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800761e:	f7ff fb51 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10a      	bne.n	800763e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800762e:	4293      	cmp	r3, r2
 8007630:	d105      	bne.n	800763e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8007632:	4808      	ldr	r0, [pc, #32]	; (8007654 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8007634:	f7ff fc82 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 8007638:	4804      	ldr	r0, [pc, #16]	; (800764c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800763a:	f7ff fc7f 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
 800763e:	bf00      	nop
 8007640:	3720      	adds	r7, #32
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	080181ac 	.word	0x080181ac
 800764c:	200000b0 	.word	0x200000b0
 8007650:	080181b0 	.word	0x080181b0
 8007654:	200000b8 	.word	0x200000b8

08007658 <_GLOBAL__sub_I___SLOT_NUMBER>:
 8007658:	b580      	push	{r7, lr}
 800765a:	af00      	add	r7, sp, #0
 800765c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007660:	2001      	movs	r0, #1
 8007662:	f7ff ffb3 	bl	80075cc <_Z41__static_initialization_and_destruction_0ii>
 8007666:	bd80      	pop	{r7, pc}

08007668 <_GLOBAL__sub_D___SLOT_NUMBER>:
 8007668:	b580      	push	{r7, lr}
 800766a:	af00      	add	r7, sp, #0
 800766c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007670:	2000      	movs	r0, #0
 8007672:	f7ff ffab 	bl	80075cc <_Z41__static_initialization_and_destruction_0ii>
 8007676:	bd80      	pop	{r7, pc}

08007678 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	4618      	mov	r0, r3
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	1e5a      	subs	r2, r3, #1
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	605a      	str	r2, [r3, #4]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	bf0c      	ite	eq
 80076aa:	2301      	moveq	r3, #1
 80076ac:	2300      	movne	r3, #0
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d019      	beq.n	80076e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
          _M_dispose();
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	3308      	adds	r3, #8
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	1e5a      	subs	r2, r3, #1
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	609a      	str	r2, [r3, #8]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	bf0c      	ite	eq
 80076d2:	2301      	moveq	r3, #1
 80076d4:	2300      	movne	r3, #0
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d005      	beq.n	80076e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	330c      	adds	r3, #12
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	4798      	blx	r3
    }
 80076e8:	bf00      	nop
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <_ZN17IJoystickObserverC1Ev>:
 */
class IJoystickObserver
{
protected:
	// It is just an interface, so constructor and destructor should be not public.
	explicit IJoystickObserver() {}
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	4a04      	ldr	r2, [pc, #16]	; (800770c <_ZN17IJoystickObserverC1Ev+0x1c>)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4618      	mov	r0, r3
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	0801be38 	.word	0x0801be38

08007710 <_ZN17IJoystickObserverD1Ev>:
	virtual ~IJoystickObserver() {}
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	4a04      	ldr	r2, [pc, #16]	; (800772c <_ZN17IJoystickObserverD1Ev+0x1c>)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	601a      	str	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4618      	mov	r0, r3
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	0801be38 	.word	0x0801be38

08007730 <_ZN17IJoystickObserverD0Ev>:
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7ff ffe9 	bl	8007710 <_ZN17IJoystickObserverD1Ev>
 800773e:	2104      	movs	r1, #4
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f00e fe8d 	bl	8016460 <_ZdlPvj>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4618      	mov	r0, r3
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	3304      	adds	r3, #4
 800775c:	4618      	mov	r0, r3
 800775e:	f000 f9a7 	bl	8007ab0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4618      	mov	r0, r3
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <_ZNSt10shared_ptrIhED1Ev>:
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4618      	mov	r0, r3
 8007778:	f7ff ffea 	bl	8007750 <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <_ZN3hei12SharedBufferIhED1Ev>:
    class SharedBuffer {
 8007786:	b580      	push	{r7, lr}
 8007788:	b082      	sub	sp, #8
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4618      	mov	r0, r3
 8007792:	f7ff ffeb 	bl	800776c <_ZNSt10shared_ptrIhED1Ev>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4618      	mov	r0, r3
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <_ZN3app19JoystickApplicationC1Ev>:


using app::JoystickApplication;

//Initialize state and data
JoystickApplication::JoystickApplication() : currentState(STATE_NONE){
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2100      	movs	r1, #0
 80077ac:	4618      	mov	r0, r3
 80077ae:	f00c fe5d 	bl	801446c <_ZN10XFReactiveC1EP8XFThread>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	330c      	adds	r3, #12
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7ff f8fc 	bl	80069b4 <_ZN7desenet6sensor19AbstractApplicationC1Ev>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	3310      	adds	r3, #16
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7ff ff95 	bl	80076f0 <_ZN17IJoystickObserverC1Ev>
 80077c6:	4a0a      	ldr	r2, [pc, #40]	; (80077f0 <_ZN3app19JoystickApplicationC1Ev+0x50>)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	601a      	str	r2, [r3, #0]
 80077cc:	4a09      	ldr	r2, [pc, #36]	; (80077f4 <_ZN3app19JoystickApplicationC1Ev+0x54>)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	60da      	str	r2, [r3, #12]
 80077d2:	4a09      	ldr	r2, [pc, #36]	; (80077f8 <_ZN3app19JoystickApplicationC1Ev+0x58>)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	611a      	str	r2, [r3, #16]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	751a      	strb	r2, [r3, #20]
    joystickData = 0;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	755a      	strb	r2, [r3, #21]
}
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4618      	mov	r0, r3
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	0801bde4 	.word	0x0801bde4
 80077f4:	0801be0c 	.word	0x0801be0c
 80077f8:	0801be24 	.word	0x0801be24

080077fc <_ZN3app19JoystickApplicationD1Ev>:

JoystickApplication::~JoystickApplication(){} //Nothing special to do
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	4a0d      	ldr	r2, [pc, #52]	; (800783c <_ZN3app19JoystickApplicationD1Ev+0x40>)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	601a      	str	r2, [r3, #0]
 800780a:	4a0d      	ldr	r2, [pc, #52]	; (8007840 <_ZN3app19JoystickApplicationD1Ev+0x44>)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	60da      	str	r2, [r3, #12]
 8007810:	4a0c      	ldr	r2, [pc, #48]	; (8007844 <_ZN3app19JoystickApplicationD1Ev+0x48>)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	611a      	str	r2, [r3, #16]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	3310      	adds	r3, #16
 800781a:	4618      	mov	r0, r3
 800781c:	f7ff ff78 	bl	8007710 <_ZN17IJoystickObserverD1Ev>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	330c      	adds	r3, #12
 8007824:	4618      	mov	r0, r3
 8007826:	f7ff f8d5 	bl	80069d4 <_ZN7desenet6sensor19AbstractApplicationD1Ev>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4618      	mov	r0, r3
 800782e:	f00c fe3f 	bl	80144b0 <_ZN10XFReactiveD1Ev>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4618      	mov	r0, r3
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	0801bde4 	.word	0x0801bde4
 8007840:	0801be0c 	.word	0x0801be0c
 8007844:	0801be24 	.word	0x0801be24

08007848 <_ZThn12_N3app19JoystickApplicationD1Ev>:

class JoystickApplication : public XFReactive, public desenet::sensor::AbstractApplication, public IJoystickObserver
{
public:
    JoystickApplication();
    virtual ~JoystickApplication();
 8007848:	f1a0 000c 	sub.w	r0, r0, #12
 800784c:	f7ff bfd6 	b.w	80077fc <_ZN3app19JoystickApplicationD1Ev>

08007850 <_ZThn16_N3app19JoystickApplicationD1Ev>:
 8007850:	f1a0 0010 	sub.w	r0, r0, #16
 8007854:	f7ff bfd2 	b.w	80077fc <_ZN3app19JoystickApplicationD1Ev>

08007858 <_ZN3app19JoystickApplicationD0Ev>:
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f7ff ffcb 	bl	80077fc <_ZN3app19JoystickApplicationD1Ev>
 8007866:	2118      	movs	r1, #24
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f00e fdf9 	bl	8016460 <_ZdlPvj>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4618      	mov	r0, r3
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <_ZThn16_N3app19JoystickApplicationD0Ev>:
 8007878:	f1a0 0010 	sub.w	r0, r0, #16
 800787c:	f7ff bfec 	b.w	8007858 <_ZN3app19JoystickApplicationD0Ev>

08007880 <_ZThn12_N3app19JoystickApplicationD0Ev>:
 8007880:	f1a0 000c 	sub.w	r0, r0, #12
 8007884:	f7ff bfe8 	b.w	8007858 <_ZN3app19JoystickApplicationD0Ev>

08007888 <_ZN3app19JoystickApplication10initializeEv>:

void JoystickApplication::initialize(){
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
    //Sync registering
    svSyncRequest();
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	330c      	adds	r3, #12
 8007894:	4618      	mov	r0, r3
 8007896:	f003 fa37 	bl	800ad08 <_ZN7desenet6sensor19AbstractApplication13svSyncRequestEv>
}
 800789a:	bf00      	nop
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <_ZN3app19JoystickApplication5startEv>:

void JoystickApplication::start(){
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b082      	sub	sp, #8
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
    startBehavior(); // Start xfReactive behavior by generating initial event
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	3308      	adds	r3, #8
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4610      	mov	r0, r2
 80078b6:	4798      	blx	r3
}
 80078b8:	bf00      	nop
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <_ZN3app19JoystickApplication16onPositionChangeEN9IJoystick8PositionE>:

void JoystickApplication::onPositionChange(IJoystick::Position position){
 80078c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
    //qDebug() << "Position changed ! ";
    GEN(XFEvent(JOYSTICK_POSCHANGED_EVENT));
 80078ca:	687d      	ldr	r5, [r7, #4]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	330c      	adds	r3, #12
 80078d2:	681c      	ldr	r4, [r3, #0]
 80078d4:	2014      	movs	r0, #20
 80078d6:	f00e fdd6 	bl	8016486 <_Znwj>
 80078da:	4603      	mov	r3, r0
 80078dc:	461e      	mov	r6, r3
 80078de:	2200      	movs	r2, #0
 80078e0:	2101      	movs	r1, #1
 80078e2:	4630      	mov	r0, r6
 80078e4:	f00c fd12 	bl	801430c <_ZN7XFEventC1EiP11IXFReactive>
 80078e8:	4631      	mov	r1, r6
 80078ea:	4628      	mov	r0, r5
 80078ec:	47a0      	blx	r4
}
 80078ee:	bf00      	nop
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080078f6 <_ZThn16_N3app19JoystickApplication16onPositionChangeEN9IJoystick8PositionE>:
protected:
    board::Joystick & joystick();

    IJoystick::Position _readJoystickValue(); // Read actual joystick value

    void onPositionChange( IJoystick::Position position );
 80078f6:	f1a0 0010 	sub.w	r0, r0, #16
 80078fa:	f7ff bfe1 	b.w	80078c0 <_ZN3app19JoystickApplication16onPositionChangeEN9IJoystick8PositionE>
	...

08007900 <_ZN3app19JoystickApplication12processEventEv>:


EventStatus JoystickApplication::processEvent(){ //Processing state machine on event reception
 8007900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007902:	b089      	sub	sp, #36	; 0x24
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
    eSmState nState = currentState; // Maintain new state
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	7d1b      	ldrb	r3, [r3, #20]
 800790c:	77fb      	strb	r3, [r7, #31]
    SharedByteBuffer buff = SharedByteBuffer(1); // 1 byte shared buffer to contain joystick data
 800790e:	f107 0310 	add.w	r3, r7, #16
 8007912:	2101      	movs	r1, #1
 8007914:	4618      	mov	r0, r3
 8007916:	f000 f8ec 	bl	8007af2 <_ZN3hei12SharedBufferIhEC1Ej>
    IJoystick::Position currentPos; //Joystick position
    //qDebug() << "ENtering state machine with state " << currentState;
    switch(currentState){
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	7d1b      	ldrb	r3, [r3, #20]
 800791e:	2b03      	cmp	r3, #3
 8007920:	d03a      	beq.n	8007998 <_ZN3app19JoystickApplication12processEventEv+0x98>
 8007922:	2b03      	cmp	r3, #3
 8007924:	dc3e      	bgt.n	80079a4 <_ZN3app19JoystickApplication12processEventEv+0xa4>
 8007926:	2b01      	cmp	r3, #1
 8007928:	dc02      	bgt.n	8007930 <_ZN3app19JoystickApplication12processEventEv+0x30>
 800792a:	2b00      	cmp	r3, #0
 800792c:	da03      	bge.n	8007936 <_ZN3app19JoystickApplication12processEventEv+0x36>
 800792e:	e039      	b.n	80079a4 <_ZN3app19JoystickApplication12processEventEv+0xa4>
 8007930:	2b02      	cmp	r3, #2
 8007932:	d013      	beq.n	800795c <_ZN3app19JoystickApplication12processEventEv+0x5c>
 8007934:	e036      	b.n	80079a4 <_ZN3app19JoystickApplication12processEventEv+0xa4>
        case STATE_NONE:
            //Do nothing
        case STATE_INIT:
        //If received event is init then move to wait state
            if(getCurrentEvent()->getEventType() == IXFEvent::Initial){
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4618      	mov	r0, r3
 800793a:	f00c fe75 	bl	8014628 <_ZNK10XFReactive15getCurrentEventEv>
 800793e:	4603      	mov	r3, r0
 8007940:	4618      	mov	r0, r3
 8007942:	f7fe fff6 	bl	8006932 <_ZNK8IXFEvent12getEventTypeEv>
 8007946:	4603      	mov	r3, r0
 8007948:	2b01      	cmp	r3, #1
 800794a:	bf0c      	ite	eq
 800794c:	2301      	moveq	r3, #1
 800794e:	2300      	movne	r3, #0
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d023      	beq.n	800799e <_ZN3app19JoystickApplication12processEventEv+0x9e>
                nState = STATE_WAIT;
 8007956:	2302      	movs	r3, #2
 8007958:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800795a:	e020      	b.n	800799e <_ZN3app19JoystickApplication12processEventEv+0x9e>
        case STATE_WAIT:
        //need to check if the event received is a move event and if so, move to posChanged event
            if(getCurrentEvent()->getId() == JOYSTICK_POSCHANGED_EVENT && getCurrentEvent()->getEventType() == IXFEvent::Event){
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4618      	mov	r0, r3
 8007960:	f00c fe62 	bl	8014628 <_ZNK10XFReactive15getCurrentEventEv>
 8007964:	4603      	mov	r3, r0
 8007966:	4618      	mov	r0, r3
 8007968:	f7fe fff0 	bl	800694c <_ZNK8IXFEvent5getIdEv>
 800796c:	4603      	mov	r3, r0
 800796e:	2b01      	cmp	r3, #1
 8007970:	d10c      	bne.n	800798c <_ZN3app19JoystickApplication12processEventEv+0x8c>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4618      	mov	r0, r3
 8007976:	f00c fe57 	bl	8014628 <_ZNK10XFReactive15getCurrentEventEv>
 800797a:	4603      	mov	r3, r0
 800797c:	4618      	mov	r0, r3
 800797e:	f7fe ffd8 	bl	8006932 <_ZNK8IXFEvent12getEventTypeEv>
 8007982:	4603      	mov	r3, r0
 8007984:	2b03      	cmp	r3, #3
 8007986:	d101      	bne.n	800798c <_ZN3app19JoystickApplication12processEventEv+0x8c>
 8007988:	2301      	movs	r3, #1
 800798a:	e000      	b.n	800798e <_ZN3app19JoystickApplication12processEventEv+0x8e>
 800798c:	2300      	movs	r3, #0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d007      	beq.n	80079a2 <_ZN3app19JoystickApplication12processEventEv+0xa2>
                //qDebug() << "State changed first SM switch";
                nState = STATE_POSCHANGED;
 8007992:	2303      	movs	r3, #3
 8007994:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8007996:	e004      	b.n	80079a2 <_ZN3app19JoystickApplication12processEventEv+0xa2>
        case STATE_POSCHANGED:
        //Return to wait state
            nState = STATE_WAIT;
 8007998:	2302      	movs	r3, #2
 800799a:	77fb      	strb	r3, [r7, #31]
            break;
 800799c:	e002      	b.n	80079a4 <_ZN3app19JoystickApplication12processEventEv+0xa4>
            break;
 800799e:	bf00      	nop
 80079a0:	e000      	b.n	80079a4 <_ZN3app19JoystickApplication12processEventEv+0xa4>
            break;
 80079a2:	bf00      	nop
    }

    //Check if the state has changed in the state machine The only case in which we have to do something is if the position has changed (meaning another value), otherwise nothing to do
    if(nState != currentState){
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	7d1b      	ldrb	r3, [r3, #20]
 80079a8:	7ffa      	ldrb	r2, [r7, #31]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d03a      	beq.n	8007a24 <_ZN3app19JoystickApplication12processEventEv+0x124>
        switch(nState){
 80079ae:	7ffb      	ldrb	r3, [r7, #31]
 80079b0:	2b03      	cmp	r3, #3
 80079b2:	d837      	bhi.n	8007a24 <_ZN3app19JoystickApplication12processEventEv+0x124>
 80079b4:	a201      	add	r2, pc, #4	; (adr r2, 80079bc <_ZN3app19JoystickApplication12processEventEv+0xbc>)
 80079b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ba:	bf00      	nop
 80079bc:	08007a25 	.word	0x08007a25
 80079c0:	08007a25 	.word	0x08007a25
 80079c4:	08007a25 	.word	0x08007a25
 80079c8:	080079cd 	.word	0x080079cd
                break;
            case STATE_WAIT:
            //Do nothing
                break;
            case STATE_POSCHANGED:
                currentPos = _readJoystickValue(); //get current joystick position
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 f84c 	bl	8007a6a <_ZN3app19JoystickApplication18_readJoystickValueEv>
 80079d2:	4603      	mov	r3, r0
 80079d4:	60fb      	str	r3, [r7, #12]
                joystickData = currentPos.pressedButtons;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	755a      	strb	r2, [r3, #21]
                buff[0] = joystickData; //Write data informations into sharedbyteBuffer
 80079de:	f107 0310 	add.w	r3, r7, #16
 80079e2:	2100      	movs	r1, #0
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7ff f9a1 	bl	8006d2c <_ZN3hei12SharedBufferIhEixEj>
 80079ea:	4602      	mov	r2, r0
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	7d5b      	ldrb	r3, [r3, #21]
 80079f0:	7013      	strb	r3, [r2, #0]
                //qDebug() << "State changed to (joystick value) " << joystickData;
                //Request to publish the event data
                //qDebug() << "buff = " << buff.data();
                evPublishRequest(EVID_JOYSTICK,buff);
 80079f2:	f107 0310 	add.w	r3, r7, #16
 80079f6:	4619      	mov	r1, r3
 80079f8:	2008      	movs	r0, #8
 80079fa:	f003 f9a6 	bl	800ad4a <_ZN7desenet6sensor19AbstractApplication16evPublishRequestEtRKN3hei12SharedBufferIhEE>
                //Return to null state
                GEN(XFNullTransition());
 80079fe:	687d      	ldr	r5, [r7, #4]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	330c      	adds	r3, #12
 8007a06:	681c      	ldr	r4, [r3, #0]
 8007a08:	2014      	movs	r0, #20
 8007a0a:	f00e fd3c 	bl	8016486 <_Znwj>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	461e      	mov	r6, r3
 8007a12:	2200      	movs	r2, #0
 8007a14:	2100      	movs	r1, #0
 8007a16:	4630      	mov	r0, r6
 8007a18:	f00c fcb0 	bl	801437c <_ZN16XFNullTransitionC1EiP11IXFReactive>
 8007a1c:	4631      	mov	r1, r6
 8007a1e:	4628      	mov	r0, r5
 8007a20:	47a0      	blx	r4
                break;
 8007a22:	bf00      	nop
        }
    }
    currentState = nState; // save new state value for the next call
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	7ffa      	ldrb	r2, [r7, #31]
 8007a28:	751a      	strb	r2, [r3, #20]
    return EventStatus::Consumed;
 8007a2a:	f107 031c 	add.w	r3, r7, #28
 8007a2e:	2101      	movs	r1, #1
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fe ff97 	bl	8006964 <_ZN11EventStatusC1ENS_12eEventStatusE>
 8007a36:	7f3c      	ldrb	r4, [r7, #28]
    SharedByteBuffer buff = SharedByteBuffer(1); // 1 byte shared buffer to contain joystick data
 8007a38:	f107 0310 	add.w	r3, r7, #16
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7ff fea2 	bl	8007786 <_ZN3hei12SharedBufferIhED1Ev>
    return EventStatus::Consumed;
 8007a42:	4623      	mov	r3, r4
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3724      	adds	r7, #36	; 0x24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a4c <_ZN3app19JoystickApplication8joystickEv>:

board::Joystick &JoystickApplication::joystick()
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
    return Factory::instance().joystick();
 8007a54:	f7fe ffde 	bl	8006a14 <_ZN3app7Factory8instanceEv>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7ff fd38 	bl	80074d0 <_ZNK3app7Factory8joystickEv>
 8007a60:	4603      	mov	r3, r0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <_ZN3app19JoystickApplication18_readJoystickValueEv>:

IJoystick::Position JoystickApplication::_readJoystickValue()
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
    return joystick().position();
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7ff ffea 	bl	8007a4c <_ZN3app19JoystickApplication8joystickEv>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	3214      	adds	r2, #20
 8007a7e:	6812      	ldr	r2, [r2, #0]
 8007a80:	4618      	mov	r0, r3
 8007a82:	4790      	blx	r2
 8007a84:	4603      	mov	r3, r0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b082      	sub	sp, #8
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
      { delete this; }
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d005      	beq.n	8007aa8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	4798      	blx	r3
 8007aa8:	bf00      	nop
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d004      	beq.n	8007aca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7ff fde3 	bl	8007690 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4618      	mov	r0, r3
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <_ZZN3hei12SharedBufferIhEC4EjENKUlPhE_clES2_>:
            data_ = std::shared_ptr<T>(new T[length * sizeof(T)], [](pointer p){delete[] p;});
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <_ZZN3hei12SharedBufferIhEC4EjENKUlPhE_clES2_+0x16>
 8007ae4:	6838      	ldr	r0, [r7, #0]
 8007ae6:	f00e fcbd 	bl	8016464 <_ZdaPv>
 8007aea:	bf00      	nop
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <_ZN3hei12SharedBufferIhEC1Ej>:
        explicit SharedBuffer(sizeType length) {
 8007af2:	b5b0      	push	{r4, r5, r7, lr}
 8007af4:	b086      	sub	sp, #24
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
 8007afa:	6039      	str	r1, [r7, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f000 f850 	bl	8007ba4 <_ZNSt10shared_ptrIhEC1Ev>
            data_ = std::shared_ptr<T>(new T[length * sizeof(T)], [](pointer p){delete[] p;});
 8007b04:	687c      	ldr	r4, [r7, #4]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f00e fccd 	bl	80164a8 <_Znaj>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	4619      	mov	r1, r3
 8007b12:	f107 030c 	add.w	r3, r7, #12
 8007b16:	462a      	mov	r2, r5
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f000 f850 	bl	8007bbe <_ZNSt10shared_ptrIhEC1IhZN3hei12SharedBufferIhEC4EjEUlPhE_vEEPT_T0_>
 8007b1e:	f107 030c 	add.w	r3, r7, #12
 8007b22:	4619      	mov	r1, r3
 8007b24:	4620      	mov	r0, r4
 8007b26:	f000 f85f 	bl	8007be8 <_ZNSt10shared_ptrIhEaSEOS0_>
 8007b2a:	f107 030c 	add.w	r3, r7, #12
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7ff fe1c 	bl	800776c <_ZNSt10shared_ptrIhED1Ev>
            if (data_.get() != nullptr)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7ff f931 	bl	8006d9e <_ZNKSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	bf14      	ite	ne
 8007b42:	2301      	movne	r3, #1
 8007b44:	2300      	moveq	r3, #0
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d003      	beq.n	8007b54 <_ZN3hei12SharedBufferIhEC1Ej+0x62>
                length_ = length;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	609a      	str	r2, [r3, #8]
 8007b52:	e002      	b.n	8007b5a <_ZN3hei12SharedBufferIhEC1Ej+0x68>
                length_ = 0;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	609a      	str	r2, [r3, #8]
        }
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3718      	adds	r7, #24
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bdb0      	pop	{r4, r5, r7, pc}

08007b64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
      { }
 8007b6c:	4a04      	ldr	r2, [pc, #16]	; (8007b80 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	601a      	str	r2, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4618      	mov	r0, r3
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	0801be4c 	.word	0x0801be4c

08007b84 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
      { }
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7ff ffe9 	bl	8007b64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8007b92:	210c      	movs	r1, #12
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f00e fc63 	bl	8016460 <_ZdlPvj>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <_ZNSt10shared_ptrIhEC1Ev>:
#endif
      /**
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 f856 	bl	8007c60 <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <_ZNSt10shared_ptrIhEC1IhZN3hei12SharedBufferIhEC4EjEUlPhE_vEEPT_T0_>:
       *
       *  __shared_ptr will release __p by calling __d(__p)
       */
      template<typename _Yp, typename _Deleter,
	       typename = _Constructible<_Yp*, _Deleter>>
	shared_ptr(_Yp* __p, _Deleter __d)
 8007bbe:	b5b0      	push	{r4, r5, r7, lr}
 8007bc0:	b084      	sub	sp, #16
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	60f8      	str	r0, [r7, #12]
 8007bc6:	60b9      	str	r1, [r7, #8]
 8007bc8:	713a      	strb	r2, [r7, #4]
        : __shared_ptr<_Tp>(__p, std::move(__d)) { }
 8007bca:	68fc      	ldr	r4, [r7, #12]
 8007bcc:	1d3b      	adds	r3, r7, #4
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f000 f857 	bl	8007c82 <_ZSt4moveIRZN3hei12SharedBufferIhEC4EjEUlPhE_EONSt16remove_referenceIT_E4typeEOS7_>
 8007bd4:	462a      	mov	r2, r5
 8007bd6:	68b9      	ldr	r1, [r7, #8]
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f000 f85d 	bl	8007c98 <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EEC1IhZN3hei12SharedBufferIhEC4EjEUlPhE_vEEPT_T0_>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bdb0      	pop	{r4, r5, r7, pc}

08007be8 <_ZNSt10shared_ptrIhEaSEOS0_>:
	}
#pragma GCC diagnostic pop
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
 8007be8:	b590      	push	{r4, r7, lr}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 8007bf2:	687c      	ldr	r4, [r7, #4]
 8007bf4:	6838      	ldr	r0, [r7, #0]
 8007bf6:	f000 f80a 	bl	8007c0e <_ZSt4moveIRSt10shared_ptrIhEEONSt16remove_referenceIT_E4typeEOS4_>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	4620      	mov	r0, r4
 8007c00:	f000 f867 	bl	8007cd2 <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EEaSEOS2_>
	return *this;
 8007c04:	687b      	ldr	r3, [r7, #4]
      }
 8007c06:	4618      	mov	r0, r3
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd90      	pop	{r4, r7, pc}

08007c0e <_ZSt4moveIRSt10shared_ptrIhEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8007c0e:	b480      	push	{r7}
 8007c10:	b083      	sub	sp, #12
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4618      	mov	r0, r3
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EEC1EOS2_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	3304      	adds	r3, #4
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 f868 	bl	8007d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	1d1a      	adds	r2, r3, #4
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	3304      	adds	r3, #4
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4610      	mov	r0, r2
 8007c4c:	f000 f86e 	bl	8007d2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	2200      	movs	r2, #0
 8007c54:	601a      	str	r2, [r3, #0]
      }
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	601a      	str	r2, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	3304      	adds	r3, #4
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 f84c 	bl	8007d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <_ZSt4moveIRZN3hei12SharedBufferIhEC4EjEUlPhE_EONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8007c82:	b480      	push	{r7}
 8007c84:	b083      	sub	sp, #12
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EEC1IhZN3hei12SharedBufferIhEC4EjEUlPhE_vEEPT_T0_>:
	__shared_ptr(_Yp* __p, _Deleter __d)
 8007c98:	b5b0      	push	{r4, r5, r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	713a      	strb	r2, [r7, #4]
	: _M_ptr(__p), _M_refcount(__p, std::move(__d))
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	601a      	str	r2, [r3, #0]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	1d1c      	adds	r4, r3, #4
 8007cae:	1d3b      	adds	r3, r7, #4
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7ff ffe6 	bl	8007c82 <_ZSt4moveIRZN3hei12SharedBufferIhEC4EjEUlPhE_EONSt16remove_referenceIT_E4typeEOS7_>
 8007cb6:	462a      	mov	r2, r5
 8007cb8:	68b9      	ldr	r1, [r7, #8]
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f000 f84b 	bl	8007d56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPhZN3hei12SharedBufferIhEC4EjEUlS4_E_vEET_T0_>
	  _M_enable_shared_from_this_with(__p);
 8007cc0:	68b9      	ldr	r1, [r7, #8]
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f000 f85c 	bl	8007d80 <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIhhEENSt9enable_ifIXntsrNS2_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bdb0      	pop	{r4, r5, r7, pc}

08007cd2 <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EEaSEOS2_>:
      operator=(__shared_ptr&& __r) noexcept
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b084      	sub	sp, #16
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
 8007cda:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 8007cdc:	6838      	ldr	r0, [r7, #0]
 8007cde:	f000 f85a 	bl	8007d96 <_ZSt4moveIRSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS6_>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	f107 0308 	add.w	r3, r7, #8
 8007ce8:	4611      	mov	r1, r2
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7ff ff9a 	bl	8007c24 <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EEC1EOS2_>
 8007cf0:	f107 0308 	add.w	r3, r7, #8
 8007cf4:	6879      	ldr	r1, [r7, #4]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 f858 	bl	8007dac <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EE4swapERS2_>
 8007cfc:	f107 0308 	add.w	r3, r7, #8
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7ff fd25 	bl	8007750 <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8007d06:	687b      	ldr	r3, [r7, #4]
      }
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	601a      	str	r2, [r3, #0]
      { }
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4618      	mov	r0, r3
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	601a      	str	r2, [r3, #0]
      }
 8007d4a:	bf00      	nop
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPhZN3hei12SharedBufferIhEC4EjEUlS4_E_vEET_T0_>:
	__shared_count(_Ptr __p, _Deleter __d)
 8007d56:	b5b0      	push	{r4, r5, r7, lr}
 8007d58:	b086      	sub	sp, #24
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	60f8      	str	r0, [r7, #12]
 8007d5e:	60b9      	str	r1, [r7, #8]
 8007d60:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p, std::move(__d), allocator<void>())
 8007d62:	1d3b      	adds	r3, r7, #4
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7ff ff8c 	bl	8007c82 <_ZSt4moveIRZN3hei12SharedBufferIhEC4EjEUlPhE_EONSt16remove_referenceIT_E4typeEOS7_>
 8007d6a:	462b      	mov	r3, r5
 8007d6c:	4622      	mov	r2, r4
 8007d6e:	68b9      	ldr	r1, [r7, #8]
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 f832 	bl	8007dda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPhZN3hei12SharedBufferIhEC4EjEUlS4_E_SaIvEvEET_T0_T1_>
	{ }
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3718      	adds	r7, #24
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bdb0      	pop	{r4, r5, r7, pc}

08007d80 <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIhhEENSt9enable_ifIXntsrNS2_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
	{ }
 8007d8a:	bf00      	nop
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <_ZSt4moveIRSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8007d96:	b480      	push	{r7}
 8007d98:	b083      	sub	sp, #12
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4618      	mov	r0, r3
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EE4swapERS2_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	683a      	ldr	r2, [r7, #0]
 8007dba:	4611      	mov	r1, r2
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f000 f862 	bl	8007e86 <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	_M_refcount._M_swap(__other._M_refcount);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	1d1a      	adds	r2, r3, #4
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	3304      	adds	r3, #4
 8007dca:	4619      	mov	r1, r3
 8007dcc:	4610      	mov	r0, r2
 8007dce:	f7ff ffad 	bl	8007d2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 8007dd2:	bf00      	nop
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPhZN3hei12SharedBufferIhEC4EjEUlS4_E_SaIvEvEET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8007dda:	b590      	push	{r4, r7, lr}
 8007ddc:	b08b      	sub	sp, #44	; 0x2c
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	60f8      	str	r0, [r7, #12]
 8007de2:	60b9      	str	r1, [r7, #8]
 8007de4:	713a      	strb	r2, [r7, #4]
 8007de6:	703b      	strb	r3, [r7, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8007dee:	463a      	mov	r2, r7
 8007df0:	f107 031c 	add.w	r3, r7, #28
 8007df4:	4611      	mov	r1, r2
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 f864 	bl	8007ec4 <_ZNSaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8007dfc:	f107 0314 	add.w	r3, r7, #20
 8007e00:	f107 021c 	add.w	r2, r7, #28
 8007e04:	4611      	mov	r1, r2
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 f875 	bl	8007ef6 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERSC_>
	      _Sp_cd_type* __mem = __guard.get();
 8007e0c:	f107 0314 	add.w	r3, r7, #20
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 f898 	bl	8007f46 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 8007e16:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8007e18:	1d3b      	adds	r3, r7, #4
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7ff ff31 	bl	8007c82 <_ZSt4moveIRZN3hei12SharedBufferIhEC4EjEUlPhE_EONSt16remove_referenceIT_E4typeEOS7_>
 8007e20:	463b      	mov	r3, r7
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 f89d 	bl	8007f62 <_ZSt4moveIRSaIvEEONSt16remove_referenceIT_E4typeEOS3_>
 8007e28:	4604      	mov	r4, r0
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	2010      	movs	r0, #16
 8007e30:	f7ff fc22 	bl	8007678 <_ZnwjPv>
 8007e34:	4623      	mov	r3, r4
 8007e36:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007e3a:	68b9      	ldr	r1, [r7, #8]
 8007e3c:	f000 f89c 	bl	8007f78 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES0_S4_RKS5_>
	      _M_pi = __mem;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e44:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8007e46:	f107 0314 	add.w	r3, r7, #20
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f000 f8b5 	bl	8007fbc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8007e52:	f107 0314 	add.w	r3, r7, #20
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 f860 	bl	8007f1c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8007e5c:	f107 031c 	add.w	r3, r7, #28
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 f83c 	bl	8007ede <_ZNSaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
	}
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	372c      	adds	r7, #44	; 0x2c
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd90      	pop	{r4, r7, pc}

08007e70 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <_ZSt4swapIPhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b084      	sub	sp, #16
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f7ff ffed 	bl	8007e70 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8007e96:	4603      	mov	r3, r0
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8007e9c:	6838      	ldr	r0, [r7, #0]
 8007e9e:	f7ff ffe7 	bl	8007e70 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8007eaa:	f107 030c 	add.w	r3, r7, #12
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7ff ffde 	bl	8007e70 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	601a      	str	r2, [r3, #0]
    }
 8007ebc:	bf00      	nop
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <_ZNSaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
      allocator& operator=(const allocator&) = default;
#endif

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f883 	bl	8007fda <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS2_E_SaIvELNS_12_Lock_policyE0EEEC1Ev>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <_ZNSaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:

      ~allocator() _GLIBCXX_NOTHROW { }
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b082      	sub	sp, #8
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f882 	bl	8007ff0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS2_E_SaIvELNS_12_Lock_policyE0EEED1Ev>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3708      	adds	r7, #8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERSC_>:
    };

  /// Allocate space for a single object using __a
  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b082      	sub	sp, #8
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	6039      	str	r1, [r7, #0]
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8007f00:	2101      	movs	r1, #1
 8007f02:	6838      	ldr	r0, [r7, #0]
 8007f04:	f000 f87f 	bl	8008006 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERSA_j>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f888 	bl	8008024 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERSA_PS9_>
    }
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d007      	beq.n	8007f3c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6818      	ldr	r0, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	4619      	mov	r1, r3
 8007f38:	f000 f888 	bl	800804c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERSA_PS9_j>
      }
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b082      	sub	sp, #8
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 f889 	bl	800806a <_ZSt12__to_addressISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_SB_>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3708      	adds	r7, #8
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <_ZSt4moveIRSaIvEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8007f62:	b480      	push	{r7}
 8007f64:	b083      	sub	sp, #12
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES0_S4_RKS5_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8007f78:	b5b0      	push	{r4, r5, r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	713a      	strb	r2, [r7, #4]
 8007f84:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f000 f879 	bl	8008080 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8007f8e:	4a0a      	ldr	r2, [pc, #40]	; (8007fb8 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES0_S4_RKS5_+0x40>)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	601a      	str	r2, [r3, #0]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f103 040c 	add.w	r4, r3, #12
 8007f9a:	1d3b      	adds	r3, r7, #4
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7ff fe70 	bl	8007c82 <_ZSt4moveIRZN3hei12SharedBufferIhEC4EjEUlPhE_EONSt16remove_referenceIT_E4typeEOS7_>
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	462a      	mov	r2, r5
 8007fa6:	68b9      	ldr	r1, [r7, #8]
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f000 f87f 	bl	80080ac <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES0_S4_RKS5_>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bdb0      	pop	{r4, r5, r7, pc}
 8007fb8:	0801bdc8 	.word	0x0801bdc8

08007fbc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	605a      	str	r2, [r3, #4]
	return *this;
 8007fcc:	687b      	ldr	r3, [r7, #4]
      }
 8007fce:	4618      	mov	r0, r3
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS2_E_SaIvELNS_12_Lock_policyE0EEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8007fda:	b480      	push	{r7}
 8007fdc:	b083      	sub	sp, #12
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS2_E_SaIvELNS_12_Lock_policyE0EEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr

08008006 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERSA_j>:
       *  @param  __n  The number of objects to allocate space for.
       *
       *  Calls @c a.allocate(n)
      */
      _GLIBCXX_NODISCARD static pointer
      allocate(allocator_type& __a, size_type __n)
 8008006:	b580      	push	{r7, lr}
 8008008:	b082      	sub	sp, #8
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
 800800e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8008010:	2200      	movs	r2, #0
 8008012:	6839      	ldr	r1, [r7, #0]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f865 	bl	80080e4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS2_E_SaIvELNS_12_Lock_policyE0EEE8allocateEjPKv>
 800801a:	4603      	mov	r3, r0
 800801c:	4618      	mov	r0, r3
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERSA_PS9_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8008030:	68b8      	ldr	r0, [r7, #8]
 8008032:	f000 f875 	bl	8008120 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSB_>
 8008036:	4602      	mov	r2, r0
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	601a      	str	r2, [r3, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	605a      	str	r2, [r3, #4]
      { }
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	4618      	mov	r0, r3
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERSA_PS9_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	68b9      	ldr	r1, [r7, #8]
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f000 f86a 	bl	8008136 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS2_E_SaIvELNS_12_Lock_policyE0EEE10deallocateEPS9_j>
 8008062:	bf00      	nop
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <_ZSt12__to_addressISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_SB_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 800806a:	b480      	push	{r7}
 800806c:	b083      	sub	sp, #12
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 8008072:	687b      	ldr	r3, [r7, #4]
    }
 8008074:	4618      	mov	r0, r3
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 8008088:	4a07      	ldr	r2, [pc, #28]	; (80080a8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	605a      	str	r2, [r3, #4]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	609a      	str	r2, [r3, #8]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4618      	mov	r0, r3
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr
 80080a8:	0801be4c 	.word	0x0801be4c

080080ac <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES0_S4_RKS5_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	713a      	strb	r2, [r7, #4]
 80080b8:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 80080ba:	1d3b      	adds	r3, r7, #4
 80080bc:	4618      	mov	r0, r3
 80080be:	f7ff fde0 	bl	8007c82 <_ZSt4moveIRZN3hei12SharedBufferIhEC4EjEUlPhE_EONSt16remove_referenceIT_E4typeEOS7_>
 80080c2:	4603      	mov	r3, r0
 80080c4:	4619      	mov	r1, r3
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f000 f842 	bl	8008150 <_ZNSt14_Sp_ebo_helperILi0EZN3hei12SharedBufferIhEC4EjEUlPhE_Lb1EEC1EOS4_>
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f000 f84b 	bl	800816a <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	601a      	str	r2, [r3, #0]
	{ }
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	4618      	mov	r0, r3
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS2_E_SaIvELNS_12_Lock_policyE0EEE8allocateEjPKv>:
      { return std::__addressof(__x); }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD pointer
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
      {
	if (__n > this->max_size())
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f000 f846 	bl	8008182 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS2_E_SaIvELNS_12_Lock_policyE0EEE8max_sizeEv>
 80080f6:	4602      	mov	r2, r0
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	4293      	cmp	r3, r2
 80080fc:	bf8c      	ite	hi
 80080fe:	2301      	movhi	r3, #1
 8008100:	2300      	movls	r3, #0
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS2_E_SaIvELNS_12_Lock_policyE0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8008108:	f00e f9e1 	bl	80164ce <_ZSt17__throw_bad_allocv>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	011b      	lsls	r3, r3, #4
 8008110:	4618      	mov	r0, r3
 8008112:	f00e f9b8 	bl	8016486 <_Znwj>
 8008116:	4603      	mov	r3, r0
      }
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSB_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4618      	mov	r0, r3
 800812c:	370c      	adds	r7, #12
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr

08008136 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS2_E_SaIvELNS_12_Lock_policyE0EEE10deallocateEPS9_j>:

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8008136:	b580      	push	{r7, lr}
 8008138:	b084      	sub	sp, #16
 800813a:	af00      	add	r7, sp, #0
 800813c:	60f8      	str	r0, [r7, #12]
 800813e:	60b9      	str	r1, [r7, #8]
 8008140:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8008142:	68b8      	ldr	r0, [r7, #8]
 8008144:	f00e f98a 	bl	801645c <_ZdlPv>
      }
 8008148:	bf00      	nop
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <_ZNSt14_Sp_ebo_helperILi0EZN3hei12SharedBufferIhEC4EjEUlPhE_Lb1EEC1EOS4_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
 800815a:	6838      	ldr	r0, [r7, #0]
 800815c:	f7ff fd91 	bl	8007c82 <_ZSt4moveIRZN3hei12SharedBufferIhEC4EjEUlPhE_EONSt16remove_referenceIT_E4typeEOS7_>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800816a:	b480      	push	{r7}
 800816c:	b083      	sub	sp, #12
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	6039      	str	r1, [r7, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4618      	mov	r0, r3
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS2_E_SaIvELNS_12_Lock_policyE0EEE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8008182:	b480      	push	{r7}
 8008184:	b083      	sub	sp, #12
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800818a:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
#else
	return size_t(-1) / sizeof(_Tp);
#endif
      }
 800818e:	4618      	mov	r0, r3
 8008190:	370c      	adds	r7, #12
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
	...

0800819c <_Z41__static_initialization_and_destruction_0ii>:
 800819c:	b580      	push	{r7, lr}
 800819e:	b088      	sub	sp, #32
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d122      	bne.n	80081f2 <_Z41__static_initialization_and_destruction_0ii+0x56>
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d11d      	bne.n	80081f2 <_Z41__static_initialization_and_destruction_0ii+0x56>
 80081b6:	4b18      	ldr	r3, [pc, #96]	; (8008218 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	613b      	str	r3, [r7, #16]
 80081bc:	f107 0310 	add.w	r3, r7, #16
 80081c0:	60bb      	str	r3, [r7, #8]
 80081c2:	2304      	movs	r3, #4
 80081c4:	60fb      	str	r3, [r7, #12]
 80081c6:	f107 0308 	add.w	r3, r7, #8
 80081ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 80081ce:	4813      	ldr	r0, [pc, #76]	; (800821c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80081d0:	f7fe fd78 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
  static const desenet::Address SENSOR_ADDRESS({0xC7, 0xC7, 0xC7, 0xC7});	///< @brief Sensor's reception address.
 80081d4:	4b12      	ldr	r3, [pc, #72]	; (8008220 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	61fb      	str	r3, [r7, #28]
 80081da:	f107 031c 	add.w	r3, r7, #28
 80081de:	617b      	str	r3, [r7, #20]
 80081e0:	2304      	movs	r3, #4
 80081e2:	61bb      	str	r3, [r7, #24]
 80081e4:	f107 0314 	add.w	r3, r7, #20
 80081e8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80081ec:	480d      	ldr	r0, [pc, #52]	; (8008224 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80081ee:	f7fe fd69 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10a      	bne.n	800820e <_Z41__static_initialization_and_destruction_0ii+0x72>
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081fe:	4293      	cmp	r3, r2
 8008200:	d105      	bne.n	800820e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8008202:	4808      	ldr	r0, [pc, #32]	; (8008224 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8008204:	f7fe fe9a 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 8008208:	4804      	ldr	r0, [pc, #16]	; (800821c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800820a:	f7fe fe97 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
 800820e:	bf00      	nop
 8008210:	3720      	adds	r7, #32
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	08018340 	.word	0x08018340
 800821c:	200015d4 	.word	0x200015d4
 8008220:	08018344 	.word	0x08018344
 8008224:	200015dc 	.word	0x200015dc

08008228 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	4a05      	ldr	r2, [pc, #20]	; (8008248 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	601a      	str	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4618      	mov	r0, r3
 800823a:	f7ff fc93 	bl	8007b64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4618      	mov	r0, r3
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	0801bdc8 	.word	0x0801bdc8

0800824c <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f7ff ffe7 	bl	8008228 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800825a:	2110      	movs	r1, #16
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f00e f8ff 	bl	8016460 <_ZdlPvj>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4618      	mov	r0, r3
 8008266:	3708      	adds	r7, #8
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	330c      	adds	r3, #12
 8008278:	4618      	mov	r0, r3
 800827a:	f000 f840 	bl	80082fe <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 800827e:	4602      	mov	r2, r0
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	4619      	mov	r1, r3
 8008286:	4610      	mov	r0, r2
 8008288:	f7ff fc24 	bl	8007ad4 <_ZZN3hei12SharedBufferIhEC4EjENKUlPhE_clES2_>
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	330c      	adds	r3, #12
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 f838 	bl	8008316 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 80082a6:	4602      	mov	r2, r0
 80082a8:	f107 0314 	add.w	r3, r7, #20
 80082ac:	4611      	mov	r1, r2
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7ff fe08 	bl	8007ec4 <_ZNSaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80082b4:	f107 0114 	add.w	r1, r7, #20
 80082b8:	f107 030c 	add.w	r3, r7, #12
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	4618      	mov	r0, r3
 80082c0:	f7ff feb0 	bl	8008024 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERSA_PS9_>
	this->~_Sp_counted_deleter();
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f7ff ffaf 	bl	8008228 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80082ca:	f107 030c 	add.w	r3, r7, #12
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7ff fe24 	bl	8007f1c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 80082d4:	f107 0314 	add.w	r3, r7, #20
 80082d8:	4618      	mov	r0, r3
 80082da:	f7ff fe00 	bl	8007ede <_ZNSaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
      }
 80082de:	bf00      	nop
 80082e0:	3718      	adds	r7, #24
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 80082e6:	b480      	push	{r7}
 80082e8:	b083      	sub	sp, #12
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	6039      	str	r1, [r7, #0]
        return nullptr;
 80082f0:	2300      	movs	r3, #0
      }
 80082f2:	4618      	mov	r0, r3
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 80082fe:	b580      	push	{r7, lr}
 8008300:	b082      	sub	sp, #8
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f811 	bl	800832e <_ZNSt14_Sp_ebo_helperILi0EZN3hei12SharedBufferIhEC4EjEUlPhE_Lb1EE6_S_getERS5_>
 800830c:	4603      	mov	r3, r0
 800830e:	4618      	mov	r0, r3
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhEC4EjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8008316:	b580      	push	{r7, lr}
 8008318:	b082      	sub	sp, #8
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f810 	bl	8008344 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 8008324:	4603      	mov	r3, r0
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <_ZNSt14_Sp_ebo_helperILi0EZN3hei12SharedBufferIhEC4EjEUlPhE_Lb1EE6_S_getERS5_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800832e:	b480      	push	{r7}
 8008330:	b083      	sub	sp, #12
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4618      	mov	r0, r3
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>:
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4618      	mov	r0, r3
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <_GLOBAL__sub_I__ZN3app19JoystickApplicationC2Ev>:
 800835a:	b580      	push	{r7, lr}
 800835c:	af00      	add	r7, sp, #0
 800835e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008362:	2001      	movs	r0, #1
 8008364:	f7ff ff1a 	bl	800819c <_Z41__static_initialization_and_destruction_0ii>
 8008368:	bd80      	pop	{r7, pc}

0800836a <_GLOBAL__sub_D__ZN3app19JoystickApplicationC2Ev>:
 800836a:	b580      	push	{r7, lr}
 800836c:	af00      	add	r7, sp, #0
 800836e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008372:	2000      	movs	r0, #0
 8008374:	f7ff ff12 	bl	800819c <_Z41__static_initialization_and_destruction_0ii>
 8008378:	bd80      	pop	{r7, pc}

0800837a <_ZNK16XFTimeoutManager12tickIntervalEv>:
    void start();

    void scheduleTimeout(int timeoutId, int interval, IXFReactive * pReactive);
    void unscheduleTimeout(int timeoutId, IXFReactive * pReactive);
    void tick();														///< Called regularly in XFTimeoutManager::_tickInterval time
    inline int tickInterval() const { return _tickInterval; }			///< Returns tick time interval in milliseconds.
 800837a:	b480      	push	{r7}
 800837c:	b083      	sub	sp, #12
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	4618      	mov	r0, r3
 8008388:	370c      	adds	r7, #12
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <_ZNK16XFTimeoutManager12sysTicksInMsEv>:
    inline uint32_t sysTicksInMs() const { return _sysTicksInMs; }		///< Returns time in milliseconds since system start up.
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	4618      	mov	r0, r3
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <_ZNK5TTime4hourEv>:
				unsigned short & milliseconds) const;	///< Returns stored time as part of hours, minutes, seconds and milliseconds.

	unsigned long getMds() const;						///< Returns stored time in milliseconds.
	bool isNull() const;

	inline unsigned char hour() const					///< Returns hour part of the stored time.
 80083aa:	b480      	push	{r7}
 80083ac:	b083      	sub	sp, #12
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
	{ return mTHours; }
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	4618      	mov	r0, r3
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <_ZNK5TTime6minuteEv>:
	inline unsigned char minute() const					///< Returns minute part of the stored time.
 80083c2:	b480      	push	{r7}
 80083c4:	b083      	sub	sp, #12
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
	{ return mTMinutes; }
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	785b      	ldrb	r3, [r3, #1]
 80083ce:	4618      	mov	r0, r3
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <_ZNK5TTime6secondEv>:
	inline unsigned char second() const					///< Returns second part of the stored time.
 80083da:	b480      	push	{r7}
 80083dc:	b083      	sub	sp, #12
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
	{ return mTSeconds; }
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	789b      	ldrb	r3, [r3, #2]
 80083e6:	4618      	mov	r0, r3
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <_ZNK5TTime4msecEv>:
	inline unsigned short msec() const					///< Returns millisecond part of the stored time.
 80083f2:	b480      	push	{r7}
 80083f4:	b083      	sub	sp, #12
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
	{ return mTMilliseconds; }
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	889b      	ldrh	r3, [r3, #4]
 80083fe:	4618      	mov	r0, r3
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
	...

0800840c <_ZN9ClockworkC1Ev>:
#include "xf/xfevent.h"
#include "clockwork.h"

Clockwork * Clockwork::_pInstance;

Clockwork::Clockwork()
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
: _currentState(STATE_UNKOWN),
  _oldTick(0),
  _bCurrentTimeReceived(false)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2100      	movs	r1, #0
 8008418:	4618      	mov	r0, r3
 800841a:	f00c f827 	bl	801446c <_ZN10XFReactiveC1EP8XFThread>
 800841e:	4a13      	ldr	r2, [pc, #76]	; (800846c <_ZN9ClockworkC1Ev+0x60>)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	601a      	str	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	731a      	strb	r2, [r3, #12]
 800842a:	6879      	ldr	r1, [r7, #4]
 800842c:	f04f 0200 	mov.w	r2, #0
 8008430:	f04f 0300 	mov.w	r3, #0
 8008434:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	3318      	adds	r3, #24
 800843c:	4618      	mov	r0, r3
 800843e:	f000 fab3 	bl	80089a8 <_ZN5TTimeC1Ev>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	779a      	strb	r2, [r3, #30]
{
	assert(!_pInstance);	// Only one instance allowed.
 8008448:	4b09      	ldr	r3, [pc, #36]	; (8008470 <_ZN9ClockworkC1Ev+0x64>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d005      	beq.n	800845c <_ZN9ClockworkC1Ev+0x50>
 8008450:	4b08      	ldr	r3, [pc, #32]	; (8008474 <_ZN9ClockworkC1Ev+0x68>)
 8008452:	4a09      	ldr	r2, [pc, #36]	; (8008478 <_ZN9ClockworkC1Ev+0x6c>)
 8008454:	210f      	movs	r1, #15
 8008456:	4809      	ldr	r0, [pc, #36]	; (800847c <_ZN9ClockworkC1Ev+0x70>)
 8008458:	f00e f8f0 	bl	801663c <__assert_func>
	_pInstance = this;
 800845c:	4a04      	ldr	r2, [pc, #16]	; (8008470 <_ZN9ClockworkC1Ev+0x64>)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6013      	str	r3, [r2, #0]
}
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4618      	mov	r0, r3
 8008466:	3708      	adds	r7, #8
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	0801be68 	.word	0x0801be68
 8008470:	200015f4 	.word	0x200015f4
 8008474:	08018348 	.word	0x08018348
 8008478:	08018354 	.word	0x08018354
 800847c:	0801836c 	.word	0x0801836c

08008480 <_ZN9ClockworkD1Ev>:

Clockwork::~Clockwork()
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	4a08      	ldr	r2, [pc, #32]	; (80084ac <_ZN9ClockworkD1Ev+0x2c>)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	601a      	str	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	3318      	adds	r3, #24
 8008492:	4618      	mov	r0, r3
 8008494:	f000 fa9f 	bl	80089d6 <_ZN5TTimeD1Ev>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4618      	mov	r0, r3
 800849c:	f00c f808 	bl	80144b0 <_ZN10XFReactiveD1Ev>
{
}
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4618      	mov	r0, r3
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	0801be68 	.word	0x0801be68

080084b0 <_ZN9ClockworkD0Ev>:
Clockwork::~Clockwork()
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
}
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7ff ffe1 	bl	8008480 <_ZN9ClockworkD1Ev>
 80084be:	2120      	movs	r1, #32
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f00d ffcd 	bl	8016460 <_ZdlPvj>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4618      	mov	r0, r3
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <_ZN9Clockwork5startEv>:

void Clockwork::start()
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
	startBehavior();	// Start state machine
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	3308      	adds	r3, #8
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4610      	mov	r0, r2
 80084e4:	4798      	blx	r3
}
 80084e6:	bf00      	nop
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <_ZN9Clockwork11currentTimeEv>:

const TTime & Clockwork::currentTime()
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b082      	sub	sp, #8
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
	doSecondUpdate();
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	3320      	adds	r3, #32
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	4798      	blx	r3

	return _time;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	3318      	adds	r3, #24
}
 8008506:	4618      	mov	r0, r3
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
	...

08008510 <_ZN9Clockwork8instanceEv>:

Clockwork & Clockwork::instance()
{
 8008510:	b580      	push	{r7, lr}
 8008512:	af00      	add	r7, sp, #0
	assert(_pInstance);
 8008514:	4b06      	ldr	r3, [pc, #24]	; (8008530 <_ZN9Clockwork8instanceEv+0x20>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d105      	bne.n	8008528 <_ZN9Clockwork8instanceEv+0x18>
 800851c:	4b05      	ldr	r3, [pc, #20]	; (8008534 <_ZN9Clockwork8instanceEv+0x24>)
 800851e:	4a06      	ldr	r2, [pc, #24]	; (8008538 <_ZN9Clockwork8instanceEv+0x28>)
 8008520:	2125      	movs	r1, #37	; 0x25
 8008522:	4806      	ldr	r0, [pc, #24]	; (800853c <_ZN9Clockwork8instanceEv+0x2c>)
 8008524:	f00e f88a 	bl	801663c <__assert_func>
	return *_pInstance;
 8008528:	4b01      	ldr	r3, [pc, #4]	; (8008530 <_ZN9Clockwork8instanceEv+0x20>)
 800852a:	681b      	ldr	r3, [r3, #0]
}
 800852c:	4618      	mov	r0, r3
 800852e:	bd80      	pop	{r7, pc}
 8008530:	200015f4 	.word	0x200015f4
 8008534:	080183e8 	.word	0x080183e8
 8008538:	080183f4 	.word	0x080183f4
 800853c:	0801836c 	.word	0x0801836c

08008540 <_ZN9Clockwork12processEventEv>:
	seconds = _time.second();
	milliseconds = _time.msec();
}

EventStatus Clockwork::processEvent()
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
	eMainState newState = _currentState;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	7b1b      	ldrb	r3, [r3, #12]
 800854c:	73fb      	strb	r3, [r7, #15]

	switch (_currentState)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	7b1b      	ldrb	r3, [r3, #12]
 8008552:	2b01      	cmp	r3, #1
 8008554:	dc02      	bgt.n	800855c <_ZN9Clockwork12processEventEv+0x1c>
 8008556:	2b00      	cmp	r3, #0
 8008558:	da03      	bge.n	8008562 <_ZN9Clockwork12processEventEv+0x22>
 800855a:	e07e      	b.n	800865a <_ZN9Clockwork12processEventEv+0x11a>
 800855c:	2b02      	cmp	r3, #2
 800855e:	d026      	beq.n	80085ae <_ZN9Clockwork12processEventEv+0x6e>
 8008560:	e07b      	b.n	800865a <_ZN9Clockwork12processEventEv+0x11a>
	{
	case STATE_UNKOWN:
	case STATE_INITIAL:
		if (getCurrentEvent()->getEventType() == IXFEvent::Initial)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4618      	mov	r0, r3
 8008566:	f00c f85f 	bl	8014628 <_ZNK10XFReactive15getCurrentEventEv>
 800856a:	4603      	mov	r3, r0
 800856c:	4618      	mov	r0, r3
 800856e:	f7fe f9e0 	bl	8006932 <_ZNK8IXFEvent12getEventTypeEv>
 8008572:	4603      	mov	r3, r0
 8008574:	2b01      	cmp	r3, #1
 8008576:	bf0c      	ite	eq
 8008578:	2301      	moveq	r3, #1
 800857a:	2300      	movne	r3, #0
 800857c:	b2db      	uxtb	r3, r3
 800857e:	2b00      	cmp	r3, #0
 8008580:	d068      	beq.n	8008654 <_ZN9Clockwork12processEventEv+0x114>
		{
			newState = STATE_ROOT;	// Move to state ROOT
 8008582:	2302      	movs	r3, #2
 8008584:	73fb      	strb	r3, [r7, #15]

			doInit();
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	331c      	adds	r3, #28
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	4798      	blx	r3

			// Start timeout
			getThread()->scheduleTimeout(SECOND_INTERVAL_id, 1000, this);
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	3318      	adds	r3, #24
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4610      	mov	r0, r2
 800859e:	4798      	blx	r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80085a6:	2101      	movs	r1, #1
 80085a8:	f00c f9f9 	bl	801499e <_ZN8XFThread15scheduleTimeoutEiiP11IXFReactive>
		}
		break;
 80085ac:	e052      	b.n	8008654 <_ZN9Clockwork12processEventEv+0x114>
	case STATE_ROOT:
		if (getCurrentEvent()->getEventType() == IXFEvent::Timeout &&
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4618      	mov	r0, r3
 80085b2:	f00c f839 	bl	8014628 <_ZNK10XFReactive15getCurrentEventEv>
 80085b6:	4603      	mov	r3, r0
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7fe f9ba 	bl	8006932 <_ZNK8IXFEvent12getEventTypeEv>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b04      	cmp	r3, #4
 80085c2:	d10c      	bne.n	80085de <_ZN9Clockwork12processEventEv+0x9e>
			getCurrentTimeout()->getId() == SECOND_INTERVAL_id)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4618      	mov	r0, r3
 80085c8:	f00c f848 	bl	801465c <_ZN10XFReactive17getCurrentTimeoutEv>
 80085cc:	4603      	mov	r3, r0
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fe f9bc 	bl	800694c <_ZNK8IXFEvent5getIdEv>
 80085d4:	4603      	mov	r3, r0
		if (getCurrentEvent()->getEventType() == IXFEvent::Timeout &&
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d101      	bne.n	80085de <_ZN9Clockwork12processEventEv+0x9e>
 80085da:	2301      	movs	r3, #1
 80085dc:	e000      	b.n	80085e0 <_ZN9Clockwork12processEventEv+0xa0>
 80085de:	2300      	movs	r3, #0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d015      	beq.n	8008610 <_ZN9Clockwork12processEventEv+0xd0>
		{
			newState = STATE_ROOT;	// Stay in state
 80085e4:	2302      	movs	r3, #2
 80085e6:	73fb      	strb	r3, [r7, #15]

			doSecondUpdate();
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3320      	adds	r3, #32
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	4798      	blx	r3

			// Start timeout
			getThread()->scheduleTimeout(SECOND_INTERVAL_id, 1000, this);
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	3318      	adds	r3, #24
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4610      	mov	r0, r2
 8008600:	4798      	blx	r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008608:	2101      	movs	r1, #1
 800860a:	f00c f9c8 	bl	801499e <_ZN8XFThread15scheduleTimeoutEiiP11IXFReactive>
		else if(getCurrentEvent()->getEventType() == IXFEvent::Event &&
				getCurrentEvent()->getId() == EV_MINUTE_ELAPSED_id)
		{
			doShowCurrentTime();
		}
		break;
 800860e:	e023      	b.n	8008658 <_ZN9Clockwork12processEventEv+0x118>
		else if(getCurrentEvent()->getEventType() == IXFEvent::Event &&
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4618      	mov	r0, r3
 8008614:	f00c f808 	bl	8014628 <_ZNK10XFReactive15getCurrentEventEv>
 8008618:	4603      	mov	r3, r0
 800861a:	4618      	mov	r0, r3
 800861c:	f7fe f989 	bl	8006932 <_ZNK8IXFEvent12getEventTypeEv>
 8008620:	4603      	mov	r3, r0
 8008622:	2b03      	cmp	r3, #3
 8008624:	d10c      	bne.n	8008640 <_ZN9Clockwork12processEventEv+0x100>
				getCurrentEvent()->getId() == EV_MINUTE_ELAPSED_id)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4618      	mov	r0, r3
 800862a:	f00b fffd 	bl	8014628 <_ZNK10XFReactive15getCurrentEventEv>
 800862e:	4603      	mov	r3, r0
 8008630:	4618      	mov	r0, r3
 8008632:	f7fe f98b 	bl	800694c <_ZNK8IXFEvent5getIdEv>
 8008636:	4603      	mov	r3, r0
		else if(getCurrentEvent()->getEventType() == IXFEvent::Event &&
 8008638:	2b01      	cmp	r3, #1
 800863a:	d101      	bne.n	8008640 <_ZN9Clockwork12processEventEv+0x100>
 800863c:	2301      	movs	r3, #1
 800863e:	e000      	b.n	8008642 <_ZN9Clockwork12processEventEv+0x102>
 8008640:	2300      	movs	r3, #0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d008      	beq.n	8008658 <_ZN9Clockwork12processEventEv+0x118>
			doShowCurrentTime();
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	3324      	adds	r3, #36	; 0x24
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	4798      	blx	r3
		break;
 8008652:	e001      	b.n	8008658 <_ZN9Clockwork12processEventEv+0x118>
		break;
 8008654:	bf00      	nop
 8008656:	e000      	b.n	800865a <_ZN9Clockwork12processEventEv+0x11a>
		break;
 8008658:	bf00      	nop
	}

	_currentState = newState;		// Save new state to actual
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	7bfa      	ldrb	r2, [r7, #15]
 800865e:	731a      	strb	r2, [r3, #12]

	return EventStatus::Consumed;	// We consume all given events/timeouts
 8008660:	f107 030c 	add.w	r3, r7, #12
 8008664:	2101      	movs	r1, #1
 8008666:	4618      	mov	r0, r3
 8008668:	f7fe f97c 	bl	8006964 <_ZN11EventStatusC1ENS_12eEventStatusE>
 800866c:	7b3b      	ldrb	r3, [r7, #12]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
	...

08008678 <_ZN9Clockwork6doInitEv>:

void Clockwork::doInit()
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
#if (CLOCKWORK_VERBOSE != 0)
	Trace::outln("Starting Clockwork (CW)");
 8008680:	480f      	ldr	r0, [pc, #60]	; (80086c0 <_ZN9Clockwork6doInitEv+0x48>)
 8008682:	f007 fa6b 	bl	800fb5c <_ZN5Trace5outlnEPKcz>
	Trace::outln("CW: Framework tick interval: %d ms", XFTimeoutManager::getInstance()->tickInterval());
 8008686:	f00d f963 	bl	8015950 <_ZN16XFTimeoutManager11getInstanceEv>
 800868a:	4603      	mov	r3, r0
 800868c:	4618      	mov	r0, r3
 800868e:	f7ff fe74 	bl	800837a <_ZNK16XFTimeoutManager12tickIntervalEv>
 8008692:	4603      	mov	r3, r0
 8008694:	4619      	mov	r1, r3
 8008696:	480b      	ldr	r0, [pc, #44]	; (80086c4 <_ZN9Clockwork6doInitEv+0x4c>)
 8008698:	f007 fa60 	bl	800fb5c <_ZN5Trace5outlnEPKcz>
#endif

	// Update old tick value
	_oldTick = XFTimeoutManager::getInstance()->sysTicksInMs();
 800869c:	f00d f958 	bl	8015950 <_ZN16XFTimeoutManager11getInstanceEv>
 80086a0:	4603      	mov	r3, r0
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7ff fe75 	bl	8008392 <_ZNK16XFTimeoutManager12sysTicksInMsEv>
 80086a8:	4603      	mov	r3, r0
 80086aa:	461a      	mov	r2, r3
 80086ac:	f04f 0300 	mov.w	r3, #0
 80086b0:	6879      	ldr	r1, [r7, #4]
 80086b2:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80086b6:	bf00      	nop
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	0801841c 	.word	0x0801841c
 80086c4:	08018434 	.word	0x08018434

080086c8 <_ZN9Clockwork17doShowCurrentTimeEv>:

void Clockwork::doShowCurrentTime()
{
 80086c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af02      	add	r7, sp, #8
 80086ce:	6078      	str	r0, [r7, #4]
#if (CLOCKWORK_SHOWCURRENTTIME != 0)
	Trace::outln("Time: %02d:%02d:%02d.%03d",
			 	 _time.hour(),
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3318      	adds	r3, #24
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7ff fe68 	bl	80083aa <_ZNK5TTime4hourEv>
 80086da:	4603      	mov	r3, r0
	Trace::outln("Time: %02d:%02d:%02d.%03d",
 80086dc:	461c      	mov	r4, r3
			 	 _time.minute(),
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	3318      	adds	r3, #24
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7ff fe6d 	bl	80083c2 <_ZNK5TTime6minuteEv>
 80086e8:	4603      	mov	r3, r0
	Trace::outln("Time: %02d:%02d:%02d.%03d",
 80086ea:	461d      	mov	r5, r3
			 	 _time.second(),
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	3318      	adds	r3, #24
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7ff fe72 	bl	80083da <_ZNK5TTime6secondEv>
 80086f6:	4603      	mov	r3, r0
	Trace::outln("Time: %02d:%02d:%02d.%03d",
 80086f8:	461e      	mov	r6, r3
			 	 _time.msec());
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	3318      	adds	r3, #24
 80086fe:	4618      	mov	r0, r3
 8008700:	f7ff fe77 	bl	80083f2 <_ZNK5TTime4msecEv>
 8008704:	4603      	mov	r3, r0
	Trace::outln("Time: %02d:%02d:%02d.%03d",
 8008706:	9300      	str	r3, [sp, #0]
 8008708:	4633      	mov	r3, r6
 800870a:	462a      	mov	r2, r5
 800870c:	4621      	mov	r1, r4
 800870e:	4803      	ldr	r0, [pc, #12]	; (800871c <_ZN9Clockwork17doShowCurrentTimeEv+0x54>)
 8008710:	f007 fa24 	bl	800fb5c <_ZN5Trace5outlnEPKcz>
#endif
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800871c:	08018458 	.word	0x08018458

08008720 <_ZN9Clockwork14doSecondUpdateEv>:

void Clockwork::doSecondUpdate()
{
 8008720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008722:	b089      	sub	sp, #36	; 0x24
 8008724:	af02      	add	r7, sp, #8
 8008726:	6078      	str	r0, [r7, #4]
	uint32_t ticksElapsed = XFTimeoutManager::getInstance()->sysTicksInMs() - _oldTick;
 8008728:	f00d f912 	bl	8015950 <_ZN16XFTimeoutManager11getInstanceEv>
 800872c:	4603      	mov	r3, r0
 800872e:	4618      	mov	r0, r3
 8008730:	f7ff fe2f 	bl	8008392 <_ZNK16XFTimeoutManager12sysTicksInMsEv>
 8008734:	4601      	mov	r1, r0
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800873c:	4613      	mov	r3, r2
 800873e:	1acb      	subs	r3, r1, r3
 8008740:	60fb      	str	r3, [r7, #12]
	uint32_t millisecondsElapsed, msLong;
	uint8_t hours = _time.hour();
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	3318      	adds	r3, #24
 8008746:	4618      	mov	r0, r3
 8008748:	f7ff fe2f 	bl	80083aa <_ZNK5TTime4hourEv>
 800874c:	4603      	mov	r3, r0
 800874e:	74fb      	strb	r3, [r7, #19]
	uint8_t minutes = _time.minute();
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	3318      	adds	r3, #24
 8008754:	4618      	mov	r0, r3
 8008756:	f7ff fe34 	bl	80083c2 <_ZNK5TTime6minuteEv>
 800875a:	4603      	mov	r3, r0
 800875c:	74bb      	strb	r3, [r7, #18]
	uint8_t seconds = _time.second();
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	3318      	adds	r3, #24
 8008762:	4618      	mov	r0, r3
 8008764:	f7ff fe39 	bl	80083da <_ZNK5TTime6secondEv>
 8008768:	4603      	mov	r3, r0
 800876a:	747b      	strb	r3, [r7, #17]

	_oldTick += ticksElapsed;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	461a      	mov	r2, r3
 8008776:	f04f 0300 	mov.w	r3, #0
 800877a:	1884      	adds	r4, r0, r2
 800877c:	eb41 0503 	adc.w	r5, r1, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	e9c3 4504 	strd	r4, r5, [r3, #16]

	millisecondsElapsed = ticksElapsed;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	60bb      	str	r3, [r7, #8]

	// Sum elapsed milliseconds
	msLong = millisecondsElapsed + _time.msec();
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	3318      	adds	r3, #24
 800878e:	4618      	mov	r0, r3
 8008790:	f7ff fe2f 	bl	80083f2 <_ZNK5TTime4msecEv>
 8008794:	4603      	mov	r3, r0
 8008796:	461a      	mov	r2, r3
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	4413      	add	r3, r2
 800879c:	617b      	str	r3, [r7, #20]

	if (msLong >= 3600000)
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	4a50      	ldr	r2, [pc, #320]	; (80088e4 <_ZN9Clockwork14doSecondUpdateEv+0x1c4>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d312      	bcc.n	80087cc <_ZN9Clockwork14doSecondUpdateEv+0xac>
	{
		// Add first hours
		hours += msLong / 3600000;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	4a4f      	ldr	r2, [pc, #316]	; (80088e8 <_ZN9Clockwork14doSecondUpdateEv+0x1c8>)
 80087aa:	fba2 2303 	umull	r2, r3, r2, r3
 80087ae:	0d5b      	lsrs	r3, r3, #21
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	7cfb      	ldrb	r3, [r7, #19]
 80087b4:	4413      	add	r3, r2
 80087b6:	74fb      	strb	r3, [r7, #19]
		msLong %= 3600000;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	4a4b      	ldr	r2, [pc, #300]	; (80088e8 <_ZN9Clockwork14doSecondUpdateEv+0x1c8>)
 80087bc:	fba2 1203 	umull	r1, r2, r2, r3
 80087c0:	0d52      	lsrs	r2, r2, #21
 80087c2:	4948      	ldr	r1, [pc, #288]	; (80088e4 <_ZN9Clockwork14doSecondUpdateEv+0x1c4>)
 80087c4:	fb01 f202 	mul.w	r2, r1, r2
 80087c8:	1a9b      	subs	r3, r3, r2
 80087ca:	617b      	str	r3, [r7, #20]
	}

	if (msLong >= 60000)
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d913      	bls.n	80087fe <_ZN9Clockwork14doSecondUpdateEv+0xde>
	{
		// then minutes
		minutes += msLong / 60000;
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	4a44      	ldr	r2, [pc, #272]	; (80088ec <_ZN9Clockwork14doSecondUpdateEv+0x1cc>)
 80087da:	fba2 2303 	umull	r2, r3, r2, r3
 80087de:	0b9b      	lsrs	r3, r3, #14
 80087e0:	b2da      	uxtb	r2, r3
 80087e2:	7cbb      	ldrb	r3, [r7, #18]
 80087e4:	4413      	add	r3, r2
 80087e6:	74bb      	strb	r3, [r7, #18]
		msLong %= 60000;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	4a40      	ldr	r2, [pc, #256]	; (80088ec <_ZN9Clockwork14doSecondUpdateEv+0x1cc>)
 80087ec:	fba2 1203 	umull	r1, r2, r2, r3
 80087f0:	0b92      	lsrs	r2, r2, #14
 80087f2:	f64e 2160 	movw	r1, #60000	; 0xea60
 80087f6:	fb01 f202 	mul.w	r2, r1, r2
 80087fa:	1a9b      	subs	r3, r3, r2
 80087fc:	617b      	str	r3, [r7, #20]
	}

	// Add seconds elapsed
	seconds += (msLong / 1000);
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	4a3b      	ldr	r2, [pc, #236]	; (80088f0 <_ZN9Clockwork14doSecondUpdateEv+0x1d0>)
 8008802:	fba2 2303 	umull	r2, r3, r2, r3
 8008806:	099b      	lsrs	r3, r3, #6
 8008808:	b2da      	uxtb	r2, r3
 800880a:	7c7b      	ldrb	r3, [r7, #17]
 800880c:	4413      	add	r3, r2
 800880e:	747b      	strb	r3, [r7, #17]
	msLong %= 1000;
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	4a37      	ldr	r2, [pc, #220]	; (80088f0 <_ZN9Clockwork14doSecondUpdateEv+0x1d0>)
 8008814:	fba2 1203 	umull	r1, r2, r2, r3
 8008818:	0992      	lsrs	r2, r2, #6
 800881a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800881e:	fb01 f202 	mul.w	r2, r1, r2
 8008822:	1a9b      	subs	r3, r3, r2
 8008824:	617b      	str	r3, [r7, #20]

	if (seconds >= 60)
 8008826:	7c7b      	ldrb	r3, [r7, #17]
 8008828:	2b3b      	cmp	r3, #59	; 0x3b
 800882a:	d925      	bls.n	8008878 <_ZN9Clockwork14doSecondUpdateEv+0x158>
	{
		// Increment minutes
		minutes += (seconds / 60);
 800882c:	7c7b      	ldrb	r3, [r7, #17]
 800882e:	4a31      	ldr	r2, [pc, #196]	; (80088f4 <_ZN9Clockwork14doSecondUpdateEv+0x1d4>)
 8008830:	fba2 2303 	umull	r2, r3, r2, r3
 8008834:	095b      	lsrs	r3, r3, #5
 8008836:	b2da      	uxtb	r2, r3
 8008838:	7cbb      	ldrb	r3, [r7, #18]
 800883a:	4413      	add	r3, r2
 800883c:	74bb      	strb	r3, [r7, #18]
		seconds %= 60;
 800883e:	7c7a      	ldrb	r2, [r7, #17]
 8008840:	4b2c      	ldr	r3, [pc, #176]	; (80088f4 <_ZN9Clockwork14doSecondUpdateEv+0x1d4>)
 8008842:	fba3 1302 	umull	r1, r3, r3, r2
 8008846:	0959      	lsrs	r1, r3, #5
 8008848:	460b      	mov	r3, r1
 800884a:	011b      	lsls	r3, r3, #4
 800884c:	1a5b      	subs	r3, r3, r1
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	747b      	strb	r3, [r7, #17]

		// Tell state machine one more minute elapsed
		pushEvent(new XFEvent(EV_MINUTE_ELAPSED_id));
 8008854:	687d      	ldr	r5, [r7, #4]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	330c      	adds	r3, #12
 800885c:	681c      	ldr	r4, [r3, #0]
 800885e:	2014      	movs	r0, #20
 8008860:	f00d fe11 	bl	8016486 <_Znwj>
 8008864:	4603      	mov	r3, r0
 8008866:	461e      	mov	r6, r3
 8008868:	2200      	movs	r2, #0
 800886a:	2101      	movs	r1, #1
 800886c:	4630      	mov	r0, r6
 800886e:	f00b fd4d 	bl	801430c <_ZN7XFEventC1EiP11IXFReactive>
 8008872:	4631      	mov	r1, r6
 8008874:	4628      	mov	r0, r5
 8008876:	47a0      	blx	r4
	}

	if (minutes >= 60)
 8008878:	7cbb      	ldrb	r3, [r7, #18]
 800887a:	2b3b      	cmp	r3, #59	; 0x3b
 800887c:	d913      	bls.n	80088a6 <_ZN9Clockwork14doSecondUpdateEv+0x186>
	{
		hours += (minutes / 60);
 800887e:	7cbb      	ldrb	r3, [r7, #18]
 8008880:	4a1c      	ldr	r2, [pc, #112]	; (80088f4 <_ZN9Clockwork14doSecondUpdateEv+0x1d4>)
 8008882:	fba2 2303 	umull	r2, r3, r2, r3
 8008886:	095b      	lsrs	r3, r3, #5
 8008888:	b2da      	uxtb	r2, r3
 800888a:	7cfb      	ldrb	r3, [r7, #19]
 800888c:	4413      	add	r3, r2
 800888e:	74fb      	strb	r3, [r7, #19]
		minutes %= 60;
 8008890:	7cba      	ldrb	r2, [r7, #18]
 8008892:	4b18      	ldr	r3, [pc, #96]	; (80088f4 <_ZN9Clockwork14doSecondUpdateEv+0x1d4>)
 8008894:	fba3 1302 	umull	r1, r3, r3, r2
 8008898:	0959      	lsrs	r1, r3, #5
 800889a:	460b      	mov	r3, r1
 800889c:	011b      	lsls	r3, r3, #4
 800889e:	1a5b      	subs	r3, r3, r1
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	74bb      	strb	r3, [r7, #18]
	}

	if (hours >= 24)
 80088a6:	7cfb      	ldrb	r3, [r7, #19]
 80088a8:	2b17      	cmp	r3, #23
 80088aa:	d90a      	bls.n	80088c2 <_ZN9Clockwork14doSecondUpdateEv+0x1a2>
	{
		hours %= 24;
 80088ac:	7cfa      	ldrb	r2, [r7, #19]
 80088ae:	4b12      	ldr	r3, [pc, #72]	; (80088f8 <_ZN9Clockwork14doSecondUpdateEv+0x1d8>)
 80088b0:	fba3 1302 	umull	r1, r3, r3, r2
 80088b4:	0919      	lsrs	r1, r3, #4
 80088b6:	460b      	mov	r3, r1
 80088b8:	005b      	lsls	r3, r3, #1
 80088ba:	440b      	add	r3, r1
 80088bc:	00db      	lsls	r3, r3, #3
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	74fb      	strb	r3, [r7, #19]
	}

	// Set calculated time
	_time.setHMS(hours,
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f103 0018 	add.w	r0, r3, #24
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	7c7c      	ldrb	r4, [r7, #17]
 80088ce:	7cba      	ldrb	r2, [r7, #18]
 80088d0:	7cf9      	ldrb	r1, [r7, #19]
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	4623      	mov	r3, r4
 80088d6:	f000 f8cb 	bl	8008a70 <_ZN5TTime6setHMSEhhht>
			minutes,
			seconds,
			(uint16_t)msLong /* remaining milliseconds*/);
}
 80088da:	bf00      	nop
 80088dc:	371c      	adds	r7, #28
 80088de:	46bd      	mov	sp, r7
 80088e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088e2:	bf00      	nop
 80088e4:	0036ee80 	.word	0x0036ee80
 80088e8:	95217cb1 	.word	0x95217cb1
 80088ec:	45e7b273 	.word	0x45e7b273
 80088f0:	10624dd3 	.word	0x10624dd3
 80088f4:	88888889 	.word	0x88888889
 80088f8:	aaaaaaab 	.word	0xaaaaaaab

080088fc <_Z41__static_initialization_and_destruction_0ii>:
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b088      	sub	sp, #32
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d122      	bne.n	8008952 <_Z41__static_initialization_and_destruction_0ii+0x56>
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008912:	4293      	cmp	r3, r2
 8008914:	d11d      	bne.n	8008952 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8008916:	4b18      	ldr	r3, [pc, #96]	; (8008978 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	613b      	str	r3, [r7, #16]
 800891c:	f107 0310 	add.w	r3, r7, #16
 8008920:	60bb      	str	r3, [r7, #8]
 8008922:	2304      	movs	r3, #4
 8008924:	60fb      	str	r3, [r7, #12]
 8008926:	f107 0308 	add.w	r3, r7, #8
 800892a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800892e:	4813      	ldr	r0, [pc, #76]	; (800897c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8008930:	f7fe f9c8 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
  static const desenet::Address SENSOR_ADDRESS({0xC7, 0xC7, 0xC7, 0xC7});	///< @brief Sensor's reception address.
 8008934:	4b12      	ldr	r3, [pc, #72]	; (8008980 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	61fb      	str	r3, [r7, #28]
 800893a:	f107 031c 	add.w	r3, r7, #28
 800893e:	617b      	str	r3, [r7, #20]
 8008940:	2304      	movs	r3, #4
 8008942:	61bb      	str	r3, [r7, #24]
 8008944:	f107 0314 	add.w	r3, r7, #20
 8008948:	e893 0006 	ldmia.w	r3, {r1, r2}
 800894c:	480d      	ldr	r0, [pc, #52]	; (8008984 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800894e:	f7fe f9b9 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10a      	bne.n	800896e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800895e:	4293      	cmp	r3, r2
 8008960:	d105      	bne.n	800896e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8008962:	4808      	ldr	r0, [pc, #32]	; (8008984 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8008964:	f7fe faea 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 8008968:	4804      	ldr	r0, [pc, #16]	; (800897c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800896a:	f7fe fae7 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
 800896e:	bf00      	nop
 8008970:	3720      	adds	r7, #32
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	08018560 	.word	0x08018560
 800897c:	200015e4 	.word	0x200015e4
 8008980:	08018564 	.word	0x08018564
 8008984:	200015ec 	.word	0x200015ec

08008988 <_GLOBAL__sub_I__ZN9Clockwork10_pInstanceE>:
 8008988:	b580      	push	{r7, lr}
 800898a:	af00      	add	r7, sp, #0
 800898c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008990:	2001      	movs	r0, #1
 8008992:	f7ff ffb3 	bl	80088fc <_Z41__static_initialization_and_destruction_0ii>
 8008996:	bd80      	pop	{r7, pc}

08008998 <_GLOBAL__sub_D__ZN9Clockwork10_pInstanceE>:
 8008998:	b580      	push	{r7, lr}
 800899a:	af00      	add	r7, sp, #0
 800899c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80089a0:	2000      	movs	r0, #0
 80089a2:	f7ff ffab 	bl	80088fc <_Z41__static_initialization_and_destruction_0ii>
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <_ZN5TTimeC1Ev>:
#include <platform-config.h>
#include <trace/trace.h>
#include "clockwork.h"
#include "ttime.h"

TTime::TTime()
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 : mTHours(0),
   mTMinutes(0),
   mTSeconds(0),
   mTMilliseconds(0)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	701a      	strb	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	705a      	strb	r2, [r3, #1]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	709a      	strb	r2, [r3, #2]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	809a      	strh	r2, [r3, #4]
{
}
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4618      	mov	r0, r3
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr

080089d6 <_ZN5TTimeD1Ev>:

TTime::~TTime()
 80089d6:	b480      	push	{r7}
 80089d8:	b083      	sub	sp, #12
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
{
}
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4618      	mov	r0, r3
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <_ZN5TTime11currentTimeEv>:
	return time;
}

// static
TTime TTime::currentTime()
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
	return Clockwork::instance().currentTime();
 80089f4:	f7ff fd8c 	bl	8008510 <_ZN9Clockwork8instanceEv>
 80089f8:	4603      	mov	r3, r0
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7ff fd77 	bl	80084ee <_ZN9Clockwork11currentTimeEv>
 8008a00:	4602      	mov	r2, r0
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6811      	ldr	r1, [r2, #0]
 8008a06:	6019      	str	r1, [r3, #0]
 8008a08:	8892      	ldrh	r2, [r2, #4]
 8008a0a:	809a      	strh	r2, [r3, #4]
}
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <_ZNK5TTime6getMdsEv>:
	seconds = mTSeconds;
	milliseconds = mTMilliseconds;
}

unsigned long TTime::getMds() const
{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
	unsigned long mds;

	mds = (unsigned long)mTHours * 3600000;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	461a      	mov	r2, r3
 8008a22:	4b12      	ldr	r3, [pc, #72]	; (8008a6c <_ZNK5TTime6getMdsEv+0x58>)
 8008a24:	fb03 f302 	mul.w	r3, r3, r2
 8008a28:	60fb      	str	r3, [r7, #12]
	mds += (unsigned long)mTMinutes * 60000;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	785b      	ldrb	r3, [r3, #1]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	f64e 2360 	movw	r3, #60000	; 0xea60
 8008a34:	fb03 f302 	mul.w	r3, r3, r2
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	60fb      	str	r3, [r7, #12]
	mds += (unsigned long)mTSeconds * 1000;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	789b      	ldrb	r3, [r3, #2]
 8008a42:	461a      	mov	r2, r3
 8008a44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a48:	fb03 f302 	mul.w	r3, r3, r2
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	4413      	add	r3, r2
 8008a50:	60fb      	str	r3, [r7, #12]
	mds += (unsigned long)mTMilliseconds;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	889b      	ldrh	r3, [r3, #4]
 8008a56:	461a      	mov	r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	4413      	add	r3, r2
 8008a5c:	60fb      	str	r3, [r7, #12]

	return mds;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3714      	adds	r7, #20
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr
 8008a6c:	0036ee80 	.word	0x0036ee80

08008a70 <_ZN5TTime6setHMSEhhht>:

	return *this;
}

void TTime::setHMS(uint8_t hours, uint8_t minutes, uint8_t seconds, uint16_t milliseconds)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	4608      	mov	r0, r1
 8008a7a:	4611      	mov	r1, r2
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	4603      	mov	r3, r0
 8008a80:	70fb      	strb	r3, [r7, #3]
 8008a82:	460b      	mov	r3, r1
 8008a84:	70bb      	strb	r3, [r7, #2]
 8008a86:	4613      	mov	r3, r2
 8008a88:	707b      	strb	r3, [r7, #1]
	if (hours < 24 &&
 8008a8a:	78fb      	ldrb	r3, [r7, #3]
 8008a8c:	2b17      	cmp	r3, #23
 8008a8e:	d815      	bhi.n	8008abc <_ZN5TTime6setHMSEhhht+0x4c>
 8008a90:	78bb      	ldrb	r3, [r7, #2]
 8008a92:	2b3b      	cmp	r3, #59	; 0x3b
 8008a94:	d812      	bhi.n	8008abc <_ZN5TTime6setHMSEhhht+0x4c>
		minutes < 60 &&
 8008a96:	787b      	ldrb	r3, [r7, #1]
 8008a98:	2b3b      	cmp	r3, #59	; 0x3b
 8008a9a:	d80f      	bhi.n	8008abc <_ZN5TTime6setHMSEhhht+0x4c>
		seconds < 60 &&
 8008a9c:	8a3b      	ldrh	r3, [r7, #16]
 8008a9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008aa2:	d20b      	bcs.n	8008abc <_ZN5TTime6setHMSEhhht+0x4c>
		milliseconds < 1000)
	{
		mTHours = hours;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	78fa      	ldrb	r2, [r7, #3]
 8008aa8:	701a      	strb	r2, [r3, #0]
		mTMinutes = minutes;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	78ba      	ldrb	r2, [r7, #2]
 8008aae:	705a      	strb	r2, [r3, #1]
		mTSeconds = seconds;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	787a      	ldrb	r2, [r7, #1]
 8008ab4:	709a      	strb	r2, [r3, #2]
		mTMilliseconds = milliseconds;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	8a3a      	ldrh	r2, [r7, #16]
 8008aba:	809a      	strh	r2, [r3, #4]
	}
	else
	{
//		Trace::outln("TTime: Received bad formatted time");
	}
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <_Z41__static_initialization_and_destruction_0ii>:
	// Trace::outln("setMds: %02d:%02d:%02d.%03d",
	//	  mTHours,
	//	  mTMinutes,
	//	  mTSeconds,
	//	  mTMilliseconds);
}
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b088      	sub	sp, #32
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d122      	bne.n	8008b1e <_Z41__static_initialization_and_destruction_0ii+0x56>
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d11d      	bne.n	8008b1e <_Z41__static_initialization_and_destruction_0ii+0x56>
 8008ae2:	4b18      	ldr	r3, [pc, #96]	; (8008b44 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	613b      	str	r3, [r7, #16]
 8008ae8:	f107 0310 	add.w	r3, r7, #16
 8008aec:	60bb      	str	r3, [r7, #8]
 8008aee:	2304      	movs	r3, #4
 8008af0:	60fb      	str	r3, [r7, #12]
 8008af2:	f107 0308 	add.w	r3, r7, #8
 8008af6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008afa:	4813      	ldr	r0, [pc, #76]	; (8008b48 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8008afc:	f7fe f8e2 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
  static const desenet::Address SENSOR_ADDRESS({0xC7, 0xC7, 0xC7, 0xC7});	///< @brief Sensor's reception address.
 8008b00:	4b12      	ldr	r3, [pc, #72]	; (8008b4c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	61fb      	str	r3, [r7, #28]
 8008b06:	f107 031c 	add.w	r3, r7, #28
 8008b0a:	617b      	str	r3, [r7, #20]
 8008b0c:	2304      	movs	r3, #4
 8008b0e:	61bb      	str	r3, [r7, #24]
 8008b10:	f107 0314 	add.w	r3, r7, #20
 8008b14:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008b18:	480d      	ldr	r0, [pc, #52]	; (8008b50 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8008b1a:	f7fe f8d3 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d10a      	bne.n	8008b3a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d105      	bne.n	8008b3a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8008b2e:	4808      	ldr	r0, [pc, #32]	; (8008b50 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8008b30:	f7fe fa04 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 8008b34:	4804      	ldr	r0, [pc, #16]	; (8008b48 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8008b36:	f7fe fa01 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
 8008b3a:	bf00      	nop
 8008b3c:	3720      	adds	r7, #32
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	08018654 	.word	0x08018654
 8008b48:	200015f8 	.word	0x200015f8
 8008b4c:	08018658 	.word	0x08018658
 8008b50:	20001600 	.word	0x20001600

08008b54 <_GLOBAL__sub_I__ZN5TTimeC2Ev>:
 8008b54:	b580      	push	{r7, lr}
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008b5c:	2001      	movs	r0, #1
 8008b5e:	f7ff ffb3 	bl	8008ac8 <_Z41__static_initialization_and_destruction_0ii>
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <_GLOBAL__sub_D__ZN5TTimeC2Ev>:
 8008b64:	b580      	push	{r7, lr}
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	f7ff ffab 	bl	8008ac8 <_Z41__static_initialization_and_destruction_0ii>
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <_ZNK7desenet5Frame6lengthEv>:
         * This length is not the actual length of the buffer in memory, it is the length of the frame represented by an object of this class. The length of
         * the buffer backing the frame is constant and can be retrieved by the method reservedLength().
         *
         * @return  Length of the frame.
         */
        std::size_t length() const {
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
            return frameLength_;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	68db      	ldr	r3, [r3, #12]
        }
 8008b80:	4618      	mov	r0, r3
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <_ZN7desenet5Frame6bufferEv>:
         *
         * Respect the maximal buffer length by calling the reservedLength() method and never write over out the buffer bounds, please.
         *
         * @return  Pointer to the buffer.
         */
        std::uint8_t * buffer()
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
        {
            return buffer_.data();
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 f97a 	bl	8008e90 <_ZN3hei12SharedBufferIhE4dataEv>
 8008b9c:	4603      	mov	r3, r0
        }
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <_ZNK7desenet5Frame14reservedLengthEv>:
        /**
         * @brief Returns the length of the buffer that serves as data storage for the frame object.
         *
         * @return  Length of the data buffer backing the frame.
         */
        std::size_t reservedLength() const
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b082      	sub	sp, #8
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
        {
            return buffer_.length();
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f000 f987 	bl	8008ec4 <_ZNK3hei12SharedBufferIhE6lengthEv>
 8008bb6:	4603      	mov	r3, r0
        }
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <_ZN7desenet4MPDUC1Ev>:
#include "MPDU.h"

//#include <qdebug.h>


desenet::MPDU::MPDU():Frame(Mtu){
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2125      	movs	r1, #37	; 0x25
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f000 fdf9 	bl	80097c4 <_ZN7desenet5FrameC1Ej>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2225      	movs	r2, #37	; 0x25
 8008bd6:	611a      	str	r2, [r3, #16]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	3318      	adds	r3, #24
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f000 f97d 	bl	8008edc <_ZN3hei12SharedBufferIhEC1Ev>
    setType(FrameType::MPDU);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2102      	movs	r1, #2
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 ff25 	bl	8009a36 <_ZN7desenet5Frame7setTypeENS_9FrameTypeE>
}
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3708      	adds	r7, #8
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <_ZN7desenet4MPDU12getEPDUCountEv>:

uint8_t MPDU::getEPDUCount()
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b084      	sub	sp, #16
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
    uint8_t count;
    std::memcpy(&count,buffer() + HEADER_SIZE + EPDUCOUNT_OFFSET , sizeof (uint8_t)); // HeaderSIZE gets frametype position , EPDU count is 8 bytes later (1 FrameType, 7 Sensor ID)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7ff ffc3 	bl	8008b8c <_ZN7desenet5Frame6bufferEv>
 8008c06:	4603      	mov	r3, r0
 8008c08:	3306      	adds	r3, #6
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	73fb      	strb	r3, [r7, #15]
    return  count;
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <_ZN7desenet4MPDU8commitSvEhh>:

void desenet::MPDU::commitSv(SvGroup g, uint8_t byteCount){
 8008c18:	b590      	push	{r4, r7, lr}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	70fb      	strb	r3, [r7, #3]
 8008c24:	4613      	mov	r3, r2
 8008c26:	70bb      	strb	r3, [r7, #2]
    EPDUH_U8 header;
    header.epduh.type = 0;
 8008c28:	7a3b      	ldrb	r3, [r7, #8]
 8008c2a:	f36f 13c7 	bfc	r3, #7, #1
 8008c2e:	723b      	strb	r3, [r7, #8]
    header.epduh.svGroupOrEvId = g;
 8008c30:	78fb      	ldrb	r3, [r7, #3]
 8008c32:	f003 030f 	and.w	r3, r3, #15
 8008c36:	b2da      	uxtb	r2, r3
 8008c38:	7a3b      	ldrb	r3, [r7, #8]
 8008c3a:	f362 03c6 	bfi	r3, r2, #3, #4
 8008c3e:	723b      	strb	r3, [r7, #8]
    header.epduh.count = byteCount;
 8008c40:	78bb      	ldrb	r3, [r7, #2]
 8008c42:	f003 0307 	and.w	r3, r3, #7
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	7a3b      	ldrb	r3, [r7, #8]
 8008c4a:	f362 0302 	bfi	r3, r2, #0, #3
 8008c4e:	723b      	strb	r3, [r7, #8]
    // Copy in buffer
    std::memcpy(buffer()+length(),&header.byte,EPDU_HEADER_SIZE);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7ff ff9a 	bl	8008b8c <_ZN7desenet5Frame6bufferEv>
 8008c58:	4604      	mov	r4, r0
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7ff ff89 	bl	8008b74 <_ZNK7desenet5Frame6lengthEv>
 8008c62:	4603      	mov	r3, r0
 8008c64:	4423      	add	r3, r4
 8008c66:	7a3a      	ldrb	r2, [r7, #8]
 8008c68:	701a      	strb	r2, [r3, #0]
    int count = getEPDUCount();
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7ff ffc3 	bl	8008bf6 <_ZN7desenet4MPDU12getEPDUCountEv>
 8008c70:	4603      	mov	r3, r0
 8008c72:	60fb      	str	r3, [r7, #12]
    setEPDUCount(count+1);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	3301      	adds	r3, #1
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f8ae 	bl	8008ddc <_ZN7desenet4MPDU12setEPDUCountEi>
    setLength(length() + byteCount + EPDU_HEADER_SIZE);
 8008c80:	687c      	ldr	r4, [r7, #4]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7ff ff75 	bl	8008b74 <_ZNK7desenet5Frame6lengthEv>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	78bb      	ldrb	r3, [r7, #2]
 8008c8e:	4413      	add	r3, r2
 8008c90:	3301      	adds	r3, #1
 8008c92:	4619      	mov	r1, r3
 8008c94:	4620      	mov	r0, r4
 8008c96:	f000 fe23 	bl	80098e0 <_ZN7desenet5Frame9setLengthEj>
}
 8008c9a:	bf00      	nop
 8008c9c:	3714      	adds	r7, #20
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd90      	pop	{r4, r7, pc}

08008ca2 <_ZN7desenet4MPDU8commitEvEth>:

void MPDU::commitEv(EvId id, uint8_t byteCount)
{
 8008ca2:	b590      	push	{r4, r7, lr}
 8008ca4:	b085      	sub	sp, #20
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	460b      	mov	r3, r1
 8008cac:	807b      	strh	r3, [r7, #2]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	707b      	strb	r3, [r7, #1]
    EPDUH_U8 header;
    header.epduh.type = 1; // Type = 1 for event PDU
 8008cb2:	7a3b      	ldrb	r3, [r7, #8]
 8008cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cb8:	723b      	strb	r3, [r7, #8]
    header.epduh.svGroupOrEvId = id;
 8008cba:	887b      	ldrh	r3, [r7, #2]
 8008cbc:	f003 030f 	and.w	r3, r3, #15
 8008cc0:	b2da      	uxtb	r2, r3
 8008cc2:	7a3b      	ldrb	r3, [r7, #8]
 8008cc4:	f362 03c6 	bfi	r3, r2, #3, #4
 8008cc8:	723b      	strb	r3, [r7, #8]
    header.epduh.count = byteCount;
 8008cca:	787b      	ldrb	r3, [r7, #1]
 8008ccc:	f003 0307 	and.w	r3, r3, #7
 8008cd0:	b2da      	uxtb	r2, r3
 8008cd2:	7a3b      	ldrb	r3, [r7, #8]
 8008cd4:	f362 0302 	bfi	r3, r2, #0, #3
 8008cd8:	723b      	strb	r3, [r7, #8]

    //Write in buffer
    std::memcpy(buffer()+length(),&header.byte,EPDU_HEADER_SIZE);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7ff ff55 	bl	8008b8c <_ZN7desenet5Frame6bufferEv>
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7ff ff44 	bl	8008b74 <_ZNK7desenet5Frame6lengthEv>
 8008cec:	4603      	mov	r3, r0
 8008cee:	4423      	add	r3, r4
 8008cf0:	7a3a      	ldrb	r2, [r7, #8]
 8008cf2:	701a      	strb	r2, [r3, #0]
    int count = getEPDUCount()+1;
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7ff ff7e 	bl	8008bf6 <_ZN7desenet4MPDU12getEPDUCountEv>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	60fb      	str	r3, [r7, #12]
    setEPDUCount(count);
 8008d00:	68f9      	ldr	r1, [r7, #12]
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f86a 	bl	8008ddc <_ZN7desenet4MPDU12setEPDUCountEi>
    setLength(length()+ byteCount+ EPDU_HEADER_SIZE);
 8008d08:	687c      	ldr	r4, [r7, #4]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7ff ff31 	bl	8008b74 <_ZNK7desenet5Frame6lengthEv>
 8008d12:	4602      	mov	r2, r0
 8008d14:	787b      	ldrb	r3, [r7, #1]
 8008d16:	4413      	add	r3, r2
 8008d18:	3301      	adds	r3, #1
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f000 fddf 	bl	80098e0 <_ZN7desenet5Frame9setLengthEj>
}
 8008d22:	bf00      	nop
 8008d24:	3714      	adds	r7, #20
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd90      	pop	{r4, r7, pc}

08008d2a <_ZN7desenet4MPDU12insertBufferEv>:
SharedByteBuffer MPDU::insertBuffer()
{
 8008d2a:	b5b0      	push	{r4, r5, r7, lr}
 8008d2c:	b086      	sub	sp, #24
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	6039      	str	r1, [r7, #0]
    SharedByteBuffer b;
 8008d34:	f107 030c 	add.w	r3, r7, #12
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f000 f8cf 	bl	8008edc <_ZN3hei12SharedBufferIhEC1Ev>
    return b.proxy(buffer()+length()+ EPDU_HEADER_SIZE,reservedLength()-length()-1);
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7ff ff23 	bl	8008b8c <_ZN7desenet5Frame6bufferEv>
 8008d46:	4604      	mov	r4, r0
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7ff ff12 	bl	8008b74 <_ZNK7desenet5Frame6lengthEv>
 8008d50:	4603      	mov	r3, r0
 8008d52:	3301      	adds	r3, #1
 8008d54:	441c      	add	r4, r3
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7ff ff24 	bl	8008ba6 <_ZNK7desenet5Frame14reservedLengthEv>
 8008d5e:	4605      	mov	r5, r0
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7ff ff06 	bl	8008b74 <_ZNK7desenet5Frame6lengthEv>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	1aeb      	subs	r3, r5, r3
 8008d6c:	1e5a      	subs	r2, r3, #1
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4621      	mov	r1, r4
 8008d72:	4618      	mov	r0, r3
 8008d74:	f000 f8ce 	bl	8008f14 <_ZN3hei12SharedBufferIhE5proxyEPhj>
    SharedByteBuffer b;
 8008d78:	f107 030c 	add.w	r3, r7, #12
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7fe fd02 	bl	8007786 <_ZN3hei12SharedBufferIhED1Ev>
    return b.proxy(buffer()+length()+ EPDU_HEADER_SIZE,reservedLength()-length()-1);
 8008d82:	bf00      	nop
}
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	3718      	adds	r7, #24
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bdb0      	pop	{r4, r5, r7, pc}

08008d8c <_ZN7desenet4MPDU5ResetEv>:
void MPDU::Reset()
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
    setDestination(GATEWAY_ADDRESS);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4910      	ldr	r1, [pc, #64]	; (8008dd8 <_ZN7desenet4MPDU5ResetEv+0x4c>)
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 fde9 	bl	8009970 <_ZN7desenet5Frame14setDestinationERKN3phy7AddressILj4EEE>
    SlotNumber sensorID = DESENET_SLOT_NUMBER;
 8008d9e:	2303      	movs	r3, #3
 8008da0:	73fb      	strb	r3, [r7, #15]
    std::memcpy(buffer() + HEADER_SIZE + SENSORID_OFFSET,&sensorID,sizeof (desenet::SlotNumber));
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7ff fef1 	bl	8008b8c <_ZN7desenet5Frame6bufferEv>
 8008daa:	4603      	mov	r3, r0
 8008dac:	3305      	adds	r3, #5
 8008dae:	7bfa      	ldrb	r2, [r7, #15]
 8008db0:	701a      	strb	r2, [r3, #0]
    setType(FrameType::MPDU);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2102      	movs	r1, #2
 8008db6:	4618      	mov	r0, r3
 8008db8:	f000 fe3d 	bl	8009a36 <_ZN7desenet5Frame7setTypeENS_9FrameTypeE>
    setEPDUCount(0);
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f80c 	bl	8008ddc <_ZN7desenet4MPDU12setEPDUCountEi>
    setLength(HEADER_SIZE+FOOTER_SIZE+MPDU_HEADER_SIZE);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2107      	movs	r1, #7
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f000 fd89 	bl	80098e0 <_ZN7desenet5Frame9setLengthEj>
}
 8008dce:	bf00      	nop
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	20001608 	.word	0x20001608

08008ddc <_ZN7desenet4MPDU12setEPDUCountEi>:
void MPDU::setEPDUCount(int cnt)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
    ePDUCount = cnt;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	615a      	str	r2, [r3, #20]
    std::memcpy(buffer()+ HEADER_SIZE + EPDUCOUNT_OFFSET,&ePDUCount,sizeof (uint8_t));
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7ff fecc 	bl	8008b8c <_ZN7desenet5Frame6bufferEv>
 8008df4:	4603      	mov	r3, r0
 8008df6:	3306      	adds	r3, #6
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	3214      	adds	r2, #20
 8008dfc:	7812      	ldrb	r2, [r2, #0]
 8008dfe:	701a      	strb	r2, [r3, #0]
}
 8008e00:	bf00      	nop
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <_ZN7desenet4MPDU9getBufferEv>:

uint8_t *MPDU::getBuffer()
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
    return buffer();
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7ff feba 	bl	8008b8c <_ZN7desenet5Frame6bufferEv>
 8008e18:	4603      	mov	r3, r0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <_ZN7desenet4MPDU17getRemainingSpaceEv>:

uint8_t MPDU::getRemainingSpace()
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b082      	sub	sp, #8
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
    return Mtu - HEADER_SIZE - FOOTER_SIZE - length(); //Return the remaining bytes size in the MPDU buffer
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7ff fea1 	bl	8008b74 <_ZNK7desenet5Frame6lengthEv>
 8008e32:	4603      	mov	r3, r0
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	f1c3 0320 	rsb	r3, r3, #32
 8008e3a:	b2db      	uxtb	r3, r3
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <_ZN7desenet4MPDU10evPDUwriteERKN3hei12SharedBufferIhEE>:

size_t MPDU::evPDUwrite(const SharedByteBuffer &evData){ //Used for events PDU to write the data in the MPDU
 8008e44:	b5b0      	push	{r4, r5, r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
    //qDebug() << "evData length : " << evData.length();
    //qDebug() << "sizeof evData : " << sizeof (evData);
    //uint8_t* ptTest = new uint8_t();
    //*ptTest = 4;
    //qDebug() << "Test pointer value : " << *ptTest;
    std::memcpy(buffer()+length()+EPDU_HEADER_SIZE,evData.data(),evData.length());
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7ff fe9b 	bl	8008b8c <_ZN7desenet5Frame6bufferEv>
 8008e56:	4604      	mov	r4, r0
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7ff fe8a 	bl	8008b74 <_ZNK7desenet5Frame6lengthEv>
 8008e60:	4603      	mov	r3, r0
 8008e62:	3301      	adds	r3, #1
 8008e64:	441c      	add	r4, r3
 8008e66:	6838      	ldr	r0, [r7, #0]
 8008e68:	f000 f81f 	bl	8008eaa <_ZNK3hei12SharedBufferIhE4dataEv>
 8008e6c:	4605      	mov	r5, r0
 8008e6e:	6838      	ldr	r0, [r7, #0]
 8008e70:	f000 f828 	bl	8008ec4 <_ZNK3hei12SharedBufferIhE6lengthEv>
 8008e74:	4603      	mov	r3, r0
 8008e76:	461a      	mov	r2, r3
 8008e78:	4629      	mov	r1, r5
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f00d fc4e 	bl	801671c <memcpy>
    return evData.length();
 8008e80:	6838      	ldr	r0, [r7, #0]
 8008e82:	f000 f81f 	bl	8008ec4 <_ZNK3hei12SharedBufferIhE6lengthEv>
 8008e86:	4603      	mov	r3, r0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bdb0      	pop	{r4, r5, r7, pc}

08008e90 <_ZN3hei12SharedBufferIhE4dataEv>:
         * @brief Returns pointer to the underlying array serving as element storage. The pointer is such that range
         *        [data(); data() + size()) is always a valid range, even if the container is empty.
         *
         * @return Pointer to the underlying element storage. For non-empty containers, returns &front().
         */
        pointer data() {
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
            return data_.get();
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7fd ff7f 	bl	8006d9e <_ZNKSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8008ea0:	4603      	mov	r3, r0
        }
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <_ZNK3hei12SharedBufferIhE4dataEv>:
         * @brief Returns pointer to the underlying array serving as element storage. The pointer is such that range
         *        [data(); data() + size()) is always a valid range, even if the container is empty.
         *
         * @return Pointer to the underlying element storage. For non-empty containers, returns &front().
         */
        constPointer data() const {
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b082      	sub	sp, #8
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
            return data_.get();
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fd ff72 	bl	8006d9e <_ZNKSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8008eba:	4603      	mov	r3, r0
        }
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <_ZNK3hei12SharedBufferIhE6lengthEv>:
        sizeType length() const {
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
            return length_ / sizeof(T);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	689b      	ldr	r3, [r3, #8]
        }
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <_ZN3hei12SharedBufferIhEC1Ev>:
        SharedBuffer(): data_(nullptr), length_(0) {}
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f000 f837 	bl	8008f5c <_ZNSt10shared_ptrIhEC1EDn>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	609a      	str	r2, [r3, #8]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3708      	adds	r7, #8
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <_ZZN3hei12SharedBufferIhE5proxyEPhjENKUlS2_E_clES2_>:
            buffer.data_ = std::shared_ptr<T>(data, [](pointer){});
 8008efe:	b480      	push	{r7}
 8008f00:	b083      	sub	sp, #12
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
 8008f06:	6039      	str	r1, [r7, #0]
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <_ZN3hei12SharedBufferIhE5proxyEPhj>:
        static SharedBuffer proxy(pointer data, sizeType length) {
 8008f14:	b5b0      	push	{r4, r5, r7, lr}
 8008f16:	b088      	sub	sp, #32
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	607a      	str	r2, [r7, #4]
            SharedBuffer buffer;
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f7ff ffdb 	bl	8008edc <_ZN3hei12SharedBufferIhEC1Ev>
            buffer.data_ = std::shared_ptr<T>(data, [](pointer){});
 8008f26:	68fc      	ldr	r4, [r7, #12]
 8008f28:	f107 0314 	add.w	r3, r7, #20
 8008f2c:	462a      	mov	r2, r5
 8008f2e:	68b9      	ldr	r1, [r7, #8]
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 f820 	bl	8008f76 <_ZNSt10shared_ptrIhEC1IhZN3hei12SharedBufferIhE5proxyEPhjEUlS5_E_vEEPT_T0_>
 8008f36:	f107 0314 	add.w	r3, r7, #20
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	f7fe fe53 	bl	8007be8 <_ZNSt10shared_ptrIhEaSEOS0_>
 8008f42:	f107 0314 	add.w	r3, r7, #20
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fe fc10 	bl	800776c <_ZNSt10shared_ptrIhED1Ev>
            buffer.length_ = length * sizeof(T);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	609a      	str	r2, [r3, #8]
            return buffer;
 8008f52:	bf00      	nop
        }
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	3720      	adds	r7, #32
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bdb0      	pop	{r4, r5, r7, pc}

08008f5c <_ZNSt10shared_ptrIhEC1EDn>:
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7fe fe1c 	bl	8007ba4 <_ZNSt10shared_ptrIhEC1Ev>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <_ZNSt10shared_ptrIhEC1IhZN3hei12SharedBufferIhE5proxyEPhjEUlS5_E_vEEPT_T0_>:
	shared_ptr(_Yp* __p, _Deleter __d)
 8008f76:	b5b0      	push	{r4, r5, r7, lr}
 8008f78:	b084      	sub	sp, #16
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	60f8      	str	r0, [r7, #12]
 8008f7e:	60b9      	str	r1, [r7, #8]
 8008f80:	713a      	strb	r2, [r7, #4]
        : __shared_ptr<_Tp>(__p, std::move(__d)) { }
 8008f82:	68fc      	ldr	r4, [r7, #12]
 8008f84:	1d3b      	adds	r3, r7, #4
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 f80a 	bl	8008fa0 <_ZSt4moveIRZN3hei12SharedBufferIhE5proxyEPhjEUlS3_E_EONSt16remove_referenceIT_E4typeEOS7_>
 8008f8c:	462a      	mov	r2, r5
 8008f8e:	68b9      	ldr	r1, [r7, #8]
 8008f90:	4620      	mov	r0, r4
 8008f92:	f000 f810 	bl	8008fb6 <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EEC1IhZN3hei12SharedBufferIhE5proxyEPhjEUlS7_E_vEEPT_T0_>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bdb0      	pop	{r4, r5, r7, pc}

08008fa0 <_ZSt4moveIRZN3hei12SharedBufferIhE5proxyEPhjEUlS3_E_EONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4618      	mov	r0, r3
 8008fac:	370c      	adds	r7, #12
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr

08008fb6 <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EEC1IhZN3hei12SharedBufferIhE5proxyEPhjEUlS7_E_vEEPT_T0_>:
	__shared_ptr(_Yp* __p, _Deleter __d)
 8008fb6:	b5b0      	push	{r4, r5, r7, lr}
 8008fb8:	b084      	sub	sp, #16
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	60f8      	str	r0, [r7, #12]
 8008fbe:	60b9      	str	r1, [r7, #8]
 8008fc0:	713a      	strb	r2, [r7, #4]
	: _M_ptr(__p), _M_refcount(__p, std::move(__d))
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	601a      	str	r2, [r3, #0]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	1d1c      	adds	r4, r3, #4
 8008fcc:	1d3b      	adds	r3, r7, #4
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7ff ffe6 	bl	8008fa0 <_ZSt4moveIRZN3hei12SharedBufferIhE5proxyEPhjEUlS3_E_EONSt16remove_referenceIT_E4typeEOS7_>
 8008fd4:	462a      	mov	r2, r5
 8008fd6:	68b9      	ldr	r1, [r7, #8]
 8008fd8:	4620      	mov	r0, r4
 8008fda:	f000 f809 	bl	8008ff0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPhZN3hei12SharedBufferIhE5proxyES4_jEUlS4_E_vEET_T0_>
	  _M_enable_shared_from_this_with(__p);
 8008fde:	68b9      	ldr	r1, [r7, #8]
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f7fe fecd 	bl	8007d80 <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIhhEENSt9enable_ifIXntsrNS2_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bdb0      	pop	{r4, r5, r7, pc}

08008ff0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPhZN3hei12SharedBufferIhE5proxyES4_jEUlS4_E_vEET_T0_>:
	__shared_count(_Ptr __p, _Deleter __d)
 8008ff0:	b5b0      	push	{r4, r5, r7, lr}
 8008ff2:	b086      	sub	sp, #24
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p, std::move(__d), allocator<void>())
 8008ffc:	1d3b      	adds	r3, r7, #4
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7ff ffce 	bl	8008fa0 <_ZSt4moveIRZN3hei12SharedBufferIhE5proxyEPhjEUlS3_E_EONSt16remove_referenceIT_E4typeEOS7_>
 8009004:	462b      	mov	r3, r5
 8009006:	4622      	mov	r2, r4
 8009008:	68b9      	ldr	r1, [r7, #8]
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f000 f805 	bl	800901a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPhZN3hei12SharedBufferIhE5proxyES4_jEUlS4_E_SaIvEvEET_T0_T1_>
	{ }
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	4618      	mov	r0, r3
 8009014:	3718      	adds	r7, #24
 8009016:	46bd      	mov	sp, r7
 8009018:	bdb0      	pop	{r4, r5, r7, pc}

0800901a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPhZN3hei12SharedBufferIhE5proxyES4_jEUlS4_E_SaIvEvEET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 800901a:	b590      	push	{r4, r7, lr}
 800901c:	b08b      	sub	sp, #44	; 0x2c
 800901e:	af00      	add	r7, sp, #0
 8009020:	60f8      	str	r0, [r7, #12]
 8009022:	60b9      	str	r1, [r7, #8]
 8009024:	713a      	strb	r2, [r7, #4]
 8009026:	703b      	strb	r3, [r7, #0]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2200      	movs	r2, #0
 800902c:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800902e:	463a      	mov	r2, r7
 8009030:	f107 031c 	add.w	r3, r7, #28
 8009034:	4611      	mov	r1, r2
 8009036:	4618      	mov	r0, r3
 8009038:	f000 f83a 	bl	80090b0 <_ZNSaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES0_jEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 800903c:	f107 0314 	add.w	r3, r7, #20
 8009040:	f107 021c 	add.w	r2, r7, #28
 8009044:	4611      	mov	r1, r2
 8009046:	4618      	mov	r0, r3
 8009048:	f000 f84b 	bl	80090e2 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES1_jEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERSC_>
	      _Sp_cd_type* __mem = __guard.get();
 800904c:	f107 0314 	add.w	r3, r7, #20
 8009050:	4618      	mov	r0, r3
 8009052:	f000 f86e 	bl	8009132 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES1_jEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 8009056:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8009058:	1d3b      	adds	r3, r7, #4
 800905a:	4618      	mov	r0, r3
 800905c:	f7ff ffa0 	bl	8008fa0 <_ZSt4moveIRZN3hei12SharedBufferIhE5proxyEPhjEUlS3_E_EONSt16remove_referenceIT_E4typeEOS7_>
 8009060:	463b      	mov	r3, r7
 8009062:	4618      	mov	r0, r3
 8009064:	f7fe ff7d 	bl	8007f62 <_ZSt4moveIRSaIvEEONSt16remove_referenceIT_E4typeEOS3_>
 8009068:	4604      	mov	r4, r0
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	4619      	mov	r1, r3
 800906e:	2010      	movs	r0, #16
 8009070:	f7fe fb02 	bl	8007678 <_ZnwjPv>
 8009074:	4623      	mov	r3, r4
 8009076:	f897 2020 	ldrb.w	r2, [r7, #32]
 800907a:	68b9      	ldr	r1, [r7, #8]
 800907c:	f000 f868 	bl	8009150 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES0_jEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES0_S4_RKS5_>
	      _M_pi = __mem;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009084:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8009086:	f107 0314 	add.w	r3, r7, #20
 800908a:	2100      	movs	r1, #0
 800908c:	4618      	mov	r0, r3
 800908e:	f000 f881 	bl	8009194 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES1_jEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8009092:	f107 0314 	add.w	r3, r7, #20
 8009096:	4618      	mov	r0, r3
 8009098:	f000 f836 	bl	8009108 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES1_jEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800909c:	f107 031c 	add.w	r3, r7, #28
 80090a0:	4618      	mov	r0, r3
 80090a2:	f000 f812 	bl	80090ca <_ZNSaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES0_jEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
	}
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	4618      	mov	r0, r3
 80090aa:	372c      	adds	r7, #44	; 0x2c
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd90      	pop	{r4, r7, pc}

080090b0 <_ZNSaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES0_jEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f879 	bl	80091b2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES2_jEUlS2_E_SaIvELNS_12_Lock_policyE0EEEC1Ev>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4618      	mov	r0, r3
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <_ZNSaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES0_jEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b082      	sub	sp, #8
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f878 	bl	80091c8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES2_jEUlS2_E_SaIvELNS_12_Lock_policyE0EEED1Ev>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4618      	mov	r0, r3
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES1_jEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERSC_>:
    __allocate_guarded(_Alloc& __a)
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b082      	sub	sp, #8
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 80090ec:	2101      	movs	r1, #1
 80090ee:	6838      	ldr	r0, [r7, #0]
 80090f0:	f000 f875 	bl	80091de <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES1_jEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERSA_j>
 80090f4:	4603      	mov	r3, r0
 80090f6:	461a      	mov	r2, r3
 80090f8:	6839      	ldr	r1, [r7, #0]
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f87e 	bl	80091fc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES1_jEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERSA_PS9_>
    }
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES1_jEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d007      	beq.n	8009128 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES1_jEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6818      	ldr	r0, [r3, #0]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	2201      	movs	r2, #1
 8009122:	4619      	mov	r1, r3
 8009124:	f000 f87e 	bl	8009224 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES1_jEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERSA_PS9_j>
      }
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4618      	mov	r0, r3
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES1_jEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 8009132:	b580      	push	{r7, lr}
 8009134:	b082      	sub	sp, #8
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	4618      	mov	r0, r3
 8009140:	f000 f87f 	bl	8009242 <_ZSt12__to_addressISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES1_jEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_SB_>
 8009144:	4603      	mov	r3, r0
 8009146:	4618      	mov	r0, r3
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
	...

08009150 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES0_jEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES0_S4_RKS5_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8009150:	b5b0      	push	{r4, r5, r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	713a      	strb	r2, [r7, #4]
 800915c:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	4618      	mov	r0, r3
 8009162:	f7fe ff8d 	bl	8008080 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8009166:	4a0a      	ldr	r2, [pc, #40]	; (8009190 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES0_jEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES0_S4_RKS5_+0x40>)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	601a      	str	r2, [r3, #0]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f103 040c 	add.w	r4, r3, #12
 8009172:	1d3b      	adds	r3, r7, #4
 8009174:	4618      	mov	r0, r3
 8009176:	f7ff ff13 	bl	8008fa0 <_ZSt4moveIRZN3hei12SharedBufferIhE5proxyEPhjEUlS3_E_EONSt16remove_referenceIT_E4typeEOS7_>
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	462a      	mov	r2, r5
 800917e:	68b9      	ldr	r1, [r7, #8]
 8009180:	4620      	mov	r0, r4
 8009182:	f000 f869 	bl	8009258 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES0_jEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES0_S4_RKS5_>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	4618      	mov	r0, r3
 800918a:	3710      	adds	r7, #16
 800918c:	46bd      	mov	sp, r7
 800918e:	bdb0      	pop	{r4, r5, r7, pc}
 8009190:	0801be98 	.word	0x0801be98

08009194 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES1_jEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	605a      	str	r2, [r3, #4]
	return *this;
 80091a4:	687b      	ldr	r3, [r7, #4]
      }
 80091a6:	4618      	mov	r0, r3
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES2_jEUlS2_E_SaIvELNS_12_Lock_policyE0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80091b2:	b480      	push	{r7}
 80091b4:	b083      	sub	sp, #12
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4618      	mov	r0, r3
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES2_jEUlS2_E_SaIvELNS_12_Lock_policyE0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4618      	mov	r0, r3
 80091d4:	370c      	adds	r7, #12
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES1_jEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERSA_j>:
      allocate(allocator_type& __a, size_type __n)
 80091de:	b580      	push	{r7, lr}
 80091e0:	b082      	sub	sp, #8
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80091e8:	2200      	movs	r2, #0
 80091ea:	6839      	ldr	r1, [r7, #0]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f84f 	bl	8009290 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES2_jEUlS2_E_SaIvELNS_12_Lock_policyE0EEE8allocateEjPKv>
 80091f2:	4603      	mov	r3, r0
 80091f4:	4618      	mov	r0, r3
 80091f6:	3708      	adds	r7, #8
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES1_jEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERSA_PS9_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8009208:	68b8      	ldr	r0, [r7, #8]
 800920a:	f000 f85f 	bl	80092cc <_ZSt11__addressofISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES1_jEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSB_>
 800920e:	4602      	mov	r2, r0
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	601a      	str	r2, [r3, #0]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	605a      	str	r2, [r3, #4]
      { }
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	4618      	mov	r0, r3
 800921e:	3710      	adds	r7, #16
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES1_jEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERSA_PS9_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	68b9      	ldr	r1, [r7, #8]
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 f854 	bl	80092e2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES2_jEUlS2_E_SaIvELNS_12_Lock_policyE0EEE10deallocateEPS9_j>
 800923a:	bf00      	nop
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <_ZSt12__to_addressISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES1_jEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_SB_>:
    __to_address(_Tp* __ptr) noexcept
 8009242:	b480      	push	{r7}
 8009244:	b083      	sub	sp, #12
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
      return __ptr;
 800924a:	687b      	ldr	r3, [r7, #4]
    }
 800924c:	4618      	mov	r0, r3
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES0_jEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES0_S4_RKS5_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	713a      	strb	r2, [r7, #4]
 8009264:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 8009266:	1d3b      	adds	r3, r7, #4
 8009268:	4618      	mov	r0, r3
 800926a:	f7ff fe99 	bl	8008fa0 <_ZSt4moveIRZN3hei12SharedBufferIhE5proxyEPhjEUlS3_E_EONSt16remove_referenceIT_E4typeEOS7_>
 800926e:	4603      	mov	r3, r0
 8009270:	4619      	mov	r1, r3
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f000 f842 	bl	80092fc <_ZNSt14_Sp_ebo_helperILi0EZN3hei12SharedBufferIhE5proxyEPhjEUlS3_E_Lb1EEC1EOS4_>
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f7fe ff75 	bl	800816a <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	601a      	str	r2, [r3, #0]
	{ }
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	4618      	mov	r0, r3
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES2_jEUlS2_E_SaIvELNS_12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f000 f83a 	bl	8009316 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES2_jEUlS2_E_SaIvELNS_12_Lock_policyE0EEE8max_sizeEv>
 80092a2:	4602      	mov	r2, r0
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	4293      	cmp	r3, r2
 80092a8:	bf8c      	ite	hi
 80092aa:	2301      	movhi	r3, #1
 80092ac:	2300      	movls	r3, #0
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d001      	beq.n	80092b8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES2_jEUlS2_E_SaIvELNS_12_Lock_policyE0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80092b4:	f00d f90b 	bl	80164ce <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	011b      	lsls	r3, r3, #4
 80092bc:	4618      	mov	r0, r3
 80092be:	f00d f8e2 	bl	8016486 <_Znwj>
 80092c2:	4603      	mov	r3, r0
      }
 80092c4:	4618      	mov	r0, r3
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <_ZSt11__addressofISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES1_jEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSB_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4618      	mov	r0, r3
 80092d8:	370c      	adds	r7, #12
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES2_jEUlS2_E_SaIvELNS_12_Lock_policyE0EEE10deallocateEPS9_j>:
      deallocate(pointer __p, size_type)
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b084      	sub	sp, #16
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	60f8      	str	r0, [r7, #12]
 80092ea:	60b9      	str	r1, [r7, #8]
 80092ec:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80092ee:	68b8      	ldr	r0, [r7, #8]
 80092f0:	f00d f8b4 	bl	801645c <_ZdlPv>
      }
 80092f4:	bf00      	nop
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <_ZNSt14_Sp_ebo_helperILi0EZN3hei12SharedBufferIhE5proxyEPhjEUlS3_E_Lb1EEC1EOS4_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
 8009306:	6838      	ldr	r0, [r7, #0]
 8009308:	f7ff fe4a 	bl	8008fa0 <_ZSt4moveIRZN3hei12SharedBufferIhE5proxyEPhjEUlS3_E_EONSt16remove_referenceIT_E4typeEOS7_>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4618      	mov	r0, r3
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES2_jEUlS2_E_SaIvELNS_12_Lock_policyE0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8009316:	b480      	push	{r7}
 8009318:	b083      	sub	sp, #12
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800931e:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 8009322:	4618      	mov	r0, r3
 8009324:	370c      	adds	r7, #12
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr
	...

08009330 <_Z41__static_initialization_and_destruction_0ii>:
 8009330:	b580      	push	{r7, lr}
 8009332:	b088      	sub	sp, #32
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d122      	bne.n	8009386 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009346:	4293      	cmp	r3, r2
 8009348:	d11d      	bne.n	8009386 <_Z41__static_initialization_and_destruction_0ii+0x56>
 800934a:	4b18      	ldr	r3, [pc, #96]	; (80093ac <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	613b      	str	r3, [r7, #16]
 8009350:	f107 0310 	add.w	r3, r7, #16
 8009354:	60bb      	str	r3, [r7, #8]
 8009356:	2304      	movs	r3, #4
 8009358:	60fb      	str	r3, [r7, #12]
 800935a:	f107 0308 	add.w	r3, r7, #8
 800935e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009362:	4813      	ldr	r0, [pc, #76]	; (80093b0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8009364:	f7fd fcae 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
  static const desenet::Address SENSOR_ADDRESS({0xC7, 0xC7, 0xC7, 0xC7});	///< @brief Sensor's reception address.
 8009368:	4b12      	ldr	r3, [pc, #72]	; (80093b4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	61fb      	str	r3, [r7, #28]
 800936e:	f107 031c 	add.w	r3, r7, #28
 8009372:	617b      	str	r3, [r7, #20]
 8009374:	2304      	movs	r3, #4
 8009376:	61bb      	str	r3, [r7, #24]
 8009378:	f107 0314 	add.w	r3, r7, #20
 800937c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009380:	480d      	ldr	r0, [pc, #52]	; (80093b8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8009382:	f7fd fc9f 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d10a      	bne.n	80093a2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009392:	4293      	cmp	r3, r2
 8009394:	d105      	bne.n	80093a2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8009396:	4808      	ldr	r0, [pc, #32]	; (80093b8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8009398:	f7fd fdd0 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 800939c:	4804      	ldr	r0, [pc, #16]	; (80093b0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800939e:	f7fd fdcd 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
 80093a2:	bf00      	nop
 80093a4:	3720      	adds	r7, #32
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	08018748 	.word	0x08018748
 80093b0:	20001608 	.word	0x20001608
 80093b4:	0801874c 	.word	0x0801874c
 80093b8:	20001610 	.word	0x20001610

080093bc <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES0_jEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	4a05      	ldr	r2, [pc, #20]	; (80093dc <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES0_jEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	601a      	str	r2, [r3, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7fe fbc9 	bl	8007b64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4618      	mov	r0, r3
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	0801be98 	.word	0x0801be98

080093e0 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES0_jEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f7ff ffe7 	bl	80093bc <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES0_jEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80093ee:	2110      	movs	r1, #16
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f00d f835 	bl	8016460 <_ZdlPvj>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4618      	mov	r0, r3
 80093fa:	3708      	adds	r7, #8
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES0_jEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	330c      	adds	r3, #12
 800940c:	4618      	mov	r0, r3
 800940e:	f000 f840 	bl	8009492 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES0_jEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 8009412:	4602      	mov	r2, r0
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	4619      	mov	r1, r3
 800941a:	4610      	mov	r0, r2
 800941c:	f7ff fd6f 	bl	8008efe <_ZZN3hei12SharedBufferIhE5proxyEPhjENKUlS2_E_clES2_>
 8009420:	bf00      	nop
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES0_jEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8009428:	b580      	push	{r7, lr}
 800942a:	b086      	sub	sp, #24
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	330c      	adds	r3, #12
 8009434:	4618      	mov	r0, r3
 8009436:	f000 f838 	bl	80094aa <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES0_jEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800943a:	4602      	mov	r2, r0
 800943c:	f107 0314 	add.w	r3, r7, #20
 8009440:	4611      	mov	r1, r2
 8009442:	4618      	mov	r0, r3
 8009444:	f7ff fe34 	bl	80090b0 <_ZNSaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES0_jEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8009448:	f107 0114 	add.w	r1, r7, #20
 800944c:	f107 030c 	add.w	r3, r7, #12
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	4618      	mov	r0, r3
 8009454:	f7ff fed2 	bl	80091fc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES1_jEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERSA_PS9_>
	this->~_Sp_counted_deleter();
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7ff ffaf 	bl	80093bc <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES0_jEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800945e:	f107 030c 	add.w	r3, r7, #12
 8009462:	4618      	mov	r0, r3
 8009464:	f7ff fe50 	bl	8009108 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES1_jEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8009468:	f107 0314 	add.w	r3, r7, #20
 800946c:	4618      	mov	r0, r3
 800946e:	f7ff fe2c 	bl	80090ca <_ZNSaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES0_jEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
      }
 8009472:	bf00      	nop
 8009474:	3718      	adds	r7, #24
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES0_jEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 800947a:	b480      	push	{r7}
 800947c:	b083      	sub	sp, #12
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
 8009482:	6039      	str	r1, [r7, #0]
        return nullptr;
 8009484:	2300      	movs	r3, #0
      }
 8009486:	4618      	mov	r0, r3
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES0_jEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8009492:	b580      	push	{r7, lr}
 8009494:	b082      	sub	sp, #8
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f811 	bl	80094c2 <_ZNSt14_Sp_ebo_helperILi0EZN3hei12SharedBufferIhE5proxyEPhjEUlS3_E_Lb1EE6_S_getERS5_>
 80094a0:	4603      	mov	r3, r0
 80094a2:	4618      	mov	r0, r3
 80094a4:	3708      	adds	r7, #8
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyES0_jEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b082      	sub	sp, #8
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f7fe ff46 	bl	8008344 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 80094b8:	4603      	mov	r3, r0
 80094ba:	4618      	mov	r0, r3
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <_ZNSt14_Sp_ebo_helperILi0EZN3hei12SharedBufferIhE5proxyEPhjEUlS3_E_Lb1EE6_S_getERS5_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 80094c2:	b480      	push	{r7}
 80094c4:	b083      	sub	sp, #12
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4618      	mov	r0, r3
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <_GLOBAL__sub_I__ZN7desenet4MPDUC2Ev>:
 80094d8:	b580      	push	{r7, lr}
 80094da:	af00      	add	r7, sp, #0
 80094dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80094e0:	2001      	movs	r0, #1
 80094e2:	f7ff ff25 	bl	8009330 <_Z41__static_initialization_and_destruction_0ii>
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <_GLOBAL__sub_D__ZN7desenet4MPDUC2Ev>:
 80094e8:	b580      	push	{r7, lr}
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80094f0:	2000      	movs	r0, #0
 80094f2:	f7ff ff1d 	bl	8009330 <_Z41__static_initialization_and_destruction_0ii>
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <_ZNSt12_Base_bitsetILj1EEC1Ey>:
      _GLIBCXX_CONSTEXPR _Base_bitset() _GLIBCXX_NOEXCEPT
      : _M_w(0)
      { }

#if __cplusplus >= 201103L
      constexpr _Base_bitset(unsigned long long __val) noexcept
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	e9c7 2300 	strd	r2, r3, [r7]
#else
      _Base_bitset(unsigned long __val)
#endif
      : _M_w(__val)
 8009504:	683a      	ldr	r2, [r7, #0]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	601a      	str	r2, [r3, #0]
      { }
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	4618      	mov	r0, r3
 800950e:	3714      	adds	r7, #20
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    { ++_M_use_count; }
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	1c5a      	adds	r2, r3, #1
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	605a      	str	r2, [r3, #4]
 800952a:	bf00      	nop
 800952c:	370c      	adds	r7, #12
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr

08009536 <_ZNK7desenet5Frame6bufferEv>:
        const std::uint8_t *buffer() const
 8009536:	b580      	push	{r7, lr}
 8009538:	b082      	sub	sp, #8
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
            return buffer_.data();
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4618      	mov	r0, r3
 8009542:	f7ff fcb2 	bl	8008eaa <_ZNK3hei12SharedBufferIhE4dataEv>
 8009546:	4603      	mov	r3, r0
        }
 8009548:	4618      	mov	r0, r3
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	601a      	str	r2, [r3, #0]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	1d1a      	adds	r2, r3, #4
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	3304      	adds	r3, #4
 800956a:	4619      	mov	r1, r3
 800956c:	4610      	mov	r0, r2
 800956e:	f000 f88f 	bl	8009690 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4618      	mov	r0, r3
 8009576:	3708      	adds	r7, #8
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <_ZNSt10shared_ptrIhEC1ERKS0_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	4611      	mov	r1, r2
 800958c:	4618      	mov	r0, r3
 800958e:	f7ff ffdf 	bl	8009550 <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4618      	mov	r0, r3
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <_ZN3hei12SharedBufferIhEC1ERKS1_>:
    class SharedBuffer {
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	683a      	ldr	r2, [r7, #0]
 80095aa:	4611      	mov	r1, r2
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7ff ffe5 	bl	800957c <_ZNSt10shared_ptrIhEC1ERKS0_>
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	689a      	ldr	r2, [r3, #8]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	609a      	str	r2, [r3, #8]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4618      	mov	r0, r3
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <_ZN7desenet5FrameC1ERKS0_>:
    class Frame
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	683a      	ldr	r2, [r7, #0]
 80095d2:	4611      	mov	r1, r2
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7ff ffe1 	bl	800959c <_ZN3hei12SharedBufferIhEC1ERKS1_>
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	68da      	ldr	r2, [r3, #12]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	60da      	str	r2, [r3, #12]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4618      	mov	r0, r3
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <_ZN7desenet6BeaconC1ERKNS_5FrameE>:
    setType(FrameType::Beacon);
    setNetworkTime(0);
    setCycleInterval(cycleInterval);
}

desenet::Beacon::Beacon(const Frame & frame)
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
 : Frame(frame)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6839      	ldr	r1, [r7, #0]
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7ff ffe2 	bl	80095c4 <_ZN7desenet5FrameC1ERKS0_>
{
}
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4618      	mov	r0, r3
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <_ZNK7desenet6Beacon11networkTimeEv>:
{
	Frame::setDestination(destinationAddress);
}

uint64_t desenet::Beacon::networkTime() const
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b084      	sub	sp, #16
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
    uint64_t time;
    memcpy(&time, buffer() + Frame::HEADER_SIZE + 1, sizeof(time));
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4618      	mov	r0, r3
 8009616:	f7ff ff8e 	bl	8009536 <_ZNK7desenet5Frame6bufferEv>
 800961a:	4603      	mov	r3, r0
 800961c:	1d99      	adds	r1, r3, #6
 800961e:	f107 0308 	add.w	r3, r7, #8
 8009622:	2208      	movs	r2, #8
 8009624:	4618      	mov	r0, r3
 8009626:	f00d f879 	bl	801671c <memcpy>
    return time;
 800962a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800962e:	4610      	mov	r0, r2
 8009630:	4619      	mov	r1, r3
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <_ZN7desenet6Beacon12slotDurationEv>:
{
    memcpy(buffer() + Frame::HEADER_SIZE + 5, &interval, 3 /* bytes */);
}

desenet::SlotDuration desenet::Beacon::slotDuration()
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
	desenet::SlotDuration slotDuration;

    memcpy(&slotDuration, buffer() + Frame::HEADER_SIZE + 8, sizeof(slotDuration));
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4618      	mov	r0, r3
 8009644:	f7ff faa2 	bl	8008b8c <_ZN7desenet5Frame6bufferEv>
 8009648:	4603      	mov	r3, r0
 800964a:	330d      	adds	r3, #13
 800964c:	881b      	ldrh	r3, [r3, #0]
 800964e:	b29b      	uxth	r3, r3
 8009650:	81fb      	strh	r3, [r7, #14]

	return slotDuration;
 8009652:	89fb      	ldrh	r3, [r7, #14]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <_ZNK7desenet6Beacon11svGroupMaskEv>:
{
	memcpy(buffer() + Frame::HEADER_SIZE + 8, &slotDuration, sizeof(slotDuration));
}

desenet::SvGroupMask desenet::Beacon::svGroupMask() const
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
    uint32_t bits;
    memcpy(&bits, buffer() + Frame::HEADER_SIZE + 10, sizeof(bits));
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4618      	mov	r0, r3
 8009668:	f7ff ff65 	bl	8009536 <_ZNK7desenet5Frame6bufferEv>
 800966c:	4603      	mov	r3, r0
 800966e:	330f      	adds	r3, #15
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	60bb      	str	r3, [r7, #8]
    return SvGroupMask(bits);
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	461a      	mov	r2, r3
 8009678:	f04f 0300 	mov.w	r3, #0
 800967c:	f107 010c 	add.w	r1, r7, #12
 8009680:	4608      	mov	r0, r1
 8009682:	f000 f81c 	bl	80096be <_ZNSt6bitsetILj16EEC1Ey>
 8009686:	68fb      	ldr	r3, [r7, #12]
}
 8009688:	4618      	mov	r0, r3
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	601a      	str	r2, [r3, #0]
	if (_M_pi != 0)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d004      	beq.n	80096b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7ff ff32 	bl	8009518 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4618      	mov	r0, r3
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <_ZNSt6bitsetILj16EEC1Ey>:
      _GLIBCXX_CONSTEXPR bitset() _GLIBCXX_NOEXCEPT
      { }

      /// Initial bits bitwise-copied from a single word (others set to zero).
#if __cplusplus >= 201103L
      constexpr bitset(unsigned long long __val) noexcept
 80096be:	b590      	push	{r4, r7, lr}
 80096c0:	b085      	sub	sp, #20
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	60f8      	str	r0, [r7, #12]
 80096c6:	e9c7 2300 	strd	r2, r3, [r7]
      : _Base(_Sanitize_val<_Nb>::_S_do_sanitize_val(__val)) { }
 80096ca:	68fc      	ldr	r4, [r7, #12]
 80096cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096d0:	f000 f80a 	bl	80096e8 <_ZNSt13_Sanitize_valILj16ELb1EE18_S_do_sanitize_valEy>
 80096d4:	4602      	mov	r2, r0
 80096d6:	460b      	mov	r3, r1
 80096d8:	4620      	mov	r0, r4
 80096da:	f7ff ff0d 	bl	80094f8 <_ZNSt12_Base_bitsetILj1EEC1Ey>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	4618      	mov	r0, r3
 80096e2:	3714      	adds	r7, #20
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd90      	pop	{r4, r7, pc}

080096e8 <_ZNSt13_Sanitize_valILj16ELb1EE18_S_do_sanitize_valEy>:
      _S_do_sanitize_val(unsigned long long __val)
 80096e8:	b4b0      	push	{r4, r5, r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	e9c7 0100 	strd	r0, r1, [r7]
      { return __val & ~((~static_cast<unsigned long long>(0)) << _Nb); }
 80096f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80096fa:	f04f 0100 	mov.w	r1, #0
 80096fe:	ea02 0400 	and.w	r4, r2, r0
 8009702:	ea03 0501 	and.w	r5, r3, r1
 8009706:	4622      	mov	r2, r4
 8009708:	462b      	mov	r3, r5
 800970a:	4610      	mov	r0, r2
 800970c:	4619      	mov	r1, r3
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	bcb0      	pop	{r4, r5, r7}
 8009714:	4770      	bx	lr
	...

08009718 <_Z41__static_initialization_and_destruction_0ii>:

void desenet::Beacon::setSvGroupMask(const desenet::SvGroupMask & mask)
{
    uint32_t bits = mask.to_ulong();
    memcpy(buffer() + Frame::HEADER_SIZE + 10, &bits, sizeof(bits));
}
 8009718:	b580      	push	{r7, lr}
 800971a:	b088      	sub	sp, #32
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2b01      	cmp	r3, #1
 8009726:	d122      	bne.n	800976e <_Z41__static_initialization_and_destruction_0ii+0x56>
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800972e:	4293      	cmp	r3, r2
 8009730:	d11d      	bne.n	800976e <_Z41__static_initialization_and_destruction_0ii+0x56>
 8009732:	4b18      	ldr	r3, [pc, #96]	; (8009794 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	613b      	str	r3, [r7, #16]
 8009738:	f107 0310 	add.w	r3, r7, #16
 800973c:	60bb      	str	r3, [r7, #8]
 800973e:	2304      	movs	r3, #4
 8009740:	60fb      	str	r3, [r7, #12]
 8009742:	f107 0308 	add.w	r3, r7, #8
 8009746:	e893 0006 	ldmia.w	r3, {r1, r2}
 800974a:	4813      	ldr	r0, [pc, #76]	; (8009798 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800974c:	f7fd faba 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
  static const desenet::Address SENSOR_ADDRESS({0xC7, 0xC7, 0xC7, 0xC7});	///< @brief Sensor's reception address.
 8009750:	4b12      	ldr	r3, [pc, #72]	; (800979c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	61fb      	str	r3, [r7, #28]
 8009756:	f107 031c 	add.w	r3, r7, #28
 800975a:	617b      	str	r3, [r7, #20]
 800975c:	2304      	movs	r3, #4
 800975e:	61bb      	str	r3, [r7, #24]
 8009760:	f107 0314 	add.w	r3, r7, #20
 8009764:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009768:	480d      	ldr	r0, [pc, #52]	; (80097a0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800976a:	f7fd faab 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d10a      	bne.n	800978a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800977a:	4293      	cmp	r3, r2
 800977c:	d105      	bne.n	800978a <_Z41__static_initialization_and_destruction_0ii+0x72>
 800977e:	4808      	ldr	r0, [pc, #32]	; (80097a0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8009780:	f7fd fbdc 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 8009784:	4804      	ldr	r0, [pc, #16]	; (8009798 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8009786:	f7fd fbd9 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
 800978a:	bf00      	nop
 800978c:	3720      	adds	r7, #32
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	0801883c 	.word	0x0801883c
 8009798:	20001618 	.word	0x20001618
 800979c:	08018840 	.word	0x08018840
 80097a0:	20001620 	.word	0x20001620

080097a4 <_GLOBAL__sub_I__ZN7desenet6BeaconC2Em>:
 80097a4:	b580      	push	{r7, lr}
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80097ac:	2001      	movs	r0, #1
 80097ae:	f7ff ffb3 	bl	8009718 <_Z41__static_initialization_and_destruction_0ii>
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <_GLOBAL__sub_D__ZN7desenet6BeaconC2Em>:
 80097b4:	b580      	push	{r7, lr}
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80097bc:	2000      	movs	r0, #0
 80097be:	f7ff ffab 	bl	8009718 <_Z41__static_initialization_and_destruction_0ii>
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <_ZN7desenet5FrameC1Ej>:
using std::shared_ptr;
using std::make_shared;
using std::memcpy;
using desenet::NetworkInterfaceDriver;

desenet::Frame::Frame(size_t initialLength)
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
 : buffer_(initialLength),
   frameLength_(0)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6839      	ldr	r1, [r7, #0]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fe f98d 	bl	8007af2 <_ZN3hei12SharedBufferIhEC1Ej>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	60da      	str	r2, [r3, #12]
{
    assert(buffer_.data());
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7ff fb55 	bl	8008e90 <_ZN3hei12SharedBufferIhE4dataEv>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d105      	bne.n	80097f8 <_ZN7desenet5FrameC1Ej+0x34>
 80097ec:	4b07      	ldr	r3, [pc, #28]	; (800980c <_ZN7desenet5FrameC1Ej+0x48>)
 80097ee:	4a08      	ldr	r2, [pc, #32]	; (8009810 <_ZN7desenet5FrameC1Ej+0x4c>)
 80097f0:	2112      	movs	r1, #18
 80097f2:	4808      	ldr	r0, [pc, #32]	; (8009814 <_ZN7desenet5FrameC1Ej+0x50>)
 80097f4:	f00c ff22 	bl	801663c <__assert_func>

    setLength(initialLength);
 80097f8:	6839      	ldr	r1, [r7, #0]
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f870 	bl	80098e0 <_ZN7desenet5Frame9setLengthEj>
}
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4618      	mov	r0, r3
 8009804:	3708      	adds	r7, #8
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	08018844 	.word	0x08018844
 8009810:	08018854 	.word	0x08018854
 8009814:	08018878 	.word	0x08018878

08009818 <_ZN7desenet5FrameC1ERKN3hei12SharedBufferIhEE>:

desenet::Frame::Frame(const SharedByteBuffer &buffer): buffer_(buffer)
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6839      	ldr	r1, [r7, #0]
 8009826:	4618      	mov	r0, r3
 8009828:	f7ff feb8 	bl	800959c <_ZN3hei12SharedBufferIhEC1ERKS1_>
{
    assert(buffer_.data());
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	4618      	mov	r0, r3
 8009830:	f7ff fb2e 	bl	8008e90 <_ZN3hei12SharedBufferIhE4dataEv>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d105      	bne.n	8009846 <_ZN7desenet5FrameC1ERKN3hei12SharedBufferIhEE+0x2e>
 800983a:	4b08      	ldr	r3, [pc, #32]	; (800985c <_ZN7desenet5FrameC1ERKN3hei12SharedBufferIhEE+0x44>)
 800983c:	4a08      	ldr	r2, [pc, #32]	; (8009860 <_ZN7desenet5FrameC1ERKN3hei12SharedBufferIhEE+0x48>)
 800983e:	2119      	movs	r1, #25
 8009840:	4808      	ldr	r0, [pc, #32]	; (8009864 <_ZN7desenet5FrameC1ERKN3hei12SharedBufferIhEE+0x4c>)
 8009842:	f00c fefb 	bl	801663c <__assert_func>
    frameLength_ = buffer.length();
 8009846:	6838      	ldr	r0, [r7, #0]
 8009848:	f7ff fb3c 	bl	8008ec4 <_ZNK3hei12SharedBufferIhE6lengthEv>
 800984c:	4602      	mov	r2, r0
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	60da      	str	r2, [r3, #12]
}
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4618      	mov	r0, r3
 8009856:	3708      	adds	r7, #8
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	08018844 	.word	0x08018844
 8009860:	080188ec 	.word	0x080188ec
 8009864:	08018878 	.word	0x08018878

08009868 <_ZN7desenet5Frame9useBufferEPKhj>:
{
    return Frame(SharedByteBuffer::proxy(buffer, length));
}

const desenet::Frame desenet::Frame::useBuffer(const uint8_t * const buffer, size_t length)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b088      	sub	sp, #32
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
    return Frame(SharedByteBuffer::proxy(buffer, length));
 8009874:	f107 0314 	add.w	r3, r7, #20
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	68b9      	ldr	r1, [r7, #8]
 800987c:	4618      	mov	r0, r3
 800987e:	f000 f96e 	bl	8009b5e <_ZN3hei12SharedBufferIhE5proxyEPKhj>
 8009882:	f107 0314 	add.w	r3, r7, #20
 8009886:	4619      	mov	r1, r3
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	f7ff ffc5 	bl	8009818 <_ZN7desenet5FrameC1ERKN3hei12SharedBufferIhEE>
 800988e:	f107 0314 	add.w	r3, r7, #20
 8009892:	4618      	mov	r0, r3
 8009894:	f7fd ff77 	bl	8007786 <_ZN3hei12SharedBufferIhED1Ev>
 8009898:	bf00      	nop
}
 800989a:	68f8      	ldr	r0, [r7, #12]
 800989c:	3720      	adds	r7, #32
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <_ZNK7desenet5Frame7isValidEv>:
{
    return Frame(SharedByteBuffer::copy(buffer, length));
}

bool desenet::Frame::isValid() const
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b082      	sub	sp, #8
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
    return !buffer_.empty() &&
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4618      	mov	r0, r3
 80098ae:	f000 f97a 	bl	8009ba6 <_ZNK3hei12SharedBufferIhE5emptyEv>
 80098b2:	4603      	mov	r3, r0
 80098b4:	f083 0301 	eor.w	r3, r3, #1
 80098b8:	b2db      	uxtb	r3, r3
    		frameLength_ >= Frame::HEADER_SIZE + 1 &&	// + 1 for byte containing frame type
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00b      	beq.n	80098d6 <_ZNK7desenet5Frame7isValidEv+0x34>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	68db      	ldr	r3, [r3, #12]
    return !buffer_.empty() &&
 80098c2:	2b05      	cmp	r3, #5
 80098c4:	d907      	bls.n	80098d6 <_ZNK7desenet5Frame7isValidEv+0x34>
    		type() != FrameType::Invalid;
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f881 	bl	80099ce <_ZNK7desenet5Frame4typeEv>
 80098cc:	4603      	mov	r3, r0
    		frameLength_ >= Frame::HEADER_SIZE + 1 &&	// + 1 for byte containing frame type
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <_ZNK7desenet5Frame7isValidEv+0x34>
 80098d2:	2301      	movs	r3, #1
 80098d4:	e000      	b.n	80098d8 <_ZNK7desenet5Frame7isValidEv+0x36>
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <_ZN7desenet5Frame9setLengthEj>:

void desenet::Frame::setLength(size_t length)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
    if (length <= buffer_.length())
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7ff fae9 	bl	8008ec4 <_ZNK3hei12SharedBufferIhE6lengthEv>
 80098f2:	4602      	mov	r2, r0
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	4293      	cmp	r3, r2
 80098f8:	bf94      	ite	ls
 80098fa:	2301      	movls	r3, #1
 80098fc:	2300      	movhi	r3, #0
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00b      	beq.n	800991c <_ZN7desenet5Frame9setLengthEj+0x3c>
    {
        frameLength_ = length;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	683a      	ldr	r2, [r7, #0]
 8009908:	60da      	str	r2, [r3, #12]

        // Set also the payload field accordingly
        setPayloadSize(length - (Frame::HEADER_SIZE + Frame::FOOTER_SIZE));
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	b2db      	uxtb	r3, r3
 800990e:	3b05      	subs	r3, #5
 8009910:	b2db      	uxtb	r3, r3
 8009912:	4619      	mov	r1, r3
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 f845 	bl	80099a4 <_ZN7desenet5Frame14setPayloadSizeEh>
    }
    else
    {
    	assert(false);	// Frame length too big for buffer!
    }
}
 800991a:	e005      	b.n	8009928 <_ZN7desenet5Frame9setLengthEj+0x48>
    	assert(false);	// Frame length too big for buffer!
 800991c:	4b04      	ldr	r3, [pc, #16]	; (8009930 <_ZN7desenet5Frame9setLengthEj+0x50>)
 800991e:	4a05      	ldr	r2, [pc, #20]	; (8009934 <_ZN7desenet5Frame9setLengthEj+0x54>)
 8009920:	213e      	movs	r1, #62	; 0x3e
 8009922:	4805      	ldr	r0, [pc, #20]	; (8009938 <_ZN7desenet5Frame9setLengthEj+0x58>)
 8009924:	f00c fe8a 	bl	801663c <__assert_func>
}
 8009928:	3708      	adds	r7, #8
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	0801891c 	.word	0x0801891c
 8009934:	08018924 	.word	0x08018924
 8009938:	08018878 	.word	0x08018878

0800993c <_ZNK7desenet5Frame11destinationEv>:

desenet::Address desenet::Frame::destination() const
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
    Address destination;
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 f93e 	bl	8009bc8 <_ZN3phy7AddressILj4EEC1Ev>

    if (frameLength_ >= ADDRESS_SIZE)
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	2b03      	cmp	r3, #3
 8009952:	d908      	bls.n	8009966 <_ZNK7desenet5Frame11destinationEv+0x2a>
    {
        destination.copyFrom(buffer_.data());
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	4618      	mov	r0, r3
 8009958:	f7ff faa7 	bl	8008eaa <_ZNK3hei12SharedBufferIhE4dataEv>
 800995c:	4603      	mov	r3, r0
 800995e:	4619      	mov	r1, r3
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 f947 	bl	8009bf4 <_ZN3phy7AddressILj4EE8copyFromEPKh>
    }
    return destination;
 8009966:	bf00      	nop
}
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	3708      	adds	r7, #8
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <_ZN7desenet5Frame14setDestinationERKN3phy7AddressILj4EEE>:

	return payloadSize;
}

void desenet::Frame::setDestination(const desenet::Address & destination)
{
 8009970:	b5b0      	push	{r4, r5, r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
	// Destination address is first field in frame
	memcpy(buffer_.data(), destination.data(), destination.addressSize());
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4618      	mov	r0, r3
 800997e:	f7ff fa87 	bl	8008e90 <_ZN3hei12SharedBufferIhE4dataEv>
 8009982:	4604      	mov	r4, r0
 8009984:	6838      	ldr	r0, [r7, #0]
 8009986:	f000 f95d 	bl	8009c44 <_ZNK3phy7AddressILj4EE4dataEv>
 800998a:	4605      	mov	r5, r0
 800998c:	f000 f952 	bl	8009c34 <_ZN3phy7AddressILj4EE11addressSizeEv>
 8009990:	4603      	mov	r3, r0
 8009992:	461a      	mov	r2, r3
 8009994:	4629      	mov	r1, r5
 8009996:	4620      	mov	r0, r4
 8009998:	f00c fec0 	bl	801671c <memcpy>
}
 800999c:	bf00      	nop
 800999e:	3708      	adds	r7, #8
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bdb0      	pop	{r4, r5, r7, pc}

080099a4 <_ZN7desenet5Frame14setPayloadSizeEh>:

void desenet::Frame::setPayloadSize(uint8_t payloadSize)
{
 80099a4:	b590      	push	{r4, r7, lr}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	460b      	mov	r3, r1
 80099ae:	70fb      	strb	r3, [r7, #3]
	memcpy(buffer_.data() + desenet::Address::addressSize(), &payloadSize, sizeof(payloadSize));
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7ff fa6c 	bl	8008e90 <_ZN3hei12SharedBufferIhE4dataEv>
 80099b8:	4604      	mov	r4, r0
 80099ba:	f000 f93b 	bl	8009c34 <_ZN3phy7AddressILj4EE11addressSizeEv>
 80099be:	4603      	mov	r3, r0
 80099c0:	4423      	add	r3, r4
 80099c2:	78fa      	ldrb	r2, [r7, #3]
 80099c4:	701a      	strb	r2, [r3, #0]
}
 80099c6:	bf00      	nop
 80099c8:	370c      	adds	r7, #12
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd90      	pop	{r4, r7, pc}

080099ce <_ZNK7desenet5Frame4typeEv>:

desenet::FrameType desenet::Frame::type() const {
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b082      	sub	sp, #8
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
    if (frameLength_ >= 1 && ((buffer_[Frame::HEADER_SIZE + 0] & 0x80) == 0x00))
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d00b      	beq.n	80099f6 <_ZNK7desenet5Frame4typeEv+0x28>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2105      	movs	r1, #5
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 f8a0 	bl	8009b28 <_ZNK3hei12SharedBufferIhEixEj>
 80099e8:	4603      	mov	r3, r0
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	b25b      	sxtb	r3, r3
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	db01      	blt.n	80099f6 <_ZNK7desenet5Frame4typeEv+0x28>
 80099f2:	2301      	movs	r3, #1
 80099f4:	e000      	b.n	80099f8 <_ZNK7desenet5Frame4typeEv+0x2a>
 80099f6:	2300      	movs	r3, #0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d001      	beq.n	8009a00 <_ZNK7desenet5Frame4typeEv+0x32>
        return FrameType::Beacon;
 80099fc:	2301      	movs	r3, #1
 80099fe:	e016      	b.n	8009a2e <_ZNK7desenet5Frame4typeEv+0x60>
    else if (frameLength_ >= 1 && ((buffer_[Frame::HEADER_SIZE + 0] & 0x80) == 0x80))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00c      	beq.n	8009a22 <_ZNK7desenet5Frame4typeEv+0x54>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2105      	movs	r1, #5
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f000 f88b 	bl	8009b28 <_ZNK3hei12SharedBufferIhEixEj>
 8009a12:	4603      	mov	r3, r0
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a1a:	2b80      	cmp	r3, #128	; 0x80
 8009a1c:	d101      	bne.n	8009a22 <_ZNK7desenet5Frame4typeEv+0x54>
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e000      	b.n	8009a24 <_ZNK7desenet5Frame4typeEv+0x56>
 8009a22:	2300      	movs	r3, #0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <_ZNK7desenet5Frame4typeEv+0x5e>
        return FrameType::MPDU;
 8009a28:	2302      	movs	r3, #2
 8009a2a:	e000      	b.n	8009a2e <_ZNK7desenet5Frame4typeEv+0x60>
    else
        return FrameType::Invalid;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3708      	adds	r7, #8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <_ZN7desenet5Frame7setTypeENS_9FrameTypeE>:

void desenet::Frame::setType(desenet::FrameType type)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b082      	sub	sp, #8
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
 8009a3e:	6039      	str	r1, [r7, #0]
	switch (type)
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	2b02      	cmp	r3, #2
 8009a44:	d015      	beq.n	8009a72 <_ZN7desenet5Frame7setTypeENS_9FrameTypeE+0x3c>
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	2b02      	cmp	r3, #2
 8009a4a:	dc1f      	bgt.n	8009a8c <_ZN7desenet5Frame7setTypeENS_9FrameTypeE+0x56>
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d01b      	beq.n	8009a8a <_ZN7desenet5Frame7setTypeENS_9FrameTypeE+0x54>
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d000      	beq.n	8009a5a <_ZN7desenet5Frame7setTypeENS_9FrameTypeE+0x24>
		break;
	case FrameType::MPDU:
		buffer_[Frame::HEADER_SIZE + 0] |= 0x80;	// Set bit 7 to one
		break;
	}
}
 8009a58:	e018      	b.n	8009a8c <_ZN7desenet5Frame7setTypeENS_9FrameTypeE+0x56>
		buffer_[Frame::HEADER_SIZE + 0] &= ~0x80;	// Set bit 7 to zero
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2105      	movs	r1, #5
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7fd f964 	bl	8006d2c <_ZN3hei12SharedBufferIhEixEj>
 8009a64:	4603      	mov	r3, r0
 8009a66:	781a      	ldrb	r2, [r3, #0]
 8009a68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009a6c:	b2d2      	uxtb	r2, r2
 8009a6e:	701a      	strb	r2, [r3, #0]
		break;
 8009a70:	e00c      	b.n	8009a8c <_ZN7desenet5Frame7setTypeENS_9FrameTypeE+0x56>
		buffer_[Frame::HEADER_SIZE + 0] |= 0x80;	// Set bit 7 to one
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2105      	movs	r1, #5
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fd f958 	bl	8006d2c <_ZN3hei12SharedBufferIhEixEj>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	781a      	ldrb	r2, [r3, #0]
 8009a80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009a84:	b2d2      	uxtb	r2, r2
 8009a86:	701a      	strb	r2, [r3, #0]
		break;
 8009a88:	e000      	b.n	8009a8c <_ZN7desenet5Frame7setTypeENS_9FrameTypeE+0x56>
		break;
 8009a8a:	bf00      	nop
}
 8009a8c:	bf00      	nop
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <_ZNK7desenet5Frame8toStringEv>:

const char * desenet::Frame::toString() const
{
 8009a94:	b590      	push	{r4, r7, lr}
 8009a96:	b085      	sub	sp, #20
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
	return toString(buffer_.data(), length());		// Call the static version of toString()
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7ff fa03 	bl	8008eaa <_ZNK3hei12SharedBufferIhE4dataEv>
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f7ff f864 	bl	8008b74 <_ZNK7desenet5Frame6lengthEv>
 8009aac:	4603      	mov	r3, r0
 8009aae:	60fb      	str	r3, [r7, #12]
 8009ab0:	f107 030c 	add.w	r3, r7, #12
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	f000 f806 	bl	8009ac8 <_ZN7desenet5Frame8toStringEPKhRKj>
 8009abc:	4603      	mov	r3, r0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3714      	adds	r7, #20
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd90      	pop	{r4, r7, pc}
	...

08009ac8 <_ZN7desenet5Frame8toStringEPKhRKj>:

//static
const char * desenet::Frame::toString(const uint8_t * const buffer, const std::size_t & length)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
	static char str[3 * Frame::Mtu];

	for (size_t i = 0; i < length; i++)
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	60fb      	str	r3, [r7, #12]
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	68fa      	ldr	r2, [r7, #12]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d211      	bcs.n	8009b04 <_ZN7desenet5Frame8toStringEPKhRKj+0x3c>
	{
		sprintf(str + (i * 3), "%02x ", buffer[i]);
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	005b      	lsls	r3, r3, #1
 8009ae6:	4413      	add	r3, r2
 8009ae8:	4a0d      	ldr	r2, [pc, #52]	; (8009b20 <_ZN7desenet5Frame8toStringEPKhRKj+0x58>)
 8009aea:	1898      	adds	r0, r3, r2
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	4413      	add	r3, r2
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	461a      	mov	r2, r3
 8009af6:	490b      	ldr	r1, [pc, #44]	; (8009b24 <_ZN7desenet5Frame8toStringEPKhRKj+0x5c>)
 8009af8:	f00d fad6 	bl	80170a8 <siprintf>
	for (size_t i = 0; i < length; i++)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	3301      	adds	r3, #1
 8009b00:	60fb      	str	r3, [r7, #12]
 8009b02:	e7e8      	b.n	8009ad6 <_ZN7desenet5Frame8toStringEPKhRKj+0xe>
	}

	str[length * 3] = '\0';		// Finish the string
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	4613      	mov	r3, r2
 8009b0a:	005b      	lsls	r3, r3, #1
 8009b0c:	4413      	add	r3, r2
 8009b0e:	4a04      	ldr	r2, [pc, #16]	; (8009b20 <_ZN7desenet5Frame8toStringEPKhRKj+0x58>)
 8009b10:	2100      	movs	r1, #0
 8009b12:	54d1      	strb	r1, [r2, r3]

	return str;
 8009b14:	4b02      	ldr	r3, [pc, #8]	; (8009b20 <_ZN7desenet5Frame8toStringEPKhRKj+0x58>)
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	20001638 	.word	0x20001638
 8009b24:	08018950 	.word	0x08018950

08009b28 <_ZNK3hei12SharedBufferIhEixEj>:
        const reference operator [](sizeType pos) const {
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
            return data_.get()[pos];
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7fd f932 	bl	8006d9e <_ZNKSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	4413      	add	r3, r2
        }
 8009b40:	4618      	mov	r0, r3
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <_ZZN3hei12SharedBufferIhE5proxyEPKhjENKUlPhE_clES4_>:
            buffer.data_ = std::shared_ptr<T>(const_cast<pointer>(data), [](pointer){});
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
 8009b52:	bf00      	nop
 8009b54:	370c      	adds	r7, #12
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr

08009b5e <_ZN3hei12SharedBufferIhE5proxyEPKhj>:
        static const SharedBuffer proxy(constPointer data, sizeType length) {
 8009b5e:	b5b0      	push	{r4, r5, r7, lr}
 8009b60:	b088      	sub	sp, #32
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	60f8      	str	r0, [r7, #12]
 8009b66:	60b9      	str	r1, [r7, #8]
 8009b68:	607a      	str	r2, [r7, #4]
            SharedBuffer buffer;
 8009b6a:	68f8      	ldr	r0, [r7, #12]
 8009b6c:	f7ff f9b6 	bl	8008edc <_ZN3hei12SharedBufferIhEC1Ev>
            buffer.data_ = std::shared_ptr<T>(const_cast<pointer>(data), [](pointer){});
 8009b70:	68fc      	ldr	r4, [r7, #12]
 8009b72:	f107 0314 	add.w	r3, r7, #20
 8009b76:	462a      	mov	r2, r5
 8009b78:	68b9      	ldr	r1, [r7, #8]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f000 f86e 	bl	8009c5c <_ZNSt10shared_ptrIhEC1IhZN3hei12SharedBufferIhE5proxyEPKhjEUlPhE_vEEPT_T0_>
 8009b80:	f107 0314 	add.w	r3, r7, #20
 8009b84:	4619      	mov	r1, r3
 8009b86:	4620      	mov	r0, r4
 8009b88:	f7fe f82e 	bl	8007be8 <_ZNSt10shared_ptrIhEaSEOS0_>
 8009b8c:	f107 0314 	add.w	r3, r7, #20
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7fd fdeb 	bl	800776c <_ZNSt10shared_ptrIhED1Ev>
            buffer.length_ = length * sizeof(T);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	609a      	str	r2, [r3, #8]
            return buffer;
 8009b9c:	bf00      	nop
        }
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	3720      	adds	r7, #32
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bdb0      	pop	{r4, r5, r7, pc}

08009ba6 <_ZNK3hei12SharedBufferIhE5emptyEv>:
        bool empty() const {
 8009ba6:	b480      	push	{r7}
 8009ba8:	b083      	sub	sp, #12
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
            return !length_;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	bf0c      	ite	eq
 8009bb6:	2301      	moveq	r3, #1
 8009bb8:	2300      	movne	r3, #0
 8009bba:	b2db      	uxtb	r3, r3
        }
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <_ZN3phy7AddressILj4EEC1Ev>:
	explicit Address()
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
	{
 8009bd0:	4a07      	ldr	r2, [pc, #28]	; (8009bf0 <_ZN3phy7AddressILj4EEC1Ev+0x28>)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	601a      	str	r2, [r3, #0]
		memset( _address , 0 , size );
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	3304      	adds	r3, #4
 8009bda:	2204      	movs	r2, #4
 8009bdc:	2100      	movs	r1, #0
 8009bde:	4618      	mov	r0, r3
 8009be0:	f00c fdc4 	bl	801676c <memset>
	}
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4618      	mov	r0, r3
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	0801bdb8 	.word	0x0801bdb8

08009bf4 <_ZN3phy7AddressILj4EE8copyFromEPKh>:
	 *
	 * Note that you are responsible to ensure that the memory region is big enough for the address.
	 *
	 * @param from Pointer to the memory location to copy the address from.
	 */
	void copyFrom( const uint8_t * const from )
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
	{
		assert( from );
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d105      	bne.n	8009c10 <_ZN3phy7AddressILj4EE8copyFromEPKh+0x1c>
 8009c04:	4b08      	ldr	r3, [pc, #32]	; (8009c28 <_ZN3phy7AddressILj4EE8copyFromEPKh+0x34>)
 8009c06:	4a09      	ldr	r2, [pc, #36]	; (8009c2c <_ZN3phy7AddressILj4EE8copyFromEPKh+0x38>)
 8009c08:	2175      	movs	r1, #117	; 0x75
 8009c0a:	4809      	ldr	r0, [pc, #36]	; (8009c30 <_ZN3phy7AddressILj4EE8copyFromEPKh+0x3c>)
 8009c0c:	f00c fd16 	bl	801663c <__assert_func>
		if ( from )
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d004      	beq.n	8009c20 <_ZN3phy7AddressILj4EE8copyFromEPKh+0x2c>
			memcpy( _address , from , size );
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	3304      	adds	r3, #4
 8009c1a:	683a      	ldr	r2, [r7, #0]
 8009c1c:	6812      	ldr	r2, [r2, #0]
 8009c1e:	601a      	str	r2, [r3, #0]
	}
 8009c20:	bf00      	nop
 8009c22:	3708      	adds	r7, #8
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	08018a44 	.word	0x08018a44
 8009c2c:	08018a4c 	.word	0x08018a4c
 8009c30:	080189cc 	.word	0x080189cc

08009c34 <_ZN3phy7AddressILj4EE11addressSizeEv>:
	static size_t addressSize()
 8009c34:	b480      	push	{r7}
 8009c36:	af00      	add	r7, sp, #0
		return size;
 8009c38:	2304      	movs	r3, #4
	}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <_ZNK3phy7AddressILj4EE4dataEv>:
			address[i] = rand() % 255;

		return address;
	}

	inline const uint8_t * data() const { return _address; }	///< @brief Direct access to address.
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	3304      	adds	r3, #4
 8009c50:	4618      	mov	r0, r3
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <_ZNSt10shared_ptrIhEC1IhZN3hei12SharedBufferIhE5proxyEPKhjEUlPhE_vEEPT_T0_>:
	shared_ptr(_Yp* __p, _Deleter __d)
 8009c5c:	b5b0      	push	{r4, r5, r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	713a      	strb	r2, [r7, #4]
        : __shared_ptr<_Tp>(__p, std::move(__d)) { }
 8009c68:	68fc      	ldr	r4, [r7, #12]
 8009c6a:	1d3b      	adds	r3, r7, #4
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f000 f80a 	bl	8009c86 <_ZSt4moveIRZN3hei12SharedBufferIhE5proxyEPKhjEUlPhE_EONSt16remove_referenceIT_E4typeEOS9_>
 8009c72:	462a      	mov	r2, r5
 8009c74:	68b9      	ldr	r1, [r7, #8]
 8009c76:	4620      	mov	r0, r4
 8009c78:	f000 f810 	bl	8009c9c <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EEC1IhZN3hei12SharedBufferIhE5proxyEPKhjEUlPhE_vEEPT_T0_>
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bdb0      	pop	{r4, r5, r7, pc}

08009c86 <_ZSt4moveIRZN3hei12SharedBufferIhE5proxyEPKhjEUlPhE_EONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8009c86:	b480      	push	{r7}
 8009c88:	b083      	sub	sp, #12
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4618      	mov	r0, r3
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EEC1IhZN3hei12SharedBufferIhE5proxyEPKhjEUlPhE_vEEPT_T0_>:
	__shared_ptr(_Yp* __p, _Deleter __d)
 8009c9c:	b5b0      	push	{r4, r5, r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	713a      	strb	r2, [r7, #4]
	: _M_ptr(__p), _M_refcount(__p, std::move(__d))
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	601a      	str	r2, [r3, #0]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	1d1c      	adds	r4, r3, #4
 8009cb2:	1d3b      	adds	r3, r7, #4
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7ff ffe6 	bl	8009c86 <_ZSt4moveIRZN3hei12SharedBufferIhE5proxyEPKhjEUlPhE_EONSt16remove_referenceIT_E4typeEOS9_>
 8009cba:	462a      	mov	r2, r5
 8009cbc:	68b9      	ldr	r1, [r7, #8]
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	f000 f809 	bl	8009cd6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS4_E_vEET_T0_>
	  _M_enable_shared_from_this_with(__p);
 8009cc4:	68b9      	ldr	r1, [r7, #8]
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f7fe f85a 	bl	8007d80 <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIhhEENSt9enable_ifIXntsrNS2_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bdb0      	pop	{r4, r5, r7, pc}

08009cd6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS4_E_vEET_T0_>:
	__shared_count(_Ptr __p, _Deleter __d)
 8009cd6:	b5b0      	push	{r4, r5, r7, lr}
 8009cd8:	b086      	sub	sp, #24
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	60f8      	str	r0, [r7, #12]
 8009cde:	60b9      	str	r1, [r7, #8]
 8009ce0:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p, std::move(__d), allocator<void>())
 8009ce2:	1d3b      	adds	r3, r7, #4
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7ff ffce 	bl	8009c86 <_ZSt4moveIRZN3hei12SharedBufferIhE5proxyEPKhjEUlPhE_EONSt16remove_referenceIT_E4typeEOS9_>
 8009cea:	462b      	mov	r3, r5
 8009cec:	4622      	mov	r2, r4
 8009cee:	68b9      	ldr	r1, [r7, #8]
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f000 f805 	bl	8009d00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS4_E_SaIvEvEET_T0_T1_>
	{ }
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3718      	adds	r7, #24
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bdb0      	pop	{r4, r5, r7, pc}

08009d00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS4_E_SaIvEvEET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8009d00:	b590      	push	{r4, r7, lr}
 8009d02:	b08b      	sub	sp, #44	; 0x2c
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	713a      	strb	r2, [r7, #4]
 8009d0c:	703b      	strb	r3, [r7, #0]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2200      	movs	r2, #0
 8009d12:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8009d14:	463a      	mov	r2, r7
 8009d16:	f107 031c 	add.w	r3, r7, #28
 8009d1a:	4611      	mov	r1, r2
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f000 f83a 	bl	8009d96 <_ZNSaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8009d22:	f107 0314 	add.w	r3, r7, #20
 8009d26:	f107 021c 	add.w	r2, r7, #28
 8009d2a:	4611      	mov	r1, r2
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f000 f84b 	bl	8009dc8 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8009d32:	f107 0314 	add.w	r3, r7, #20
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 f86e 	bl	8009e18 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 8009d3c:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8009d3e:	1d3b      	adds	r3, r7, #4
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7ff ffa0 	bl	8009c86 <_ZSt4moveIRZN3hei12SharedBufferIhE5proxyEPKhjEUlPhE_EONSt16remove_referenceIT_E4typeEOS9_>
 8009d46:	463b      	mov	r3, r7
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7fe f90a 	bl	8007f62 <_ZSt4moveIRSaIvEEONSt16remove_referenceIT_E4typeEOS3_>
 8009d4e:	4604      	mov	r4, r0
 8009d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d52:	4619      	mov	r1, r3
 8009d54:	2010      	movs	r0, #16
 8009d56:	f7fd fc8f 	bl	8007678 <_ZnwjPv>
 8009d5a:	4623      	mov	r3, r4
 8009d5c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009d60:	68b9      	ldr	r1, [r7, #8]
 8009d62:	f000 f867 	bl	8009e34 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES0_S6_RKS7_>
	      _M_pi = __mem;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d6a:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8009d6c:	f107 0314 	add.w	r3, r7, #20
 8009d70:	2100      	movs	r1, #0
 8009d72:	4618      	mov	r0, r3
 8009d74:	f000 f880 	bl	8009e78 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8009d78:	f107 0314 	add.w	r3, r7, #20
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f000 f836 	bl	8009dee <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8009d82:	f107 031c 	add.w	r3, r7, #28
 8009d86:	4618      	mov	r0, r3
 8009d88:	f000 f812 	bl	8009db0 <_ZNSaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
	}
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	372c      	adds	r7, #44	; 0x2c
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd90      	pop	{r4, r7, pc}

08009d96 <_ZNSaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b082      	sub	sp, #8
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	6039      	str	r1, [r7, #0]
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 f878 	bl	8009e96 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS2_E_SaIvELNS_12_Lock_policyE0EEEC1Ev>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4618      	mov	r0, r3
 8009daa:	3708      	adds	r7, #8
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <_ZNSaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f877 	bl	8009eac <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS2_E_SaIvELNS_12_Lock_policyE0EEED1Ev>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3708      	adds	r7, #8
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8009dd2:	2101      	movs	r1, #1
 8009dd4:	6838      	ldr	r0, [r7, #0]
 8009dd6:	f000 f874 	bl	8009ec2 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERSC_j>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	461a      	mov	r2, r3
 8009dde:	6839      	ldr	r1, [r7, #0]
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 f87d 	bl	8009ee0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERSC_PSB_>
    }
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b082      	sub	sp, #8
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d007      	beq.n	8009e0e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6818      	ldr	r0, [r3, #0]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	2201      	movs	r2, #1
 8009e08:	4619      	mov	r1, r3
 8009e0a:	f000 f87d 	bl	8009f08 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERSC_PSB_j>
      }
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	4618      	mov	r0, r3
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	4618      	mov	r0, r3
 8009e26:	f000 f87e 	bl	8009f26 <_ZSt12__to_addressISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_SD_>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3708      	adds	r7, #8
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES0_S6_RKS7_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8009e34:	b5b0      	push	{r4, r5, r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	713a      	strb	r2, [r7, #4]
 8009e40:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7fe f91b 	bl	8008080 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8009e4a:	4a0a      	ldr	r2, [pc, #40]	; (8009e74 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES0_S6_RKS7_+0x40>)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	601a      	str	r2, [r3, #0]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f103 040c 	add.w	r4, r3, #12
 8009e56:	1d3b      	adds	r3, r7, #4
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7ff ff14 	bl	8009c86 <_ZSt4moveIRZN3hei12SharedBufferIhE5proxyEPKhjEUlPhE_EONSt16remove_referenceIT_E4typeEOS9_>
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	462a      	mov	r2, r5
 8009e62:	68b9      	ldr	r1, [r7, #8]
 8009e64:	4620      	mov	r0, r4
 8009e66:	f000 f869 	bl	8009f3c <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES0_S6_RKS7_>
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bdb0      	pop	{r4, r5, r7, pc}
 8009e74:	0801beb4 	.word	0x0801beb4

08009e78 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2200      	movs	r2, #0
 8009e86:	605a      	str	r2, [r3, #4]
	return *this;
 8009e88:	687b      	ldr	r3, [r7, #4]
      }
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	370c      	adds	r7, #12
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr

08009e96 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS2_E_SaIvELNS_12_Lock_policyE0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009e96:	b480      	push	{r7}
 8009e98:	b083      	sub	sp, #12
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS2_E_SaIvELNS_12_Lock_policyE0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	370c      	adds	r7, #12
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr

08009ec2 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b082      	sub	sp, #8
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
 8009eca:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8009ecc:	2200      	movs	r2, #0
 8009ece:	6839      	ldr	r1, [r7, #0]
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 f84f 	bl	8009f74 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS2_E_SaIvELNS_12_Lock_policyE0EEE8allocateEjPKv>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8009eec:	68b8      	ldr	r0, [r7, #8]
 8009eee:	f000 f85f 	bl	8009fb0 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSD_>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	601a      	str	r2, [r3, #0]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	605a      	str	r2, [r3, #4]
      { }
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	4618      	mov	r0, r3
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	68b9      	ldr	r1, [r7, #8]
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	f000 f854 	bl	8009fc6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS2_E_SaIvELNS_12_Lock_policyE0EEE10deallocateEPSB_j>
 8009f1e:	bf00      	nop
 8009f20:	3710      	adds	r7, #16
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <_ZSt12__to_addressISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_SD_>:
    __to_address(_Tp* __ptr) noexcept
 8009f26:	b480      	push	{r7}
 8009f28:	b083      	sub	sp, #12
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
      return __ptr;
 8009f2e:	687b      	ldr	r3, [r7, #4]
    }
 8009f30:	4618      	mov	r0, r3
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES0_S6_RKS7_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	713a      	strb	r2, [r7, #4]
 8009f48:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 8009f4a:	1d3b      	adds	r3, r7, #4
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7ff fe9a 	bl	8009c86 <_ZSt4moveIRZN3hei12SharedBufferIhE5proxyEPKhjEUlPhE_EONSt16remove_referenceIT_E4typeEOS9_>
 8009f52:	4603      	mov	r3, r0
 8009f54:	4619      	mov	r1, r3
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f000 f842 	bl	8009fe0 <_ZNSt14_Sp_ebo_helperILi0EZN3hei12SharedBufferIhE5proxyEPKhjEUlPhE_Lb1EEC1EOS6_>
 8009f5c:	6839      	ldr	r1, [r7, #0]
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	f7fe f903 	bl	800816a <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	68ba      	ldr	r2, [r7, #8]
 8009f68:	601a      	str	r2, [r3, #0]
	{ }
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3710      	adds	r7, #16
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS2_E_SaIvELNS_12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8009f80:	68f8      	ldr	r0, [r7, #12]
 8009f82:	f000 f83a 	bl	8009ffa <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS2_E_SaIvELNS_12_Lock_policyE0EEE8max_sizeEv>
 8009f86:	4602      	mov	r2, r0
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	bf8c      	ite	hi
 8009f8e:	2301      	movhi	r3, #1
 8009f90:	2300      	movls	r3, #0
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d001      	beq.n	8009f9c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS2_E_SaIvELNS_12_Lock_policyE0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8009f98:	f00c fa99 	bl	80164ce <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	011b      	lsls	r3, r3, #4
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f00c fa70 	bl	8016486 <_Znwj>
 8009fa6:	4603      	mov	r3, r0
      }
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3710      	adds	r7, #16
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4618      	mov	r0, r3
 8009fbc:	370c      	adds	r7, #12
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr

08009fc6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS2_E_SaIvELNS_12_Lock_policyE0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b084      	sub	sp, #16
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	60f8      	str	r0, [r7, #12]
 8009fce:	60b9      	str	r1, [r7, #8]
 8009fd0:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8009fd2:	68b8      	ldr	r0, [r7, #8]
 8009fd4:	f00c fa42 	bl	801645c <_ZdlPv>
      }
 8009fd8:	bf00      	nop
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <_ZNSt14_Sp_ebo_helperILi0EZN3hei12SharedBufferIhE5proxyEPKhjEUlPhE_Lb1EEC1EOS6_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
 8009fea:	6838      	ldr	r0, [r7, #0]
 8009fec:	f7ff fe4b 	bl	8009c86 <_ZSt4moveIRZN3hei12SharedBufferIhE5proxyEPKhjEUlPhE_EONSt16remove_referenceIT_E4typeEOS9_>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS2_E_SaIvELNS_12_Lock_policyE0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8009ffa:	b480      	push	{r7}
 8009ffc:	b083      	sub	sp, #12
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800a002:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 800a006:	4618      	mov	r0, r3
 800a008:	370c      	adds	r7, #12
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
	...

0800a014 <_Z41__static_initialization_and_destruction_0ii>:

NetworkInterfaceDriver & desenet::operator <<(NetworkInterfaceDriver & driver, const desenet::Frame & frame)
{
    driver.transmit(frame.buffer(), frame.length());
    return driver;
}
 800a014:	b580      	push	{r7, lr}
 800a016:	b088      	sub	sp, #32
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d122      	bne.n	800a06a <_Z41__static_initialization_and_destruction_0ii+0x56>
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d11d      	bne.n	800a06a <_Z41__static_initialization_and_destruction_0ii+0x56>
 800a02e:	4b18      	ldr	r3, [pc, #96]	; (800a090 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	613b      	str	r3, [r7, #16]
 800a034:	f107 0310 	add.w	r3, r7, #16
 800a038:	60bb      	str	r3, [r7, #8]
 800a03a:	2304      	movs	r3, #4
 800a03c:	60fb      	str	r3, [r7, #12]
 800a03e:	f107 0308 	add.w	r3, r7, #8
 800a042:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a046:	4813      	ldr	r0, [pc, #76]	; (800a094 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800a048:	f7fc fe3c 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
  static const desenet::Address SENSOR_ADDRESS({0xC7, 0xC7, 0xC7, 0xC7});	///< @brief Sensor's reception address.
 800a04c:	4b12      	ldr	r3, [pc, #72]	; (800a098 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	61fb      	str	r3, [r7, #28]
 800a052:	f107 031c 	add.w	r3, r7, #28
 800a056:	617b      	str	r3, [r7, #20]
 800a058:	2304      	movs	r3, #4
 800a05a:	61bb      	str	r3, [r7, #24]
 800a05c:	f107 0314 	add.w	r3, r7, #20
 800a060:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a064:	480d      	ldr	r0, [pc, #52]	; (800a09c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800a066:	f7fc fe2d 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d10a      	bne.n	800a086 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a076:	4293      	cmp	r3, r2
 800a078:	d105      	bne.n	800a086 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800a07a:	4808      	ldr	r0, [pc, #32]	; (800a09c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800a07c:	f7fc ff5e 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 800a080:	4804      	ldr	r0, [pc, #16]	; (800a094 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800a082:	f7fc ff5b 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
 800a086:	bf00      	nop
 800a088:	3720      	adds	r7, #32
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	08018ab4 	.word	0x08018ab4
 800a094:	20001628 	.word	0x20001628
 800a098:	08018ab8 	.word	0x08018ab8
 800a09c:	20001630 	.word	0x20001630

0800a0a0 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	4a05      	ldr	r2, [pc, #20]	; (800a0c0 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	601a      	str	r2, [r3, #0]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7fd fd57 	bl	8007b64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	0801beb4 	.word	0x0801beb4

0800a0c4 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f7ff ffe7 	bl	800a0a0 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800a0d2:	2110      	movs	r1, #16
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f00c f9c3 	bl	8016460 <_ZdlPvj>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	330c      	adds	r3, #12
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f000 f840 	bl	800a176 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	4610      	mov	r0, r2
 800a100:	f7ff fd22 	bl	8009b48 <_ZZN3hei12SharedBufferIhE5proxyEPKhjENKUlPhE_clES4_>
 800a104:	bf00      	nop
 800a106:	3708      	adds	r7, #8
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b086      	sub	sp, #24
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	330c      	adds	r3, #12
 800a118:	4618      	mov	r0, r3
 800a11a:	f000 f838 	bl	800a18e <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800a11e:	4602      	mov	r2, r0
 800a120:	f107 0314 	add.w	r3, r7, #20
 800a124:	4611      	mov	r1, r2
 800a126:	4618      	mov	r0, r3
 800a128:	f7ff fe35 	bl	8009d96 <_ZNSaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800a12c:	f107 0114 	add.w	r1, r7, #20
 800a130:	f107 030c 	add.w	r3, r7, #12
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	4618      	mov	r0, r3
 800a138:	f7ff fed2 	bl	8009ee0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f7ff ffaf 	bl	800a0a0 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800a142:	f107 030c 	add.w	r3, r7, #12
 800a146:	4618      	mov	r0, r3
 800a148:	f7ff fe51 	bl	8009dee <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 800a14c:	f107 0314 	add.w	r3, r7, #20
 800a150:	4618      	mov	r0, r3
 800a152:	f7ff fe2d 	bl	8009db0 <_ZNSaISt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
      }
 800a156:	bf00      	nop
 800a158:	3718      	adds	r7, #24
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 800a15e:	b480      	push	{r7}
 800a160:	b083      	sub	sp, #12
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
 800a166:	6039      	str	r1, [r7, #0]
        return nullptr;
 800a168:	2300      	movs	r3, #0
      }
 800a16a:	4618      	mov	r0, r3
 800a16c:	370c      	adds	r7, #12
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr

0800a176 <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800a176:	b580      	push	{r7, lr}
 800a178:	b082      	sub	sp, #8
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 f811 	bl	800a1a6 <_ZNSt14_Sp_ebo_helperILi0EZN3hei12SharedBufferIhE5proxyEPKhjEUlPhE_Lb1EE6_S_getERS7_>
 800a184:	4603      	mov	r3, r0
 800a186:	4618      	mov	r0, r3
 800a188:	3708      	adds	r7, #8
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <_ZNSt19_Sp_counted_deleterIPhZN3hei12SharedBufferIhE5proxyEPKhjEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800a18e:	b580      	push	{r7, lr}
 800a190:	b082      	sub	sp, #8
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7fe f8d4 	bl	8008344 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 800a19c:	4603      	mov	r3, r0
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3708      	adds	r7, #8
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <_ZNSt14_Sp_ebo_helperILi0EZN3hei12SharedBufferIhE5proxyEPKhjEUlPhE_Lb1EE6_S_getERS7_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800a1a6:	b480      	push	{r7}
 800a1a8:	b083      	sub	sp, #12
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <_GLOBAL__sub_I__ZN7desenet5FrameC2Ej>:
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a1c4:	2001      	movs	r0, #1
 800a1c6:	f7ff ff25 	bl	800a014 <_Z41__static_initialization_and_destruction_0ii>
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <_GLOBAL__sub_D__ZN7desenet5FrameC2Ej>:
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a1d4:	2000      	movs	r0, #0
 800a1d6:	f7ff ff1d 	bl	800a014 <_Z41__static_initialization_and_destruction_0ii>
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <_ZN7desenet22NetworkInterfaceDriver10DescriptorC1Ev>:
#include "networkinterfacedriver.h"

using std::vector;
using std::string;

desenet::NetworkInterfaceDriver::Descriptor::Descriptor()
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	4a09      	ldr	r2, [pc, #36]	; (800a20c <_ZN7desenet22NetworkInterfaceDriver10DescriptorC1Ev+0x30>)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	601a      	str	r2, [r3, #0]
{
    _descriptors().push_back(this);
 800a1ea:	f000 f83f 	bl	800a26c <_ZN7desenet22NetworkInterfaceDriver12_descriptorsEv>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	60fb      	str	r3, [r7, #12]
 800a1f4:	f107 030c 	add.w	r3, r7, #12
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	4610      	mov	r0, r2
 800a1fc:	f000 f864 	bl	800a2c8 <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE9push_backEOS3_>
}
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	0801bef8 	.word	0x0801bef8

0800a210 <_ZNSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 f876 	bl	800a30a <_ZNSaIPN7desenet22NetworkInterfaceDriver10DescriptorEED1Ev>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4618      	mov	r0, r3
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <_ZNSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	4618      	mov	r0, r3
 800a234:	f000 f859 	bl	800a2ea <_ZNSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE12_Vector_implC1Ev>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	4618      	mov	r0, r3
 800a23c:	3708      	adds	r7, #8
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800a242:	b580      	push	{r7, lr}
 800a244:	b082      	sub	sp, #8
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7ff ffeb 	bl	800a228 <_ZNSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EEC1Ev>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	4618      	mov	r0, r3
 800a256:	3708      	adds	r7, #8
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <__tcf_0>:
{
}

vector<desenet::NetworkInterfaceDriver::Descriptor *> &desenet::NetworkInterfaceDriver::_descriptors()
{
    static vector<Descriptor *> __descriptors;
 800a25c:	b580      	push	{r7, lr}
 800a25e:	af00      	add	r7, sp, #0
 800a260:	4801      	ldr	r0, [pc, #4]	; (800a268 <__tcf_0+0xc>)
 800a262:	f000 f877 	bl	800a354 <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EED1Ev>
 800a266:	bd80      	pop	{r7, pc}
 800a268:	200016a8 	.word	0x200016a8

0800a26c <_ZN7desenet22NetworkInterfaceDriver12_descriptorsEv>:
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	af00      	add	r7, sp, #0
    static vector<Descriptor *> __descriptors;
 800a270:	4b12      	ldr	r3, [pc, #72]	; (800a2bc <_ZN7desenet22NetworkInterfaceDriver12_descriptorsEv+0x50>)
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	f3bf 8f5b 	dmb	ish
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	f003 0301 	and.w	r3, r3, #1
 800a27e:	2b00      	cmp	r3, #0
 800a280:	bf0c      	ite	eq
 800a282:	2301      	moveq	r3, #1
 800a284:	2300      	movne	r3, #0
 800a286:	b2db      	uxtb	r3, r3
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d013      	beq.n	800a2b4 <_ZN7desenet22NetworkInterfaceDriver12_descriptorsEv+0x48>
 800a28c:	480b      	ldr	r0, [pc, #44]	; (800a2bc <_ZN7desenet22NetworkInterfaceDriver12_descriptorsEv+0x50>)
 800a28e:	f00c f8eb 	bl	8016468 <__cxa_guard_acquire>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	bf14      	ite	ne
 800a298:	2301      	movne	r3, #1
 800a29a:	2300      	moveq	r3, #0
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d008      	beq.n	800a2b4 <_ZN7desenet22NetworkInterfaceDriver12_descriptorsEv+0x48>
 800a2a2:	4807      	ldr	r0, [pc, #28]	; (800a2c0 <_ZN7desenet22NetworkInterfaceDriver12_descriptorsEv+0x54>)
 800a2a4:	f7ff ffcd 	bl	800a242 <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EEC1Ev>
 800a2a8:	4804      	ldr	r0, [pc, #16]	; (800a2bc <_ZN7desenet22NetworkInterfaceDriver12_descriptorsEv+0x50>)
 800a2aa:	f00c f8e9 	bl	8016480 <__cxa_guard_release>
 800a2ae:	4805      	ldr	r0, [pc, #20]	; (800a2c4 <_ZN7desenet22NetworkInterfaceDriver12_descriptorsEv+0x58>)
 800a2b0:	f00c f9e2 	bl	8016678 <atexit>
    return __descriptors;
 800a2b4:	4b02      	ldr	r3, [pc, #8]	; (800a2c0 <_ZN7desenet22NetworkInterfaceDriver12_descriptorsEv+0x54>)
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	200016b4 	.word	0x200016b4
 800a2c0:	200016a8 	.word	0x200016a8
 800a2c4:	0800a25d 	.word	0x0800a25d

0800a2c8 <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE9push_backEOS3_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800a2d2:	6838      	ldr	r0, [r7, #0]
 800a2d4:	f000 f859 	bl	800a38a <_ZSt4moveIRPN7desenet22NetworkInterfaceDriver10DescriptorEEONSt16remove_referenceIT_E4typeEOS6_>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	4619      	mov	r1, r3
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 f85f 	bl	800a3a0 <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE12emplace_backIJS3_EEEvDpOT_>
 800a2e2:	bf00      	nop
 800a2e4:	3708      	adds	r7, #8
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <_ZNSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b082      	sub	sp, #8
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 f882 	bl	800a3fc <_ZNSaIPN7desenet22NetworkInterfaceDriver10DescriptorEEC1Ev>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f000 f88a 	bl	800a414 <_ZNSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE17_Vector_impl_dataC1Ev>
	{ }
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4618      	mov	r0, r3
 800a304:	3708      	adds	r7, #8
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <_ZNSaIPN7desenet22NetworkInterfaceDriver10DescriptorEED1Ev>:
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b082      	sub	sp, #8
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f892 	bl	800a43c <_ZN9__gnu_cxx13new_allocatorIPN7desenet22NetworkInterfaceDriver10DescriptorEED1Ev>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	4618      	mov	r0, r3
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <_ZNSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800a322:	b580      	push	{r7, lr}
 800a324:	b082      	sub	sp, #8
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	689a      	ldr	r2, [r3, #8]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	1ad3      	subs	r3, r2, r3
 800a338:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800a33a:	461a      	mov	r2, r3
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 f888 	bl	800a452 <_ZNSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE13_M_deallocateEPS3_j>
      }
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4618      	mov	r0, r3
 800a346:	f7ff ff63 	bl	800a210 <_ZNSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE12_Vector_implD1Ev>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4618      	mov	r0, r3
 800a34e:	3708      	adds	r7, #8
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800a354:	b5b0      	push	{r4, r5, r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681c      	ldr	r4, [r3, #0]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	4618      	mov	r0, r3
 800a368:	f000 f886 	bl	800a478 <_ZNSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE19_M_get_Tp_allocatorEv>
 800a36c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a36e:	461a      	mov	r2, r3
 800a370:	4629      	mov	r1, r5
 800a372:	4620      	mov	r0, r4
 800a374:	f000 f88b 	bl	800a48e <_ZSt8_DestroyIPPN7desenet22NetworkInterfaceDriver10DescriptorES3_EvT_S5_RSaIT0_E>
      }
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7ff ffd1 	bl	800a322 <_ZNSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EED1Ev>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4618      	mov	r0, r3
 800a384:	3708      	adds	r7, #8
 800a386:	46bd      	mov	sp, r7
 800a388:	bdb0      	pop	{r4, r5, r7, pc}

0800a38a <_ZSt4moveIRPN7desenet22NetworkInterfaceDriver10DescriptorEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800a38a:	b480      	push	{r7}
 800a38c:	b083      	sub	sp, #12
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4618      	mov	r0, r3
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE12emplace_backIJS3_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 800a3a0:	b5b0      	push	{r4, r5, r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	685a      	ldr	r2, [r3, #4]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d011      	beq.n	800a3da <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE12emplace_backIJS3_EEEvDpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800a3b6:	687c      	ldr	r4, [r7, #4]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	685d      	ldr	r5, [r3, #4]
 800a3bc:	6838      	ldr	r0, [r7, #0]
 800a3be:	f000 f88f 	bl	800a4e0 <_ZSt7forwardIPN7desenet22NetworkInterfaceDriver10DescriptorEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	4629      	mov	r1, r5
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	f000 f894 	bl	800a4f6 <_ZNSt16allocator_traitsISaIPN7desenet22NetworkInterfaceDriver10DescriptorEEE9constructIS3_JS3_EEEvRS4_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	1d1a      	adds	r2, r3, #4
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 800a3d8:	e00c      	b.n	800a3f4 <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE12emplace_backIJS3_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 f89e 	bl	800a51c <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE3endEv>
 800a3e0:	4604      	mov	r4, r0
 800a3e2:	6838      	ldr	r0, [r7, #0]
 800a3e4:	f000 f87c 	bl	800a4e0 <_ZSt7forwardIPN7desenet22NetworkInterfaceDriver10DescriptorEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	4621      	mov	r1, r4
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 f8bc 	bl	800a56c <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE17_M_realloc_insertIJS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>
      }
 800a3f4:	bf00      	nop
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bdb0      	pop	{r4, r5, r7, pc}

0800a3fc <_ZNSaIPN7desenet22NetworkInterfaceDriver10DescriptorEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 f96d 	bl	800a6e4 <_ZN9__gnu_cxx13new_allocatorIPN7desenet22NetworkInterfaceDriver10DescriptorEEC1Ev>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	4618      	mov	r0, r3
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <_ZNSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	601a      	str	r2, [r3, #0]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	605a      	str	r2, [r3, #4]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	609a      	str	r2, [r3, #8]
	{ }
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4618      	mov	r0, r3
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <_ZN9__gnu_cxx13new_allocatorIPN7desenet22NetworkInterfaceDriver10DescriptorEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4618      	mov	r0, r3
 800a448:	370c      	adds	r7, #12
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr

0800a452 <_ZNSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 800a452:	b580      	push	{r7, lr}
 800a454:	b084      	sub	sp, #16
 800a456:	af00      	add	r7, sp, #0
 800a458:	60f8      	str	r0, [r7, #12]
 800a45a:	60b9      	str	r1, [r7, #8]
 800a45c:	607a      	str	r2, [r7, #4]
	if (__p)
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d005      	beq.n	800a470 <_ZNSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	68b9      	ldr	r1, [r7, #8]
 800a46a:	4618      	mov	r0, r3
 800a46c:	f000 f945 	bl	800a6fa <_ZNSt16allocator_traitsISaIPN7desenet22NetworkInterfaceDriver10DescriptorEEE10deallocateERS4_PS3_j>
      }
 800a470:	bf00      	nop
 800a472:	3710      	adds	r7, #16
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <_ZNSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4618      	mov	r0, r3
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <_ZSt8_DestroyIPPN7desenet22NetworkInterfaceDriver10DescriptorES3_EvT_S5_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800a48e:	b580      	push	{r7, lr}
 800a490:	b084      	sub	sp, #16
 800a492:	af00      	add	r7, sp, #0
 800a494:	60f8      	str	r0, [r7, #12]
 800a496:	60b9      	str	r1, [r7, #8]
 800a498:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800a49a:	68b9      	ldr	r1, [r7, #8]
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f000 f93b 	bl	800a718 <_ZSt8_DestroyIPPN7desenet22NetworkInterfaceDriver10DescriptorEEvT_S5_>
    }
 800a4a2:	bf00      	nop
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <_ZNKSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800a4aa:	b480      	push	{r7}
 800a4ac:	b083      	sub	sp, #12
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	685a      	ldr	r2, [r3, #4]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	1ad3      	subs	r3, r2, r3
 800a4bc:	109b      	asrs	r3, r3, #2
 800a4be:	4618      	mov	r0, r3
 800a4c0:	370c      	adds	r7, #12
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr

0800a4ca <_ZNKSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800a4ca:	b480      	push	{r7}
 800a4cc:	b083      	sub	sp, #12
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <_ZSt7forwardIPN7desenet22NetworkInterfaceDriver10DescriptorEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	370c      	adds	r7, #12
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr

0800a4f6 <_ZNSt16allocator_traitsISaIPN7desenet22NetworkInterfaceDriver10DescriptorEEE9constructIS3_JS3_EEEvRS4_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b084      	sub	sp, #16
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	60f8      	str	r0, [r7, #12]
 800a4fe:	60b9      	str	r1, [r7, #8]
 800a500:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f7ff ffec 	bl	800a4e0 <_ZSt7forwardIPN7desenet22NetworkInterfaceDriver10DescriptorEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a508:	4603      	mov	r3, r0
 800a50a:	461a      	mov	r2, r3
 800a50c:	68b9      	ldr	r1, [r7, #8]
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f000 f90f 	bl	800a732 <_ZN9__gnu_cxx13new_allocatorIPN7desenet22NetworkInterfaceDriver10DescriptorEE9constructIS4_JS4_EEEvPT_DpOT0_>
 800a514:	bf00      	nop
 800a516:	3710      	adds	r7, #16
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	1d1a      	adds	r2, r3, #4
 800a528:	f107 030c 	add.w	r3, r7, #12
 800a52c:	4611      	mov	r1, r2
 800a52e:	4618      	mov	r0, r3
 800a530:	f000 f915 	bl	800a75e <_ZN9__gnu_cxx17__normal_iteratorIPPN7desenet22NetworkInterfaceDriver10DescriptorESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE15_S_use_relocateEv>:
      _S_use_relocate()
 800a53e:	b580      	push	{r7, lr}
 800a540:	b082      	sub	sp, #8
 800a542:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800a544:	4618      	mov	r0, r3
 800a546:	f000 f805 	bl	800a554 <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800a54a:	4603      	mov	r3, r0
      }
 800a54c:	4618      	mov	r0, r3
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800a55c:	2301      	movs	r3, #1
      }
 800a55e:	4618      	mov	r0, r3
 800a560:	370c      	adds	r7, #12
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr
	...

0800a56c <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE17_M_realloc_insertIJS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800a56c:	b5b0      	push	{r4, r5, r7, lr}
 800a56e:	b08c      	sub	sp, #48	; 0x30
 800a570:	af00      	add	r7, sp, #0
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	60b9      	str	r1, [r7, #8]
 800a576:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 800a578:	4a59      	ldr	r2, [pc, #356]	; (800a6e0 <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE17_M_realloc_insertIJS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x174>)
 800a57a:	2101      	movs	r1, #1
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	f000 f8fe 	bl	800a77e <_ZNKSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE12_M_check_lenEjPKc>
 800a582:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f000 f93b 	bl	800a80c <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE5beginEv>
 800a596:	4603      	mov	r3, r0
 800a598:	617b      	str	r3, [r7, #20]
 800a59a:	f107 0214 	add.w	r2, r7, #20
 800a59e:	f107 0308 	add.w	r3, r7, #8
 800a5a2:	4611      	mov	r1, r2
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f000 f941 	bl	800a82c <_ZN9__gnu_cxxmiIPPN7desenet22NetworkInterfaceDriver10DescriptorESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f000 f94f 	bl	800a856 <_ZNSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE11_M_allocateEj>
 800a5b8:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800a5be:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800a5c0:	69fb      	ldr	r3, [r7, #28]
 800a5c2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800a5c4:	69ba      	ldr	r2, [r7, #24]
 800a5c6:	18d5      	adds	r5, r2, r3
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7ff ff89 	bl	800a4e0 <_ZSt7forwardIPN7desenet22NetworkInterfaceDriver10DescriptorEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	4629      	mov	r1, r5
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	f7ff ff8e 	bl	800a4f6 <_ZNSt16allocator_traitsISaIPN7desenet22NetworkInterfaceDriver10DescriptorEEE9constructIS3_JS3_EEEvRS4_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800a5da:	2300      	movs	r3, #0
 800a5dc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800a5de:	f7ff ffae 	bl	800a53e <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE15_S_use_relocateEv>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d027      	beq.n	800a638 <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE17_M_realloc_insertIJS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800a5e8:	f107 0308 	add.w	r3, r7, #8
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f000 f95a 	bl	800a8a6 <_ZNK9__gnu_cxx17__normal_iteratorIPPN7desenet22NetworkInterfaceDriver10DescriptorESt6vectorIS4_SaIS4_EEE4baseEv>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7ff ff3d 	bl	800a478 <_ZNSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE19_M_get_Tp_allocatorEv>
 800a5fe:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800a600:	69ba      	ldr	r2, [r7, #24]
 800a602:	4621      	mov	r1, r4
 800a604:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a606:	f000 f93a 	bl	800a87e <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE11_S_relocateEPS3_S6_S6_RS4_>
 800a60a:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800a60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60e:	3304      	adds	r3, #4
 800a610:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800a612:	f107 0308 	add.w	r3, r7, #8
 800a616:	4618      	mov	r0, r3
 800a618:	f000 f945 	bl	800a8a6 <_ZNK9__gnu_cxx17__normal_iteratorIPPN7desenet22NetworkInterfaceDriver10DescriptorESt6vectorIS4_SaIS4_EEE4baseEv>
 800a61c:	4603      	mov	r3, r0
 800a61e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	4618      	mov	r0, r3
 800a624:	f7ff ff28 	bl	800a478 <_ZNSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE19_M_get_Tp_allocatorEv>
 800a628:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800a62a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a62c:	6a39      	ldr	r1, [r7, #32]
 800a62e:	4620      	mov	r0, r4
 800a630:	f000 f925 	bl	800a87e <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE11_S_relocateEPS3_S6_S6_RS4_>
 800a634:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a636:	e026      	b.n	800a686 <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE17_M_realloc_insertIJS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 800a638:	f107 0308 	add.w	r3, r7, #8
 800a63c:	4618      	mov	r0, r3
 800a63e:	f000 f932 	bl	800a8a6 <_ZNK9__gnu_cxx17__normal_iteratorIPPN7desenet22NetworkInterfaceDriver10DescriptorESt6vectorIS4_SaIS4_EEE4baseEv>
 800a642:	4603      	mov	r3, r0
 800a644:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	4618      	mov	r0, r3
 800a64a:	f7ff ff15 	bl	800a478 <_ZNSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE19_M_get_Tp_allocatorEv>
 800a64e:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800a650:	69ba      	ldr	r2, [r7, #24]
 800a652:	4621      	mov	r1, r4
 800a654:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a656:	f000 f931 	bl	800a8bc <_ZSt34__uninitialized_move_if_noexcept_aIPPN7desenet22NetworkInterfaceDriver10DescriptorES4_SaIS3_EET0_T_S7_S6_RT1_>
 800a65a:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800a65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65e:	3304      	adds	r3, #4
 800a660:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 800a662:	f107 0308 	add.w	r3, r7, #8
 800a666:	4618      	mov	r0, r3
 800a668:	f000 f91d 	bl	800a8a6 <_ZNK9__gnu_cxx17__normal_iteratorIPPN7desenet22NetworkInterfaceDriver10DescriptorESt6vectorIS4_SaIS4_EEE4baseEv>
 800a66c:	4603      	mov	r3, r0
 800a66e:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	4618      	mov	r0, r3
 800a674:	f7ff ff00 	bl	800a478 <_ZNSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE19_M_get_Tp_allocatorEv>
 800a678:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800a67a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a67c:	6a39      	ldr	r1, [r7, #32]
 800a67e:	4620      	mov	r0, r4
 800a680:	f000 f91c 	bl	800a8bc <_ZSt34__uninitialized_move_if_noexcept_aIPPN7desenet22NetworkInterfaceDriver10DescriptorES4_SaIS3_EET0_T_S7_S6_RT1_>
 800a684:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800a686:	f7ff ff5a 	bl	800a53e <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE15_S_use_relocateEv>
 800a68a:	4603      	mov	r3, r0
 800a68c:	f083 0301 	eor.w	r3, r3, #1
 800a690:	b2db      	uxtb	r3, r3
 800a692:	2b00      	cmp	r3, #0
 800a694:	d009      	beq.n	800a6aa <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE17_M_realloc_insertIJS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	4618      	mov	r0, r3
 800a69a:	f7ff feed 	bl	800a478 <_ZNSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE19_M_get_Tp_allocatorEv>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	6a39      	ldr	r1, [r7, #32]
 800a6a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a6a6:	f7ff fef2 	bl	800a48e <_ZSt8_DestroyIPPN7desenet22NetworkInterfaceDriver10DescriptorES3_EvT_S5_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800a6aa:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	689a      	ldr	r2, [r3, #8]
 800a6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b2:	1ad3      	subs	r3, r2, r3
 800a6b4:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6ba:	f7ff feca 	bl	800a452 <_ZNSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE13_M_deallocateEPS3_j>
      this->_M_impl._M_start = __new_start;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	69ba      	ldr	r2, [r7, #24]
 800a6c2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6c8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800a6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	69ba      	ldr	r2, [r7, #24]
 800a6d0:	441a      	add	r2, r3
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	609a      	str	r2, [r3, #8]
    }
 800a6d6:	bf00      	nop
 800a6d8:	3730      	adds	r7, #48	; 0x30
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bdb0      	pop	{r4, r5, r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	08018abc 	.word	0x08018abc

0800a6e4 <_ZN9__gnu_cxx13new_allocatorIPN7desenet22NetworkInterfaceDriver10DescriptorEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	370c      	adds	r7, #12
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr

0800a6fa <_ZNSt16allocator_traitsISaIPN7desenet22NetworkInterfaceDriver10DescriptorEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b084      	sub	sp, #16
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	60f8      	str	r0, [r7, #12]
 800a702:	60b9      	str	r1, [r7, #8]
 800a704:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	68b9      	ldr	r1, [r7, #8]
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f000 f8ef 	bl	800a8ee <_ZN9__gnu_cxx13new_allocatorIPN7desenet22NetworkInterfaceDriver10DescriptorEE10deallocateEPS4_j>
 800a710:	bf00      	nop
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <_ZSt8_DestroyIPPN7desenet22NetworkInterfaceDriver10DescriptorEEvT_S5_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800a722:	6839      	ldr	r1, [r7, #0]
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 f8ef 	bl	800a908 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7desenet22NetworkInterfaceDriver10DescriptorEEEvT_S7_>
    }
 800a72a:	bf00      	nop
 800a72c:	3708      	adds	r7, #8
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <_ZN9__gnu_cxx13new_allocatorIPN7desenet22NetworkInterfaceDriver10DescriptorEE9constructIS4_JS4_EEEvPT_DpOT0_>:

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800a732:	b590      	push	{r4, r7, lr}
 800a734:	b085      	sub	sp, #20
 800a736:	af00      	add	r7, sp, #0
 800a738:	60f8      	str	r0, [r7, #12]
 800a73a:	60b9      	str	r1, [r7, #8]
 800a73c:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f7ff fece 	bl	800a4e0 <_ZSt7forwardIPN7desenet22NetworkInterfaceDriver10DescriptorEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a744:	4603      	mov	r3, r0
 800a746:	681c      	ldr	r4, [r3, #0]
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	4619      	mov	r1, r3
 800a74c:	2004      	movs	r0, #4
 800a74e:	f7fc ff93 	bl	8007678 <_ZnwjPv>
 800a752:	4603      	mov	r3, r0
 800a754:	601c      	str	r4, [r3, #0]
 800a756:	bf00      	nop
 800a758:	3714      	adds	r7, #20
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd90      	pop	{r4, r7, pc}

0800a75e <_ZN9__gnu_cxx17__normal_iteratorIPPN7desenet22NetworkInterfaceDriver10DescriptorESt6vectorIS4_SaIS4_EEEC1ERKS5_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800a75e:	b480      	push	{r7}
 800a760:	b083      	sub	sp, #12
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
 800a766:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	601a      	str	r2, [r3, #0]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4618      	mov	r0, r3
 800a774:	370c      	adds	r7, #12
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr

0800a77e <_ZNKSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800a77e:	b590      	push	{r4, r7, lr}
 800a780:	b087      	sub	sp, #28
 800a782:	af00      	add	r7, sp, #0
 800a784:	60f8      	str	r0, [r7, #12]
 800a786:	60b9      	str	r1, [r7, #8]
 800a788:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800a78a:	68f8      	ldr	r0, [r7, #12]
 800a78c:	f000 f8c7 	bl	800a91e <_ZNKSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE8max_sizeEv>
 800a790:	4604      	mov	r4, r0
 800a792:	68f8      	ldr	r0, [r7, #12]
 800a794:	f7ff fe89 	bl	800a4aa <_ZNKSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE4sizeEv>
 800a798:	4603      	mov	r3, r0
 800a79a:	1ae2      	subs	r2, r4, r3
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	bf34      	ite	cc
 800a7a2:	2301      	movcc	r3, #1
 800a7a4:	2300      	movcs	r3, #0
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d002      	beq.n	800a7b2 <_ZNKSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f00b fe94 	bl	80164da <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	f7ff fe79 	bl	800a4aa <_ZNKSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE4sizeEv>
 800a7b8:	4604      	mov	r4, r0
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	f7ff fe75 	bl	800a4aa <_ZNKSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE4sizeEv>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	613b      	str	r3, [r7, #16]
 800a7c4:	f107 0208 	add.w	r2, r7, #8
 800a7c8:	f107 0310 	add.w	r3, r7, #16
 800a7cc:	4611      	mov	r1, r2
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f000 f8b6 	bl	800a940 <_ZSt3maxIjERKT_S2_S2_>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4423      	add	r3, r4
 800a7da:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800a7dc:	68f8      	ldr	r0, [r7, #12]
 800a7de:	f7ff fe64 	bl	800a4aa <_ZNKSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE4sizeEv>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d306      	bcc.n	800a7f8 <_ZNKSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE12_M_check_lenEjPKc+0x7a>
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f000 f897 	bl	800a91e <_ZNKSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE8max_sizeEv>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d904      	bls.n	800a802 <_ZNKSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE12_M_check_lenEjPKc+0x84>
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f000 f890 	bl	800a91e <_ZNKSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE8max_sizeEv>
 800a7fe:	4603      	mov	r3, r0
 800a800:	e000      	b.n	800a804 <_ZNKSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE12_M_check_lenEjPKc+0x86>
 800a802:	697b      	ldr	r3, [r7, #20]
      }
 800a804:	4618      	mov	r0, r3
 800a806:	371c      	adds	r7, #28
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd90      	pop	{r4, r7, pc}

0800a80c <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	f107 030c 	add.w	r3, r7, #12
 800a81a:	4611      	mov	r1, r2
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7ff ff9e 	bl	800a75e <_ZN9__gnu_cxx17__normal_iteratorIPPN7desenet22NetworkInterfaceDriver10DescriptorESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	4618      	mov	r0, r3
 800a826:	3710      	adds	r7, #16
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <_ZN9__gnu_cxxmiIPPN7desenet22NetworkInterfaceDriver10DescriptorESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800a82c:	b590      	push	{r4, r7, lr}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 f835 	bl	800a8a6 <_ZNK9__gnu_cxx17__normal_iteratorIPPN7desenet22NetworkInterfaceDriver10DescriptorESt6vectorIS4_SaIS4_EEE4baseEv>
 800a83c:	4603      	mov	r3, r0
 800a83e:	681c      	ldr	r4, [r3, #0]
 800a840:	6838      	ldr	r0, [r7, #0]
 800a842:	f000 f830 	bl	800a8a6 <_ZNK9__gnu_cxx17__normal_iteratorIPPN7desenet22NetworkInterfaceDriver10DescriptorESt6vectorIS4_SaIS4_EEE4baseEv>
 800a846:	4603      	mov	r3, r0
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	1ae3      	subs	r3, r4, r3
 800a84c:	109b      	asrs	r3, r3, #2
 800a84e:	4618      	mov	r0, r3
 800a850:	370c      	adds	r7, #12
 800a852:	46bd      	mov	sp, r7
 800a854:	bd90      	pop	{r4, r7, pc}

0800a856 <_ZNSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800a856:	b580      	push	{r7, lr}
 800a858:	b082      	sub	sp, #8
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
 800a85e:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d006      	beq.n	800a874 <_ZNSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE11_M_allocateEj+0x1e>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6839      	ldr	r1, [r7, #0]
 800a86a:	4618      	mov	r0, r3
 800a86c:	f000 f87c 	bl	800a968 <_ZNSt16allocator_traitsISaIPN7desenet22NetworkInterfaceDriver10DescriptorEEE8allocateERS4_j>
 800a870:	4603      	mov	r3, r0
 800a872:	e000      	b.n	800a876 <_ZNSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE11_M_allocateEj+0x20>
 800a874:	2300      	movs	r3, #0
      }
 800a876:	4618      	mov	r0, r3
 800a878:	3708      	adds	r7, #8
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE11_S_relocateEPS3_S6_S6_RS4_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800a87e:	b590      	push	{r4, r7, lr}
 800a880:	b089      	sub	sp, #36	; 0x24
 800a882:	af02      	add	r7, sp, #8
 800a884:	60f8      	str	r0, [r7, #12]
 800a886:	60b9      	str	r1, [r7, #8]
 800a888:	607a      	str	r2, [r7, #4]
 800a88a:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800a88c:	f88d 4000 	strb.w	r4, [sp]
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	68b9      	ldr	r1, [r7, #8]
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	f000 f875 	bl	800a986 <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE14_S_do_relocateEPS3_S6_S6_RS4_St17integral_constantIbLb1EE>
 800a89c:	4603      	mov	r3, r0
      }
 800a89e:	4618      	mov	r0, r3
 800a8a0:	371c      	adds	r7, #28
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd90      	pop	{r4, r7, pc}

0800a8a6 <_ZNK9__gnu_cxx17__normal_iteratorIPPN7desenet22NetworkInterfaceDriver10DescriptorESt6vectorIS4_SaIS4_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800a8a6:	b480      	push	{r7}
 800a8a8:	b083      	sub	sp, #12
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <_ZSt34__uninitialized_move_if_noexcept_aIPPN7desenet22NetworkInterfaceDriver10DescriptorES4_SaIS3_EET0_T_S7_S6_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800a8bc:	b590      	push	{r4, r7, lr}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	607a      	str	r2, [r7, #4]
 800a8c8:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f000 f86d 	bl	800a9aa <_ZSt32__make_move_if_noexcept_iteratorIPN7desenet22NetworkInterfaceDriver10DescriptorESt13move_iteratorIPS3_EET0_PT_>
 800a8d0:	4604      	mov	r4, r0
 800a8d2:	68b8      	ldr	r0, [r7, #8]
 800a8d4:	f000 f869 	bl	800a9aa <_ZSt32__make_move_if_noexcept_iteratorIPN7desenet22NetworkInterfaceDriver10DescriptorESt13move_iteratorIPS3_EET0_PT_>
 800a8d8:	4601      	mov	r1, r0
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f000 f872 	bl	800a9c8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPN7desenet22NetworkInterfaceDriver10DescriptorEES5_S4_ET0_T_S8_S7_RSaIT1_E>
 800a8e4:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3714      	adds	r7, #20
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd90      	pop	{r4, r7, pc}

0800a8ee <_ZN9__gnu_cxx13new_allocatorIPN7desenet22NetworkInterfaceDriver10DescriptorEE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 800a8ee:	b580      	push	{r7, lr}
 800a8f0:	b084      	sub	sp, #16
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	60f8      	str	r0, [r7, #12]
 800a8f6:	60b9      	str	r1, [r7, #8]
 800a8f8:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800a8fa:	68b8      	ldr	r0, [r7, #8]
 800a8fc:	f00b fdae 	bl	801645c <_ZdlPv>
      }
 800a900:	bf00      	nop
 800a902:	3710      	adds	r7, #16
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPN7desenet22NetworkInterfaceDriver10DescriptorEEEvT_S7_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
 800a912:	bf00      	nop
 800a914:	370c      	adds	r7, #12
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr

0800a91e <_ZNKSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800a91e:	b580      	push	{r7, lr}
 800a920:	b082      	sub	sp, #8
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4618      	mov	r0, r3
 800a92a:	f7ff fdce 	bl	800a4ca <_ZNKSt12_Vector_baseIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE19_M_get_Tp_allocatorEv>
 800a92e:	4603      	mov	r3, r0
 800a930:	4618      	mov	r0, r3
 800a932:	f000 f85a 	bl	800a9ea <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE11_S_max_sizeERKS4_>
 800a936:	4603      	mov	r3, r0
 800a938:	4618      	mov	r0, r3
 800a93a:	3708      	adds	r7, #8
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	429a      	cmp	r2, r3
 800a954:	d201      	bcs.n	800a95a <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	e000      	b.n	800a95c <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800a95a:	687b      	ldr	r3, [r7, #4]
    }
 800a95c:	4618      	mov	r0, r3
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <_ZNSt16allocator_traitsISaIPN7desenet22NetworkInterfaceDriver10DescriptorEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800a972:	2200      	movs	r2, #0
 800a974:	6839      	ldr	r1, [r7, #0]
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 f851 	bl	800aa1e <_ZN9__gnu_cxx13new_allocatorIPN7desenet22NetworkInterfaceDriver10DescriptorEE8allocateEjPKv>
 800a97c:	4603      	mov	r3, r0
 800a97e:	4618      	mov	r0, r3
 800a980:	3708      	adds	r7, #8
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE14_S_do_relocateEPS3_S6_S6_RS4_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800a986:	b580      	push	{r7, lr}
 800a988:	b084      	sub	sp, #16
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	60f8      	str	r0, [r7, #12]
 800a98e:	60b9      	str	r1, [r7, #8]
 800a990:	607a      	str	r2, [r7, #4]
 800a992:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	68b9      	ldr	r1, [r7, #8]
 800a99a:	68f8      	ldr	r0, [r7, #12]
 800a99c:	f000 f85d 	bl	800aa5a <_ZSt12__relocate_aIPPN7desenet22NetworkInterfaceDriver10DescriptorES4_SaIS3_EET0_T_S7_S6_RT1_>
 800a9a0:	4603      	mov	r3, r0
      }
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <_ZSt32__make_move_if_noexcept_iteratorIPN7desenet22NetworkInterfaceDriver10DescriptorESt13move_iteratorIPS3_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b084      	sub	sp, #16
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800a9b2:	f107 030c 	add.w	r3, r7, #12
 800a9b6:	6879      	ldr	r1, [r7, #4]
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f000 f86b 	bl	800aa94 <_ZNSt13move_iteratorIPPN7desenet22NetworkInterfaceDriver10DescriptorEEC1ES4_>
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3710      	adds	r7, #16
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPN7desenet22NetworkInterfaceDriver10DescriptorEES5_S4_ET0_T_S8_S7_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
 800a9d4:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	68b9      	ldr	r1, [r7, #8]
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	f000 f869 	bl	800aab2 <_ZSt18uninitialized_copyISt13move_iteratorIPPN7desenet22NetworkInterfaceDriver10DescriptorEES5_ET0_T_S8_S7_>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <_ZNSt6vectorIPN7desenet22NetworkInterfaceDriver10DescriptorESaIS3_EE11_S_max_sizeERKS4_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b084      	sub	sp, #16
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800a9f2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800a9f6:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 f86c 	bl	800aad6 <_ZNSt16allocator_traitsISaIPN7desenet22NetworkInterfaceDriver10DescriptorEEE8max_sizeERKS4_>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800aa02:	f107 0208 	add.w	r2, r7, #8
 800aa06:	f107 030c 	add.w	r3, r7, #12
 800aa0a:	4611      	mov	r1, r2
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f000 f86e 	bl	800aaee <_ZSt3minIjERKT_S2_S2_>
 800aa12:	4603      	mov	r3, r0
 800aa14:	681b      	ldr	r3, [r3, #0]
      }
 800aa16:	4618      	mov	r0, r3
 800aa18:	3710      	adds	r7, #16
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <_ZN9__gnu_cxx13new_allocatorIPN7desenet22NetworkInterfaceDriver10DescriptorEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b084      	sub	sp, #16
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	60f8      	str	r0, [r7, #12]
 800aa26:	60b9      	str	r1, [r7, #8]
 800aa28:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	f000 f873 	bl	800ab16 <_ZNK9__gnu_cxx13new_allocatorIPN7desenet22NetworkInterfaceDriver10DescriptorEE8max_sizeEv>
 800aa30:	4602      	mov	r2, r0
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	4293      	cmp	r3, r2
 800aa36:	bf8c      	ite	hi
 800aa38:	2301      	movhi	r3, #1
 800aa3a:	2300      	movls	r3, #0
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d001      	beq.n	800aa46 <_ZN9__gnu_cxx13new_allocatorIPN7desenet22NetworkInterfaceDriver10DescriptorEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800aa42:	f00b fd44 	bl	80164ce <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f00b fd1b 	bl	8016486 <_Znwj>
 800aa50:	4603      	mov	r3, r0
      }
 800aa52:	4618      	mov	r0, r3
 800aa54:	3710      	adds	r7, #16
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <_ZSt12__relocate_aIPPN7desenet22NetworkInterfaceDriver10DescriptorES4_SaIS3_EET0_T_S7_S6_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800aa5a:	b5b0      	push	{r4, r5, r7, lr}
 800aa5c:	b084      	sub	sp, #16
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	60f8      	str	r0, [r7, #12]
 800aa62:	60b9      	str	r1, [r7, #8]
 800aa64:	607a      	str	r2, [r7, #4]
 800aa66:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f000 f860 	bl	800ab2e <_ZSt12__niter_baseIPPN7desenet22NetworkInterfaceDriver10DescriptorEET_S5_>
 800aa6e:	4604      	mov	r4, r0
 800aa70:	68b8      	ldr	r0, [r7, #8]
 800aa72:	f000 f85c 	bl	800ab2e <_ZSt12__niter_baseIPPN7desenet22NetworkInterfaceDriver10DescriptorEET_S5_>
 800aa76:	4605      	mov	r5, r0
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 f858 	bl	800ab2e <_ZSt12__niter_baseIPPN7desenet22NetworkInterfaceDriver10DescriptorEET_S5_>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	4629      	mov	r1, r5
 800aa84:	4620      	mov	r0, r4
 800aa86:	f000 f85d 	bl	800ab44 <_ZSt14__relocate_a_1IPN7desenet22NetworkInterfaceDriver10DescriptorES3_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS6_E4typeES8_S8_S8_RSaIT0_E>
 800aa8a:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3710      	adds	r7, #16
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bdb0      	pop	{r4, r5, r7, pc}

0800aa94 <_ZNSt13move_iteratorIPPN7desenet22NetworkInterfaceDriver10DescriptorEEC1ES4_>:
      move_iterator(iterator_type __i)
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	683a      	ldr	r2, [r7, #0]
 800aaa2:	601a      	str	r2, [r3, #0]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	370c      	adds	r7, #12
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr

0800aab2 <_ZSt18uninitialized_copyISt13move_iteratorIPPN7desenet22NetworkInterfaceDriver10DescriptorEES5_ET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b086      	sub	sp, #24
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	60f8      	str	r0, [r7, #12]
 800aaba:	60b9      	str	r1, [r7, #8]
 800aabc:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800aabe:	2301      	movs	r3, #1
 800aac0:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	68b9      	ldr	r1, [r7, #8]
 800aac6:	68f8      	ldr	r0, [r7, #12]
 800aac8:	f000 f85a 	bl	800ab80 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPN7desenet22NetworkInterfaceDriver10DescriptorEES7_EET0_T_SA_S9_>
 800aacc:	4603      	mov	r3, r0
    }
 800aace:	4618      	mov	r0, r3
 800aad0:	3718      	adds	r7, #24
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <_ZNSt16allocator_traitsISaIPN7desenet22NetworkInterfaceDriver10DescriptorEEE8max_sizeERKS4_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b082      	sub	sp, #8
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 f819 	bl	800ab16 <_ZNK9__gnu_cxx13new_allocatorIPN7desenet22NetworkInterfaceDriver10DescriptorEE8max_sizeEv>
 800aae4:	4603      	mov	r3, r0
 800aae6:	4618      	mov	r0, r3
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}

0800aaee <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800aaee:	b480      	push	{r7}
 800aaf0:	b083      	sub	sp, #12
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
 800aaf6:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d201      	bcs.n	800ab08 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	e000      	b.n	800ab0a <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800ab08:	687b      	ldr	r3, [r7, #4]
    }
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	370c      	adds	r7, #12
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr

0800ab16 <_ZNK9__gnu_cxx13new_allocatorIPN7desenet22NetworkInterfaceDriver10DescriptorEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800ab16:	b480      	push	{r7}
 800ab18:	b083      	sub	sp, #12
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800ab1e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800ab22:	4618      	mov	r0, r3
 800ab24:	370c      	adds	r7, #12
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr

0800ab2e <_ZSt12__niter_baseIPPN7desenet22NetworkInterfaceDriver10DescriptorEET_S5_>:
    __niter_base(_Iterator __it)
 800ab2e:	b480      	push	{r7}
 800ab30:	b083      	sub	sp, #12
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
    { return __it; }
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	4618      	mov	r0, r3
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <_ZSt14__relocate_a_1IPN7desenet22NetworkInterfaceDriver10DescriptorES3_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS6_E4typeES8_S8_S8_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b086      	sub	sp, #24
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]
 800ab50:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800ab52:	68ba      	ldr	r2, [r7, #8]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	1ad3      	subs	r3, r2, r3
 800ab58:	109b      	asrs	r3, r3, #2
 800ab5a:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	dd06      	ble.n	800ab70 <_ZSt14__relocate_a_1IPN7desenet22NetworkInterfaceDriver10DescriptorES3_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS6_E4typeES8_S8_S8_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	461a      	mov	r2, r3
 800ab68:	68f9      	ldr	r1, [r7, #12]
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f00b fde4 	bl	8016738 <memmove>
      return __result + __count;
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	4413      	add	r3, r2
    }
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3718      	adds	r7, #24
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPN7desenet22NetworkInterfaceDriver10DescriptorEES7_EET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	68b9      	ldr	r1, [r7, #8]
 800ab90:	68f8      	ldr	r0, [r7, #12]
 800ab92:	f000 f811 	bl	800abb8 <_ZSt4copyISt13move_iteratorIPPN7desenet22NetworkInterfaceDriver10DescriptorEES5_ET0_T_S8_S7_>
 800ab96:	4603      	mov	r3, r0
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <_ZSt12__niter_wrapIPPN7desenet22NetworkInterfaceDriver10DescriptorEET_RKS5_S5_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
    { return __res; }
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	4618      	mov	r0, r3
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <_ZSt4copyISt13move_iteratorIPPN7desenet22NetworkInterfaceDriver10DescriptorEES5_ET0_T_S8_S7_>:
    copy(_II __first, _II __last, _OI __result)
 800abb8:	b590      	push	{r4, r7, lr}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800abc4:	68f8      	ldr	r0, [r7, #12]
 800abc6:	f000 f80f 	bl	800abe8 <_ZSt12__miter_baseIPPN7desenet22NetworkInterfaceDriver10DescriptorEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800abca:	4604      	mov	r4, r0
 800abcc:	68b8      	ldr	r0, [r7, #8]
 800abce:	f000 f80b 	bl	800abe8 <_ZSt12__miter_baseIPPN7desenet22NetworkInterfaceDriver10DescriptorEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800abd2:	4603      	mov	r3, r0
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	4619      	mov	r1, r3
 800abd8:	4620      	mov	r0, r4
 800abda:	f000 f816 	bl	800ac0a <_ZSt14__copy_move_a2ILb1EPPN7desenet22NetworkInterfaceDriver10DescriptorES4_ET1_T0_S6_S5_>
 800abde:	4603      	mov	r3, r0
    }
 800abe0:	4618      	mov	r0, r3
 800abe2:	3714      	adds	r7, #20
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd90      	pop	{r4, r7, pc}

0800abe8 <_ZSt12__miter_baseIPPN7desenet22NetworkInterfaceDriver10DescriptorEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 800abf0:	1d3b      	adds	r3, r7, #4
 800abf2:	4618      	mov	r0, r3
 800abf4:	f000 f82c 	bl	800ac50 <_ZNKSt13move_iteratorIPPN7desenet22NetworkInterfaceDriver10DescriptorEE4baseEv>
 800abf8:	4603      	mov	r3, r0
 800abfa:	4618      	mov	r0, r3
 800abfc:	f000 f834 	bl	800ac68 <_ZSt12__miter_baseIPPN7desenet22NetworkInterfaceDriver10DescriptorEET_S5_>
 800ac00:	4603      	mov	r3, r0
 800ac02:	4618      	mov	r0, r3
 800ac04:	3708      	adds	r7, #8
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <_ZSt14__copy_move_a2ILb1EPPN7desenet22NetworkInterfaceDriver10DescriptorES4_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800ac0a:	b5b0      	push	{r4, r5, r7, lr}
 800ac0c:	b084      	sub	sp, #16
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	60f8      	str	r0, [r7, #12]
 800ac12:	60b9      	str	r1, [r7, #8]
 800ac14:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800ac16:	68f8      	ldr	r0, [r7, #12]
 800ac18:	f7ff ff89 	bl	800ab2e <_ZSt12__niter_baseIPPN7desenet22NetworkInterfaceDriver10DescriptorEET_S5_>
 800ac1c:	4604      	mov	r4, r0
 800ac1e:	68b8      	ldr	r0, [r7, #8]
 800ac20:	f7ff ff85 	bl	800ab2e <_ZSt12__niter_baseIPPN7desenet22NetworkInterfaceDriver10DescriptorEET_S5_>
 800ac24:	4605      	mov	r5, r0
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7ff ff80 	bl	800ab2e <_ZSt12__niter_baseIPPN7desenet22NetworkInterfaceDriver10DescriptorEET_S5_>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	461a      	mov	r2, r3
 800ac32:	4629      	mov	r1, r5
 800ac34:	4620      	mov	r0, r4
 800ac36:	f000 f822 	bl	800ac7e <_ZSt13__copy_move_aILb1EPPN7desenet22NetworkInterfaceDriver10DescriptorES4_ET1_T0_S6_S5_>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	1d3b      	adds	r3, r7, #4
 800ac3e:	4611      	mov	r1, r2
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7ff ffad 	bl	800aba0 <_ZSt12__niter_wrapIPPN7desenet22NetworkInterfaceDriver10DescriptorEET_RKS5_S5_>
 800ac46:	4603      	mov	r3, r0
    }
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3710      	adds	r7, #16
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bdb0      	pop	{r4, r5, r7, pc}

0800ac50 <_ZNKSt13move_iteratorIPPN7desenet22NetworkInterfaceDriver10DescriptorEE4baseEv>:
      base() const
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	370c      	adds	r7, #12
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <_ZSt12__miter_baseIPPN7desenet22NetworkInterfaceDriver10DescriptorEET_S5_>:
    __miter_base(_Iterator __it)
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
    { return __it; }
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	4618      	mov	r0, r3
 800ac74:	370c      	adds	r7, #12
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr

0800ac7e <_ZSt13__copy_move_aILb1EPPN7desenet22NetworkInterfaceDriver10DescriptorES4_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b086      	sub	sp, #24
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	60f8      	str	r0, [r7, #12]
 800ac86:	60b9      	str	r1, [r7, #8]
 800ac88:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	68b9      	ldr	r1, [r7, #8]
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	f000 f805 	bl	800aca2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPN7desenet22NetworkInterfaceDriver10DescriptorEEEPT_PKS7_SA_S8_>
 800ac98:	4603      	mov	r3, r0
    }
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3718      	adds	r7, #24
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPN7desenet22NetworkInterfaceDriver10DescriptorEEEPT_PKS7_SA_S8_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b086      	sub	sp, #24
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	60f8      	str	r0, [r7, #12]
 800acaa:	60b9      	str	r1, [r7, #8]
 800acac:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800acae:	68ba      	ldr	r2, [r7, #8]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	1ad3      	subs	r3, r2, r3
 800acb4:	109b      	asrs	r3, r3, #2
 800acb6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d006      	beq.n	800accc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPN7desenet22NetworkInterfaceDriver10DescriptorEEEPT_PKS7_SA_S8_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	461a      	mov	r2, r3
 800acc4:	68f9      	ldr	r1, [r7, #12]
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f00b fd36 	bl	8016738 <memmove>
	  return __result + _Num;
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	4413      	add	r3, r2
	}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3718      	adds	r7, #24
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <_ZN7desenet19NetworkTimeProvider18currentNetworkTimeEv>:

namespace desenet {

//static
NetworkTime NetworkTimeProvider::currentNetworkTime()
{
 800acdc:	b590      	push	{r4, r7, lr}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
	const TTime currentTime = TTime::currentTime();
 800ace2:	463b      	mov	r3, r7
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7fd fe81 	bl	80089ec <_ZN5TTime11currentTimeEv>

	// Get the actual time and count milliseconds since midnight.
	return currentTime.getMds();
 800acea:	463b      	mov	r3, r7
 800acec:	4618      	mov	r0, r3
 800acee:	f7fd fe91 	bl	8008a14 <_ZNK5TTime6getMdsEv>
 800acf2:	4604      	mov	r4, r0
 800acf4:	bf00      	nop
	const TTime currentTime = TTime::currentTime();
 800acf6:	463b      	mov	r3, r7
 800acf8:	4618      	mov	r0, r3
 800acfa:	f7fd fe6c 	bl	80089d6 <_ZN5TTimeD1Ev>
	return currentTime.getMds();
 800acfe:	4623      	mov	r3, r4
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	370c      	adds	r7, #12
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd90      	pop	{r4, r7, pc}

0800ad08 <_ZN7desenet6sensor19AbstractApplication13svSyncRequestEv>:
*********************************************************************************************************/

// Default implementations.

void AbstractApplication::svSyncRequest()
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
    // TODO: Register application using the network entity
    NetworkEntity::instance().svSyncRequest(this);
 800ad10:	f000 fc68 	bl	800b5e4 <_ZN7desenet6sensor13NetworkEntity8instanceEv>
 800ad14:	4603      	mov	r3, r0
 800ad16:	6879      	ldr	r1, [r7, #4]
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f000 fc7b 	bl	800b614 <_ZN7desenet6sensor13NetworkEntity13svSyncRequestEPNS0_19AbstractApplicationE>
}
 800ad1e:	bf00      	nop
 800ad20:	3708      	adds	r7, #8
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <_ZN7desenet6sensor19AbstractApplication16svPublishRequestEh>:

bool AbstractApplication::svPublishRequest(SvGroup group)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b082      	sub	sp, #8
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
 800ad2e:	460b      	mov	r3, r1
 800ad30:	70fb      	strb	r3, [r7, #3]
    // TODO: Register application for the provided group using the network entity
    return NetworkEntity::instance().svPublishRequest(group,this);
 800ad32:	f000 fc57 	bl	800b5e4 <_ZN7desenet6sensor13NetworkEntity8instanceEv>
 800ad36:	78fb      	ldrb	r3, [r7, #3]
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	f000 fc7a 	bl	800b634 <_ZN7desenet6sensor13NetworkEntity16svPublishRequestEhPNS0_19AbstractApplicationE>
 800ad40:	4603      	mov	r3, r0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3708      	adds	r7, #8
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <_ZN7desenet6sensor19AbstractApplication16evPublishRequestEtRKN3hei12SharedBufferIhEE>:

void AbstractApplication::evPublishRequest(EvId id, const SharedByteBuffer & evData)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b082      	sub	sp, #8
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	4603      	mov	r3, r0
 800ad52:	6039      	str	r1, [r7, #0]
 800ad54:	80fb      	strh	r3, [r7, #6]
    // TODO: Publish event data
    NetworkEntity::instance().eventReceived(id,evData);
 800ad56:	f000 fc45 	bl	800b5e4 <_ZN7desenet6sensor13NetworkEntity8instanceEv>
 800ad5a:	1dbb      	adds	r3, r7, #6
 800ad5c:	683a      	ldr	r2, [r7, #0]
 800ad5e:	4619      	mov	r1, r3
 800ad60:	f000 fc9e 	bl	800b6a0 <_ZN7desenet6sensor13NetworkEntity13eventReceivedERKtRKN3hei12SharedBufferIhEE>
}
 800ad64:	bf00      	nop
 800ad66:	3708      	adds	r7, #8
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <_ZN7desenet6sensor19AbstractApplication16svSyncIndicationEm>:

/**
 * Default callback method for syncs
 */
void AbstractApplication::svSyncIndication(desenet::NetworkTime)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
    //Read value
}
 800ad76:	bf00      	nop
 800ad78:	370c      	adds	r7, #12
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr

0800ad82 <_ZN7desenet6sensor19AbstractApplication19svPublishIndicationEhRN3hei12SharedBufferIhEE>:

/**
 * Default callback method for SV publishes
 */
SharedByteBuffer::sizeType AbstractApplication::svPublishIndication(SvGroup, SharedByteBuffer &svData)
{
 800ad82:	b480      	push	{r7}
 800ad84:	b085      	sub	sp, #20
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	60f8      	str	r0, [r7, #12]
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	607a      	str	r2, [r7, #4]
 800ad8e:	72fb      	strb	r3, [r7, #11]

	return 0;
 800ad90:	2300      	movs	r3, #0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3714      	adds	r7, #20
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr
	...

0800ada0 <_Z41__static_initialization_and_destruction_0ii>:
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b088      	sub	sp, #32
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d122      	bne.n	800adf6 <_Z41__static_initialization_and_destruction_0ii+0x56>
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d11d      	bne.n	800adf6 <_Z41__static_initialization_and_destruction_0ii+0x56>
 800adba:	4b18      	ldr	r3, [pc, #96]	; (800ae1c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	613b      	str	r3, [r7, #16]
 800adc0:	f107 0310 	add.w	r3, r7, #16
 800adc4:	60bb      	str	r3, [r7, #8]
 800adc6:	2304      	movs	r3, #4
 800adc8:	60fb      	str	r3, [r7, #12]
 800adca:	f107 0308 	add.w	r3, r7, #8
 800adce:	e893 0006 	ldmia.w	r3, {r1, r2}
 800add2:	4813      	ldr	r0, [pc, #76]	; (800ae20 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800add4:	f7fb ff76 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
  static const desenet::Address SENSOR_ADDRESS({0xC7, 0xC7, 0xC7, 0xC7});	///< @brief Sensor's reception address.
 800add8:	4b12      	ldr	r3, [pc, #72]	; (800ae24 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	61fb      	str	r3, [r7, #28]
 800adde:	f107 031c 	add.w	r3, r7, #28
 800ade2:	617b      	str	r3, [r7, #20]
 800ade4:	2304      	movs	r3, #4
 800ade6:	61bb      	str	r3, [r7, #24]
 800ade8:	f107 0314 	add.w	r3, r7, #20
 800adec:	e893 0006 	ldmia.w	r3, {r1, r2}
 800adf0:	480d      	ldr	r0, [pc, #52]	; (800ae28 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800adf2:	f7fb ff67 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d10a      	bne.n	800ae12 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d105      	bne.n	800ae12 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800ae06:	4808      	ldr	r0, [pc, #32]	; (800ae28 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800ae08:	f7fc f898 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 800ae0c:	4804      	ldr	r0, [pc, #16]	; (800ae20 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800ae0e:	f7fc f895 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
 800ae12:	bf00      	nop
 800ae14:	3720      	adds	r7, #32
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	08018bc4 	.word	0x08018bc4
 800ae20:	200016b8 	.word	0x200016b8
 800ae24:	08018bc8 	.word	0x08018bc8
 800ae28:	200016c0 	.word	0x200016c0

0800ae2c <_GLOBAL__sub_I__ZN7desenet6sensor19AbstractApplication13svSyncRequestEv>:
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ae34:	2001      	movs	r0, #1
 800ae36:	f7ff ffb3 	bl	800ada0 <_Z41__static_initialization_and_destruction_0ii>
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <_GLOBAL__sub_D__ZN7desenet6sensor19AbstractApplication13svSyncRequestEv>:
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ae44:	2000      	movs	r0, #0
 800ae46:	f7ff ffab 	bl	800ada0 <_Z41__static_initialization_and_destruction_0ii>
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <_ZN7desenet6sensor3NetC1Ev>:
namespace desenet {
namespace sensor {

Net * Net::_pInstance(nullptr);		// Instantiation of static attribute

Net::Net()
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b082      	sub	sp, #8
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 : _pNetworkInterfaceDriver(nullptr)
 800ae54:	4a11      	ldr	r2, [pc, #68]	; (800ae9c <_ZN7desenet6sensor3NetC1Ev+0x50>)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	601a      	str	r2, [r3, #0]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	3304      	adds	r3, #4
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f000 faaa 	bl	800b3b8 <_ZN7desenet6sensor13NetworkEntityC1Ev>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	33a4      	adds	r3, #164	; 0xa4
 800ae70:	4618      	mov	r0, r3
 800ae72:	f008 f949 	bl	8013108 <_ZN7desenet15TimeSlotManagerC1Ev>
{
    assert(!_pInstance);		// Only one instance allowed
 800ae76:	4b0a      	ldr	r3, [pc, #40]	; (800aea0 <_ZN7desenet6sensor3NetC1Ev+0x54>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d005      	beq.n	800ae8a <_ZN7desenet6sensor3NetC1Ev+0x3e>
 800ae7e:	4b09      	ldr	r3, [pc, #36]	; (800aea4 <_ZN7desenet6sensor3NetC1Ev+0x58>)
 800ae80:	4a09      	ldr	r2, [pc, #36]	; (800aea8 <_ZN7desenet6sensor3NetC1Ev+0x5c>)
 800ae82:	210f      	movs	r1, #15
 800ae84:	4809      	ldr	r0, [pc, #36]	; (800aeac <_ZN7desenet6sensor3NetC1Ev+0x60>)
 800ae86:	f00b fbd9 	bl	801663c <__assert_func>
    _pInstance = this;
 800ae8a:	4a05      	ldr	r2, [pc, #20]	; (800aea0 <_ZN7desenet6sensor3NetC1Ev+0x54>)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6013      	str	r3, [r2, #0]
}
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	4618      	mov	r0, r3
 800ae94:	3708      	adds	r7, #8
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	0801bf2c 	.word	0x0801bf2c
 800aea0:	200016d8 	.word	0x200016d8
 800aea4:	08018bcc 	.word	0x08018bcc
 800aea8:	08018bd8 	.word	0x08018bd8
 800aeac:	08018bf4 	.word	0x08018bf4

0800aeb0 <_ZN7desenet6sensor3NetD1Ev>:

Net::~Net()
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	4a08      	ldr	r2, [pc, #32]	; (800aedc <_ZN7desenet6sensor3NetD1Ev+0x2c>)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	601a      	str	r2, [r3, #0]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	33a4      	adds	r3, #164	; 0xa4
 800aec2:	4618      	mov	r0, r3
 800aec4:	f008 f972 	bl	80131ac <_ZN7desenet15TimeSlotManagerD1Ev>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	3304      	adds	r3, #4
 800aecc:	4618      	mov	r0, r3
 800aece:	f000 fae1 	bl	800b494 <_ZN7desenet6sensor13NetworkEntityD1Ev>
{
}
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	4618      	mov	r0, r3
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	0801bf2c 	.word	0x0801bf2c

0800aee0 <_ZN7desenet6sensor3NetD0Ev>:
Net::~Net()
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
}
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f7ff ffe1 	bl	800aeb0 <_ZN7desenet6sensor3NetD1Ev>
 800aeee:	21c4      	movs	r1, #196	; 0xc4
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f00b fab5 	bl	8016460 <_ZdlPvj>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4618      	mov	r0, r3
 800aefa:	3708      	adds	r7, #8
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <_ZN7desenet6sensor3Net10initializeERKh>:

void Net::initialize(const desenet::SlotNumber & slotNumber)
{
 800af00:	b590      	push	{r4, r7, lr}
 800af02:	b08f      	sub	sp, #60	; 0x3c
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
    char sensorName[16];
    _networkEntity.initialize(slotNumber);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	3304      	adds	r3, #4
 800af0e:	6839      	ldr	r1, [r7, #0]
 800af10:	4618      	mov	r0, r3
 800af12:	f000 faf1 	bl	800b4f8 <_ZN7desenet6sensor13NetworkEntity10initializeERKh>
    _timeSlotManager.initialize(slotNumber);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	33a4      	adds	r3, #164	; 0xa4
 800af1a:	6839      	ldr	r1, [r7, #0]
 800af1c:	4618      	mov	r0, r3
 800af1e:	f008 f979 	bl	8013214 <_ZN7desenet15TimeSlotManager10initializeERKh>

    snprintf(sensorName, 16, "Sensor %d", slotNumber);
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	f107 000c 	add.w	r0, r7, #12
 800af2a:	4a22      	ldr	r2, [pc, #136]	; (800afb4 <_ZN7desenet6sensor3Net10initializeERKh+0xb4>)
 800af2c:	2110      	movs	r1, #16
 800af2e:	f00c f887 	bl	8017040 <sniprintf>

    _pNetworkInterfaceDriver = instanciateNic(*(uint32_t *)SENSOR_ADDRESS.data(), sensorName);
 800af32:	4821      	ldr	r0, [pc, #132]	; (800afb8 <_ZN7desenet6sensor3Net10initializeERKh+0xb8>)
 800af34:	f7fe fe86 	bl	8009c44 <_ZNK3phy7AddressILj4EE4dataEv>
 800af38:	4603      	mov	r3, r0
 800af3a:	681c      	ldr	r4, [r3, #0]
 800af3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800af40:	4618      	mov	r0, r3
 800af42:	f00b fab6 	bl	80164b2 <_ZNSaIcEC1Ev>
 800af46:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800af4a:	f107 010c 	add.w	r1, r7, #12
 800af4e:	f107 031c 	add.w	r3, r7, #28
 800af52:	4618      	mov	r0, r3
 800af54:	f00b fb3a 	bl	80165cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800af58:	f107 031c 	add.w	r3, r7, #28
 800af5c:	4619      	mov	r1, r3
 800af5e:	4620      	mov	r0, r4
 800af60:	f007 fd2e 	bl	80129c0 <_Z14instanciateNicmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800af64:	4602      	mov	r2, r0
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800af6c:	f107 031c 	add.w	r3, r7, #28
 800af70:	4618      	mov	r0, r3
 800af72:	f00b faf5 	bl	8016560 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800af76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800af7a:	4618      	mov	r0, r3
 800af7c:	f00b fa9a 	bl	80164b4 <_ZNSaIcED1Ev>
    _pNetworkInterfaceDriver->initialize();
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	330c      	adds	r3, #12
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4610      	mov	r0, r2
 800af94:	4798      	blx	r3

    _networkEntity.initializeRelations(_timeSlotManager, *_pNetworkInterfaceDriver);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	1d18      	adds	r0, r3, #4
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f103 01a4 	add.w	r1, r3, #164	; 0xa4
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800afa6:	461a      	mov	r2, r3
 800afa8:	f000 fac4 	bl	800b534 <_ZN7desenet6sensor13NetworkEntity19initializeRelationsER16ITimeSlotManagerRNS_22NetworkInterfaceDriverE>

    // TODO: Add additional initialization code here
}
 800afac:	bf00      	nop
 800afae:	373c      	adds	r7, #60	; 0x3c
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd90      	pop	{r4, r7, pc}
 800afb4:	08018c6c 	.word	0x08018c6c
 800afb8:	200016d0 	.word	0x200016d0

0800afbc <_ZN7desenet6sensor3Net5startEv>:

void Net::start()
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
    _timeSlotManager.start();
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	33a4      	adds	r3, #164	; 0xa4
 800afc8:	4618      	mov	r0, r3
 800afca:	f008 f96a 	bl	80132a2 <_ZN7desenet15TimeSlotManager5startEv>
}
 800afce:	bf00      	nop
 800afd0:	3708      	adds	r7, #8
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
	...

0800afd8 <_Z41__static_initialization_and_destruction_0ii>:
    assert(_pInstance);
    return *_pInstance;
}

} // sensor
} // desenet
 800afd8:	b580      	push	{r7, lr}
 800afda:	b088      	sub	sp, #32
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d122      	bne.n	800b02e <_Z41__static_initialization_and_destruction_0ii+0x56>
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800afee:	4293      	cmp	r3, r2
 800aff0:	d11d      	bne.n	800b02e <_Z41__static_initialization_and_destruction_0ii+0x56>
 800aff2:	4b18      	ldr	r3, [pc, #96]	; (800b054 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	613b      	str	r3, [r7, #16]
 800aff8:	f107 0310 	add.w	r3, r7, #16
 800affc:	60bb      	str	r3, [r7, #8]
 800affe:	2304      	movs	r3, #4
 800b000:	60fb      	str	r3, [r7, #12]
 800b002:	f107 0308 	add.w	r3, r7, #8
 800b006:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b00a:	4813      	ldr	r0, [pc, #76]	; (800b058 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800b00c:	f7fb fe5a 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
  static const desenet::Address SENSOR_ADDRESS({0xC7, 0xC7, 0xC7, 0xC7});	///< @brief Sensor's reception address.
 800b010:	4b12      	ldr	r3, [pc, #72]	; (800b05c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	61fb      	str	r3, [r7, #28]
 800b016:	f107 031c 	add.w	r3, r7, #28
 800b01a:	617b      	str	r3, [r7, #20]
 800b01c:	2304      	movs	r3, #4
 800b01e:	61bb      	str	r3, [r7, #24]
 800b020:	f107 0314 	add.w	r3, r7, #20
 800b024:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b028:	480d      	ldr	r0, [pc, #52]	; (800b060 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800b02a:	f7fb fe4b 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d10a      	bne.n	800b04a <_Z41__static_initialization_and_destruction_0ii+0x72>
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d105      	bne.n	800b04a <_Z41__static_initialization_and_destruction_0ii+0x72>
 800b03e:	4808      	ldr	r0, [pc, #32]	; (800b060 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800b040:	f7fb ff7c 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 800b044:	4804      	ldr	r0, [pc, #16]	; (800b058 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800b046:	f7fb ff79 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
 800b04a:	bf00      	nop
 800b04c:	3720      	adds	r7, #32
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	08018db0 	.word	0x08018db0
 800b058:	200016c8 	.word	0x200016c8
 800b05c:	08018db4 	.word	0x08018db4
 800b060:	200016d0 	.word	0x200016d0

0800b064 <_GLOBAL__sub_I__ZN7desenet6sensor3Net10_pInstanceE>:
 800b064:	b580      	push	{r7, lr}
 800b066:	af00      	add	r7, sp, #0
 800b068:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b06c:	2001      	movs	r0, #1
 800b06e:	f7ff ffb3 	bl	800afd8 <_Z41__static_initialization_and_destruction_0ii>
 800b072:	bd80      	pop	{r7, pc}

0800b074 <_GLOBAL__sub_D__ZN7desenet6sensor3Net10_pInstanceE>:
 800b074:	b580      	push	{r7, lr}
 800b076:	af00      	add	r7, sp, #0
 800b078:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b07c:	2000      	movs	r0, #0
 800b07e:	f7ff ffab 	bl	800afd8 <_Z41__static_initialization_and_destruction_0ii>
 800b082:	bd80      	pop	{r7, pc}

0800b084 <_ZNSt8__detail17_List_node_headerC1Ev>:
    {
#if _GLIBCXX_USE_CXX11_ABI
      std::size_t _M_size;
#endif

      _List_node_header() _GLIBCXX_NOEXCEPT
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
      { _M_init(); }
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 f836 	bl	800b0fe <_ZNSt8__detail17_List_node_header7_M_initEv>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	4618      	mov	r0, r3
 800b096:	3708      	adds	r7, #8
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <_ZNSt8__detail17_List_node_header13_M_move_nodesEOS0_>:
	    __x._M_init();
	  }
      }

      void
      _M_move_nodes(_List_node_header&& __x)
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
      {
	_List_node_base* const __xnode = __x._M_base();
 800b0a6:	6838      	ldr	r0, [r7, #0]
 800b0a8:	f000 f83d 	bl	800b126 <_ZNSt8__detail17_List_node_header7_M_baseEv>
 800b0ac:	60f8      	str	r0, [r7, #12]
	if (__xnode->_M_next == __xnode)
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	68fa      	ldr	r2, [r7, #12]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d103      	bne.n	800b0c0 <_ZNSt8__detail17_List_node_header13_M_move_nodesEOS0_+0x24>
	  _M_init();
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f000 f820 	bl	800b0fe <_ZNSt8__detail17_List_node_header7_M_initEv>
# if _GLIBCXX_USE_CXX11_ABI
	    _M_size = __x._M_size;
# endif
	    __x._M_init();
	  }
      }
 800b0be:	e01a      	b.n	800b0f6 <_ZNSt8__detail17_List_node_header13_M_move_nodesEOS0_+0x5a>
	    _List_node_base* const __node = this->_M_base();
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 f830 	bl	800b126 <_ZNSt8__detail17_List_node_header7_M_baseEv>
 800b0c6:	60b8      	str	r0, [r7, #8]
	    __node->_M_next = __xnode->_M_next;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	601a      	str	r2, [r3, #0]
	    __node->_M_prev = __xnode->_M_prev;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	685a      	ldr	r2, [r3, #4]
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	605a      	str	r2, [r3, #4]
	    __node->_M_next->_M_prev = __node->_M_prev->_M_next = __node;
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	68ba      	ldr	r2, [r7, #8]
 800b0de:	601a      	str	r2, [r3, #0]
 800b0e0:	68ba      	ldr	r2, [r7, #8]
 800b0e2:	6812      	ldr	r2, [r2, #0]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	6053      	str	r3, [r2, #4]
	    _M_size = __x._M_size;
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	689a      	ldr	r2, [r3, #8]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	609a      	str	r2, [r3, #8]
	    __x._M_init();
 800b0f0:	6838      	ldr	r0, [r7, #0]
 800b0f2:	f000 f804 	bl	800b0fe <_ZNSt8__detail17_List_node_header7_M_initEv>
      }
 800b0f6:	bf00      	nop
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <_ZNSt8__detail17_List_node_header7_M_initEv>:
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
 800b0fe:	b480      	push	{r7}
 800b100:	b083      	sub	sp, #12
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
      {
	this->_M_next = this->_M_prev = this;
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	605a      	str	r2, [r3, #4]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	685a      	ldr	r2, [r3, #4]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	601a      	str	r2, [r3, #0]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	609a      	str	r2, [r3, #8]
#endif
      }
 800b11a:	bf00      	nop
 800b11c:	370c      	adds	r7, #12
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr

0800b126 <_ZNSt8__detail17_List_node_header7_M_baseEv>:

    private:
      _List_node_base* _M_base() { return this; }
 800b126:	b480      	push	{r7}
 800b128:	b083      	sub	sp, #12
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4618      	mov	r0, r3
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <_ZNSt12_Base_bitsetILj1EE11_S_whichbitEj>:
      _S_whichbit(size_t __pos) _GLIBCXX_NOEXCEPT
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
      {  return __pos % _GLIBCXX_BITSET_BITS_PER_WORD; }
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f003 031f 	and.w	r3, r3, #31
 800b14a:	4618      	mov	r0, r3
 800b14c:	370c      	adds	r7, #12
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr

0800b156 <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>:
      _S_maskbit(size_t __pos) _GLIBCXX_NOEXCEPT
 800b156:	b580      	push	{r7, lr}
 800b158:	b082      	sub	sp, #8
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
      { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f7ff ffec 	bl	800b13c <_ZNSt12_Base_bitsetILj1EE11_S_whichbitEj>
 800b164:	4603      	mov	r3, r0
 800b166:	2201      	movs	r2, #1
 800b168:	fa02 f303 	lsl.w	r3, r2, r3
 800b16c:	4618      	mov	r0, r3
 800b16e:	3708      	adds	r7, #8
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <_ZNSt12_Base_bitsetILj1EE10_M_getwordEj>:
      _M_getword(size_t) _GLIBCXX_NOEXCEPT
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
      { return _M_w; }
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4618      	mov	r0, r3
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	4618      	mov	r0, r3
 800b198:	370c      	adds	r7, #12
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr

0800b1a2 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 800b1a2:	b480      	push	{r7}
 800b1a4:	b083      	sub	sp, #12
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	609a      	str	r2, [r3, #8]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	370c      	adds	r7, #12
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d005      	beq.n	800b1f0 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	6879      	ldr	r1, [r7, #4]
 800b1ec:	2203      	movs	r2, #3
 800b1ee:	4798      	blx	r3
    }
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <_ZN7desenet6sensor13NetworkEntity12EventElementC1EtRKN3hei12SharedBufferIhEE>:
    /**
     * @brief Holds event information.
     */
    struct EventElement
    {
        EventElement(EvId id, const SharedByteBuffer & data)
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b084      	sub	sp, #16
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	60f8      	str	r0, [r7, #12]
 800b202:	460b      	mov	r3, r1
 800b204:	607a      	str	r2, [r7, #4]
 800b206:	817b      	strh	r3, [r7, #10]
         : id(id), data(data)
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	897a      	ldrh	r2, [r7, #10]
 800b20c:	801a      	strh	r2, [r3, #0]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	3304      	adds	r3, #4
 800b212:	6879      	ldr	r1, [r7, #4]
 800b214:	4618      	mov	r0, r3
 800b216:	f7fe f9c1 	bl	800959c <_ZN3hei12SharedBufferIhEC1ERKS1_>
        {}
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	4618      	mov	r0, r3
 800b21e:	3710      	adds	r7, #16
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <_ZNK7desenet6sensor13NetworkEntity15timeSlotManagerEv>:
     * @brief Called by the lower layer after reception of a new frame
     */
    void onReceive(NetworkInterfaceDriver & driver, const uint32_t receptionTime, const uint8_t * const buffer, size_t length);

protected:
    inline ITimeSlotManager & timeSlotManager() const { assert(_pTimeSlotManager); return *_pTimeSlotManager; }	///< Internal access to TimeSlotManager
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d105      	bne.n	800b240 <_ZNK7desenet6sensor13NetworkEntity15timeSlotManagerEv+0x1c>
 800b234:	4b05      	ldr	r3, [pc, #20]	; (800b24c <_ZNK7desenet6sensor13NetworkEntity15timeSlotManagerEv+0x28>)
 800b236:	4a06      	ldr	r2, [pc, #24]	; (800b250 <_ZNK7desenet6sensor13NetworkEntity15timeSlotManagerEv+0x2c>)
 800b238:	2144      	movs	r1, #68	; 0x44
 800b23a:	4806      	ldr	r0, [pc, #24]	; (800b254 <_ZNK7desenet6sensor13NetworkEntity15timeSlotManagerEv+0x30>)
 800b23c:	f00b f9fe 	bl	801663c <__assert_func>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	4618      	mov	r0, r3
 800b246:	3708      	adds	r7, #8
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	08018db8 	.word	0x08018db8
 800b250:	08018dcc 	.word	0x08018dcc
 800b254:	08018e18 	.word	0x08018e18

0800b258 <_ZNK7desenet6sensor13NetworkEntity11transceiverEv>:
    inline NetworkInterfaceDriver & transceiver() const { assert(_pTransceiver); return *_pTransceiver; }		///< Internal access to Transceiver
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d105      	bne.n	800b274 <_ZNK7desenet6sensor13NetworkEntity11transceiverEv+0x1c>
 800b268:	4b05      	ldr	r3, [pc, #20]	; (800b280 <_ZNK7desenet6sensor13NetworkEntity11transceiverEv+0x28>)
 800b26a:	4a06      	ldr	r2, [pc, #24]	; (800b284 <_ZNK7desenet6sensor13NetworkEntity11transceiverEv+0x2c>)
 800b26c:	2145      	movs	r1, #69	; 0x45
 800b26e:	4806      	ldr	r0, [pc, #24]	; (800b288 <_ZNK7desenet6sensor13NetworkEntity11transceiverEv+0x30>)
 800b270:	f00b f9e4 	bl	801663c <__assert_func>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	4618      	mov	r0, r3
 800b27a:	3708      	adds	r7, #8
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	08018e98 	.word	0x08018e98
 800b284:	08018ea8 	.word	0x08018ea8
 800b288:	08018e18 	.word	0x08018e18

0800b28c <_ZN16ITimeSlotManager8ObserverC1Ev>:
	};

	/**
	 * @brief Interface to be implemented by the TimeSlotManager observer
	 */
	class Observer
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	4a04      	ldr	r2, [pc, #16]	; (800b2a8 <_ZN16ITimeSlotManager8ObserverC1Ev+0x1c>)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	601a      	str	r2, [r3, #0]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	4618      	mov	r0, r3
 800b29e:	370c      	adds	r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr
 800b2a8:	0801bf6c 	.word	0x0801bf6c

0800b2ac <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE10_List_implD1Ev>:
	  }
	return __n;
      }
#endif

      struct _List_impl
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 fbd3 	bl	800ba60 <_ZNSaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEED1Ev>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3708      	adds	r7, #8
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EEC1Ev>:
      const _Node_alloc_type&
      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
      { return _M_impl; }

#if __cplusplus >= 201103L
      _List_base() = default;
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f000 fbb6 	bl	800ba40 <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE10_List_implC1Ev>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3708      	adds	r7, #8
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}

0800b2de <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EEC1Ev>:

      /**
       *  @brief  Creates a %list with no elements.
       */
#if __cplusplus >= 201103L
      list() = default;
 800b2de:	b580      	push	{r7, lr}
 800b2e0:	b082      	sub	sp, #8
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7ff ffeb 	bl	800b2c4 <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EEC1Ev>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3708      	adds	r7, #8
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EED1Ev>:
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      ~list() = default;
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	4618      	mov	r0, r3
 800b304:	f000 fbb8 	bl	800ba78 <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EED1Ev>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	4618      	mov	r0, r3
 800b30c:	3708      	adds	r7, #8
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <_ZNSt7__cxx1110_List_baseIPN7desenet6sensor19AbstractApplicationESaIS4_EE10_List_implD1Ev>:
      struct _List_impl
 800b312:	b580      	push	{r7, lr}
 800b314:	b082      	sub	sp, #8
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 fbcc 	bl	800bab8 <_ZNSaISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEED1Ev>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4618      	mov	r0, r3
 800b324:	3708      	adds	r7, #8
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <_ZNSt7__cxx1110_List_baseIPN7desenet6sensor19AbstractApplicationESaIS4_EEC1Ev>:
      _List_base() = default;
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b082      	sub	sp, #8
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4618      	mov	r0, r3
 800b336:	f000 fbaf 	bl	800ba98 <_ZNSt7__cxx1110_List_baseIPN7desenet6sensor19AbstractApplicationESaIS4_EE10_List_implC1Ev>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4618      	mov	r0, r3
 800b33e:	3708      	adds	r7, #8
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <_ZNSt7__cxx114listIPN7desenet6sensor19AbstractApplicationESaIS4_EEC1Ev>:
      list() = default;
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4618      	mov	r0, r3
 800b350:	f7ff ffeb 	bl	800b32a <_ZNSt7__cxx1110_List_baseIPN7desenet6sensor19AbstractApplicationESaIS4_EEC1Ev>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4618      	mov	r0, r3
 800b358:	3708      	adds	r7, #8
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}

0800b35e <_ZNSt7__cxx114listIPN7desenet6sensor19AbstractApplicationESaIS4_EED1Ev>:
      ~list() = default;
 800b35e:	b580      	push	{r7, lr}
 800b360:	b082      	sub	sp, #8
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4618      	mov	r0, r3
 800b36a:	f000 fbb1 	bl	800bad0 <_ZNSt7__cxx1110_List_baseIPN7desenet6sensor19AbstractApplicationESaIS4_EED1Ev>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	4618      	mov	r0, r3
 800b372:	3708      	adds	r7, #8
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <_ZN7desenet5FrameD1Ev>:
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	4618      	mov	r0, r3
 800b384:	f7fc f9ff 	bl	8007786 <_ZN3hei12SharedBufferIhED1Ev>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	4618      	mov	r0, r3
 800b38c:	3708      	adds	r7, #8
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}

0800b392 <_ZN7desenet4MPDUD1Ev>:
#define SENSORID_OFFSET 0
#define MPDU_HEADER_SIZE 2
#define FOOTER_SIZE 0


class MPDU: public Frame {
 800b392:	b580      	push	{r7, lr}
 800b394:	b082      	sub	sp, #8
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	3318      	adds	r3, #24
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7fc f9f1 	bl	8007786 <_ZN3hei12SharedBufferIhED1Ev>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7ff ffe6 	bl	800b378 <_ZN7desenet5FrameD1Ev>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3708      	adds	r7, #8
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
	...

0800b3b8 <_ZN7desenet6sensor13NetworkEntityC1Ev>:

using desenet::sensor::NetworkEntity;

NetworkEntity * NetworkEntity::_pInstance(nullptr);		// Instantiation of static attribute

NetworkEntity::NetworkEntity()
 800b3b8:	b590      	push	{r4, r7, lr}
 800b3ba:	b087      	sub	sp, #28
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 : _pTimeSlotManager(nullptr),
   _pTransceiver(nullptr)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7ff ff62 	bl	800b28c <_ZN16ITimeSlotManager8ObserverC1Ev>
 800b3c8:	4a2d      	ldr	r2, [pc, #180]	; (800b480 <_ZN7desenet6sensor13NetworkEntityC1Ev+0xc8>)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	601a      	str	r2, [r3, #0]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	605a      	str	r2, [r3, #4]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	609a      	str	r2, [r3, #8]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	330c      	adds	r3, #12
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7ff ff7d 	bl	800b2de <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EEC1Ev>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	3358      	adds	r3, #88	; 0x58
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7ff ffab 	bl	800b344 <_ZNSt7__cxx114listIPN7desenet6sensor19AbstractApplicationESaIS4_EEC1Ev>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	3364      	adds	r3, #100	; 0x64
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7fd fbe4 	bl	8008bc0 <_ZN7desenet4MPDUC1Ev>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	3390      	adds	r3, #144	; 0x90
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f7ff ff6e 	bl	800b2de <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EEC1Ev>
{
	assert(!_pInstance);		// Only one instance allowed
 800b402:	4b20      	ldr	r3, [pc, #128]	; (800b484 <_ZN7desenet6sensor13NetworkEntityC1Ev+0xcc>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d005      	beq.n	800b416 <_ZN7desenet6sensor13NetworkEntityC1Ev+0x5e>
 800b40a:	4b1f      	ldr	r3, [pc, #124]	; (800b488 <_ZN7desenet6sensor13NetworkEntityC1Ev+0xd0>)
 800b40c:	4a1f      	ldr	r2, [pc, #124]	; (800b48c <_ZN7desenet6sensor13NetworkEntityC1Ev+0xd4>)
 800b40e:	211f      	movs	r1, #31
 800b410:	481f      	ldr	r0, [pc, #124]	; (800b490 <_ZN7desenet6sensor13NetworkEntityC1Ev+0xd8>)
 800b412:	f00b f913 	bl	801663c <__assert_func>
	_pInstance = this;
 800b416:	4a1b      	ldr	r2, [pc, #108]	; (800b484 <_ZN7desenet6sensor13NetworkEntityC1Ev+0xcc>)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6013      	str	r3, [r2, #0]
    evList = EventElementList();
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f103 040c 	add.w	r4, r3, #12
 800b422:	2300      	movs	r3, #0
 800b424:	60bb      	str	r3, [r7, #8]
 800b426:	2300      	movs	r3, #0
 800b428:	60fb      	str	r3, [r7, #12]
 800b42a:	2300      	movs	r3, #0
 800b42c:	613b      	str	r3, [r7, #16]
 800b42e:	f107 0308 	add.w	r3, r7, #8
 800b432:	4618      	mov	r0, r3
 800b434:	f7ff ff53 	bl	800b2de <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EEC1Ev>
 800b438:	f107 0308 	add.w	r3, r7, #8
 800b43c:	4619      	mov	r1, r3
 800b43e:	4620      	mov	r0, r4
 800b440:	f000 fb56 	bl	800baf0 <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EEaSEOS6_>
 800b444:	f107 0308 	add.w	r3, r7, #8
 800b448:	4618      	mov	r0, r3
 800b44a:	f7ff ff55 	bl	800b2f8 <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EED1Ev>
    for(SvGroup it = 0 ; it < 16 ; it ++){ //Reinitialize publishArray
 800b44e:	2300      	movs	r3, #0
 800b450:	75fb      	strb	r3, [r7, #23]
 800b452:	7dfb      	ldrb	r3, [r7, #23]
 800b454:	2b0f      	cmp	r3, #15
 800b456:	d80d      	bhi.n	800b474 <_ZN7desenet6sensor13NetworkEntityC1Ev+0xbc>
        publishArray[it] = nullptr;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	3318      	adds	r3, #24
 800b45c:	7dfa      	ldrb	r2, [r7, #23]
 800b45e:	4611      	mov	r1, r2
 800b460:	4618      	mov	r0, r3
 800b462:	f000 fb5a 	bl	800bb1a <_ZNSt5arrayIPN7desenet6sensor19AbstractApplicationELj16EEixEj>
 800b466:	4603      	mov	r3, r0
 800b468:	2200      	movs	r2, #0
 800b46a:	601a      	str	r2, [r3, #0]
    for(SvGroup it = 0 ; it < 16 ; it ++){ //Reinitialize publishArray
 800b46c:	7dfb      	ldrb	r3, [r7, #23]
 800b46e:	3301      	adds	r3, #1
 800b470:	75fb      	strb	r3, [r7, #23]
 800b472:	e7ee      	b.n	800b452 <_ZN7desenet6sensor13NetworkEntityC1Ev+0x9a>
    }

}
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	4618      	mov	r0, r3
 800b478:	371c      	adds	r7, #28
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd90      	pop	{r4, r7, pc}
 800b47e:	bf00      	nop
 800b480:	0801bf58 	.word	0x0801bf58
 800b484:	200016ec 	.word	0x200016ec
 800b488:	08018f00 	.word	0x08018f00
 800b48c:	08018f0c 	.word	0x08018f0c
 800b490:	08018f3c 	.word	0x08018f3c

0800b494 <_ZN7desenet6sensor13NetworkEntityD1Ev>:

NetworkEntity::~NetworkEntity()
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	4a0d      	ldr	r2, [pc, #52]	; (800b4d4 <_ZN7desenet6sensor13NetworkEntityD1Ev+0x40>)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	601a      	str	r2, [r3, #0]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	3390      	adds	r3, #144	; 0x90
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7ff ff26 	bl	800b2f8 <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EED1Ev>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	3364      	adds	r3, #100	; 0x64
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7ff ff6e 	bl	800b392 <_ZN7desenet4MPDUD1Ev>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	3358      	adds	r3, #88	; 0x58
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7ff ff4f 	bl	800b35e <_ZNSt7__cxx114listIPN7desenet6sensor19AbstractApplicationESaIS4_EED1Ev>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	330c      	adds	r3, #12
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7ff ff17 	bl	800b2f8 <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EED1Ev>
{
}
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3708      	adds	r7, #8
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	0801bf58 	.word	0x0801bf58

0800b4d8 <_ZN7desenet6sensor13NetworkEntityD0Ev>:
NetworkEntity::~NetworkEntity()
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
}
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f7ff ffd7 	bl	800b494 <_ZN7desenet6sensor13NetworkEntityD1Ev>
 800b4e6:	219c      	movs	r1, #156	; 0x9c
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f00a ffb9 	bl	8016460 <_ZdlPvj>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <_ZN7desenet6sensor13NetworkEntity10initializeERKh>:

void NetworkEntity::initialize(const desenet::SlotNumber& slotNumber)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b083      	sub	sp, #12
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
    this->slotNumber = slotNumber;
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	781a      	ldrb	r2, [r3, #0]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

}
 800b50c:	bf00      	nop
 800b50e:	370c      	adds	r7, #12
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr

0800b518 <_ZNSt8functionIFvRN7desenet22NetworkInterfaceDriverEmPKhjEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	4618      	mov	r0, r3
 800b524:	f7ff fe56 	bl	800b1d4 <_ZNSt14_Function_baseD1Ev>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	4618      	mov	r0, r3
 800b52c:	3708      	adds	r7, #8
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
	...

0800b534 <_ZN7desenet6sensor13NetworkEntity19initializeRelationsER16ITimeSlotManagerRNS_22NetworkInterfaceDriverE>:

void NetworkEntity::initializeRelations(ITimeSlotManager & timeSlotManager, NetworkInterfaceDriver & transceiver)
{
 800b534:	b590      	push	{r4, r7, lr}
 800b536:	b095      	sub	sp, #84	; 0x54
 800b538:	af04      	add	r7, sp, #16
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
	_pTimeSlotManager = &timeSlotManager;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	68ba      	ldr	r2, [r7, #8]
 800b544:	605a      	str	r2, [r3, #4]
    _pTransceiver = &transceiver;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	609a      	str	r2, [r3, #8]

    // Add this network entity as observer in timeslotmanager
    _pTimeSlotManager->initializeRelations(*this);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	685a      	ldr	r2, [r3, #4]
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	3304      	adds	r3, #4
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	68f9      	ldr	r1, [r7, #12]
 800b55c:	4610      	mov	r0, r2
 800b55e:	4798      	blx	r3

     // Set the receive callback between transceiver and network. Bind this pointer to member function
    transceiver.setReceptionHandler(std::bind(&NetworkEntity::onReceive, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, std::placeholders::_4));
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	331c      	adds	r3, #28
 800b566:	681c      	ldr	r4, [r3, #0]
 800b568:	4b19      	ldr	r3, [pc, #100]	; (800b5d0 <_ZN7desenet6sensor13NetworkEntity19initializeRelationsER16ITimeSlotManagerRNS_22NetworkInterfaceDriverE+0x9c>)
 800b56a:	637b      	str	r3, [r7, #52]	; 0x34
 800b56c:	2300      	movs	r3, #0
 800b56e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b570:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b574:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800b578:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b57c:	e883 0003 	stmia.w	r3, {r0, r1}
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b584:	f107 0020 	add.w	r0, r7, #32
 800b588:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800b58c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800b590:	4b10      	ldr	r3, [pc, #64]	; (800b5d4 <_ZN7desenet6sensor13NetworkEntity19initializeRelationsER16ITimeSlotManagerRNS_22NetworkInterfaceDriverE+0xa0>)
 800b592:	9302      	str	r3, [sp, #8]
 800b594:	4b10      	ldr	r3, [pc, #64]	; (800b5d8 <_ZN7desenet6sensor13NetworkEntity19initializeRelationsER16ITimeSlotManagerRNS_22NetworkInterfaceDriverE+0xa4>)
 800b596:	9301      	str	r3, [sp, #4]
 800b598:	4b10      	ldr	r3, [pc, #64]	; (800b5dc <_ZN7desenet6sensor13NetworkEntity19initializeRelationsER16ITimeSlotManagerRNS_22NetworkInterfaceDriverE+0xa8>)
 800b59a:	9300      	str	r3, [sp, #0]
 800b59c:	4b10      	ldr	r3, [pc, #64]	; (800b5e0 <_ZN7desenet6sensor13NetworkEntity19initializeRelationsER16ITimeSlotManagerRNS_22NetworkInterfaceDriverE+0xac>)
 800b59e:	f000 facb 	bl	800bb38 <_ZSt4bindIMN7desenet6sensor13NetworkEntityEFvRNS0_22NetworkInterfaceDriverEmPKhjEJPS2_RKSt12_PlaceholderILi1EERKSA_ILi2EERKSA_ILi3EERKSA_ILi4EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumIST_EEE5valueESR_JDpT0_EE4typeEOSR_DpOSY_>
 800b5a2:	f107 0220 	add.w	r2, r7, #32
 800b5a6:	f107 0310 	add.w	r3, r7, #16
 800b5aa:	4611      	mov	r1, r2
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f000 fb23 	bl	800bbf8 <_ZNSt8functionIFvRN7desenet22NetworkInterfaceDriverEmPKhjEEC1ISt5_BindIFMNS0_6sensor13NetworkEntityEFvS2_mS4_jEPSA_St12_PlaceholderILi1EESE_ILi2EESE_ILi3EESE_ILi4EEEEvvEET_>
 800b5b2:	f107 0310 	add.w	r3, r7, #16
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	47a0      	blx	r4
 800b5bc:	f107 0310 	add.w	r3, r7, #16
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7ff ffa9 	bl	800b518 <_ZNSt8functionIFvRN7desenet22NetworkInterfaceDriverEmPKhjEED1Ev>
}
 800b5c6:	bf00      	nop
 800b5c8:	3744      	adds	r7, #68	; 0x44
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd90      	pop	{r4, r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	0800b75d 	.word	0x0800b75d
 800b5d4:	0801e1f7 	.word	0x0801e1f7
 800b5d8:	0801e1f6 	.word	0x0801e1f6
 800b5dc:	0801e1f5 	.word	0x0801e1f5
 800b5e0:	0801e1f4 	.word	0x0801e1f4

0800b5e4 <_ZN7desenet6sensor13NetworkEntity8instanceEv>:
 * This method does not automatically create an instance if there is none created so far.
 * It is up the the developer to create an instance of this class prior to access the instance() method.
 */
//static
NetworkEntity & NetworkEntity::instance()
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	af00      	add	r7, sp, #0
	assert(_pInstance);
 800b5e8:	4b06      	ldr	r3, [pc, #24]	; (800b604 <_ZN7desenet6sensor13NetworkEntity8instanceEv+0x20>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d105      	bne.n	800b5fc <_ZN7desenet6sensor13NetworkEntity8instanceEv+0x18>
 800b5f0:	4b05      	ldr	r3, [pc, #20]	; (800b608 <_ZN7desenet6sensor13NetworkEntity8instanceEv+0x24>)
 800b5f2:	4a06      	ldr	r2, [pc, #24]	; (800b60c <_ZN7desenet6sensor13NetworkEntity8instanceEv+0x28>)
 800b5f4:	2145      	movs	r1, #69	; 0x45
 800b5f6:	4806      	ldr	r0, [pc, #24]	; (800b610 <_ZN7desenet6sensor13NetworkEntity8instanceEv+0x2c>)
 800b5f8:	f00b f820 	bl	801663c <__assert_func>
    return *_pInstance;
 800b5fc:	4b01      	ldr	r3, [pc, #4]	; (800b604 <_ZN7desenet6sensor13NetworkEntity8instanceEv+0x20>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
}
 800b600:	4618      	mov	r0, r3
 800b602:	bd80      	pop	{r7, pc}
 800b604:	200016ec 	.word	0x200016ec
 800b608:	08018fc0 	.word	0x08018fc0
 800b60c:	08018fcc 	.word	0x08018fcc
 800b610:	08018f3c 	.word	0x08018f3c

0800b614 <_ZN7desenet6sensor13NetworkEntity13svSyncRequestEPNS0_19AbstractApplicationE>:

void NetworkEntity::svSyncRequest(AbstractApplication *app)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]
    syncList.push_back(app);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	3358      	adds	r3, #88	; 0x58
 800b622:	463a      	mov	r2, r7
 800b624:	4611      	mov	r1, r2
 800b626:	4618      	mov	r0, r3
 800b628:	f000 fb0e 	bl	800bc48 <_ZNSt7__cxx114listIPN7desenet6sensor19AbstractApplicationESaIS4_EE9push_backERKS4_>

}
 800b62c:	bf00      	nop
 800b62e:	3708      	adds	r7, #8
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <_ZN7desenet6sensor13NetworkEntity16svPublishRequestEhPNS0_19AbstractApplicationE>:

bool NetworkEntity::svPublishRequest(SvGroup group, AbstractApplication *app)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	460b      	mov	r3, r1
 800b63e:	607a      	str	r2, [r7, #4]
 800b640:	72fb      	strb	r3, [r7, #11]
    if(publishArray[group] != nullptr){
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	3318      	adds	r3, #24
 800b646:	7afa      	ldrb	r2, [r7, #11]
 800b648:	4611      	mov	r1, r2
 800b64a:	4618      	mov	r0, r3
 800b64c:	f000 fa65 	bl	800bb1a <_ZNSt5arrayIPN7desenet6sensor19AbstractApplicationELj16EEixEj>
 800b650:	4603      	mov	r3, r0
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	bf14      	ite	ne
 800b658:	2301      	movne	r3, #1
 800b65a:	2300      	moveq	r3, #0
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d001      	beq.n	800b666 <_ZN7desenet6sensor13NetworkEntity16svPublishRequestEhPNS0_19AbstractApplicationE+0x32>
        return false;
 800b662:	2300      	movs	r3, #0
 800b664:	e00a      	b.n	800b67c <_ZN7desenet6sensor13NetworkEntity16svPublishRequestEhPNS0_19AbstractApplicationE+0x48>
     }
     else{
        publishArray[group] = app;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	3318      	adds	r3, #24
 800b66a:	7afa      	ldrb	r2, [r7, #11]
 800b66c:	4611      	mov	r1, r2
 800b66e:	4618      	mov	r0, r3
 800b670:	f000 fa53 	bl	800bb1a <_ZNSt5arrayIPN7desenet6sensor19AbstractApplicationELj16EEixEj>
 800b674:	4602      	mov	r2, r0
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6013      	str	r3, [r2, #0]
        return true;
 800b67a:	2301      	movs	r3, #1
     }
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3710      	adds	r7, #16
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <_ZN7desenet6sensor13NetworkEntity12EventElementD1Ev>:
    struct EventElement
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	3304      	adds	r3, #4
 800b690:	4618      	mov	r0, r3
 800b692:	f7fc f878 	bl	8007786 <_ZN3hei12SharedBufferIhED1Ev>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	4618      	mov	r0, r3
 800b69a:	3708      	adds	r7, #8
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <_ZN7desenet6sensor13NetworkEntity13eventReceivedERKtRKN3hei12SharedBufferIhEE>:

void NetworkEntity::eventReceived(const EvId &id, const SharedByteBuffer &evData)
{
 800b6a0:	b590      	push	{r4, r7, lr}
 800b6a2:	b08d      	sub	sp, #52	; 0x34
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	607a      	str	r2, [r7, #4]
    // Create evPDU frame and add it in the queue
    //qDebug() << "evData = " << evData.data();
    //qDebug() << "evData[0]" << evData.data()[0];
    EventElement newEvent(id, evData.copy());
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	881c      	ldrh	r4, [r3, #0]
 800b6b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6b4:	6879      	ldr	r1, [r7, #4]
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f000 fae7 	bl	800bc8a <_ZNK3hei12SharedBufferIhE4copyEv>
 800b6bc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b6c0:	f107 0314 	add.w	r3, r7, #20
 800b6c4:	4621      	mov	r1, r4
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7ff fd97 	bl	800b1fa <_ZN7desenet6sensor13NetworkEntity12EventElementC1EtRKN3hei12SharedBufferIhEE>
 800b6cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7fc f858 	bl	8007786 <_ZN3hei12SharedBufferIhED1Ev>
    evQueue.push_back(newEvent);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	3390      	adds	r3, #144	; 0x90
 800b6da:	f107 0214 	add.w	r2, r7, #20
 800b6de:	4611      	mov	r1, r2
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f000 fb1c 	bl	800bd1e <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE9push_backERKS4_>
    EventElement newEvent(id, evData.copy());
 800b6e6:	f107 0314 	add.w	r3, r7, #20
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7ff ffca 	bl	800b684 <_ZN7desenet6sensor13NetworkEntity12EventElementD1Ev>
}
 800b6f0:	bf00      	nop
 800b6f2:	3734      	adds	r7, #52	; 0x34
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd90      	pop	{r4, r7, pc}

0800b6f8 <_ZN7desenet6sensor13NetworkEntity16onTimeSlotSignalERK16ITimeSlotManagerRKNS2_3SIGE>:

void NetworkEntity::onTimeSlotSignal(const ITimeSlotManager &timeSlotManager, const ITimeSlotManager::SIG &signal)
{
 800b6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6fa:	b085      	sub	sp, #20
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	60b9      	str	r1, [r7, #8]
 800b702:	607a      	str	r2, [r7, #4]
    if (signal == ITimeSlotManager::SIG::OWN_SLOT_START) {
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	2b02      	cmp	r3, #2
 800b70a:	d116      	bne.n	800b73a <_ZN7desenet6sensor13NetworkEntity16onTimeSlotSignalERK16ITimeSlotManagerRKNS2_3SIGE+0x42>
        // Send the MPDU frame
        transceiver().transmit(responseMPDU.getBuffer(),responseMPDU.length());
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	f7ff fda3 	bl	800b258 <_ZNK7desenet6sensor13NetworkEntity11transceiverEv>
 800b712:	4604      	mov	r4, r0
 800b714:	6823      	ldr	r3, [r4, #0]
 800b716:	3318      	adds	r3, #24
 800b718:	681d      	ldr	r5, [r3, #0]
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	3364      	adds	r3, #100	; 0x64
 800b71e:	4618      	mov	r0, r3
 800b720:	f7fd fb72 	bl	8008e08 <_ZN7desenet4MPDU9getBufferEv>
 800b724:	4606      	mov	r6, r0
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	3364      	adds	r3, #100	; 0x64
 800b72a:	4618      	mov	r0, r3
 800b72c:	f7fd fa22 	bl	8008b74 <_ZNK7desenet5Frame6lengthEv>
 800b730:	4603      	mov	r3, r0
 800b732:	461a      	mov	r2, r3
 800b734:	4631      	mov	r1, r6
 800b736:	4620      	mov	r0, r4
 800b738:	47a8      	blx	r5
    }
}
 800b73a:	bf00      	nop
 800b73c:	3714      	adds	r7, #20
 800b73e:	46bd      	mov	sp, r7
 800b740:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b742 <_ZN7desenet6BeaconD1Ev>:
    /**
     * @brief Object to represent a Beacon Frame.
     *
     * The class can be used to construct a DESENET Beacon frame to send or to read the fields of a received Beacon frame.
     */
    class Beacon: public Frame
 800b742:	b580      	push	{r7, lr}
 800b744:	b082      	sub	sp, #8
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7ff fe13 	bl	800b378 <_ZN7desenet5FrameD1Ev>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	4618      	mov	r0, r3
 800b756:	3708      	adds	r7, #8
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <_ZN7desenet6sensor13NetworkEntity9onReceiveERNS_22NetworkInterfaceDriverEmPKhj>:

/**
 * Called by the NetworkInterfaceDriver (layer below) after reception of a new frame
 */
void NetworkEntity::onReceive(NetworkInterfaceDriver & driver, const uint32_t receptionTime, const uint8_t * const buffer, size_t length)
{
 800b75c:	b5b0      	push	{r4, r5, r7, lr}
 800b75e:	b09e      	sub	sp, #120	; 0x78
 800b760:	af00      	add	r7, sp, #0
 800b762:	60f8      	str	r0, [r7, #12]
 800b764:	60b9      	str	r1, [r7, #8]
 800b766:	607a      	str	r2, [r7, #4]
 800b768:	603b      	str	r3, [r7, #0]
    (void)(driver);
    (void)(receptionTime);
	Frame frame = Frame::useBuffer(buffer, length);
 800b76a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b76e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b772:	6839      	ldr	r1, [r7, #0]
 800b774:	4618      	mov	r0, r3
 800b776:	f7fe f877 	bl	8009868 <_ZN7desenet5Frame9useBufferEPKhj>
    // Actions differs on frame type
    switch (frame.type()) {
 800b77a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b77e:	4618      	mov	r0, r3
 800b780:	f7fe f925 	bl	80099ce <_ZNK7desenet5Frame4typeEv>
 800b784:	4603      	mov	r3, r0
 800b786:	2b02      	cmp	r3, #2
 800b788:	f000 8143 	beq.w	800ba12 <_ZN7desenet6sensor13NetworkEntity9onReceiveERNS_22NetworkInterfaceDriverEmPKhj+0x2b6>
 800b78c:	2b02      	cmp	r3, #2
 800b78e:	f300 8148 	bgt.w	800ba22 <_ZN7desenet6sensor13NetworkEntity9onReceiveERNS_22NetworkInterfaceDriverEmPKhj+0x2c6>
 800b792:	2b00      	cmp	r3, #0
 800b794:	f000 8141 	beq.w	800ba1a <_ZN7desenet6sensor13NetworkEntity9onReceiveERNS_22NetworkInterfaceDriverEmPKhj+0x2be>
 800b798:	2b01      	cmp	r3, #1
 800b79a:	f040 8142 	bne.w	800ba22 <_ZN7desenet6sensor13NetworkEntity9onReceiveERNS_22NetworkInterfaceDriverEmPKhj+0x2c6>
    case FrameType::Beacon:
    {
        responseMPDU.Reset();
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	3364      	adds	r3, #100	; 0x64
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7fd faf2 	bl	8008d8c <_ZN7desenet4MPDU5ResetEv>
        LedController::instance().flashLed(0);
 800b7a8:	f004 f8a6 	bl	800f8f8 <_ZN13LedController8instanceEv>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2100      	movs	r1, #0
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f004 f91f 	bl	800f9f4 <_ZN13LedController8flashLedEt>
        Beacon beacon(frame);
 800b7b6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800b7ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7be:	4611      	mov	r1, r2
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7fd ff13 	bl	80095ec <_ZN7desenet6BeaconC1ERKNS_5FrameE>
        //NOtify TimeSlotManager of reception
        timeSlotManager().onBeaconReceived((beacon.slotDuration()));
 800b7c6:	68f8      	ldr	r0, [r7, #12]
 800b7c8:	f7ff fd2c 	bl	800b224 <_ZNK7desenet6sensor13NetworkEntity15timeSlotManagerEv>
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	6823      	ldr	r3, [r4, #0]
 800b7d0:	3310      	adds	r3, #16
 800b7d2:	681d      	ldr	r5, [r3, #0]
 800b7d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f7fd ff2d 	bl	8009638 <_ZN7desenet6Beacon12slotDurationEv>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800b7e4:	f107 0346 	add.w	r3, r7, #70	; 0x46
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	47a8      	blx	r5

        //inform all sync registered applications of beacon reception
        for(ApplicationSyncList::const_iterator it = syncList.begin(); it != syncList.end(); it++){
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	3358      	adds	r3, #88	; 0x58
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f000 faa5 	bl	800bd42 <_ZNSt7__cxx114listIPN7desenet6sensor19AbstractApplicationESaIS4_EE5beginEv>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b800:	f107 0320 	add.w	r3, r7, #32
 800b804:	4611      	mov	r1, r2
 800b806:	4618      	mov	r0, r3
 800b808:	f000 faac 	bl	800bd64 <_ZNSt20_List_const_iteratorIPN7desenet6sensor19AbstractApplicationEEC1ERKSt14_List_iteratorIS3_E>
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	3358      	adds	r3, #88	; 0x58
 800b810:	4618      	mov	r0, r3
 800b812:	f000 fab7 	bl	800bd84 <_ZNSt7__cxx114listIPN7desenet6sensor19AbstractApplicationESaIS4_EE3endEv>
 800b816:	4603      	mov	r3, r0
 800b818:	653b      	str	r3, [r7, #80]	; 0x50
 800b81a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b81e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b822:	4611      	mov	r1, r2
 800b824:	4618      	mov	r0, r3
 800b826:	f000 fa9d 	bl	800bd64 <_ZNSt20_List_const_iteratorIPN7desenet6sensor19AbstractApplicationEEC1ERKSt14_List_iteratorIS3_E>
 800b82a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800b82e:	f107 0320 	add.w	r3, r7, #32
 800b832:	4611      	mov	r1, r2
 800b834:	4618      	mov	r0, r3
 800b836:	f000 fab5 	bl	800bda4 <_ZStneRKSt20_List_const_iteratorIPN7desenet6sensor19AbstractApplicationEES6_>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d01b      	beq.n	800b878 <_ZN7desenet6sensor13NetworkEntity9onReceiveERNS_22NetworkInterfaceDriverEmPKhj+0x11c>
            (*it)->svSyncIndication(beacon.networkTime());
 800b840:	f107 0320 	add.w	r3, r7, #32
 800b844:	4618      	mov	r0, r3
 800b846:	f000 fad5 	bl	800bdf4 <_ZNKSt20_List_const_iteratorIPN7desenet6sensor19AbstractApplicationEEdeEv>
 800b84a:	4603      	mov	r3, r0
 800b84c:	681c      	ldr	r4, [r3, #0]
 800b84e:	6823      	ldr	r3, [r4, #0]
 800b850:	3308      	adds	r3, #8
 800b852:	681d      	ldr	r5, [r3, #0]
 800b854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b858:	4618      	mov	r0, r3
 800b85a:	f7fd fed6 	bl	800960a <_ZNK7desenet6Beacon11networkTimeEv>
 800b85e:	4602      	mov	r2, r0
 800b860:	460b      	mov	r3, r1
 800b862:	4613      	mov	r3, r2
 800b864:	4619      	mov	r1, r3
 800b866:	4620      	mov	r0, r4
 800b868:	47a8      	blx	r5
        for(ApplicationSyncList::const_iterator it = syncList.begin(); it != syncList.end(); it++){
 800b86a:	f107 0320 	add.w	r3, r7, #32
 800b86e:	2100      	movs	r1, #0
 800b870:	4618      	mov	r0, r3
 800b872:	f000 faab 	bl	800bdcc <_ZNSt20_List_const_iteratorIPN7desenet6sensor19AbstractApplicationEEppEi>
 800b876:	e7c9      	b.n	800b80c <_ZN7desenet6sensor13NetworkEntity9onReceiveERNS_22NetworkInterfaceDriverEmPKhj+0xb0>
        }
        // Write values into MPDU
        for(SvGroup svGroupIt = 0; svGroupIt < SVGROUP_MAX ; svGroupIt++){
 800b878:	2300      	movs	r3, #0
 800b87a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800b87e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b882:	2b0f      	cmp	r3, #15
 800b884:	d85f      	bhi.n	800b946 <_ZN7desenet6sensor13NetworkEntity9onReceiveERNS_22NetworkInterfaceDriverEmPKhj+0x1ea>
            if(publishArray[svGroupIt] != nullptr){
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	3318      	adds	r3, #24
 800b88a:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800b88e:	4611      	mov	r1, r2
 800b890:	4618      	mov	r0, r3
 800b892:	f000 f942 	bl	800bb1a <_ZNSt5arrayIPN7desenet6sensor19AbstractApplicationELj16EEixEj>
 800b896:	4603      	mov	r3, r0
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	bf14      	ite	ne
 800b89e:	2301      	movne	r3, #1
 800b8a0:	2300      	moveq	r3, #0
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d048      	beq.n	800b93a <_ZN7desenet6sensor13NetworkEntity9onReceiveERNS_22NetworkInterfaceDriverEmPKhj+0x1de>
                if(beacon.svGroupMask()[svGroupIt]){ //Check if the beacons asks for the current group
 800b8a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7fd fed5 	bl	800965c <_ZNK7desenet6Beacon11svGroupMaskEv>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b8b6:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800b8ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b8be:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f000 faa4 	bl	800be10 <_ZNSt6bitsetILj16EEixEj>
 800b8c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f000 fab9 	bl	800be44 <_ZNKSt6bitsetILj16EE9referencecvbEv>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	461c      	mov	r4, r3
 800b8d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f000 faa7 	bl	800be2e <_ZNSt6bitsetILj16EE9referenceD1Ev>
 800b8e0:	2c00      	cmp	r4, #0
 800b8e2:	d02a      	beq.n	800b93a <_ZN7desenet6sensor13NetworkEntity9onReceiveERNS_22NetworkInterfaceDriverEmPKhj+0x1de>
                    SharedByteBuffer svBuff = responseMPDU.insertBuffer();
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800b8ea:	f107 0314 	add.w	r3, r7, #20
 800b8ee:	4611      	mov	r1, r2
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7fd fa1a 	bl	8008d2a <_ZN7desenet4MPDU12insertBufferEv>
                    //Add values into the buffer
                    SharedByteBuffer::sizeType length = publishArray[svGroupIt]->svPublishIndication(svGroupIt,svBuff);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	3318      	adds	r3, #24
 800b8fa:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800b8fe:	4611      	mov	r1, r2
 800b900:	4618      	mov	r0, r3
 800b902:	f000 f90a 	bl	800bb1a <_ZNSt5arrayIPN7desenet6sensor19AbstractApplicationELj16EEixEj>
 800b906:	4603      	mov	r3, r0
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	320c      	adds	r2, #12
 800b90e:	6814      	ldr	r4, [r2, #0]
 800b910:	f107 0214 	add.w	r2, r7, #20
 800b914:	f897 1077 	ldrb.w	r1, [r7, #119]	; 0x77
 800b918:	4618      	mov	r0, r3
 800b91a:	47a0      	blx	r4
 800b91c:	6738      	str	r0, [r7, #112]	; 0x70
                    responseMPDU.commitSv(svGroupIt,length);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	3364      	adds	r3, #100	; 0x64
 800b922:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b924:	b2d2      	uxtb	r2, r2
 800b926:	f897 1077 	ldrb.w	r1, [r7, #119]	; 0x77
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7fd f974 	bl	8008c18 <_ZN7desenet4MPDU8commitSvEhh>
                    SharedByteBuffer svBuff = responseMPDU.insertBuffer();
 800b930:	f107 0314 	add.w	r3, r7, #20
 800b934:	4618      	mov	r0, r3
 800b936:	f7fb ff26 	bl	8007786 <_ZN3hei12SharedBufferIhED1Ev>
        for(SvGroup svGroupIt = 0; svGroupIt < SVGROUP_MAX ; svGroupIt++){
 800b93a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b93e:	3301      	adds	r3, #1
 800b940:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800b944:	e79b      	b.n	800b87e <_ZN7desenet6sensor13NetworkEntity9onReceiveERNS_22NetworkInterfaceDriverEmPKhj+0x122>
                    //qDebug() << length;
                }
            }
        }
        // Add as many events as possible by the remaining size of the MPDU
        if(!evQueue.empty()){//Check that we have queued events
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	3390      	adds	r3, #144	; 0x90
 800b94a:	4618      	mov	r0, r3
 800b94c:	f000 fa91 	bl	800be72 <_ZNKSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE5emptyEv>
 800b950:	4603      	mov	r3, r0
 800b952:	f083 0301 	eor.w	r3, r3, #1
 800b956:	b2db      	uxtb	r3, r3
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d053      	beq.n	800ba04 <_ZN7desenet6sensor13NetworkEntity9onReceiveERNS_22NetworkInterfaceDriverEmPKhj+0x2a8>
            while(evQueue.begin()->data.size() <= responseMPDU.getRemainingSpace()){ //Check that there's enough remaining space for a evPDU and insert them while the space is enough
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	3390      	adds	r3, #144	; 0x90
 800b960:	4618      	mov	r0, r3
 800b962:	f000 fa98 	bl	800be96 <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE5beginEv>
 800b966:	4603      	mov	r3, r0
 800b968:	663b      	str	r3, [r7, #96]	; 0x60
 800b96a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b96e:	4618      	mov	r0, r3
 800b970:	f000 faa2 	bl	800beb8 <_ZNKSt14_List_iteratorIN7desenet6sensor13NetworkEntity12EventElementEEptEv>
 800b974:	4603      	mov	r3, r0
 800b976:	3304      	adds	r3, #4
 800b978:	4618      	mov	r0, r3
 800b97a:	f000 faab 	bl	800bed4 <_ZNK3hei12SharedBufferIhE4sizeEv>
 800b97e:	4604      	mov	r4, r0
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	3364      	adds	r3, #100	; 0x64
 800b984:	4618      	mov	r0, r3
 800b986:	f7fd fa4c 	bl	8008e22 <_ZN7desenet4MPDU17getRemainingSpaceEv>
 800b98a:	4603      	mov	r3, r0
 800b98c:	429c      	cmp	r4, r3
 800b98e:	bf94      	ite	ls
 800b990:	2301      	movls	r3, #1
 800b992:	2300      	movhi	r3, #0
 800b994:	b2db      	uxtb	r3, r3
 800b996:	2b00      	cmp	r3, #0
 800b998:	d034      	beq.n	800ba04 <_ZN7desenet6sensor13NetworkEntity9onReceiveERNS_22NetworkInterfaceDriverEmPKhj+0x2a8>
                uint8_t length = responseMPDU.evPDUwrite(evQueue.begin()->data); //Write evPDU with first element of the list
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	f103 0464 	add.w	r4, r3, #100	; 0x64
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	3390      	adds	r3, #144	; 0x90
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f000 fa76 	bl	800be96 <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE5beginEv>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	667b      	str	r3, [r7, #100]	; 0x64
 800b9ae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f000 fa80 	bl	800beb8 <_ZNKSt14_List_iteratorIN7desenet6sensor13NetworkEntity12EventElementEEptEv>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	3304      	adds	r3, #4
 800b9bc:	4619      	mov	r1, r3
 800b9be:	4620      	mov	r0, r4
 800b9c0:	f7fd fa40 	bl	8008e44 <_ZN7desenet4MPDU10evPDUwriteERKN3hei12SharedBufferIhEE>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                responseMPDU.commitEv(evQueue.begin()->id,length); //Commit that evPDU
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f103 0464 	add.w	r4, r3, #100	; 0x64
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	3390      	adds	r3, #144	; 0x90
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f000 fa5e 	bl	800be96 <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE5beginEv>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	66bb      	str	r3, [r7, #104]	; 0x68
 800b9de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f000 fa68 	bl	800beb8 <_ZNKSt14_List_iteratorIN7desenet6sensor13NetworkEntity12EventElementEEptEv>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	881b      	ldrh	r3, [r3, #0]
 800b9ec:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	f7fd f955 	bl	8008ca2 <_ZN7desenet4MPDU8commitEvEth>
                evQueue.pop_front(); // Remove first element of the list
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	3390      	adds	r3, #144	; 0x90
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f000 fa75 	bl	800beec <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE9pop_frontEv>
            while(evQueue.begin()->data.size() <= responseMPDU.getRemainingSpace()){ //Check that there's enough remaining space for a evPDU and insert them while the space is enough
 800ba02:	e7ab      	b.n	800b95c <_ZN7desenet6sensor13NetworkEntity9onReceiveERNS_22NetworkInterfaceDriverEmPKhj+0x200>
            }
        }
        break;
 800ba04:	bf00      	nop
        Beacon beacon(frame);
 800ba06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7ff fe99 	bl	800b742 <_ZN7desenet6BeaconD1Ev>
 800ba10:	e008      	b.n	800ba24 <_ZN7desenet6sensor13NetworkEntity9onReceiveERNS_22NetworkInterfaceDriverEmPKhj+0x2c8>
    }
    case FrameType::MPDU:
    {
        printf(("Frame received \n"));
 800ba12:	4809      	ldr	r0, [pc, #36]	; (800ba38 <_ZN7desenet6sensor13NetworkEntity9onReceiveERNS_22NetworkInterfaceDriverEmPKhj+0x2dc>)
 800ba14:	f00b fab8 	bl	8016f88 <puts>
        break;
 800ba18:	e004      	b.n	800ba24 <_ZN7desenet6sensor13NetworkEntity9onReceiveERNS_22NetworkInterfaceDriverEmPKhj+0x2c8>
    }
    case FrameType::Invalid:
        printf("invalid frameType !\n");
 800ba1a:	4808      	ldr	r0, [pc, #32]	; (800ba3c <_ZN7desenet6sensor13NetworkEntity9onReceiveERNS_22NetworkInterfaceDriverEmPKhj+0x2e0>)
 800ba1c:	f00b fab4 	bl	8016f88 <puts>
        break;
 800ba20:	e000      	b.n	800ba24 <_ZN7desenet6sensor13NetworkEntity9onReceiveERNS_22NetworkInterfaceDriverEmPKhj+0x2c8>

    default:
        break;
 800ba22:	bf00      	nop
	Frame frame = Frame::useBuffer(buffer, length);
 800ba24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7ff fca5 	bl	800b378 <_ZN7desenet5FrameD1Ev>
    }
}
 800ba2e:	bf00      	nop
 800ba30:	3778      	adds	r7, #120	; 0x78
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bdb0      	pop	{r4, r5, r7, pc}
 800ba36:	bf00      	nop
 800ba38:	08019020 	.word	0x08019020
 800ba3c:	08019030 	.word	0x08019030

0800ba40 <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 fa5f 	bl	800bf0c <_ZNSaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEC1Ev>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7ff fb17 	bl	800b084 <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3708      	adds	r7, #8
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <_ZNSaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b082      	sub	sp, #8
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 fa5b 	bl	800bf24 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEED1Ev>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	4618      	mov	r0, r3
 800ba72:	3708      	adds	r7, #8
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 fa5a 	bl	800bf3a <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE8_M_clearEv>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7ff fc0f 	bl	800b2ac <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE10_List_implD1Ev>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	4618      	mov	r0, r3
 800ba92:	3708      	adds	r7, #8
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <_ZNSt7__cxx1110_List_baseIPN7desenet6sensor19AbstractApplicationESaIS4_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 fa6f 	bl	800bf84 <_ZNSaISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEEC1Ev>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7ff faeb 	bl	800b084 <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	4618      	mov	r0, r3
 800bab2:	3708      	adds	r7, #8
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <_ZNSaISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEED1Ev>:
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 fa6b 	bl	800bf9c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEED1Ev>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	4618      	mov	r0, r3
 800baca:	3708      	adds	r7, #8
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <_ZNSt7__cxx1110_List_baseIPN7desenet6sensor19AbstractApplicationESaIS4_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 fa6a 	bl	800bfb2 <_ZNSt7__cxx1110_List_baseIPN7desenet6sensor19AbstractApplicationESaIS4_EE8_M_clearEv>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7ff fc16 	bl	800b312 <_ZNSt7__cxx1110_List_baseIPN7desenet6sensor19AbstractApplicationESaIS4_EE10_List_implD1Ev>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	4618      	mov	r0, r3
 800baea:	3708      	adds	r7, #8
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EEaSEOS6_>:
       *  Afterwards @a __x is a valid, but unspecified %list
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      list&
      operator=(list&& __x)
 800baf0:	b590      	push	{r4, r7, lr}
 800baf2:	b085      	sub	sp, #20
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
      noexcept(_Node_alloc_traits::_S_nothrow_move())
      {
	constexpr bool __move_storage =
 800bafa:	2301      	movs	r3, #1
 800bafc:	73fb      	strb	r3, [r7, #15]
	  _Node_alloc_traits::_S_propagate_on_move_assign()
	  || _Node_alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 800bafe:	6838      	ldr	r0, [r7, #0]
 800bb00:	f000 fa7c 	bl	800bffc <_ZSt4moveIRNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS5_EEEEONSt16remove_referenceIT_E4typeEOSA_>
 800bb04:	4603      	mov	r3, r0
 800bb06:	4622      	mov	r2, r4
 800bb08:	4619      	mov	r1, r3
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 fa81 	bl	800c012 <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE14_M_move_assignEOS6_St17integral_constantIbLb1EE>
	return *this;
 800bb10:	687b      	ldr	r3, [r7, #4]
      }
 800bb12:	4618      	mov	r0, r3
 800bb14:	3714      	adds	r7, #20
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd90      	pop	{r4, r7, pc}

0800bb1a <_ZNSt5arrayIPN7desenet6sensor19AbstractApplicationELj16EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b082      	sub	sp, #8
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
 800bb22:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6839      	ldr	r1, [r7, #0]
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f000 fa97 	bl	800c05c <_ZNSt14__array_traitsIPN7desenet6sensor19AbstractApplicationELj16EE6_S_refERA16_KS3_j>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	4618      	mov	r0, r3
 800bb32:	3708      	adds	r7, #8
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <_ZSt4bindIMN7desenet6sensor13NetworkEntityEFvRNS0_22NetworkInterfaceDriverEmPKhjEJPS2_RKSt12_PlaceholderILi1EERKSA_ILi2EERKSA_ILi3EERKSA_ILi4EEEENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumIST_EEE5valueESR_JDpT0_EE4typeEOSR_DpOSY_>:
   *  @ingroup binders
   */
  template<typename _Func, typename... _BoundArgs>
    inline typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
 800bb38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb3c:	b089      	sub	sp, #36	; 0x24
 800bb3e:	af04      	add	r7, sp, #16
 800bb40:	60f8      	str	r0, [r7, #12]
 800bb42:	60b9      	str	r1, [r7, #8]
 800bb44:	607a      	str	r2, [r7, #4]
 800bb46:	603b      	str	r3, [r7, #0]
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
 800bb48:	68b8      	ldr	r0, [r7, #8]
 800bb4a:	f000 fa96 	bl	800c07a <_ZSt7forwardIMN7desenet6sensor13NetworkEntityEFvRNS0_22NetworkInterfaceDriverEmPKhjEEOT_RNSt16remove_referenceIS9_E4typeE>
 800bb4e:	4606      	mov	r6, r0
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 fa9d 	bl	800c090 <_ZSt7forwardIPN7desenet6sensor13NetworkEntityEEOT_RNSt16remove_referenceIS4_E4typeE>
 800bb56:	4680      	mov	r8, r0
 800bb58:	6838      	ldr	r0, [r7, #0]
 800bb5a:	f000 faa4 	bl	800c0a6 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800bb5e:	4681      	mov	r9, r0
 800bb60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb62:	f000 faab 	bl	800c0bc <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800bb66:	4604      	mov	r4, r0
 800bb68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bb6a:	f000 fab2 	bl	800c0d2 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800bb6e:	4605      	mov	r5, r0
 800bb70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb72:	f000 fab9 	bl	800c0e8 <_ZSt7forwardIRKSt12_PlaceholderILi4EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800bb76:	4603      	mov	r3, r0
 800bb78:	9302      	str	r3, [sp, #8]
 800bb7a:	9501      	str	r5, [sp, #4]
 800bb7c:	9400      	str	r4, [sp, #0]
 800bb7e:	464b      	mov	r3, r9
 800bb80:	4642      	mov	r2, r8
 800bb82:	4631      	mov	r1, r6
 800bb84:	68f8      	ldr	r0, [r7, #12]
 800bb86:	f000 faba 	bl	800c0fe <_ZNSt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS0_22NetworkInterfaceDriverEmPKhjEPS2_St12_PlaceholderILi1EESA_ILi2EESA_ILi3EESA_ILi4EEEEC1IJS9_RKSB_RKSC_RKSD_RKSE_EEEOS8_DpOT_>
    }
 800bb8a:	68f8      	ldr	r0, [r7, #12]
 800bb8c:	3714      	adds	r7, #20
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bb94 <_ZNSt5tupleIJPN7desenet6sensor13NetworkEntityESt12_PlaceholderILi1EES4_ILi2EES4_ILi3EES4_ILi4EEEEC1EOS9_>:
        explicit constexpr tuple(_UElements&&... __elements)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b082      	sub	sp, #8
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	683a      	ldr	r2, [r7, #0]
 800bba2:	4611      	mov	r1, r2
 800bba4:	4618      	mov	r0, r3
 800bba6:	f000 faf6 	bl	800c196 <_ZNSt11_Tuple_implILj0EJPN7desenet6sensor13NetworkEntityESt12_PlaceholderILi1EES4_ILi2EES4_ILi3EES4_ILi4EEEEC1EOS9_>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	4618      	mov	r0, r3
 800bbae:	3708      	adds	r7, #8
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <_ZNSt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS0_22NetworkInterfaceDriverEmPKhjEPS2_St12_PlaceholderILi1EESA_ILi2EESA_ILi3EESA_ILi4EEEEC1EOSG_>:
      _Bind(_Bind&& __b)
 800bbb4:	b590      	push	{r4, r7, lr}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f000 fad2 	bl	800c16a <_ZSt4moveIRMN7desenet6sensor13NetworkEntityEFvRNS0_22NetworkInterfaceDriverEmPKhjEEONSt16remove_referenceIT_E4typeEOSB_>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bbce:	e883 0003 	stmia.w	r3, {r0, r1}
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f103 0408 	add.w	r4, r3, #8
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	3308      	adds	r3, #8
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f000 facf 	bl	800c180 <_ZSt4moveIRSt5tupleIJPN7desenet6sensor13NetworkEntityESt12_PlaceholderILi1EES5_ILi2EES5_ILi3EES5_ILi4EEEEEONSt16remove_referenceIT_E4typeEOSD_>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	f7ff ffd4 	bl	800bb94 <_ZNSt5tupleIJPN7desenet6sensor13NetworkEntityESt12_PlaceholderILi1EES4_ILi2EES4_ILi3EES4_ILi4EEEEC1EOS9_>
      { }
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	4618      	mov	r0, r3
 800bbf0:	370c      	adds	r7, #12
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd90      	pop	{r4, r7, pc}
	...

0800bbf8 <_ZNSt8functionIFvRN7desenet22NetworkInterfaceDriverEmPKhjEEC1ISt5_BindIFMNS0_6sensor13NetworkEntityEFvS2_mS4_jEPSA_St12_PlaceholderILi1EESE_ILi2EESE_ILi3EESE_ILi4EEEEvvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 800bbf8:	b590      	push	{r4, r7, lr}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7ff fad7 	bl	800b1b8 <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 800bc0a:	6838      	ldr	r0, [r7, #0]
 800bc0c:	f000 fae6 	bl	800c1dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEE21_M_not_empty_functionISI_EEbRKT_>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d00e      	beq.n	800bc34 <_ZNSt8functionIFvRN7desenet22NetworkInterfaceDriverEmPKhjEEC1ISt5_BindIFMNS0_6sensor13NetworkEntityEFvS2_mS4_jEPSA_St12_PlaceholderILi1EESE_ILi2EESE_ILi3EESE_ILi4EEEEvvEET_+0x3c>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800bc16:	687c      	ldr	r4, [r7, #4]
 800bc18:	6838      	ldr	r0, [r7, #0]
 800bc1a:	f000 faea 	bl	800c1f2 <_ZSt4moveIRSt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS1_22NetworkInterfaceDriverEmPKhjEPS3_St12_PlaceholderILi1EESB_ILi2EESB_ILi3EESB_ILi4EEEEEONSt16remove_referenceIT_E4typeEOSK_>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	4619      	mov	r1, r3
 800bc22:	4620      	mov	r0, r4
 800bc24:	f000 faf0 	bl	800c208 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEE15_M_init_functorERSt9_Any_dataOSI_>
	    _M_invoker = &_My_handler::_M_invoke;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4a05      	ldr	r2, [pc, #20]	; (800bc40 <_ZNSt8functionIFvRN7desenet22NetworkInterfaceDriverEmPKhjEEC1ISt5_BindIFMNS0_6sensor13NetworkEntityEFvS2_mS4_jEPSA_St12_PlaceholderILi1EESE_ILi2EESE_ILi3EESE_ILi4EEEEvvEET_+0x48>)
 800bc2c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4a04      	ldr	r2, [pc, #16]	; (800bc44 <_ZNSt8functionIFvRN7desenet22NetworkInterfaceDriverEmPKhjEEC1ISt5_BindIFMNS0_6sensor13NetworkEntityEFvS2_mS4_jEPSA_St12_PlaceholderILi1EESE_ILi2EESE_ILi3EESE_ILi4EEEEvvEET_+0x4c>)
 800bc32:	609a      	str	r2, [r3, #8]
	  }
      }
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	4618      	mov	r0, r3
 800bc38:	370c      	adds	r7, #12
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd90      	pop	{r4, r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	0800c22d 	.word	0x0800c22d
 800bc44:	0800c27d 	.word	0x0800c27d

0800bc48 <_ZNSt7__cxx114listIPN7desenet6sensor19AbstractApplicationESaIS4_EE9push_backERKS4_>:
       *  it.  Due to the nature of a %list this operation can be done
       *  in constant time, and does not invalidate iterators and
       *  references.
       */
      void
      push_back(const value_type& __x)
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
      { this->_M_insert(end(), __x); }
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 f896 	bl	800bd84 <_ZNSt7__cxx114listIPN7desenet6sensor19AbstractApplicationESaIS4_EE3endEv>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	683a      	ldr	r2, [r7, #0]
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 fb37 	bl	800c2d2 <_ZNSt7__cxx114listIPN7desenet6sensor19AbstractApplicationESaIS4_EE9_M_insertIJRKS4_EEEvSt14_List_iteratorIS4_EDpOT_>
 800bc64:	bf00      	nop
 800bc66:	3708      	adds	r7, #8
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <_ZZNK3hei12SharedBufferIhE4copyEvENKUlPhE_clES2_>:
            buffer.data_ = std::shared_ptr<T>(new T[length_], [](pointer p){delete[] p;});
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d002      	beq.n	800bc82 <_ZZNK3hei12SharedBufferIhE4copyEvENKUlPhE_clES2_+0x16>
 800bc7c:	6838      	ldr	r0, [r7, #0]
 800bc7e:	f00a fbf1 	bl	8016464 <_ZdaPv>
 800bc82:	bf00      	nop
 800bc84:	3708      	adds	r7, #8
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <_ZNK3hei12SharedBufferIhE4copyEv>:
        SharedBuffer copy() const {
 800bc8a:	b5b0      	push	{r4, r5, r7, lr}
 800bc8c:	b086      	sub	sp, #24
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
 800bc92:	6039      	str	r1, [r7, #0]
            SharedBuffer buffer;
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f7fd f921 	bl	8008edc <_ZN3hei12SharedBufferIhEC1Ev>
            buffer.data_ = std::shared_ptr<T>(new T[length_], [](pointer p){delete[] p;});
 800bc9a:	687c      	ldr	r4, [r7, #4]
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	689b      	ldr	r3, [r3, #8]
 800bca0:	4618      	mov	r0, r3
 800bca2:	f00a fc01 	bl	80164a8 <_Znaj>
 800bca6:	4603      	mov	r3, r0
 800bca8:	4619      	mov	r1, r3
 800bcaa:	f107 030c 	add.w	r3, r7, #12
 800bcae:	462a      	mov	r2, r5
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f000 fb2c 	bl	800c30e <_ZNSt10shared_ptrIhEC1IhZNK3hei12SharedBufferIhE4copyEvEUlPhE_vEEPT_T0_>
 800bcb6:	f107 030c 	add.w	r3, r7, #12
 800bcba:	4619      	mov	r1, r3
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	f7fb ff93 	bl	8007be8 <_ZNSt10shared_ptrIhEaSEOS0_>
 800bcc2:	f107 030c 	add.w	r3, r7, #12
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7fb fd50 	bl	800776c <_ZNSt10shared_ptrIhED1Ev>
            if (buffer.data_.get() != nullptr)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7fb f865 	bl	8006d9e <_ZNKSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	bf14      	ite	ne
 800bcda:	2301      	movne	r3, #1
 800bcdc:	2300      	moveq	r3, #0
 800bcde:	b2db      	uxtb	r3, r3
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d014      	beq.n	800bd0e <_ZNK3hei12SharedBufferIhE4copyEv+0x84>
                buffer.length_ = length_;
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	689a      	ldr	r2, [r3, #8]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	609a      	str	r2, [r3, #8]
                std::memcpy(buffer.data_.get(), data_.get(), length_);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7fb f855 	bl	8006d9e <_ZNKSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7fb f850 	bl	8006d9e <_ZNKSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800bcfe:	4601      	mov	r1, r0
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	689b      	ldr	r3, [r3, #8]
 800bd04:	461a      	mov	r2, r3
 800bd06:	4620      	mov	r0, r4
 800bd08:	f00a fd08 	bl	801671c <memcpy>
            return buffer;
 800bd0c:	e002      	b.n	800bd14 <_ZNK3hei12SharedBufferIhE4copyEv+0x8a>
                buffer.length_ = 0;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	609a      	str	r2, [r3, #8]
            return buffer;
 800bd14:	bf00      	nop
        }
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	3718      	adds	r7, #24
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bdb0      	pop	{r4, r5, r7, pc}

0800bd1e <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE9push_backERKS4_>:
      push_back(const value_type& __x)
 800bd1e:	b580      	push	{r7, lr}
 800bd20:	b082      	sub	sp, #8
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
 800bd26:	6039      	str	r1, [r7, #0]
      { this->_M_insert(end(), __x); }
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f000 fb05 	bl	800c338 <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE3endEv>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	683a      	ldr	r2, [r7, #0]
 800bd32:	4619      	mov	r1, r3
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 fb0f 	bl	800c358 <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE9_M_insertIJRKS4_EEEvSt14_List_iteratorIS4_EDpOT_>
 800bd3a:	bf00      	nop
 800bd3c:	3708      	adds	r7, #8
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <_ZNSt7__cxx114listIPN7desenet6sensor19AbstractApplicationESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800bd42:	b580      	push	{r7, lr}
 800bd44:	b084      	sub	sp, #16
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	f107 030c 	add.w	r3, r7, #12
 800bd52:	4611      	mov	r1, r2
 800bd54:	4618      	mov	r0, r3
 800bd56:	f000 fb1d 	bl	800c394 <_ZNSt14_List_iteratorIPN7desenet6sensor19AbstractApplicationEEC1EPNSt8__detail15_List_node_baseE>
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3710      	adds	r7, #16
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <_ZNSt20_List_const_iteratorIPN7desenet6sensor19AbstractApplicationEEC1ERKSt14_List_iteratorIS3_E>:
      _List_const_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 800bd64:	b480      	push	{r7}
 800bd66:	b083      	sub	sp, #12
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
      : _M_node(__x._M_node) { }
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	601a      	str	r2, [r3, #0]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	4618      	mov	r0, r3
 800bd7a:	370c      	adds	r7, #12
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <_ZNSt7__cxx114listIPN7desenet6sensor19AbstractApplicationESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	f107 030c 	add.w	r3, r7, #12
 800bd92:	4611      	mov	r1, r2
 800bd94:	4618      	mov	r0, r3
 800bd96:	f000 fafd 	bl	800c394 <_ZNSt14_List_iteratorIPN7desenet6sensor19AbstractApplicationEEC1EPNSt8__detail15_List_node_baseE>
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3710      	adds	r7, #16
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <_ZStneRKSt20_List_const_iteratorIPN7desenet6sensor19AbstractApplicationEES6_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800bda4:	b480      	push	{r7}
 800bda6:	b083      	sub	sp, #12
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	bf14      	ite	ne
 800bdba:	2301      	movne	r3, #1
 800bdbc:	2300      	moveq	r3, #0
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	370c      	adds	r7, #12
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr

0800bdcc <_ZNSt20_List_const_iteratorIPN7desenet6sensor19AbstractApplicationEEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 800bdcc:	b480      	push	{r7}
 800bdce:	b085      	sub	sp, #20
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	6039      	str	r1, [r7, #0]
	_Self __tmp = *this;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	60fb      	str	r3, [r7, #12]
	_M_node = _M_node->_M_next;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	601a      	str	r2, [r3, #0]
	return __tmp;
 800bde6:	68fb      	ldr	r3, [r7, #12]
      }
 800bde8:	4618      	mov	r0, r3
 800bdea:	3714      	adds	r7, #20
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr

0800bdf4 <_ZNKSt20_List_const_iteratorIPN7desenet6sensor19AbstractApplicationEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4618      	mov	r0, r3
 800be02:	f000 fad6 	bl	800c3b2 <_ZNKSt10_List_nodeIPN7desenet6sensor19AbstractApplicationEE9_M_valptrEv>
 800be06:	4603      	mov	r3, r0
 800be08:	4618      	mov	r0, r3
 800be0a:	3708      	adds	r7, #8
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <_ZNSt6bitsetILj16EEixEj>:
       *  required by that DR's resolution.  -pme
       *  The DR has since been changed:  range-checking is a precondition
       *  (users' responsibility), and these functions must not throw.  -pme
       */
      reference
      operator[](size_t __position)
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	60b9      	str	r1, [r7, #8]
 800be1a:	607a      	str	r2, [r7, #4]
      { return reference(*this, __position); }
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	68b9      	ldr	r1, [r7, #8]
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	f000 fad4 	bl	800c3ce <_ZNSt6bitsetILj16EE9referenceC1ERS0_j>
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <_ZNSt6bitsetILj16EE9referenceD1Ev>:
	~reference() _GLIBCXX_NOEXCEPT
 800be2e:	b480      	push	{r7}
 800be30:	b083      	sub	sp, #12
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
	{ }
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	4618      	mov	r0, r3
 800be3a:	370c      	adds	r7, #12
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr

0800be44 <_ZNKSt6bitsetILj16EE9referencecvbEv>:
	operator bool() const _GLIBCXX_NOEXCEPT
 800be44:	b590      	push	{r4, r7, lr}
 800be46:	b083      	sub	sp, #12
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
	{ return (*(_M_wp) & _Base::_S_maskbit(_M_bpos)) != 0; }
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	681c      	ldr	r4, [r3, #0]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	4618      	mov	r0, r3
 800be58:	f7ff f97d 	bl	800b156 <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>
 800be5c:	4603      	mov	r3, r0
 800be5e:	4023      	ands	r3, r4
 800be60:	2b00      	cmp	r3, #0
 800be62:	bf14      	ite	ne
 800be64:	2301      	movne	r3, #1
 800be66:	2300      	moveq	r3, #0
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	4618      	mov	r0, r3
 800be6c:	370c      	adds	r7, #12
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd90      	pop	{r4, r7, pc}

0800be72 <_ZNKSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 800be72:	b480      	push	{r7}
 800be74:	b083      	sub	sp, #12
 800be76:	af00      	add	r7, sp, #0
 800be78:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681a      	ldr	r2, [r3, #0]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	429a      	cmp	r2, r3
 800be82:	bf0c      	ite	eq
 800be84:	2301      	moveq	r3, #1
 800be86:	2300      	movne	r3, #0
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	4618      	mov	r0, r3
 800be8c:	370c      	adds	r7, #12
 800be8e:	46bd      	mov	sp, r7
 800be90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be94:	4770      	bx	lr

0800be96 <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800be96:	b580      	push	{r7, lr}
 800be98:	b084      	sub	sp, #16
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681a      	ldr	r2, [r3, #0]
 800bea2:	f107 030c 	add.w	r3, r7, #12
 800bea6:	4611      	mov	r1, r2
 800bea8:	4618      	mov	r0, r3
 800beaa:	f000 faa9 	bl	800c400 <_ZNSt14_List_iteratorIN7desenet6sensor13NetworkEntity12EventElementEEC1EPNSt8__detail15_List_node_baseE>
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	4618      	mov	r0, r3
 800beb2:	3710      	adds	r7, #16
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <_ZNKSt14_List_iteratorIN7desenet6sensor13NetworkEntity12EventElementEEptEv>:
      operator->() const _GLIBCXX_NOEXCEPT
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Node*>(_M_node)->_M_valptr(); }
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4618      	mov	r0, r3
 800bec6:	f000 faaa 	bl	800c41e <_ZNSt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEE9_M_valptrEv>
 800beca:	4603      	mov	r3, r0
 800becc:	4618      	mov	r0, r3
 800bece:	3708      	adds	r7, #8
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <_ZNK3hei12SharedBufferIhE4sizeEv>:
        sizeType size() const {
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
            return length_ / sizeof(T);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	689b      	ldr	r3, [r3, #8]
        }
 800bee0:	4618      	mov	r0, r3
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
      { this->_M_erase(begin()); }
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f7ff ffce 	bl	800be96 <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE5beginEv>
 800befa:	4603      	mov	r3, r0
 800befc:	4619      	mov	r1, r3
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 fa9b 	bl	800c43a <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE8_M_eraseESt14_List_iteratorIS4_E>
 800bf04:	bf00      	nop
 800bf06:	3708      	adds	r7, #8
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <_ZNSaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 fab6 	bl	800c486 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEC1Ev>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3708      	adds	r7, #8
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800bf24:	b480      	push	{r7}
 800bf26:	b083      	sub	sp, #12
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	4618      	mov	r0, r3
 800bf30:	370c      	adds	r7, #12
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr

0800bf3a <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE8_M_clearEv>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    _List_base<_Tp, _Alloc>::
 800bf3a:	b580      	push	{r7, lr}
 800bf3c:	b086      	sub	sp, #24
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	697a      	ldr	r2, [r7, #20]
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d015      	beq.n	800bf7c <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE8_M_clearEv+0x42>
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 800bf5a:	6938      	ldr	r0, [r7, #16]
 800bf5c:	f000 fa5f 	bl	800c41e <_ZNSt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEE9_M_valptrEv>
 800bf60:	60f8      	str	r0, [r7, #12]
#if __cplusplus >= 201103L
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 fa9a 	bl	800c49c <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE21_M_get_Node_allocatorEv>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	68f9      	ldr	r1, [r7, #12]
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f000 faa0 	bl	800c4b2 <_ZNSt16allocator_traitsISaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEE7destroyIS4_EEvRS6_PT_>
#else
	  _Tp_alloc_type(_M_get_Node_allocator()).destroy(__val);
#endif
	  _M_put_node(__tmp);
 800bf72:	6939      	ldr	r1, [r7, #16]
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 faa9 	bl	800c4cc <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE11_M_put_nodeEPSt10_List_nodeIS4_E>
      while (__cur != &_M_impl._M_node)
 800bf7a:	e7e5      	b.n	800bf48 <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE8_M_clearEv+0xe>
	}
    }
 800bf7c:	bf00      	nop
 800bf7e:	3718      	adds	r7, #24
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <_ZNSaISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEEC1Ev>:
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 faac 	bl	800c4ea <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEEC1Ev>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	4618      	mov	r0, r3
 800bf96:	3708      	adds	r7, #8
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEED1Ev>:
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	370c      	adds	r7, #12
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb0:	4770      	bx	lr

0800bfb2 <_ZNSt7__cxx1110_List_baseIPN7desenet6sensor19AbstractApplicationESaIS4_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 800bfb2:	b580      	push	{r7, lr}
 800bfb4:	b086      	sub	sp, #24
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	697a      	ldr	r2, [r7, #20]
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d015      	beq.n	800bff4 <_ZNSt7__cxx1110_List_baseIPN7desenet6sensor19AbstractApplicationESaIS4_EE8_M_clearEv+0x42>
	  _Node* __tmp = static_cast<_Node*>(__cur);
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 800bfd2:	6938      	ldr	r0, [r7, #16]
 800bfd4:	f000 fa94 	bl	800c500 <_ZNSt10_List_nodeIPN7desenet6sensor19AbstractApplicationEE9_M_valptrEv>
 800bfd8:	60f8      	str	r0, [r7, #12]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 fa9e 	bl	800c51c <_ZNSt7__cxx1110_List_baseIPN7desenet6sensor19AbstractApplicationESaIS4_EE21_M_get_Node_allocatorEv>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	68f9      	ldr	r1, [r7, #12]
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f000 faa4 	bl	800c532 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEEE7destroyIS4_EEvRS6_PT_>
	  _M_put_node(__tmp);
 800bfea:	6939      	ldr	r1, [r7, #16]
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 faad 	bl	800c54c <_ZNSt7__cxx1110_List_baseIPN7desenet6sensor19AbstractApplicationESaIS4_EE11_M_put_nodeEPSt10_List_nodeIS4_E>
      while (__cur != &_M_impl._M_node)
 800bff2:	e7e5      	b.n	800bfc0 <_ZNSt7__cxx1110_List_baseIPN7desenet6sensor19AbstractApplicationESaIS4_EE8_M_clearEv+0xe>
    }
 800bff4:	bf00      	nop
 800bff6:	3718      	adds	r7, #24
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <_ZSt4moveIRNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS5_EEEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	4618      	mov	r0, r3
 800c008:	370c      	adds	r7, #12
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr

0800c012 <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE14_M_move_assignEOS6_St17integral_constantIbLb1EE>:
      const_iterator
      _M_resize_pos(size_type& __new_size) const;

#if __cplusplus >= 201103L
      void
      _M_move_assign(list&& __x, true_type) noexcept
 800c012:	b590      	push	{r4, r7, lr}
 800c014:	b085      	sub	sp, #20
 800c016:	af00      	add	r7, sp, #0
 800c018:	60f8      	str	r0, [r7, #12]
 800c01a:	60b9      	str	r1, [r7, #8]
 800c01c:	713a      	strb	r2, [r7, #4]
      {
	this->_M_clear();
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	4618      	mov	r0, r3
 800c022:	f7ff ff8a 	bl	800bf3a <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE8_M_clearEv>
	this->_M_move_nodes(std::move(__x));
 800c026:	68fc      	ldr	r4, [r7, #12]
 800c028:	68b8      	ldr	r0, [r7, #8]
 800c02a:	f7ff ffe7 	bl	800bffc <_ZSt4moveIRNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS5_EEEEONSt16remove_referenceIT_E4typeEOSA_>
 800c02e:	4603      	mov	r3, r0
 800c030:	4619      	mov	r1, r3
 800c032:	4620      	mov	r0, r4
 800c034:	f000 fa99 	bl	800c56a <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE13_M_move_nodesEOS6_>
	std::__alloc_on_move(this->_M_get_Node_allocator(),
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	4618      	mov	r0, r3
 800c03c:	f000 fa2e 	bl	800c49c <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE21_M_get_Node_allocatorEv>
 800c040:	4604      	mov	r4, r0
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	4618      	mov	r0, r3
 800c046:	f000 fa29 	bl	800c49c <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE21_M_get_Node_allocatorEv>
 800c04a:	4603      	mov	r3, r0
 800c04c:	4619      	mov	r1, r3
 800c04e:	4620      	mov	r0, r4
 800c050:	f000 fa9e 	bl	800c590 <_ZSt15__alloc_on_moveISaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEEvRT_S8_>
			     __x._M_get_Node_allocator());
      }
 800c054:	bf00      	nop
 800c056:	3714      	adds	r7, #20
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd90      	pop	{r4, r7, pc}

0800c05c <_ZNSt14__array_traitsIPN7desenet6sensor19AbstractApplicationELj16EE6_S_refERA16_KS3_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800c05c:	b480      	push	{r7}
 800c05e:	b083      	sub	sp, #12
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	4413      	add	r3, r2
 800c06e:	4618      	mov	r0, r3
 800c070:	370c      	adds	r7, #12
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr

0800c07a <_ZSt7forwardIMN7desenet6sensor13NetworkEntityEFvRNS0_22NetworkInterfaceDriverEmPKhjEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c07a:	b480      	push	{r7}
 800c07c:	b083      	sub	sp, #12
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	4618      	mov	r0, r3
 800c086:	370c      	adds	r7, #12
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <_ZSt7forwardIPN7desenet6sensor13NetworkEntityEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	4618      	mov	r0, r3
 800c09c:	370c      	adds	r7, #12
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr

0800c0a6 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c0a6:	b480      	push	{r7}
 800c0a8:	b083      	sub	sp, #12
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	370c      	adds	r7, #12
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr

0800c0bc <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	370c      	adds	r7, #12
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr

0800c0d2 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c0d2:	b480      	push	{r7}
 800c0d4:	b083      	sub	sp, #12
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	4618      	mov	r0, r3
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <_ZSt7forwardIRKSt12_PlaceholderILi4EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	370c      	adds	r7, #12
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr

0800c0fe <_ZNSt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS0_22NetworkInterfaceDriverEmPKhjEPS2_St12_PlaceholderILi1EESA_ILi2EESA_ILi3EESA_ILi4EEEEC1IJS9_RKSB_RKSC_RKSD_RKSE_EEEOS8_DpOT_>:
	explicit _Bind(_Functor&& __f, _Args&&... __args)
 800c0fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c102:	b087      	sub	sp, #28
 800c104:	af02      	add	r7, sp, #8
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	607a      	str	r2, [r7, #4]
 800c10c:	603b      	str	r3, [r7, #0]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 800c10e:	68b8      	ldr	r0, [r7, #8]
 800c110:	f000 f82b 	bl	800c16a <_ZSt4moveIRMN7desenet6sensor13NetworkEntityEFvRNS0_22NetworkInterfaceDriverEmPKhjEEONSt16remove_referenceIT_E4typeEOSB_>
 800c114:	4602      	mov	r2, r0
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c11c:	e883 0003 	stmia.w	r3, {r0, r1}
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f103 0408 	add.w	r4, r3, #8
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f7ff ffb2 	bl	800c090 <_ZSt7forwardIPN7desenet6sensor13NetworkEntityEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c12c:	4606      	mov	r6, r0
 800c12e:	6838      	ldr	r0, [r7, #0]
 800c130:	f7ff ffb9 	bl	800c0a6 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c134:	4680      	mov	r8, r0
 800c136:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c138:	f7ff ffc0 	bl	800c0bc <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c13c:	4681      	mov	r9, r0
 800c13e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c140:	f7ff ffc7 	bl	800c0d2 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c144:	4605      	mov	r5, r0
 800c146:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c148:	f7ff ffce 	bl	800c0e8 <_ZSt7forwardIRKSt12_PlaceholderILi4EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c14c:	4603      	mov	r3, r0
 800c14e:	9301      	str	r3, [sp, #4]
 800c150:	9500      	str	r5, [sp, #0]
 800c152:	464b      	mov	r3, r9
 800c154:	4642      	mov	r2, r8
 800c156:	4631      	mov	r1, r6
 800c158:	4620      	mov	r0, r4
 800c15a:	f000 fa27 	bl	800c5ac <_ZNSt5tupleIJPN7desenet6sensor13NetworkEntityESt12_PlaceholderILi1EES4_ILi2EES4_ILi3EES4_ILi4EEEEC1IJS3_RKS5_RKS6_RKS7_RKS8_ELb1EEEDpOT_>
	{ }
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	4618      	mov	r0, r3
 800c162:	3714      	adds	r7, #20
 800c164:	46bd      	mov	sp, r7
 800c166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c16a <_ZSt4moveIRMN7desenet6sensor13NetworkEntityEFvRNS0_22NetworkInterfaceDriverEmPKhjEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800c16a:	b480      	push	{r7}
 800c16c:	b083      	sub	sp, #12
 800c16e:	af00      	add	r7, sp, #0
 800c170:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	4618      	mov	r0, r3
 800c176:	370c      	adds	r7, #12
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr

0800c180 <_ZSt4moveIRSt5tupleIJPN7desenet6sensor13NetworkEntityESt12_PlaceholderILi1EES5_ILi2EES5_ILi3EES5_ILi4EEEEEONSt16remove_referenceIT_E4typeEOSD_>:
    move(_Tp&& __t) noexcept
 800c180:	b480      	push	{r7}
 800c182:	b083      	sub	sp, #12
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	4618      	mov	r0, r3
 800c18c:	370c      	adds	r7, #12
 800c18e:	46bd      	mov	sp, r7
 800c190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c194:	4770      	bx	lr

0800c196 <_ZNSt11_Tuple_implILj0EJPN7desenet6sensor13NetworkEntityESt12_PlaceholderILi1EES4_ILi2EES4_ILi3EES4_ILi4EEEEC1EOS9_>:
      _Tuple_impl(_Tuple_impl&& __in)
 800c196:	b590      	push	{r4, r7, lr}
 800c198:	b083      	sub	sp, #12
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
 800c19e:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 800c1a0:	6838      	ldr	r0, [r7, #0]
 800c1a2:	f000 fa2e 	bl	800c602 <_ZNSt11_Tuple_implILj0EJPN7desenet6sensor13NetworkEntityESt12_PlaceholderILi1EES4_ILi2EES4_ILi3EES4_ILi4EEEE7_M_tailERS9_>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f000 fa35 	bl	800c618 <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EES1_ILi4EEEEEONSt16remove_referenceIT_E4typeEOS9_>
 800c1ae:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 fa48 	bl	800c648 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EES0_ILi4EEEEC1EOS5_>
 800c1b8:	687c      	ldr	r4, [r7, #4]
 800c1ba:	6838      	ldr	r0, [r7, #0]
 800c1bc:	f000 fa37 	bl	800c62e <_ZNSt11_Tuple_implILj0EJPN7desenet6sensor13NetworkEntityESt12_PlaceholderILi1EES4_ILi2EES4_ILi3EES4_ILi4EEEE7_M_headERS9_>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f7ff ff64 	bl	800c090 <_ZSt7forwardIPN7desenet6sensor13NetworkEntityEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	f000 fa5d 	bl	800c68c <_ZNSt10_Head_baseILj0EPN7desenet6sensor13NetworkEntityELb0EEC1IS3_EEOT_>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	370c      	adds	r7, #12
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd90      	pop	{r4, r7, pc}

0800c1dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEE21_M_not_empty_functionISI_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
	  { return true; }
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	370c      	adds	r7, #12
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr

0800c1f2 <_ZSt4moveIRSt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS1_22NetworkInterfaceDriverEmPKhjEPS3_St12_PlaceholderILi1EESB_ILi2EESB_ILi3EESB_ILi4EEEEEONSt16remove_referenceIT_E4typeEOSK_>:
    move(_Tp&& __t) noexcept
 800c1f2:	b480      	push	{r7}
 800c1f4:	b083      	sub	sp, #12
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	370c      	adds	r7, #12
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr

0800c208 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEE15_M_init_functorERSt9_Any_dataOSI_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800c208:	b590      	push	{r4, r7, lr}
 800c20a:	b085      	sub	sp, #20
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800c212:	6838      	ldr	r0, [r7, #0]
 800c214:	f7ff ffed 	bl	800c1f2 <_ZSt4moveIRSt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS1_22NetworkInterfaceDriverEmPKhjEPS3_St12_PlaceholderILi1EESB_ILi2EESB_ILi3EESB_ILi4EEEEEONSt16remove_referenceIT_E4typeEOSK_>
 800c218:	4603      	mov	r3, r0
 800c21a:	4622      	mov	r2, r4
 800c21c:	4619      	mov	r1, r3
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 fa45 	bl	800c6ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEE15_M_init_functorERSt9_Any_dataOSI_St17integral_constantIbLb0EE>
 800c224:	bf00      	nop
 800c226:	3714      	adds	r7, #20
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd90      	pop	{r4, r7, pc}

0800c22c <_ZNSt17_Function_handlerIFvRN7desenet22NetworkInterfaceDriverEmPKhjESt5_BindIFMNS0_6sensor13NetworkEntityEFvS2_mS4_jEPS8_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEE9_M_invokeERKSt9_Any_dataS2_OmOS4_Oj>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800c22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c230:	b086      	sub	sp, #24
 800c232:	af02      	add	r7, sp, #8
 800c234:	60f8      	str	r0, [r7, #12]
 800c236:	60b9      	str	r1, [r7, #8]
 800c238:	607a      	str	r2, [r7, #4]
 800c23a:	603b      	str	r3, [r7, #0]
	(*_Base::_M_get_pointer(__functor))(
 800c23c:	68f8      	ldr	r0, [r7, #12]
 800c23e:	f000 fa52 	bl	800c6e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEE14_M_get_pointerERKSt9_Any_data>
 800c242:	4604      	mov	r4, r0
 800c244:	68b8      	ldr	r0, [r7, #8]
 800c246:	f000 fa5b 	bl	800c700 <_ZSt7forwardIRN7desenet22NetworkInterfaceDriverEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c24a:	4605      	mov	r5, r0
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f000 fa62 	bl	800c716 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800c252:	4606      	mov	r6, r0
 800c254:	6838      	ldr	r0, [r7, #0]
 800c256:	f000 fa69 	bl	800c72c <_ZSt7forwardIPKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800c25a:	4680      	mov	r8, r0
 800c25c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c25e:	f000 fa70 	bl	800c742 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800c262:	4603      	mov	r3, r0
 800c264:	9300      	str	r3, [sp, #0]
 800c266:	4643      	mov	r3, r8
 800c268:	4632      	mov	r2, r6
 800c26a:	4629      	mov	r1, r5
 800c26c:	4620      	mov	r0, r4
 800c26e:	f000 fa73 	bl	800c758 <_ZNSt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS0_22NetworkInterfaceDriverEmPKhjEPS2_St12_PlaceholderILi1EESA_ILi2EESA_ILi3EESA_ILi4EEEEclIJS4_mS6_jEvEET0_DpOT_>
      }
 800c272:	bf00      	nop
 800c274:	3710      	adds	r7, #16
 800c276:	46bd      	mov	sp, r7
 800c278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c27c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEE10_M_managerERSt9_Any_dataRKSK_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800c27c:	b5b0      	push	{r4, r5, r7, lr}
 800c27e:	b086      	sub	sp, #24
 800c280:	af00      	add	r7, sp, #0
 800c282:	60f8      	str	r0, [r7, #12]
 800c284:	60b9      	str	r1, [r7, #8]
 800c286:	4613      	mov	r3, r2
 800c288:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800c28a:	79fb      	ldrb	r3, [r7, #7]
 800c28c:	2b03      	cmp	r3, #3
 800c28e:	d016      	beq.n	800c2be <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEE10_M_managerERSt9_Any_dataRKSK_St18_Manager_operation+0x42>
 800c290:	2b03      	cmp	r3, #3
 800c292:	dc19      	bgt.n	800c2c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEE10_M_managerERSt9_Any_dataRKSK_St18_Manager_operation+0x4c>
 800c294:	2b01      	cmp	r3, #1
 800c296:	d002      	beq.n	800c29e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEE10_M_managerERSt9_Any_dataRKSK_St18_Manager_operation+0x22>
 800c298:	2b02      	cmp	r3, #2
 800c29a:	d00a      	beq.n	800c2b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEE10_M_managerERSt9_Any_dataRKSK_St18_Manager_operation+0x36>
 800c29c:	e014      	b.n	800c2c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEE10_M_managerERSt9_Any_dataRKSK_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800c29e:	68f8      	ldr	r0, [r7, #12]
 800c2a0:	f000 fa85 	bl	800c7ae <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEEERT_v>
 800c2a4:	4604      	mov	r4, r0
 800c2a6:	68b8      	ldr	r0, [r7, #8]
 800c2a8:	f000 fa1d 	bl	800c6e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEE14_M_get_pointerERKSt9_Any_data>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	6023      	str	r3, [r4, #0]
	      break;
 800c2b0:	e00a      	b.n	800c2c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEE10_M_managerERSt9_Any_dataRKSK_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800c2b2:	462a      	mov	r2, r5
 800c2b4:	68b9      	ldr	r1, [r7, #8]
 800c2b6:	68f8      	ldr	r0, [r7, #12]
 800c2b8:	f000 fa85 	bl	800c7c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEE8_M_cloneERSt9_Any_dataRKSK_St17integral_constantIbLb0EE>
	      break;
 800c2bc:	e004      	b.n	800c2c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEE10_M_managerERSt9_Any_dataRKSK_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800c2be:	4621      	mov	r1, r4
 800c2c0:	68f8      	ldr	r0, [r7, #12]
 800c2c2:	f000 fa9e 	bl	800c802 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 800c2c6:	bf00      	nop
	  return false;
 800c2c8:	2300      	movs	r3, #0
	}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3718      	adds	r7, #24
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bdb0      	pop	{r4, r5, r7, pc}

0800c2d2 <_ZNSt7__cxx114listIPN7desenet6sensor19AbstractApplicationESaIS4_EE9_M_insertIJRKS4_EEEvSt14_List_iteratorIS4_EDpOT_>:
       _M_insert(iterator __position, _Args&&... __args)
 800c2d2:	b580      	push	{r7, lr}
 800c2d4:	b086      	sub	sp, #24
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	60f8      	str	r0, [r7, #12]
 800c2da:	60b9      	str	r1, [r7, #8]
 800c2dc:	607a      	str	r2, [r7, #4]
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 faa3 	bl	800c82a <_ZSt7forwardIRKPN7desenet6sensor19AbstractApplicationEEOT_RNSt16remove_referenceIS6_E4typeE>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	68f8      	ldr	r0, [r7, #12]
 800c2ea:	f000 faa9 	bl	800c840 <_ZNSt7__cxx114listIPN7desenet6sensor19AbstractApplicationESaIS4_EE14_M_create_nodeIJRKS4_EEEPSt10_List_nodeIS4_EDpOT_>
 800c2ee:	6178      	str	r0, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	68ba      	ldr	r2, [r7, #8]
 800c2f4:	4611      	mov	r1, r2
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f00a f8dd 	bl	80164b6 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2101      	movs	r1, #1
 800c300:	4618      	mov	r0, r3
 800c302:	f000 fad1 	bl	800c8a8 <_ZNSt7__cxx1110_List_baseIPN7desenet6sensor19AbstractApplicationESaIS4_EE11_M_inc_sizeEj>
       }
 800c306:	bf00      	nop
 800c308:	3718      	adds	r7, #24
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}

0800c30e <_ZNSt10shared_ptrIhEC1IhZNK3hei12SharedBufferIhE4copyEvEUlPhE_vEEPT_T0_>:
	shared_ptr(_Yp* __p, _Deleter __d)
 800c30e:	b5b0      	push	{r4, r5, r7, lr}
 800c310:	b084      	sub	sp, #16
 800c312:	af00      	add	r7, sp, #0
 800c314:	60f8      	str	r0, [r7, #12]
 800c316:	60b9      	str	r1, [r7, #8]
 800c318:	713a      	strb	r2, [r7, #4]
        : __shared_ptr<_Tp>(__p, std::move(__d)) { }
 800c31a:	68fc      	ldr	r4, [r7, #12]
 800c31c:	1d3b      	adds	r3, r7, #4
 800c31e:	4618      	mov	r0, r3
 800c320:	f000 fad3 	bl	800c8ca <_ZSt4moveIRZNK3hei12SharedBufferIhE4copyEvEUlPhE_EONSt16remove_referenceIT_E4typeEOS7_>
 800c324:	462a      	mov	r2, r5
 800c326:	68b9      	ldr	r1, [r7, #8]
 800c328:	4620      	mov	r0, r4
 800c32a:	f000 fad9 	bl	800c8e0 <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EEC1IhZNK3hei12SharedBufferIhE4copyEvEUlPhE_vEEPT_T0_>
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	4618      	mov	r0, r3
 800c332:	3710      	adds	r7, #16
 800c334:	46bd      	mov	sp, r7
 800c336:	bdb0      	pop	{r4, r5, r7, pc}

0800c338 <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	f107 030c 	add.w	r3, r7, #12
 800c346:	4611      	mov	r1, r2
 800c348:	4618      	mov	r0, r3
 800c34a:	f000 f859 	bl	800c400 <_ZNSt14_List_iteratorIN7desenet6sensor13NetworkEntity12EventElementEEC1EPNSt8__detail15_List_node_baseE>
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	4618      	mov	r0, r3
 800c352:	3710      	adds	r7, #16
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE9_M_insertIJRKS4_EEEvSt14_List_iteratorIS4_EDpOT_>:
       _M_insert(iterator __position, _Args&&... __args)
 800c358:	b580      	push	{r7, lr}
 800c35a:	b086      	sub	sp, #24
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	60f8      	str	r0, [r7, #12]
 800c360:	60b9      	str	r1, [r7, #8]
 800c362:	607a      	str	r2, [r7, #4]
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f000 fad8 	bl	800c91a <_ZSt7forwardIRKN7desenet6sensor13NetworkEntity12EventElementEEOT_RNSt16remove_referenceIS6_E4typeE>
 800c36a:	4603      	mov	r3, r0
 800c36c:	4619      	mov	r1, r3
 800c36e:	68f8      	ldr	r0, [r7, #12]
 800c370:	f000 fade 	bl	800c930 <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE14_M_create_nodeIJRKS4_EEEPSt10_List_nodeIS4_EDpOT_>
 800c374:	6178      	str	r0, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	68ba      	ldr	r2, [r7, #8]
 800c37a:	4611      	mov	r1, r2
 800c37c:	4618      	mov	r0, r3
 800c37e:	f00a f89a 	bl	80164b6 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2101      	movs	r1, #1
 800c386:	4618      	mov	r0, r3
 800c388:	f000 fb06 	bl	800c998 <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE11_M_inc_sizeEj>
       }
 800c38c:	bf00      	nop
 800c38e:	3718      	adds	r7, #24
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <_ZNSt14_List_iteratorIPN7desenet6sensor19AbstractApplicationEEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	683a      	ldr	r2, [r7, #0]
 800c3a2:	601a      	str	r2, [r3, #0]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	370c      	adds	r7, #12
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b0:	4770      	bx	lr

0800c3b2 <_ZNKSt10_List_nodeIPN7desenet6sensor19AbstractApplicationEE9_M_valptrEv>:
      _Tp const* _M_valptr() const { return _M_storage._M_ptr(); }
 800c3b2:	b580      	push	{r7, lr}
 800c3b4:	b082      	sub	sp, #8
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	6078      	str	r0, [r7, #4]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	3308      	adds	r3, #8
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f000 fafb 	bl	800c9ba <_ZNK9__gnu_cxx16__aligned_membufIPN7desenet6sensor19AbstractApplicationEE6_M_ptrEv>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3708      	adds	r7, #8
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}

0800c3ce <_ZNSt6bitsetILj16EE9referenceC1ERS0_j>:
	reference(bitset& __b, size_t __pos) _GLIBCXX_NOEXCEPT
 800c3ce:	b580      	push	{r7, lr}
 800c3d0:	b084      	sub	sp, #16
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	60f8      	str	r0, [r7, #12]
 800c3d6:	60b9      	str	r1, [r7, #8]
 800c3d8:	607a      	str	r2, [r7, #4]
	  _M_wp = &__b._M_getword(__pos);
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	6879      	ldr	r1, [r7, #4]
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7fe fec8 	bl	800b174 <_ZNSt12_Base_bitsetILj1EE10_M_getwordEj>
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	601a      	str	r2, [r3, #0]
	  _M_bpos = _Base::_S_whichbit(__pos);
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f7fe fea6 	bl	800b13c <_ZNSt12_Base_bitsetILj1EE11_S_whichbitEj>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	605a      	str	r2, [r3, #4]
	}
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3710      	adds	r7, #16
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <_ZNSt14_List_iteratorIN7desenet6sensor13NetworkEntity12EventElementEEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 800c400:	b480      	push	{r7}
 800c402:	b083      	sub	sp, #12
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	683a      	ldr	r2, [r7, #0]
 800c40e:	601a      	str	r2, [r3, #0]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	4618      	mov	r0, r3
 800c414:	370c      	adds	r7, #12
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr

0800c41e <_ZNSt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 800c41e:	b580      	push	{r7, lr}
 800c420:	b082      	sub	sp, #8
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	3308      	adds	r3, #8
 800c42a:	4618      	mov	r0, r3
 800c42c:	f000 fad1 	bl	800c9d2 <_ZN9__gnu_cxx16__aligned_membufIN7desenet6sensor13NetworkEntity12EventElementEE6_M_ptrEv>
 800c430:	4603      	mov	r3, r0
 800c432:	4618      	mov	r0, r3
 800c434:	3708      	adds	r7, #8
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE8_M_eraseESt14_List_iteratorIS4_E>:
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
 800c43a:	b590      	push	{r4, r7, lr}
 800c43c:	b085      	sub	sp, #20
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
 800c442:	6039      	str	r1, [r7, #0]
	this->_M_dec_size(1);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2101      	movs	r1, #1
 800c448:	4618      	mov	r0, r3
 800c44a:	f000 face 	bl	800c9ea <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE11_M_dec_sizeEj>
	__position._M_node->_M_unhook();
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	4618      	mov	r0, r3
 800c452:	f00a f837 	bl	80164c4 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	_Node* __n = static_cast<_Node*>(__position._M_node);
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	60fb      	str	r3, [r7, #12]
	_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	4618      	mov	r0, r3
 800c45e:	f000 f81d 	bl	800c49c <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE21_M_get_Node_allocatorEv>
 800c462:	4604      	mov	r4, r0
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	f7ff ffda 	bl	800c41e <_ZNSt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEE9_M_valptrEv>
 800c46a:	4603      	mov	r3, r0
 800c46c:	4619      	mov	r1, r3
 800c46e:	4620      	mov	r0, r4
 800c470:	f000 f81f 	bl	800c4b2 <_ZNSt16allocator_traitsISaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEE7destroyIS4_EEvRS6_PT_>
	_M_put_node(__n);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	68f9      	ldr	r1, [r7, #12]
 800c478:	4618      	mov	r0, r3
 800c47a:	f000 f827 	bl	800c4cc <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE11_M_put_nodeEPSt10_List_nodeIS4_E>
      }
 800c47e:	bf00      	nop
 800c480:	3714      	adds	r7, #20
 800c482:	46bd      	mov	sp, r7
 800c484:	bd90      	pop	{r4, r7, pc}

0800c486 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c486:	b480      	push	{r7}
 800c488:	b083      	sub	sp, #12
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	4618      	mov	r0, r3
 800c492:	370c      	adds	r7, #12
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr

0800c49c <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800c49c:	b480      	push	{r7}
 800c49e:	b083      	sub	sp, #12
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	370c      	adds	r7, #12
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr

0800c4b2 <_ZNSt16allocator_traitsISaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEE7destroyIS4_EEvRS6_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800c4b2:	b580      	push	{r7, lr}
 800c4b4:	b082      	sub	sp, #8
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
 800c4ba:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800c4bc:	6839      	ldr	r1, [r7, #0]
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f000 faa4 	bl	800ca0c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEE7destroyIS5_EEvPT_>
 800c4c4:	bf00      	nop
 800c4c6:	3708      	adds	r7, #8
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE11_M_put_nodeEPSt10_List_nodeIS4_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b082      	sub	sp, #8
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2201      	movs	r2, #1
 800c4da:	6839      	ldr	r1, [r7, #0]
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f000 faa1 	bl	800ca24 <_ZNSt16allocator_traitsISaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEE10deallocateERS6_PS5_j>
 800c4e2:	bf00      	nop
 800c4e4:	3708      	adds	r7, #8
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEEC1Ev>:
 800c4ea:	b480      	push	{r7}
 800c4ec:	b083      	sub	sp, #12
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	370c      	adds	r7, #12
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr

0800c500 <_ZNSt10_List_nodeIPN7desenet6sensor19AbstractApplicationEE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	3308      	adds	r3, #8
 800c50c:	4618      	mov	r0, r3
 800c50e:	f000 fa98 	bl	800ca42 <_ZN9__gnu_cxx16__aligned_membufIPN7desenet6sensor19AbstractApplicationEE6_M_ptrEv>
 800c512:	4603      	mov	r3, r0
 800c514:	4618      	mov	r0, r3
 800c516:	3708      	adds	r7, #8
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <_ZNSt7__cxx1110_List_baseIPN7desenet6sensor19AbstractApplicationESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800c51c:	b480      	push	{r7}
 800c51e:	b083      	sub	sp, #12
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	4618      	mov	r0, r3
 800c528:	370c      	adds	r7, #12
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr

0800c532 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEEE7destroyIS4_EEvRS6_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800c532:	b580      	push	{r7, lr}
 800c534:	b082      	sub	sp, #8
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]
 800c53a:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800c53c:	6839      	ldr	r1, [r7, #0]
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 fa8b 	bl	800ca5a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEE7destroyIS5_EEvPT_>
 800c544:	bf00      	nop
 800c546:	3708      	adds	r7, #8
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <_ZNSt7__cxx1110_List_baseIPN7desenet6sensor19AbstractApplicationESaIS4_EE11_M_put_nodeEPSt10_List_nodeIS4_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2201      	movs	r2, #1
 800c55a:	6839      	ldr	r1, [r7, #0]
 800c55c:	4618      	mov	r0, r3
 800c55e:	f000 fa87 	bl	800ca70 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEEE10deallocateERS6_PS5_j>
 800c562:	bf00      	nop
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE13_M_move_nodesEOS6_>:
      _M_move_nodes(_List_base&& __x)
 800c56a:	b590      	push	{r4, r7, lr}
 800c56c:	b083      	sub	sp, #12
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
 800c572:	6039      	str	r1, [r7, #0]
      { _M_impl._M_node._M_move_nodes(std::move(__x._M_impl._M_node)); }
 800c574:	687c      	ldr	r4, [r7, #4]
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	4618      	mov	r0, r3
 800c57a:	f000 fa88 	bl	800ca8e <_ZSt4moveIRNSt8__detail17_List_node_headerEEONSt16remove_referenceIT_E4typeEOS4_>
 800c57e:	4603      	mov	r3, r0
 800c580:	4619      	mov	r1, r3
 800c582:	4620      	mov	r0, r4
 800c584:	f7fe fd8a 	bl	800b09c <_ZNSt8__detail17_List_node_header13_M_move_nodesEOS0_>
 800c588:	bf00      	nop
 800c58a:	370c      	adds	r7, #12
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd90      	pop	{r4, r7, pc}

0800c590 <_ZSt15__alloc_on_moveISaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEEvRT_S8_>:
  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
 800c59a:	461a      	mov	r2, r3
 800c59c:	6839      	ldr	r1, [r7, #0]
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 fa80 	bl	800caa4 <_ZSt18__do_alloc_on_moveISaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEEvRT_S8_St17integral_constantIbLb1EE>
    }
 800c5a4:	bf00      	nop
 800c5a6:	3710      	adds	r7, #16
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <_ZNSt5tupleIJPN7desenet6sensor13NetworkEntityESt12_PlaceholderILi1EES4_ILi2EES4_ILi3EES4_ILi4EEEEC1IJS3_RKS5_RKS6_RKS7_RKS8_ELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 800c5ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5b0:	b087      	sub	sp, #28
 800c5b2:	af02      	add	r7, sp, #8
 800c5b4:	60f8      	str	r0, [r7, #12]
 800c5b6:	60b9      	str	r1, [r7, #8]
 800c5b8:	607a      	str	r2, [r7, #4]
 800c5ba:	603b      	str	r3, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 800c5bc:	68fc      	ldr	r4, [r7, #12]
 800c5be:	68b8      	ldr	r0, [r7, #8]
 800c5c0:	f7ff fd66 	bl	800c090 <_ZSt7forwardIPN7desenet6sensor13NetworkEntityEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c5c4:	4606      	mov	r6, r0
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f7ff fd6d 	bl	800c0a6 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c5cc:	4680      	mov	r8, r0
 800c5ce:	6838      	ldr	r0, [r7, #0]
 800c5d0:	f7ff fd74 	bl	800c0bc <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c5d4:	4681      	mov	r9, r0
 800c5d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5d8:	f7ff fd7b 	bl	800c0d2 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c5dc:	4605      	mov	r5, r0
 800c5de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c5e0:	f7ff fd82 	bl	800c0e8 <_ZSt7forwardIRKSt12_PlaceholderILi4EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	9301      	str	r3, [sp, #4]
 800c5e8:	9500      	str	r5, [sp, #0]
 800c5ea:	464b      	mov	r3, r9
 800c5ec:	4642      	mov	r2, r8
 800c5ee:	4631      	mov	r1, r6
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	f000 fa64 	bl	800cabe <_ZNSt11_Tuple_implILj0EJPN7desenet6sensor13NetworkEntityESt12_PlaceholderILi1EES4_ILi2EES4_ILi3EES4_ILi4EEEEC1IS3_JRKS5_RKS6_RKS7_RKS8_EvEEOT_DpOT0_>
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3714      	adds	r7, #20
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c602 <_ZNSt11_Tuple_implILj0EJPN7desenet6sensor13NetworkEntityESt12_PlaceholderILi1EES4_ILi2EES4_ILi3EES4_ILi4EEEE7_M_tailERS9_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 800c602:	b480      	push	{r7}
 800c604:	b083      	sub	sp, #12
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	4618      	mov	r0, r3
 800c60e:	370c      	adds	r7, #12
 800c610:	46bd      	mov	sp, r7
 800c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c616:	4770      	bx	lr

0800c618 <_ZSt4moveIRSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES1_ILi2EES1_ILi3EES1_ILi4EEEEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800c618:	b480      	push	{r7}
 800c61a:	b083      	sub	sp, #12
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	4618      	mov	r0, r3
 800c624:	370c      	adds	r7, #12
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr

0800c62e <_ZNSt11_Tuple_implILj0EJPN7desenet6sensor13NetworkEntityESt12_PlaceholderILi1EES4_ILi2EES4_ILi3EES4_ILi4EEEE7_M_headERS9_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800c62e:	b580      	push	{r7, lr}
 800c630:	b082      	sub	sp, #8
 800c632:	af00      	add	r7, sp, #0
 800c634:	6078      	str	r0, [r7, #4]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	4618      	mov	r0, r3
 800c63a:	f000 fa6c 	bl	800cb16 <_ZNSt10_Head_baseILj0EPN7desenet6sensor13NetworkEntityELb0EE7_M_headERS4_>
 800c63e:	4603      	mov	r3, r0
 800c640:	4618      	mov	r0, r3
 800c642:	3708      	adds	r7, #8
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EES0_ILi4EEEEC1EOS5_>:
      _Tuple_impl(_Tuple_impl&& __in)
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 800c652:	6838      	ldr	r0, [r7, #0]
 800c654:	f000 fa6a 	bl	800cb2c <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EES0_ILi4EEEE7_M_tailERS5_>
 800c658:	4603      	mov	r3, r0
 800c65a:	4618      	mov	r0, r3
 800c65c:	f000 fa71 	bl	800cb42 <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EES1_ILi4EEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800c660:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 800c662:	4619      	mov	r1, r3
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 fa8e 	bl	800cb86 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EES0_ILi4EEEEC1EOS4_>
 800c66a:	6838      	ldr	r0, [r7, #0]
 800c66c:	f000 fa74 	bl	800cb58 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EES0_ILi4EEEE7_M_headERS5_>
 800c670:	4603      	mov	r3, r0
 800c672:	4618      	mov	r0, r3
 800c674:	f000 fa7c 	bl	800cb70 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800c678:	4603      	mov	r3, r0
 800c67a:	4619      	mov	r1, r3
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f000 faa4 	bl	800cbca <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4618      	mov	r0, r3
 800c686:	3708      	adds	r7, #8
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <_ZNSt10_Head_baseILj0EPN7desenet6sensor13NetworkEntityELb0EEC1IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800c696:	6838      	ldr	r0, [r7, #0]
 800c698:	f7ff fcfa 	bl	800c090 <_ZSt7forwardIPN7desenet6sensor13NetworkEntityEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c69c:	4603      	mov	r3, r0
 800c69e:	681a      	ldr	r2, [r3, #0]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	601a      	str	r2, [r3, #0]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3708      	adds	r7, #8
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}

0800c6ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEE15_M_init_functorERSt9_Any_dataOSI_St17integral_constantIbLb0EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 800c6ae:	b5b0      	push	{r4, r5, r7, lr}
 800c6b0:	b084      	sub	sp, #16
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	60f8      	str	r0, [r7, #12]
 800c6b6:	60b9      	str	r1, [r7, #8]
 800c6b8:	713a      	strb	r2, [r7, #4]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800c6ba:	68b8      	ldr	r0, [r7, #8]
 800c6bc:	f7ff fd99 	bl	800c1f2 <_ZSt4moveIRSt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS1_22NetworkInterfaceDriverEmPKhjEPS3_St12_PlaceholderILi1EESB_ILi2EESB_ILi3EESB_ILi4EEEEEONSt16remove_referenceIT_E4typeEOSK_>
 800c6c0:	4605      	mov	r5, r0
 800c6c2:	200c      	movs	r0, #12
 800c6c4:	f009 fedf 	bl	8016486 <_Znwj>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	461c      	mov	r4, r3
 800c6cc:	4629      	mov	r1, r5
 800c6ce:	4620      	mov	r0, r4
 800c6d0:	f7ff fa70 	bl	800bbb4 <_ZNSt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS0_22NetworkInterfaceDriverEmPKhjEPS2_St12_PlaceholderILi1EESA_ILi2EESA_ILi3EESA_ILi4EEEEC1EOSG_>
 800c6d4:	68f8      	ldr	r0, [r7, #12]
 800c6d6:	f000 f86a 	bl	800c7ae <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEEERT_v>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	601c      	str	r4, [r3, #0]
 800c6de:	bf00      	nop
 800c6e0:	3710      	adds	r7, #16
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bdb0      	pop	{r4, r5, r7, pc}

0800c6e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800c6e6:	b580      	push	{r7, lr}
 800c6e8:	b082      	sub	sp, #8
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 fa78 	bl	800cbe4 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEEERKT_v>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	681b      	ldr	r3, [r3, #0]
	}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3708      	adds	r7, #8
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <_ZSt7forwardIRN7desenet22NetworkInterfaceDriverEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c700:	b480      	push	{r7}
 800c702:	b083      	sub	sp, #12
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	4618      	mov	r0, r3
 800c70c:	370c      	adds	r7, #12
 800c70e:	46bd      	mov	sp, r7
 800c710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c714:	4770      	bx	lr

0800c716 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c716:	b480      	push	{r7}
 800c718:	b083      	sub	sp, #12
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	4618      	mov	r0, r3
 800c722:	370c      	adds	r7, #12
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr

0800c72c <_ZSt7forwardIPKhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c72c:	b480      	push	{r7}
 800c72e:	b083      	sub	sp, #12
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	4618      	mov	r0, r3
 800c738:	370c      	adds	r7, #12
 800c73a:	46bd      	mov	sp, r7
 800c73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c740:	4770      	bx	lr

0800c742 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c742:	b480      	push	{r7}
 800c744:	b083      	sub	sp, #12
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	4618      	mov	r0, r3
 800c74e:	370c      	adds	r7, #12
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <_ZNSt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS0_22NetworkInterfaceDriverEmPKhjEPS2_St12_PlaceholderILi1EESA_ILi2EESA_ILi3EESA_ILi4EEEEclIJS4_mS6_jEvEET0_DpOT_>:
	operator()(_Args&&... __args)
 800c758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c75c:	b08c      	sub	sp, #48	; 0x30
 800c75e:	af02      	add	r7, sp, #8
 800c760:	60f8      	str	r0, [r7, #12]
 800c762:	60b9      	str	r1, [r7, #8]
 800c764:	607a      	str	r2, [r7, #4]
 800c766:	603b      	str	r3, [r7, #0]
	      _Bound_indexes());
 800c768:	68b8      	ldr	r0, [r7, #8]
 800c76a:	f7ff ffc9 	bl	800c700 <_ZSt7forwardIRN7desenet22NetworkInterfaceDriverEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c76e:	4604      	mov	r4, r0
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f7ff ffd0 	bl	800c716 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800c776:	4605      	mov	r5, r0
 800c778:	6838      	ldr	r0, [r7, #0]
 800c77a:	f7ff ffd7 	bl	800c72c <_ZSt7forwardIPKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800c77e:	4606      	mov	r6, r0
 800c780:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c782:	f7ff ffde 	bl	800c742 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800c786:	4603      	mov	r3, r0
 800c788:	f107 0014 	add.w	r0, r7, #20
 800c78c:	9300      	str	r3, [sp, #0]
 800c78e:	4633      	mov	r3, r6
 800c790:	462a      	mov	r2, r5
 800c792:	4621      	mov	r1, r4
 800c794:	f000 fa32 	bl	800cbfc <_ZSt16forward_as_tupleIJRN7desenet22NetworkInterfaceDriverEmPKhjEESt5tupleIJDpOT_EES8_>
 800c798:	f107 0314 	add.w	r3, r7, #20
 800c79c:	4642      	mov	r2, r8
 800c79e:	4619      	mov	r1, r3
 800c7a0:	68f8      	ldr	r0, [r7, #12]
 800c7a2:	f000 fa4d 	bl	800cc40 <_ZNSt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS0_22NetworkInterfaceDriverEmPKhjEPS2_St12_PlaceholderILi1EESA_ILi2EESA_ILi3EESA_ILi4EEEE6__callIvJS4_OmOS6_OjEJLj0ELj1ELj2ELj3ELj4EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
	}
 800c7a6:	3728      	adds	r7, #40	; 0x28
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c7ae <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEEERT_v>:
      _M_access()
 800c7ae:	b580      	push	{r7, lr}
 800c7b0:	b082      	sub	sp, #8
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f7fe fce8 	bl	800b18c <_ZNSt9_Any_data9_M_accessEv>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3708      	adds	r7, #8
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}

0800c7c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEE8_M_cloneERSt9_Any_dataRKSK_St17integral_constantIbLb0EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 800c7c6:	b5b0      	push	{r4, r5, r7, lr}
 800c7c8:	b084      	sub	sp, #16
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	60f8      	str	r0, [r7, #12]
 800c7ce:	60b9      	str	r1, [r7, #8]
 800c7d0:	713a      	strb	r2, [r7, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 800c7d2:	68b8      	ldr	r0, [r7, #8]
 800c7d4:	f000 fa8a 	bl	800ccec <_ZNKSt9_Any_data9_M_accessIPKSt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEEERKT_v>
 800c7d8:	4603      	mov	r3, r0
	  __dest._M_access<_Functor*>() =
 800c7da:	681d      	ldr	r5, [r3, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 800c7dc:	200c      	movs	r0, #12
 800c7de:	f009 fe52 	bl	8016486 <_Znwj>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	461c      	mov	r4, r3
	  __dest._M_access<_Functor*>() =
 800c7e6:	4623      	mov	r3, r4
 800c7e8:	462a      	mov	r2, r5
 800c7ea:	ca07      	ldmia	r2, {r0, r1, r2}
 800c7ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c7f0:	68f8      	ldr	r0, [r7, #12]
 800c7f2:	f7ff ffdc 	bl	800c7ae <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEEERT_v>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	601c      	str	r4, [r3, #0]
	}
 800c7fa:	bf00      	nop
 800c7fc:	3710      	adds	r7, #16
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bdb0      	pop	{r4, r5, r7, pc}

0800c802 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 800c802:	b580      	push	{r7, lr}
 800c804:	b082      	sub	sp, #8
 800c806:	af00      	add	r7, sp, #0
 800c808:	6078      	str	r0, [r7, #4]
 800c80a:	7039      	strb	r1, [r7, #0]
	  delete __victim._M_access<_Functor*>();
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f7ff ffce 	bl	800c7ae <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEEERT_v>
 800c812:	4603      	mov	r3, r0
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d003      	beq.n	800c822 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x20>
 800c81a:	210c      	movs	r1, #12
 800c81c:	4618      	mov	r0, r3
 800c81e:	f009 fe1f 	bl	8016460 <_ZdlPvj>
	}
 800c822:	bf00      	nop
 800c824:	3708      	adds	r7, #8
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}

0800c82a <_ZSt7forwardIRKPN7desenet6sensor19AbstractApplicationEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c82a:	b480      	push	{r7}
 800c82c:	b083      	sub	sp, #12
 800c82e:	af00      	add	r7, sp, #0
 800c830:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	4618      	mov	r0, r3
 800c836:	370c      	adds	r7, #12
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr

0800c840 <_ZNSt7__cxx114listIPN7desenet6sensor19AbstractApplicationESaIS4_EE14_M_create_nodeIJRKS4_EEEPSt10_List_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800c840:	b590      	push	{r4, r7, lr}
 800c842:	b087      	sub	sp, #28
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	4618      	mov	r0, r3
 800c84e:	f000 fa59 	bl	800cd04 <_ZNSt7__cxx1110_List_baseIPN7desenet6sensor19AbstractApplicationESaIS4_EE11_M_get_nodeEv>
 800c852:	6178      	str	r0, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	4618      	mov	r0, r3
 800c858:	f7ff fe60 	bl	800c51c <_ZNSt7__cxx1110_List_baseIPN7desenet6sensor19AbstractApplicationESaIS4_EE21_M_get_Node_allocatorEv>
 800c85c:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 800c85e:	f107 0308 	add.w	r3, r7, #8
 800c862:	697a      	ldr	r2, [r7, #20]
 800c864:	6939      	ldr	r1, [r7, #16]
 800c866:	4618      	mov	r0, r3
 800c868:	f000 fa5a 	bl	800cd20 <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEEEC1ERS6_PS5_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 800c86c:	6978      	ldr	r0, [r7, #20]
 800c86e:	f7ff fe47 	bl	800c500 <_ZNSt10_List_nodeIPN7desenet6sensor19AbstractApplicationEE9_M_valptrEv>
 800c872:	4604      	mov	r4, r0
 800c874:	6838      	ldr	r0, [r7, #0]
 800c876:	f7ff ffd8 	bl	800c82a <_ZSt7forwardIRKPN7desenet6sensor19AbstractApplicationEEOT_RNSt16remove_referenceIS6_E4typeE>
 800c87a:	4603      	mov	r3, r0
 800c87c:	461a      	mov	r2, r3
 800c87e:	4621      	mov	r1, r4
 800c880:	6938      	ldr	r0, [r7, #16]
 800c882:	f000 fa76 	bl	800cd72 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>
	  __guard = nullptr;
 800c886:	f107 0308 	add.w	r3, r7, #8
 800c88a:	2100      	movs	r1, #0
 800c88c:	4618      	mov	r0, r3
 800c88e:	f000 fa83 	bl	800cd98 <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEEEaSEDn>
	  return __p;
 800c892:	697c      	ldr	r4, [r7, #20]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 800c894:	f107 0308 	add.w	r3, r7, #8
 800c898:	4618      	mov	r0, r3
 800c89a:	f000 fa55 	bl	800cd48 <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEEED1Ev>
	  return __p;
 800c89e:	4623      	mov	r3, r4
	}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	371c      	adds	r7, #28
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd90      	pop	{r4, r7, pc}

0800c8a8 <_ZNSt7__cxx1110_List_baseIPN7desenet6sensor19AbstractApplicationESaIS4_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 800c8a8:	b480      	push	{r7}
 800c8aa:	b083      	sub	sp, #12
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	689a      	ldr	r2, [r3, #8]
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	441a      	add	r2, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	609a      	str	r2, [r3, #8]
 800c8be:	bf00      	nop
 800c8c0:	370c      	adds	r7, #12
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr

0800c8ca <_ZSt4moveIRZNK3hei12SharedBufferIhE4copyEvEUlPhE_EONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800c8ca:	b480      	push	{r7}
 800c8cc:	b083      	sub	sp, #12
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr

0800c8e0 <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EEC1IhZNK3hei12SharedBufferIhE4copyEvEUlPhE_vEEPT_T0_>:
	__shared_ptr(_Yp* __p, _Deleter __d)
 800c8e0:	b5b0      	push	{r4, r5, r7, lr}
 800c8e2:	b084      	sub	sp, #16
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	60f8      	str	r0, [r7, #12]
 800c8e8:	60b9      	str	r1, [r7, #8]
 800c8ea:	713a      	strb	r2, [r7, #4]
	: _M_ptr(__p), _M_refcount(__p, std::move(__d))
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	68ba      	ldr	r2, [r7, #8]
 800c8f0:	601a      	str	r2, [r3, #0]
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	1d1c      	adds	r4, r3, #4
 800c8f6:	1d3b      	adds	r3, r7, #4
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f7ff ffe6 	bl	800c8ca <_ZSt4moveIRZNK3hei12SharedBufferIhE4copyEvEUlPhE_EONSt16remove_referenceIT_E4typeEOS7_>
 800c8fe:	462a      	mov	r2, r5
 800c900:	68b9      	ldr	r1, [r7, #8]
 800c902:	4620      	mov	r0, r4
 800c904:	f000 fa57 	bl	800cdb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPhZNK3hei12SharedBufferIhE4copyEvEUlS4_E_vEET_T0_>
	  _M_enable_shared_from_this_with(__p);
 800c908:	68b9      	ldr	r1, [r7, #8]
 800c90a:	68f8      	ldr	r0, [r7, #12]
 800c90c:	f7fb fa38 	bl	8007d80 <_ZNSt12__shared_ptrIhLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIhhEENSt9enable_ifIXntsrNS2_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	4618      	mov	r0, r3
 800c914:	3710      	adds	r7, #16
 800c916:	46bd      	mov	sp, r7
 800c918:	bdb0      	pop	{r4, r5, r7, pc}

0800c91a <_ZSt7forwardIRKN7desenet6sensor13NetworkEntity12EventElementEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c91a:	b480      	push	{r7}
 800c91c:	b083      	sub	sp, #12
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	4618      	mov	r0, r3
 800c926:	370c      	adds	r7, #12
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr

0800c930 <_ZNSt7__cxx114listIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE14_M_create_nodeIJRKS4_EEEPSt10_List_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800c930:	b590      	push	{r4, r7, lr}
 800c932:	b087      	sub	sp, #28
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	4618      	mov	r0, r3
 800c93e:	f000 fa4f 	bl	800cde0 <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE11_M_get_nodeEv>
 800c942:	6178      	str	r0, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	4618      	mov	r0, r3
 800c948:	f7ff fda8 	bl	800c49c <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE21_M_get_Node_allocatorEv>
 800c94c:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 800c94e:	f107 0308 	add.w	r3, r7, #8
 800c952:	697a      	ldr	r2, [r7, #20]
 800c954:	6939      	ldr	r1, [r7, #16]
 800c956:	4618      	mov	r0, r3
 800c958:	f000 fa50 	bl	800cdfc <_ZNSt15__allocated_ptrISaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEEC1ERS6_PS5_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 800c95c:	6978      	ldr	r0, [r7, #20]
 800c95e:	f7ff fd5e 	bl	800c41e <_ZNSt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEE9_M_valptrEv>
 800c962:	4604      	mov	r4, r0
 800c964:	6838      	ldr	r0, [r7, #0]
 800c966:	f7ff ffd8 	bl	800c91a <_ZSt7forwardIRKN7desenet6sensor13NetworkEntity12EventElementEEOT_RNSt16remove_referenceIS6_E4typeE>
 800c96a:	4603      	mov	r3, r0
 800c96c:	461a      	mov	r2, r3
 800c96e:	4621      	mov	r1, r4
 800c970:	6938      	ldr	r0, [r7, #16]
 800c972:	f000 fa6c 	bl	800ce4e <_ZNSt16allocator_traitsISaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>
	  __guard = nullptr;
 800c976:	f107 0308 	add.w	r3, r7, #8
 800c97a:	2100      	movs	r1, #0
 800c97c:	4618      	mov	r0, r3
 800c97e:	f000 fa79 	bl	800ce74 <_ZNSt15__allocated_ptrISaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEEaSEDn>
	  return __p;
 800c982:	697c      	ldr	r4, [r7, #20]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 800c984:	f107 0308 	add.w	r3, r7, #8
 800c988:	4618      	mov	r0, r3
 800c98a:	f000 fa4b 	bl	800ce24 <_ZNSt15__allocated_ptrISaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEED1Ev>
	  return __p;
 800c98e:	4623      	mov	r3, r4
	}
 800c990:	4618      	mov	r0, r3
 800c992:	371c      	adds	r7, #28
 800c994:	46bd      	mov	sp, r7
 800c996:	bd90      	pop	{r4, r7, pc}

0800c998 <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 800c998:	b480      	push	{r7}
 800c99a:	b083      	sub	sp, #12
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	689a      	ldr	r2, [r3, #8]
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	441a      	add	r2, r3
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	609a      	str	r2, [r3, #8]
 800c9ae:	bf00      	nop
 800c9b0:	370c      	adds	r7, #12
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b8:	4770      	bx	lr

0800c9ba <_ZNK9__gnu_cxx16__aligned_membufIPN7desenet6sensor19AbstractApplicationEE6_M_ptrEv>:
      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b082      	sub	sp, #8
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f000 fa65 	bl	800ce92 <_ZNK9__gnu_cxx16__aligned_membufIPN7desenet6sensor19AbstractApplicationEE7_M_addrEv>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3708      	adds	r7, #8
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}

0800c9d2 <_ZN9__gnu_cxx16__aligned_membufIN7desenet6sensor13NetworkEntity12EventElementEE6_M_ptrEv>:
      _M_ptr() noexcept
 800c9d2:	b580      	push	{r7, lr}
 800c9d4:	b082      	sub	sp, #8
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f000 fa64 	bl	800cea8 <_ZN9__gnu_cxx16__aligned_membufIN7desenet6sensor13NetworkEntity12EventElementEE7_M_addrEv>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3708      	adds	r7, #8
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE11_M_dec_sizeEj>:
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 800c9ea:	b480      	push	{r7}
 800c9ec:	b083      	sub	sp, #12
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
 800c9f2:	6039      	str	r1, [r7, #0]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	689a      	ldr	r2, [r3, #8]
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	1ad2      	subs	r2, r2, r3
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	609a      	str	r2, [r3, #8]
 800ca00:	bf00      	nop
 800ca02:	370c      	adds	r7, #12
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr

0800ca0c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEE7destroyIS5_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 800ca16:	6838      	ldr	r0, [r7, #0]
 800ca18:	f7fe fe34 	bl	800b684 <_ZN7desenet6sensor13NetworkEntity12EventElementD1Ev>
 800ca1c:	bf00      	nop
 800ca1e:	3708      	adds	r7, #8
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <_ZNSt16allocator_traitsISaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	60f8      	str	r0, [r7, #12]
 800ca2c:	60b9      	str	r1, [r7, #8]
 800ca2e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	68b9      	ldr	r1, [r7, #8]
 800ca34:	68f8      	ldr	r0, [r7, #12]
 800ca36:	f000 fa42 	bl	800cebe <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEE10deallocateEPS6_j>
 800ca3a:	bf00      	nop
 800ca3c:	3710      	adds	r7, #16
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}

0800ca42 <_ZN9__gnu_cxx16__aligned_membufIPN7desenet6sensor19AbstractApplicationEE6_M_ptrEv>:
      _M_ptr() noexcept
 800ca42:	b580      	push	{r7, lr}
 800ca44:	b082      	sub	sp, #8
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f000 fa44 	bl	800ced8 <_ZN9__gnu_cxx16__aligned_membufIPN7desenet6sensor19AbstractApplicationEE7_M_addrEv>
 800ca50:	4603      	mov	r3, r0
 800ca52:	4618      	mov	r0, r3
 800ca54:	3708      	adds	r7, #8
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}

0800ca5a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEE7destroyIS5_EEvPT_>:
	destroy(_Up* __p)
 800ca5a:	b480      	push	{r7}
 800ca5c:	b083      	sub	sp, #12
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	6078      	str	r0, [r7, #4]
 800ca62:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 800ca64:	bf00      	nop
 800ca66:	370c      	adds	r7, #12
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr

0800ca70 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b084      	sub	sp, #16
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	60f8      	str	r0, [r7, #12]
 800ca78:	60b9      	str	r1, [r7, #8]
 800ca7a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800ca7c:	687a      	ldr	r2, [r7, #4]
 800ca7e:	68b9      	ldr	r1, [r7, #8]
 800ca80:	68f8      	ldr	r0, [r7, #12]
 800ca82:	f000 fa34 	bl	800ceee <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEE10deallocateEPS6_j>
 800ca86:	bf00      	nop
 800ca88:	3710      	adds	r7, #16
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}

0800ca8e <_ZSt4moveIRNSt8__detail17_List_node_headerEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800ca8e:	b480      	push	{r7}
 800ca90:	b083      	sub	sp, #12
 800ca92:	af00      	add	r7, sp, #0
 800ca94:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	4618      	mov	r0, r3
 800ca9a:	370c      	adds	r7, #12
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <_ZSt18__do_alloc_on_moveISaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEEvRT_S8_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 800cab0:	68b8      	ldr	r0, [r7, #8]
 800cab2:	f000 fa29 	bl	800cf08 <_ZSt4moveIRSaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEEONSt16remove_referenceIT_E4typeEOS9_>
 800cab6:	bf00      	nop
 800cab8:	3710      	adds	r7, #16
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <_ZNSt11_Tuple_implILj0EJPN7desenet6sensor13NetworkEntityESt12_PlaceholderILi1EES4_ILi2EES4_ILi3EES4_ILi4EEEEC1IS3_JRKS5_RKS6_RKS7_RKS8_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800cabe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cac0:	b087      	sub	sp, #28
 800cac2:	af02      	add	r7, sp, #8
 800cac4:	60f8      	str	r0, [r7, #12]
 800cac6:	60b9      	str	r1, [r7, #8]
 800cac8:	607a      	str	r2, [r7, #4]
 800caca:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f7ff faea 	bl	800c0a6 <_ZSt7forwardIRKSt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800cad2:	4604      	mov	r4, r0
 800cad4:	6838      	ldr	r0, [r7, #0]
 800cad6:	f7ff faf1 	bl	800c0bc <_ZSt7forwardIRKSt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800cada:	4605      	mov	r5, r0
 800cadc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cade:	f7ff faf8 	bl	800c0d2 <_ZSt7forwardIRKSt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800cae2:	4606      	mov	r6, r0
 800cae4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cae6:	f7ff faff 	bl	800c0e8 <_ZSt7forwardIRKSt12_PlaceholderILi4EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800caea:	4603      	mov	r3, r0
 800caec:	9300      	str	r3, [sp, #0]
 800caee:	4633      	mov	r3, r6
 800caf0:	462a      	mov	r2, r5
 800caf2:	4621      	mov	r1, r4
 800caf4:	68f8      	ldr	r0, [r7, #12]
 800caf6:	f000 fa12 	bl	800cf1e <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EES0_ILi4EEEEC1ERKS1_RKS2_RKS3_RKS4_>
 800cafa:	68fc      	ldr	r4, [r7, #12]
 800cafc:	68b8      	ldr	r0, [r7, #8]
 800cafe:	f7ff fac7 	bl	800c090 <_ZSt7forwardIPN7desenet6sensor13NetworkEntityEEOT_RNSt16remove_referenceIS4_E4typeE>
 800cb02:	4603      	mov	r3, r0
 800cb04:	4619      	mov	r1, r3
 800cb06:	4620      	mov	r0, r4
 800cb08:	f7ff fdc0 	bl	800c68c <_ZNSt10_Head_baseILj0EPN7desenet6sensor13NetworkEntityELb0EEC1IS3_EEOT_>
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3714      	adds	r7, #20
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb16 <_ZNSt10_Head_baseILj0EPN7desenet6sensor13NetworkEntityELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800cb16:	b480      	push	{r7}
 800cb18:	b083      	sub	sp, #12
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	6078      	str	r0, [r7, #4]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	4618      	mov	r0, r3
 800cb22:	370c      	adds	r7, #12
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr

0800cb2c <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EES0_ILi4EEEE7_M_tailERS5_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 800cb2c:	b480      	push	{r7}
 800cb2e:	b083      	sub	sp, #12
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4618      	mov	r0, r3
 800cb38:	370c      	adds	r7, #12
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb40:	4770      	bx	lr

0800cb42 <_ZSt4moveIRSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES1_ILi3EES1_ILi4EEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 800cb42:	b480      	push	{r7}
 800cb44:	b083      	sub	sp, #12
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	370c      	adds	r7, #12
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr

0800cb58 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EES0_ILi4EEEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 f9f2 	bl	800cf4a <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>
 800cb66:	4603      	mov	r3, r0
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cb70:	b480      	push	{r7}
 800cb72:	b083      	sub	sp, #12
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	370c      	adds	r7, #12
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb84:	4770      	bx	lr

0800cb86 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EES0_ILi4EEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 800cb86:	b580      	push	{r7, lr}
 800cb88:	b082      	sub	sp, #8
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	6078      	str	r0, [r7, #4]
 800cb8e:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 800cb90:	6838      	ldr	r0, [r7, #0]
 800cb92:	f000 f9e5 	bl	800cf60 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EES0_ILi4EEEE7_M_tailERS4_>
 800cb96:	4603      	mov	r3, r0
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f000 f9ec 	bl	800cf76 <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EES1_ILi4EEEEEONSt16remove_referenceIT_E4typeEOS7_>
 800cb9e:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 800cba0:	4619      	mov	r1, r3
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f000 fa09 	bl	800cfba <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EES0_ILi4EEEEC1EOS3_>
 800cba8:	6838      	ldr	r0, [r7, #0]
 800cbaa:	f000 f9ef 	bl	800cf8c <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EES0_ILi4EEEE7_M_headERS4_>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f000 f9f7 	bl	800cfa4 <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	4619      	mov	r1, r3
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f000 fa1f 	bl	800cffe <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3708      	adds	r7, #8
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}

0800cbca <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800cbca:	b580      	push	{r7, lr}
 800cbcc:	b082      	sub	sp, #8
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
 800cbd2:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 800cbd4:	6838      	ldr	r0, [r7, #0]
 800cbd6:	f7ff ffcb 	bl	800cb70 <_ZSt7forwardISt12_PlaceholderILi1EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3708      	adds	r7, #8
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEEERKT_v>:
      _M_access() const
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b082      	sub	sp, #8
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f7fe fad8 	bl	800b1a2 <_ZNKSt9_Any_data9_M_accessEv>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3708      	adds	r7, #8
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <_ZSt16forward_as_tupleIJRN7desenet22NetworkInterfaceDriverEmPKhjEESt5tupleIJDpOT_EES8_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 800cbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbfe:	b087      	sub	sp, #28
 800cc00:	af02      	add	r7, sp, #8
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	60b9      	str	r1, [r7, #8]
 800cc06:	607a      	str	r2, [r7, #4]
 800cc08:	603b      	str	r3, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 800cc0a:	68b8      	ldr	r0, [r7, #8]
 800cc0c:	f7ff fd78 	bl	800c700 <_ZSt7forwardIRN7desenet22NetworkInterfaceDriverEEOT_RNSt16remove_referenceIS3_E4typeE>
 800cc10:	4604      	mov	r4, r0
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f7ff fd7f 	bl	800c716 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800cc18:	4605      	mov	r5, r0
 800cc1a:	6838      	ldr	r0, [r7, #0]
 800cc1c:	f7ff fd86 	bl	800c72c <_ZSt7forwardIPKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800cc20:	4606      	mov	r6, r0
 800cc22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc24:	f7ff fd8d 	bl	800c742 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	9300      	str	r3, [sp, #0]
 800cc2c:	4633      	mov	r3, r6
 800cc2e:	462a      	mov	r2, r5
 800cc30:	4621      	mov	r1, r4
 800cc32:	68f8      	ldr	r0, [r7, #12]
 800cc34:	f000 f9f0 	bl	800d018 <_ZNSt5tupleIJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEC1IJS2_mS5_jELb1EEEDpOT_>
 800cc38:	68f8      	ldr	r0, [r7, #12]
 800cc3a:	3714      	adds	r7, #20
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc40 <_ZNSt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS0_22NetworkInterfaceDriverEmPKhjEPS2_St12_PlaceholderILi1EESA_ILi2EESA_ILi3EESA_ILi4EEEE6__callIvJS4_OmOS6_OjEJLj0ELj1ELj2ELj3ELj4EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 800cc40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc44:	b08d      	sub	sp, #52	; 0x34
 800cc46:	af02      	add	r7, sp, #8
 800cc48:	60f8      	str	r0, [r7, #12]
 800cc4a:	60b9      	str	r1, [r7, #8]
 800cc4c:	713a      	strb	r2, [r7, #4]
	  return std::__invoke(_M_f,
 800cc4e:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	3308      	adds	r3, #8
 800cc54:	4618      	mov	r0, r3
 800cc56:	f000 fa05 	bl	800d064 <_ZSt3getILj0EJPN7desenet6sensor13NetworkEntityESt12_PlaceholderILi1EES4_ILi2EES4_ILi3EES4_ILi4EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSD_>
 800cc5a:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 800cc5c:	f107 0314 	add.w	r3, r7, #20
 800cc60:	68ba      	ldr	r2, [r7, #8]
 800cc62:	4618      	mov	r0, r3
 800cc64:	f000 fa0b 	bl	800d07e <_ZNVKSt3_MuIPN7desenet6sensor13NetworkEntityELb0ELb0EEclIRS3_St5tupleIJRNS0_22NetworkInterfaceDriverEOmOPKhOjEEEEOT_SH_RT0_>
 800cc68:	4606      	mov	r6, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	3308      	adds	r3, #8
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f000 fa13 	bl	800d09a <_ZSt3getILj1EJPN7desenet6sensor13NetworkEntityESt12_PlaceholderILi1EES4_ILi2EES4_ILi3EES4_ILi4EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSD_>
 800cc74:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 800cc76:	f107 0318 	add.w	r3, r7, #24
 800cc7a:	68ba      	ldr	r2, [r7, #8]
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f000 fa18 	bl	800d0b2 <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESG_EE4type4typeERVKS1_RSG_>
 800cc82:	4680      	mov	r8, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	3308      	adds	r3, #8
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f000 fa24 	bl	800d0d6 <_ZSt3getILj2EJPN7desenet6sensor13NetworkEntityESt12_PlaceholderILi1EES4_ILi2EES4_ILi3EES4_ILi4EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSD_>
 800cc8e:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 800cc90:	f107 031c 	add.w	r3, r7, #28
 800cc94:	68ba      	ldr	r2, [r7, #8]
 800cc96:	4618      	mov	r0, r3
 800cc98:	f000 fa29 	bl	800d0ee <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESG_EE4type4typeERVKS1_RSG_>
 800cc9c:	4681      	mov	r9, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	3308      	adds	r3, #8
 800cca2:	4618      	mov	r0, r3
 800cca4:	f000 fa35 	bl	800d112 <_ZSt3getILj3EJPN7desenet6sensor13NetworkEntityESt12_PlaceholderILi1EES4_ILi2EES4_ILi3EES4_ILi4EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSD_>
 800cca8:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 800ccaa:	f107 0320 	add.w	r3, r7, #32
 800ccae:	68ba      	ldr	r2, [r7, #8]
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f000 fa3a 	bl	800d12a <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESG_EE4type4typeERVKS1_RSG_>
 800ccb6:	4605      	mov	r5, r0
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	3308      	adds	r3, #8
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f000 fa46 	bl	800d14e <_ZSt3getILj4EJPN7desenet6sensor13NetworkEntityESt12_PlaceholderILi1EES4_ILi2EES4_ILi3EES4_ILi4EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSD_>
 800ccc2:	4601      	mov	r1, r0
	  return std::__invoke(_M_f,
 800ccc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ccc8:	68ba      	ldr	r2, [r7, #8]
 800ccca:	4618      	mov	r0, r3
 800cccc:	f000 fa4b 	bl	800d166 <_ZNVKSt3_MuISt12_PlaceholderILi4EELb0ELb1EEclISt5tupleIJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEEEONSt9enable_ifIXltLj3EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj3ESG_EE4type4typeERVKS1_RSG_>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	9301      	str	r3, [sp, #4]
 800ccd4:	9500      	str	r5, [sp, #0]
 800ccd6:	464b      	mov	r3, r9
 800ccd8:	4642      	mov	r2, r8
 800ccda:	4631      	mov	r1, r6
 800ccdc:	4620      	mov	r0, r4
 800ccde:	f000 fa54 	bl	800d18a <_ZSt8__invokeIRMN7desenet6sensor13NetworkEntityEFvRNS0_22NetworkInterfaceDriverEmPKhjEJRPS2_S4_mS6_jEENSt15__invoke_resultIT_JDpT0_EE4typeEOSD_DpOSE_>
	      );
 800cce2:	bf00      	nop
	}
 800cce4:	372c      	adds	r7, #44	; 0x2c
 800cce6:	46bd      	mov	sp, r7
 800cce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ccec <_ZNKSt9_Any_data9_M_accessIPKSt5_BindIFMN7desenet6sensor13NetworkEntityEFvRNS2_22NetworkInterfaceDriverEmPKhjEPS4_St12_PlaceholderILi1EESC_ILi2EESC_ILi3EESC_ILi4EEEEEERKT_v>:
      _M_access() const
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b082      	sub	sp, #8
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f7fe fa54 	bl	800b1a2 <_ZNKSt9_Any_data9_M_accessEv>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3708      	adds	r7, #8
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <_ZNSt7__cxx1110_List_baseIPN7desenet6sensor19AbstractApplicationESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b082      	sub	sp, #8
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2101      	movs	r1, #1
 800cd10:	4618      	mov	r0, r3
 800cd12:	f000 fa68 	bl	800d1e6 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEEE8allocateERS6_j>
 800cd16:	4603      	mov	r3, r0
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3708      	adds	r7, #8
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b084      	sub	sp, #16
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	60f8      	str	r0, [r7, #12]
 800cd28:	60b9      	str	r1, [r7, #8]
 800cd2a:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800cd2c:	68b8      	ldr	r0, [r7, #8]
 800cd2e:	f000 fa69 	bl	800d204 <_ZSt11__addressofISaISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEEEPT_RS7_>
 800cd32:	4602      	mov	r2, r0
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	601a      	str	r2, [r3, #0]
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	605a      	str	r2, [r3, #4]
      { }
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	4618      	mov	r0, r3
 800cd42:	3710      	adds	r7, #16
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEEED1Ev>:
      ~__allocated_ptr()
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	685b      	ldr	r3, [r3, #4]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d007      	beq.n	800cd68 <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6818      	ldr	r0, [r3, #0]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	685b      	ldr	r3, [r3, #4]
 800cd60:	2201      	movs	r2, #1
 800cd62:	4619      	mov	r1, r3
 800cd64:	f7ff fe84 	bl	800ca70 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEEE10deallocateERS6_PS5_j>
      }
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3708      	adds	r7, #8
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b084      	sub	sp, #16
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	60f8      	str	r0, [r7, #12]
 800cd7a:	60b9      	str	r1, [r7, #8]
 800cd7c:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f7ff fd53 	bl	800c82a <_ZSt7forwardIRKPN7desenet6sensor19AbstractApplicationEEOT_RNSt16remove_referenceIS6_E4typeE>
 800cd84:	4603      	mov	r3, r0
 800cd86:	461a      	mov	r2, r3
 800cd88:	68b9      	ldr	r1, [r7, #8]
 800cd8a:	68f8      	ldr	r0, [r7, #12]
 800cd8c:	f000 fa45 	bl	800d21a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>
 800cd90:	bf00      	nop
 800cd92:	3710      	adds	r7, #16
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <_ZNSt15__allocated_ptrISaISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800cd98:	b480      	push	{r7}
 800cd9a:	b083      	sub	sp, #12
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2200      	movs	r2, #0
 800cda6:	605a      	str	r2, [r3, #4]
	return *this;
 800cda8:	687b      	ldr	r3, [r7, #4]
      }
 800cdaa:	4618      	mov	r0, r3
 800cdac:	370c      	adds	r7, #12
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr

0800cdb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPhZNK3hei12SharedBufferIhE4copyEvEUlS4_E_vEET_T0_>:
	__shared_count(_Ptr __p, _Deleter __d)
 800cdb6:	b5b0      	push	{r4, r5, r7, lr}
 800cdb8:	b086      	sub	sp, #24
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	60f8      	str	r0, [r7, #12]
 800cdbe:	60b9      	str	r1, [r7, #8]
 800cdc0:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p, std::move(__d), allocator<void>())
 800cdc2:	1d3b      	adds	r3, r7, #4
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f7ff fd80 	bl	800c8ca <_ZSt4moveIRZNK3hei12SharedBufferIhE4copyEvEUlPhE_EONSt16remove_referenceIT_E4typeEOS7_>
 800cdca:	462b      	mov	r3, r5
 800cdcc:	4622      	mov	r2, r4
 800cdce:	68b9      	ldr	r1, [r7, #8]
 800cdd0:	68f8      	ldr	r0, [r7, #12]
 800cdd2:	f000 fa38 	bl	800d246 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPhZNK3hei12SharedBufferIhE4copyEvEUlS4_E_SaIvEvEET_T0_T1_>
	{ }
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3718      	adds	r7, #24
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bdb0      	pop	{r4, r5, r7, pc}

0800cde0 <_ZNSt7__cxx1110_List_baseIN7desenet6sensor13NetworkEntity12EventElementESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b082      	sub	sp, #8
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2101      	movs	r1, #1
 800cdec:	4618      	mov	r0, r3
 800cdee:	f000 fa75 	bl	800d2dc <_ZNSt16allocator_traitsISaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEE8allocateERS6_j>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3708      	adds	r7, #8
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <_ZNSt15__allocated_ptrISaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800ce08:	68b8      	ldr	r0, [r7, #8]
 800ce0a:	f000 fa76 	bl	800d2fa <_ZSt11__addressofISaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEEPT_RS7_>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	601a      	str	r2, [r3, #0]
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	605a      	str	r2, [r3, #4]
      { }
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3710      	adds	r7, #16
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}

0800ce24 <_ZNSt15__allocated_ptrISaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEED1Ev>:
      ~__allocated_ptr()
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d007      	beq.n	800ce44 <_ZNSt15__allocated_ptrISaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6818      	ldr	r0, [r3, #0]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	685b      	ldr	r3, [r3, #4]
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	4619      	mov	r1, r3
 800ce40:	f7ff fdf0 	bl	800ca24 <_ZNSt16allocator_traitsISaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEE10deallocateERS6_PS5_j>
      }
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	4618      	mov	r0, r3
 800ce48:	3708      	adds	r7, #8
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}

0800ce4e <_ZNSt16allocator_traitsISaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800ce4e:	b580      	push	{r7, lr}
 800ce50:	b084      	sub	sp, #16
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	60f8      	str	r0, [r7, #12]
 800ce56:	60b9      	str	r1, [r7, #8]
 800ce58:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f7ff fd5d 	bl	800c91a <_ZSt7forwardIRKN7desenet6sensor13NetworkEntity12EventElementEEOT_RNSt16remove_referenceIS6_E4typeE>
 800ce60:	4603      	mov	r3, r0
 800ce62:	461a      	mov	r2, r3
 800ce64:	68b9      	ldr	r1, [r7, #8]
 800ce66:	68f8      	ldr	r0, [r7, #12]
 800ce68:	f000 fa68 	bl	800d33c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>
 800ce6c:	bf00      	nop
 800ce6e:	3710      	adds	r7, #16
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}

0800ce74 <_ZNSt15__allocated_ptrISaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800ce74:	b480      	push	{r7}
 800ce76:	b083      	sub	sp, #12
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2200      	movs	r2, #0
 800ce82:	605a      	str	r2, [r3, #4]
	return *this;
 800ce84:	687b      	ldr	r3, [r7, #4]
      }
 800ce86:	4618      	mov	r0, r3
 800ce88:	370c      	adds	r7, #12
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr

0800ce92 <_ZNK9__gnu_cxx16__aligned_membufIPN7desenet6sensor19AbstractApplicationEE7_M_addrEv>:
      _M_addr() const noexcept
 800ce92:	b480      	push	{r7}
 800ce94:	b083      	sub	sp, #12
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	370c      	adds	r7, #12
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr

0800cea8 <_ZN9__gnu_cxx16__aligned_membufIN7desenet6sensor13NetworkEntity12EventElementEE7_M_addrEv>:
      _M_addr() noexcept
 800cea8:	b480      	push	{r7}
 800ceaa:	b083      	sub	sp, #12
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	370c      	adds	r7, #12
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr

0800cebe <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 800cebe:	b580      	push	{r7, lr}
 800cec0:	b084      	sub	sp, #16
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	60f8      	str	r0, [r7, #12]
 800cec6:	60b9      	str	r1, [r7, #8]
 800cec8:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800ceca:	68b8      	ldr	r0, [r7, #8]
 800cecc:	f009 fac6 	bl	801645c <_ZdlPv>
      }
 800ced0:	bf00      	nop
 800ced2:	3710      	adds	r7, #16
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <_ZN9__gnu_cxx16__aligned_membufIPN7desenet6sensor19AbstractApplicationEE7_M_addrEv>:
      _M_addr() noexcept
 800ced8:	b480      	push	{r7}
 800ceda:	b083      	sub	sp, #12
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	4618      	mov	r0, r3
 800cee4:	370c      	adds	r7, #12
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr

0800ceee <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b084      	sub	sp, #16
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	60f8      	str	r0, [r7, #12]
 800cef6:	60b9      	str	r1, [r7, #8]
 800cef8:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800cefa:	68b8      	ldr	r0, [r7, #8]
 800cefc:	f009 faae 	bl	801645c <_ZdlPv>
      }
 800cf00:	bf00      	nop
 800cf02:	3710      	adds	r7, #16
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <_ZSt4moveIRSaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800cf08:	b480      	push	{r7}
 800cf0a:	b083      	sub	sp, #12
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	4618      	mov	r0, r3
 800cf14:	370c      	adds	r7, #12
 800cf16:	46bd      	mov	sp, r7
 800cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1c:	4770      	bx	lr

0800cf1e <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EES0_ILi4EEEEC1ERKS1_RKS2_RKS3_RKS4_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 800cf1e:	b580      	push	{r7, lr}
 800cf20:	b084      	sub	sp, #16
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	60f8      	str	r0, [r7, #12]
 800cf26:	60b9      	str	r1, [r7, #8]
 800cf28:	607a      	str	r2, [r7, #4]
 800cf2a:	603b      	str	r3, [r7, #0]
      : _Inherited(__tail...), _Base(__head) { }
 800cf2c:	69bb      	ldr	r3, [r7, #24]
 800cf2e:	683a      	ldr	r2, [r7, #0]
 800cf30:	6879      	ldr	r1, [r7, #4]
 800cf32:	68f8      	ldr	r0, [r7, #12]
 800cf34:	f000 fa1a 	bl	800d36c <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EES0_ILi4EEEEC1ERKS1_RKS2_RKS3_>
 800cf38:	68b9      	ldr	r1, [r7, #8]
 800cf3a:	68f8      	ldr	r0, [r7, #12]
 800cf3c:	f000 fa2b 	bl	800d396 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	4618      	mov	r0, r3
 800cf44:	3710      	adds	r7, #16
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}

0800cf4a <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 800cf4a:	b480      	push	{r7}
 800cf4c:	b083      	sub	sp, #12
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	4618      	mov	r0, r3
 800cf56:	370c      	adds	r7, #12
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EES0_ILi4EEEE7_M_tailERS4_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 800cf60:	b480      	push	{r7}
 800cf62:	b083      	sub	sp, #12
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	370c      	adds	r7, #12
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr

0800cf76 <_ZSt4moveIRSt11_Tuple_implILj3EJSt12_PlaceholderILi3EES1_ILi4EEEEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800cf76:	b480      	push	{r7}
 800cf78:	b083      	sub	sp, #12
 800cf7a:	af00      	add	r7, sp, #0
 800cf7c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	4618      	mov	r0, r3
 800cf82:	370c      	adds	r7, #12
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr

0800cf8c <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EES0_ILi4EEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f000 fa0a 	bl	800d3ae <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	4618      	mov	r0, r3
 800cfb0:	370c      	adds	r7, #12
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb8:	4770      	bx	lr

0800cfba <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EES0_ILi4EEEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 800cfba:	b580      	push	{r7, lr}
 800cfbc:	b082      	sub	sp, #8
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
 800cfc2:	6039      	str	r1, [r7, #0]
      : _Inherited(std::move(_M_tail(__in))),
 800cfc4:	6838      	ldr	r0, [r7, #0]
 800cfc6:	f000 f9fd 	bl	800d3c4 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EES0_ILi4EEEE7_M_tailERS3_>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f000 fa04 	bl	800d3da <_ZSt4moveIRSt11_Tuple_implILj4EJSt12_PlaceholderILi4EEEEEONSt16remove_referenceIT_E4typeEOS6_>
 800cfd2:	4603      	mov	r3, r0
	_Base(std::forward<_Head>(_M_head(__in))) { }
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f000 fa21 	bl	800d41e <_ZNSt11_Tuple_implILj4EJSt12_PlaceholderILi4EEEEC1EOS2_>
 800cfdc:	6838      	ldr	r0, [r7, #0]
 800cfde:	f000 fa07 	bl	800d3f0 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EES0_ILi4EEEE7_M_headERS3_>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f000 fa0f 	bl	800d408 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800cfea:	4603      	mov	r3, r0
 800cfec:	4619      	mov	r1, r3
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f000 fa2b 	bl	800d44a <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	4618      	mov	r0, r3
 800cff8:	3708      	adds	r7, #8
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}

0800cffe <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800cffe:	b580      	push	{r7, lr}
 800d000:	b082      	sub	sp, #8
 800d002:	af00      	add	r7, sp, #0
 800d004:	6078      	str	r0, [r7, #4]
 800d006:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 800d008:	6838      	ldr	r0, [r7, #0]
 800d00a:	f7ff ffcb 	bl	800cfa4 <_ZSt7forwardISt12_PlaceholderILi2EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	4618      	mov	r0, r3
 800d012:	3708      	adds	r7, #8
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <_ZNSt5tupleIJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEC1IJS2_mS5_jELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 800d018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d01c:	b086      	sub	sp, #24
 800d01e:	af02      	add	r7, sp, #8
 800d020:	60f8      	str	r0, [r7, #12]
 800d022:	60b9      	str	r1, [r7, #8]
 800d024:	607a      	str	r2, [r7, #4]
 800d026:	603b      	str	r3, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 800d028:	68fc      	ldr	r4, [r7, #12]
 800d02a:	68b8      	ldr	r0, [r7, #8]
 800d02c:	f7ff fb68 	bl	800c700 <_ZSt7forwardIRN7desenet22NetworkInterfaceDriverEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d030:	4605      	mov	r5, r0
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f7ff fb6f 	bl	800c716 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800d038:	4606      	mov	r6, r0
 800d03a:	6838      	ldr	r0, [r7, #0]
 800d03c:	f7ff fb76 	bl	800c72c <_ZSt7forwardIPKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800d040:	4680      	mov	r8, r0
 800d042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d044:	f7ff fb7d 	bl	800c742 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d048:	4603      	mov	r3, r0
 800d04a:	9300      	str	r3, [sp, #0]
 800d04c:	4643      	mov	r3, r8
 800d04e:	4632      	mov	r2, r6
 800d050:	4629      	mov	r1, r5
 800d052:	4620      	mov	r0, r4
 800d054:	f000 fa06 	bl	800d464 <_ZNSt11_Tuple_implILj0EJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEC1IS2_JmS5_jEvEEOT_DpOT0_>
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	4618      	mov	r0, r3
 800d05c:	3710      	adds	r7, #16
 800d05e:	46bd      	mov	sp, r7
 800d060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d064 <_ZSt3getILj0EJPN7desenet6sensor13NetworkEntityESt12_PlaceholderILi1EES4_ILi2EES4_ILi3EES4_ILi4EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSD_>:
    get(tuple<_Elements...>& __t) noexcept
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	4618      	mov	r0, r3
 800d070:	f000 fa3e 	bl	800d4f0 <_ZSt12__get_helperILj0EPN7desenet6sensor13NetworkEntityEJSt12_PlaceholderILi1EES4_ILi2EES4_ILi3EES4_ILi4EEEERT0_RSt11_Tuple_implIXT_EJS9_DpT1_EE>
 800d074:	4603      	mov	r3, r0
 800d076:	4618      	mov	r0, r3
 800d078:	3708      	adds	r7, #8
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}

0800d07e <_ZNVKSt3_MuIPN7desenet6sensor13NetworkEntityELb0ELb0EEclIRS3_St5tupleIJRNS0_22NetworkInterfaceDriverEOmOPKhOjEEEEOT_SH_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 800d07e:	b580      	push	{r7, lr}
 800d080:	b084      	sub	sp, #16
 800d082:	af00      	add	r7, sp, #0
 800d084:	60f8      	str	r0, [r7, #12]
 800d086:	60b9      	str	r1, [r7, #8]
 800d088:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 800d08a:	68b8      	ldr	r0, [r7, #8]
 800d08c:	f000 fa3c 	bl	800d508 <_ZSt7forwardIRPN7desenet6sensor13NetworkEntityEEOT_RNSt16remove_referenceIS5_E4typeE>
 800d090:	4603      	mov	r3, r0
 800d092:	4618      	mov	r0, r3
 800d094:	3710      	adds	r7, #16
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}

0800d09a <_ZSt3getILj1EJPN7desenet6sensor13NetworkEntityESt12_PlaceholderILi1EES4_ILi2EES4_ILi3EES4_ILi4EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSD_>:
    get(tuple<_Elements...>& __t) noexcept
 800d09a:	b580      	push	{r7, lr}
 800d09c:	b082      	sub	sp, #8
 800d09e:	af00      	add	r7, sp, #0
 800d0a0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f000 fa3b 	bl	800d51e <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EES0_ILi4EEEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3708      	adds	r7, #8
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}

0800d0b2 <_ZNVKSt3_MuISt12_PlaceholderILi1EELb0ELb1EEclISt5tupleIJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEEEONSt9enable_ifIXltLj0EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj0ESG_EE4type4typeERVKS1_RSG_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 800d0b2:	b580      	push	{r7, lr}
 800d0b4:	b084      	sub	sp, #16
 800d0b6:	af00      	add	r7, sp, #0
 800d0b8:	60f8      	str	r0, [r7, #12]
 800d0ba:	60b9      	str	r1, [r7, #8]
 800d0bc:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f000 fa39 	bl	800d536 <_ZSt4moveIRSt5tupleIJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEEONSt16remove_referenceIT_E4typeEOSC_>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f000 fa40 	bl	800d54c <_ZSt3getILj0EJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOSC_>
 800d0cc:	4603      	mov	r3, r0
	}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}

0800d0d6 <_ZSt3getILj2EJPN7desenet6sensor13NetworkEntityESt12_PlaceholderILi1EES4_ILi2EES4_ILi3EES4_ILi4EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSD_>:
    get(tuple<_Elements...>& __t) noexcept
 800d0d6:	b580      	push	{r7, lr}
 800d0d8:	b082      	sub	sp, #8
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f000 fa44 	bl	800d56c <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EES0_ILi4EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3708      	adds	r7, #8
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}

0800d0ee <_ZNVKSt3_MuISt12_PlaceholderILi2EELb0ELb1EEclISt5tupleIJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEEEONSt9enable_ifIXltLj1EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj1ESG_EE4type4typeERVKS1_RSG_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 800d0ee:	b580      	push	{r7, lr}
 800d0f0:	b084      	sub	sp, #16
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	60f8      	str	r0, [r7, #12]
 800d0f6:	60b9      	str	r1, [r7, #8]
 800d0f8:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f000 fa1b 	bl	800d536 <_ZSt4moveIRSt5tupleIJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEEONSt16remove_referenceIT_E4typeEOSC_>
 800d100:	4603      	mov	r3, r0
 800d102:	4618      	mov	r0, r3
 800d104:	f000 fa3e 	bl	800d584 <_ZSt3getILj1EJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOSC_>
 800d108:	4603      	mov	r3, r0
	}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3710      	adds	r7, #16
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <_ZSt3getILj3EJPN7desenet6sensor13NetworkEntityESt12_PlaceholderILi1EES4_ILi2EES4_ILi3EES4_ILi4EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSD_>:
    get(tuple<_Elements...>& __t) noexcept
 800d112:	b580      	push	{r7, lr}
 800d114:	b082      	sub	sp, #8
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 fa42 	bl	800d5a4 <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJS0_ILi4EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800d120:	4603      	mov	r3, r0
 800d122:	4618      	mov	r0, r3
 800d124:	3708      	adds	r7, #8
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <_ZNVKSt3_MuISt12_PlaceholderILi3EELb0ELb1EEclISt5tupleIJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEEEONSt9enable_ifIXltLj2EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj2ESG_EE4type4typeERVKS1_RSG_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b084      	sub	sp, #16
 800d12e:	af00      	add	r7, sp, #0
 800d130:	60f8      	str	r0, [r7, #12]
 800d132:	60b9      	str	r1, [r7, #8]
 800d134:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f000 f9fd 	bl	800d536 <_ZSt4moveIRSt5tupleIJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEEONSt16remove_referenceIT_E4typeEOSC_>
 800d13c:	4603      	mov	r3, r0
 800d13e:	4618      	mov	r0, r3
 800d140:	f000 fa3c 	bl	800d5bc <_ZSt3getILj2EJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOSC_>
 800d144:	4603      	mov	r3, r0
	}
 800d146:	4618      	mov	r0, r3
 800d148:	3710      	adds	r7, #16
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <_ZSt3getILj4EJPN7desenet6sensor13NetworkEntityESt12_PlaceholderILi1EES4_ILi2EES4_ILi3EES4_ILi4EEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSD_>:
    get(tuple<_Elements...>& __t) noexcept
 800d14e:	b580      	push	{r7, lr}
 800d150:	b082      	sub	sp, #8
 800d152:	af00      	add	r7, sp, #0
 800d154:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f000 fa40 	bl	800d5dc <_ZSt12__get_helperILj4ESt12_PlaceholderILi4EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 800d15c:	4603      	mov	r3, r0
 800d15e:	4618      	mov	r0, r3
 800d160:	3708      	adds	r7, #8
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}

0800d166 <_ZNVKSt3_MuISt12_PlaceholderILi4EELb0ELb1EEclISt5tupleIJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEEEONSt9enable_ifIXltLj3EsrSt10tuple_sizeIT_E5valueESt13tuple_elementILj3ESG_EE4type4typeERVKS1_RSG_>:
	operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 800d166:	b580      	push	{r7, lr}
 800d168:	b084      	sub	sp, #16
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	60f8      	str	r0, [r7, #12]
 800d16e:	60b9      	str	r1, [r7, #8]
 800d170:	607a      	str	r2, [r7, #4]
	    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 f9df 	bl	800d536 <_ZSt4moveIRSt5tupleIJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEEONSt16remove_referenceIT_E4typeEOSC_>
 800d178:	4603      	mov	r3, r0
 800d17a:	4618      	mov	r0, r3
 800d17c:	f000 fa3a 	bl	800d5f4 <_ZSt3getILj3EJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOSC_>
 800d180:	4603      	mov	r3, r0
	}
 800d182:	4618      	mov	r0, r3
 800d184:	3710      	adds	r7, #16
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}

0800d18a <_ZSt8__invokeIRMN7desenet6sensor13NetworkEntityEFvRNS0_22NetworkInterfaceDriverEmPKhjEJRPS2_S4_mS6_jEENSt15__invoke_resultIT_JDpT0_EE4typeEOSD_DpOSE_>:
    { return (*std::forward<_Tp>(__t)).*__f; }

  /// Invoke a callable object.
  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
 800d18a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d18e:	b08a      	sub	sp, #40	; 0x28
 800d190:	af04      	add	r7, sp, #16
 800d192:	60f8      	str	r0, [r7, #12]
 800d194:	60b9      	str	r1, [r7, #8]
 800d196:	607a      	str	r2, [r7, #4]
 800d198:	603b      	str	r3, [r7, #0]
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800d19a:	68f8      	ldr	r0, [r7, #12]
 800d19c:	f000 fa3a 	bl	800d614 <_ZSt7forwardIRMN7desenet6sensor13NetworkEntityEFvRNS0_22NetworkInterfaceDriverEmPKhjEEOT_RNSt16remove_referenceISA_E4typeE>
 800d1a0:	4606      	mov	r6, r0
 800d1a2:	68b8      	ldr	r0, [r7, #8]
 800d1a4:	f000 f9b0 	bl	800d508 <_ZSt7forwardIRPN7desenet6sensor13NetworkEntityEEOT_RNSt16remove_referenceIS5_E4typeE>
 800d1a8:	4680      	mov	r8, r0
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f7ff faa8 	bl	800c700 <_ZSt7forwardIRN7desenet22NetworkInterfaceDriverEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d1b0:	4681      	mov	r9, r0
 800d1b2:	6838      	ldr	r0, [r7, #0]
 800d1b4:	f7ff faaf 	bl	800c716 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800d1b8:	4604      	mov	r4, r0
 800d1ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d1bc:	f7ff fab6 	bl	800c72c <_ZSt7forwardIPKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800d1c0:	4605      	mov	r5, r0
 800d1c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d1c4:	f7ff fabd 	bl	800c742 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	9302      	str	r3, [sp, #8]
 800d1cc:	9501      	str	r5, [sp, #4]
 800d1ce:	9400      	str	r4, [sp, #0]
 800d1d0:	464b      	mov	r3, r9
 800d1d2:	4642      	mov	r2, r8
 800d1d4:	4631      	mov	r1, r6
 800d1d6:	4650      	mov	r0, sl
 800d1d8:	f000 fa27 	bl	800d62a <_ZSt13__invoke_implIvRMN7desenet6sensor13NetworkEntityEFvRNS0_22NetworkInterfaceDriverEmPKhjERPS2_JS4_mS6_jEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>
					std::forward<_Args>(__args)...);
 800d1dc:	bf00      	nop
    }
 800d1de:	3718      	adds	r7, #24
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d1e6 <_ZNSt16allocator_traitsISaISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800d1e6:	b580      	push	{r7, lr}
 800d1e8:	b082      	sub	sp, #8
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	6078      	str	r0, [r7, #4]
 800d1ee:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	6839      	ldr	r1, [r7, #0]
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 fa5a 	bl	800d6ae <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEE8allocateEjPKv>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3708      	adds	r7, #8
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}

0800d204 <_ZSt11__addressofISaISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800d204:	b480      	push	{r7}
 800d206:	b083      	sub	sp, #12
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	4618      	mov	r0, r3
 800d210:	370c      	adds	r7, #12
 800d212:	46bd      	mov	sp, r7
 800d214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d218:	4770      	bx	lr

0800d21a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800d21a:	b590      	push	{r4, r7, lr}
 800d21c:	b085      	sub	sp, #20
 800d21e:	af00      	add	r7, sp, #0
 800d220:	60f8      	str	r0, [r7, #12]
 800d222:	60b9      	str	r1, [r7, #8]
 800d224:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f7ff faff 	bl	800c82a <_ZSt7forwardIRKPN7desenet6sensor19AbstractApplicationEEOT_RNSt16remove_referenceIS6_E4typeE>
 800d22c:	4603      	mov	r3, r0
 800d22e:	681c      	ldr	r4, [r3, #0]
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	4619      	mov	r1, r3
 800d234:	2004      	movs	r0, #4
 800d236:	f7fa fa1f 	bl	8007678 <_ZnwjPv>
 800d23a:	4603      	mov	r3, r0
 800d23c:	601c      	str	r4, [r3, #0]
 800d23e:	bf00      	nop
 800d240:	3714      	adds	r7, #20
 800d242:	46bd      	mov	sp, r7
 800d244:	bd90      	pop	{r4, r7, pc}

0800d246 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPhZNK3hei12SharedBufferIhE4copyEvEUlS4_E_SaIvEvEET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 800d246:	b590      	push	{r4, r7, lr}
 800d248:	b08b      	sub	sp, #44	; 0x2c
 800d24a:	af00      	add	r7, sp, #0
 800d24c:	60f8      	str	r0, [r7, #12]
 800d24e:	60b9      	str	r1, [r7, #8]
 800d250:	713a      	strb	r2, [r7, #4]
 800d252:	703b      	strb	r3, [r7, #0]
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2200      	movs	r2, #0
 800d258:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800d25a:	463a      	mov	r2, r7
 800d25c:	f107 031c 	add.w	r3, r7, #28
 800d260:	4611      	mov	r1, r2
 800d262:	4618      	mov	r0, r3
 800d264:	f000 fa44 	bl	800d6f0 <_ZNSaISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 800d268:	f107 0314 	add.w	r3, r7, #20
 800d26c:	f107 021c 	add.w	r2, r7, #28
 800d270:	4611      	mov	r1, r2
 800d272:	4618      	mov	r0, r3
 800d274:	f000 fa55 	bl	800d722 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERSC_>
	      _Sp_cd_type* __mem = __guard.get();
 800d278:	f107 0314 	add.w	r3, r7, #20
 800d27c:	4618      	mov	r0, r3
 800d27e:	f000 fa78 	bl	800d772 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 800d282:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 800d284:	1d3b      	adds	r3, r7, #4
 800d286:	4618      	mov	r0, r3
 800d288:	f7ff fb1f 	bl	800c8ca <_ZSt4moveIRZNK3hei12SharedBufferIhE4copyEvEUlPhE_EONSt16remove_referenceIT_E4typeEOS7_>
 800d28c:	463b      	mov	r3, r7
 800d28e:	4618      	mov	r0, r3
 800d290:	f7fa fe67 	bl	8007f62 <_ZSt4moveIRSaIvEEONSt16remove_referenceIT_E4typeEOS3_>
 800d294:	4604      	mov	r4, r0
 800d296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d298:	4619      	mov	r1, r3
 800d29a:	2010      	movs	r0, #16
 800d29c:	f7fa f9ec 	bl	8007678 <_ZnwjPv>
 800d2a0:	4623      	mov	r3, r4
 800d2a2:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d2a6:	68b9      	ldr	r1, [r7, #8]
 800d2a8:	f000 fa72 	bl	800d790 <_ZNSt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES0_S4_RKS5_>
	      _M_pi = __mem;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2b0:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 800d2b2:	f107 0314 	add.w	r3, r7, #20
 800d2b6:	2100      	movs	r1, #0
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f000 fa8b 	bl	800d7d4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 800d2be:	f107 0314 	add.w	r3, r7, #20
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f000 fa40 	bl	800d748 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800d2c8:	f107 031c 	add.w	r3, r7, #28
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f000 fa1c 	bl	800d70a <_ZNSaISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
	}
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	372c      	adds	r7, #44	; 0x2c
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd90      	pop	{r4, r7, pc}

0800d2dc <_ZNSt16allocator_traitsISaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b082      	sub	sp, #8
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	6839      	ldr	r1, [r7, #0]
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f000 fa81 	bl	800d7f2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEE8allocateEjPKv>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3708      	adds	r7, #8
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}

0800d2fa <_ZSt11__addressofISaISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800d2fa:	b480      	push	{r7}
 800d2fc:	b083      	sub	sp, #12
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	4618      	mov	r0, r3
 800d306:	370c      	adds	r7, #12
 800d308:	46bd      	mov	sp, r7
 800d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30e:	4770      	bx	lr

0800d310 <_ZN7desenet6sensor13NetworkEntity12EventElementC1ERKS2_>:
 800d310:	b580      	push	{r7, lr}
 800d312:	b082      	sub	sp, #8
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
 800d318:	6039      	str	r1, [r7, #0]
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	881a      	ldrh	r2, [r3, #0]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	801a      	strh	r2, [r3, #0]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	1d1a      	adds	r2, r3, #4
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	3304      	adds	r3, #4
 800d32a:	4619      	mov	r1, r3
 800d32c:	4610      	mov	r0, r2
 800d32e:	f7fc f935 	bl	800959c <_ZN3hei12SharedBufferIhEC1ERKS1_>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	4618      	mov	r0, r3
 800d336:	3708      	adds	r7, #8
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEE9constructIS5_JRKS5_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800d33c:	b590      	push	{r4, r7, lr}
 800d33e:	b085      	sub	sp, #20
 800d340:	af00      	add	r7, sp, #0
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	60b9      	str	r1, [r7, #8]
 800d346:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f7ff fae6 	bl	800c91a <_ZSt7forwardIRKN7desenet6sensor13NetworkEntity12EventElementEEOT_RNSt16remove_referenceIS6_E4typeE>
 800d34e:	4604      	mov	r4, r0
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	4619      	mov	r1, r3
 800d354:	2010      	movs	r0, #16
 800d356:	f7fa f98f 	bl	8007678 <_ZnwjPv>
 800d35a:	4603      	mov	r3, r0
 800d35c:	4621      	mov	r1, r4
 800d35e:	4618      	mov	r0, r3
 800d360:	f7ff ffd6 	bl	800d310 <_ZN7desenet6sensor13NetworkEntity12EventElementC1ERKS2_>
 800d364:	bf00      	nop
 800d366:	3714      	adds	r7, #20
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd90      	pop	{r4, r7, pc}

0800d36c <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EES0_ILi4EEEEC1ERKS1_RKS2_RKS3_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	60f8      	str	r0, [r7, #12]
 800d374:	60b9      	str	r1, [r7, #8]
 800d376:	607a      	str	r2, [r7, #4]
 800d378:	603b      	str	r3, [r7, #0]
      : _Inherited(__tail...), _Base(__head) { }
 800d37a:	683a      	ldr	r2, [r7, #0]
 800d37c:	6879      	ldr	r1, [r7, #4]
 800d37e:	68f8      	ldr	r0, [r7, #12]
 800d380:	f000 fa58 	bl	800d834 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EES0_ILi4EEEEC1ERKS1_RKS2_>
 800d384:	68b9      	ldr	r1, [r7, #8]
 800d386:	68f8      	ldr	r0, [r7, #12]
 800d388:	f000 fa67 	bl	800d85a <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	4618      	mov	r0, r3
 800d390:	3710      	adds	r7, #16
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}

0800d396 <_ZNSt10_Head_baseILj1ESt12_PlaceholderILi1EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 800d396:	b480      	push	{r7}
 800d398:	b083      	sub	sp, #12
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	6078      	str	r0, [r7, #4]
 800d39e:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	370c      	adds	r7, #12
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr

0800d3ae <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 800d3ae:	b480      	push	{r7}
 800d3b0:	b083      	sub	sp, #12
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	370c      	adds	r7, #12
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr

0800d3c4 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EES0_ILi4EEEE7_M_tailERS3_>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	370c      	adds	r7, #12
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d8:	4770      	bx	lr

0800d3da <_ZSt4moveIRSt11_Tuple_implILj4EJSt12_PlaceholderILi4EEEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800d3da:	b480      	push	{r7}
 800d3dc:	b083      	sub	sp, #12
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	370c      	adds	r7, #12
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr

0800d3f0 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EES0_ILi4EEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f000 fa3a 	bl	800d872 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>
 800d3fe:	4603      	mov	r3, r0
 800d400:	4618      	mov	r0, r3
 800d402:	3708      	adds	r7, #8
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d408:	b480      	push	{r7}
 800d40a:	b083      	sub	sp, #12
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	4618      	mov	r0, r3
 800d414:	370c      	adds	r7, #12
 800d416:	46bd      	mov	sp, r7
 800d418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41c:	4770      	bx	lr

0800d41e <_ZNSt11_Tuple_implILj4EJSt12_PlaceholderILi4EEEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 800d41e:	b580      	push	{r7, lr}
 800d420:	b082      	sub	sp, #8
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
 800d426:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 800d428:	6838      	ldr	r0, [r7, #0]
 800d42a:	f000 fa2d 	bl	800d888 <_ZNSt11_Tuple_implILj4EJSt12_PlaceholderILi4EEEE7_M_headERS2_>
 800d42e:	4603      	mov	r3, r0
 800d430:	4618      	mov	r0, r3
 800d432:	f000 fa35 	bl	800d8a0 <_ZSt7forwardISt12_PlaceholderILi4EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d436:	4603      	mov	r3, r0
 800d438:	4619      	mov	r1, r3
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f000 fa3b 	bl	800d8b6 <_ZNSt10_Head_baseILj4ESt12_PlaceholderILi4EELb1EEC1IS1_EEOT_>
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	4618      	mov	r0, r3
 800d444:	3708      	adds	r7, #8
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}

0800d44a <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800d44a:	b580      	push	{r7, lr}
 800d44c:	b082      	sub	sp, #8
 800d44e:	af00      	add	r7, sp, #0
 800d450:	6078      	str	r0, [r7, #4]
 800d452:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 800d454:	6838      	ldr	r0, [r7, #0]
 800d456:	f7ff ffd7 	bl	800d408 <_ZSt7forwardISt12_PlaceholderILi3EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	4618      	mov	r0, r3
 800d45e:	3708      	adds	r7, #8
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <_ZNSt11_Tuple_implILj0EJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEC1IS2_JmS5_jEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800d464:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d466:	b085      	sub	sp, #20
 800d468:	af00      	add	r7, sp, #0
 800d46a:	60f8      	str	r0, [r7, #12]
 800d46c:	60b9      	str	r1, [r7, #8]
 800d46e:	607a      	str	r2, [r7, #4]
 800d470:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 800d472:	68fc      	ldr	r4, [r7, #12]
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f7ff f94e 	bl	800c716 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800d47a:	4605      	mov	r5, r0
 800d47c:	6838      	ldr	r0, [r7, #0]
 800d47e:	f7ff f955 	bl	800c72c <_ZSt7forwardIPKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800d482:	4606      	mov	r6, r0
 800d484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d486:	f7ff f95c 	bl	800c742 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d48a:	4603      	mov	r3, r0
 800d48c:	4632      	mov	r2, r6
 800d48e:	4629      	mov	r1, r5
 800d490:	4620      	mov	r0, r4
 800d492:	f000 fa1d 	bl	800d8d0 <_ZNSt11_Tuple_implILj1EJOmOPKhOjEEC1ImJS2_jEvEEOT_DpOT0_>
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f103 040c 	add.w	r4, r3, #12
 800d49c:	68b8      	ldr	r0, [r7, #8]
 800d49e:	f7ff f92f 	bl	800c700 <_ZSt7forwardIRN7desenet22NetworkInterfaceDriverEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	4619      	mov	r1, r3
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	f000 f813 	bl	800d4d2 <_ZNSt10_Head_baseILj0ERN7desenet22NetworkInterfaceDriverELb0EEC1ES2_>
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3714      	adds	r7, #20
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d4b6 <_ZNSt11_Tuple_implILj0EJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEE7_M_headERS8_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800d4b6:	b580      	push	{r7, lr}
 800d4b8:	b082      	sub	sp, #8
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	6078      	str	r0, [r7, #4]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	330c      	adds	r3, #12
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f000 fa29 	bl	800d91a <_ZNSt10_Head_baseILj0ERN7desenet22NetworkInterfaceDriverELb0EE7_M_headERS3_>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3708      	adds	r7, #8
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <_ZNSt10_Head_baseILj0ERN7desenet22NetworkInterfaceDriverELb0EEC1ES2_>:
      constexpr _Head_base(const _Head& __h)
 800d4d2:	b480      	push	{r7}
 800d4d4:	b083      	sub	sp, #12
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	6078      	str	r0, [r7, #4]
 800d4da:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	683a      	ldr	r2, [r7, #0]
 800d4e0:	601a      	str	r2, [r3, #0]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	370c      	adds	r7, #12
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr

0800d4f0 <_ZSt12__get_helperILj0EPN7desenet6sensor13NetworkEntityEJSt12_PlaceholderILi1EES4_ILi2EES4_ILi3EES4_ILi4EEEERT0_RSt11_Tuple_implIXT_EJS9_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f7ff f898 	bl	800c62e <_ZNSt11_Tuple_implILj0EJPN7desenet6sensor13NetworkEntityESt12_PlaceholderILi1EES4_ILi2EES4_ILi3EES4_ILi4EEEE7_M_headERS9_>
 800d4fe:	4603      	mov	r3, r0
 800d500:	4618      	mov	r0, r3
 800d502:	3708      	adds	r7, #8
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}

0800d508 <_ZSt7forwardIRPN7desenet6sensor13NetworkEntityEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d508:	b480      	push	{r7}
 800d50a:	b083      	sub	sp, #12
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	4618      	mov	r0, r3
 800d514:	370c      	adds	r7, #12
 800d516:	46bd      	mov	sp, r7
 800d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51c:	4770      	bx	lr

0800d51e <_ZSt12__get_helperILj1ESt12_PlaceholderILi1EEJS0_ILi2EES0_ILi3EES0_ILi4EEEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d51e:	b580      	push	{r7, lr}
 800d520:	b082      	sub	sp, #8
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f7ff fb16 	bl	800cb58 <_ZNSt11_Tuple_implILj1EJSt12_PlaceholderILi1EES0_ILi2EES0_ILi3EES0_ILi4EEEE7_M_headERS5_>
 800d52c:	4603      	mov	r3, r0
 800d52e:	4618      	mov	r0, r3
 800d530:	3708      	adds	r7, #8
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}

0800d536 <_ZSt4moveIRSt5tupleIJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEEONSt16remove_referenceIT_E4typeEOSC_>:
    move(_Tp&& __t) noexcept
 800d536:	b480      	push	{r7}
 800d538:	b083      	sub	sp, #12
 800d53a:	af00      	add	r7, sp, #0
 800d53c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	4618      	mov	r0, r3
 800d542:	370c      	adds	r7, #12
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr

0800d54c <_ZSt3getILj0EJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOSC_>:
    get(tuple<_Elements...>&& __t) noexcept
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f000 fa15 	bl	800d984 <_ZSt3getILj0EJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>
 800d55a:	4603      	mov	r3, r0
 800d55c:	4618      	mov	r0, r3
 800d55e:	f7ff f8cf 	bl	800c700 <_ZSt7forwardIRN7desenet22NetworkInterfaceDriverEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d562:	4603      	mov	r3, r0
    }
 800d564:	4618      	mov	r0, r3
 800d566:	3708      	adds	r7, #8
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <_ZSt12__get_helperILj2ESt12_PlaceholderILi2EEJS0_ILi3EES0_ILi4EEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f7ff fd09 	bl	800cf8c <_ZNSt11_Tuple_implILj2EJSt12_PlaceholderILi2EES0_ILi3EES0_ILi4EEEE7_M_headERS4_>
 800d57a:	4603      	mov	r3, r0
 800d57c:	4618      	mov	r0, r3
 800d57e:	3708      	adds	r7, #8
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <_ZSt3getILj1EJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOSC_>:
    get(tuple<_Elements...>&& __t) noexcept
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f000 fa06 	bl	800d99e <_ZSt3getILj1EJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>
 800d592:	4603      	mov	r3, r0
 800d594:	4618      	mov	r0, r3
 800d596:	f000 f9da 	bl	800d94e <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>
 800d59a:	4603      	mov	r3, r0
    }
 800d59c:	4618      	mov	r0, r3
 800d59e:	3708      	adds	r7, #8
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <_ZSt12__get_helperILj3ESt12_PlaceholderILi3EEJS0_ILi4EEEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b082      	sub	sp, #8
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f7ff ff1f 	bl	800d3f0 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EES0_ILi4EEEE7_M_headERS3_>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3708      	adds	r7, #8
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <_ZSt3getILj2EJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOSC_>:
    get(tuple<_Elements...>&& __t) noexcept
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b082      	sub	sp, #8
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f000 f9f7 	bl	800d9b8 <_ZSt3getILj2EJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f000 fa00 	bl	800d9d2 <_ZSt7forwardIOPKhEOT_RNSt16remove_referenceIS3_E4typeE>
 800d5d2:	4603      	mov	r3, r0
    }
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	3708      	adds	r7, #8
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}

0800d5dc <_ZSt12__get_helperILj4ESt12_PlaceholderILi4EEJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b082      	sub	sp, #8
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f000 f94f 	bl	800d888 <_ZNSt11_Tuple_implILj4EJSt12_PlaceholderILi4EEEE7_M_headERS2_>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3708      	adds	r7, #8
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <_ZSt3getILj3EJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEONSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEOSC_>:
    get(tuple<_Elements...>&& __t) noexcept
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
      return std::forward<__element_type&&>(std::get<__i>(__t));
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f000 f9f3 	bl	800d9e8 <_ZSt3getILj3EJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>
 800d602:	4603      	mov	r3, r0
 800d604:	4618      	mov	r0, r3
 800d606:	f000 f9fc 	bl	800da02 <_ZSt7forwardIOjEOT_RNSt16remove_referenceIS1_E4typeE>
 800d60a:	4603      	mov	r3, r0
    }
 800d60c:	4618      	mov	r0, r3
 800d60e:	3708      	adds	r7, #8
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <_ZSt7forwardIRMN7desenet6sensor13NetworkEntityEFvRNS0_22NetworkInterfaceDriverEmPKhjEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d614:	b480      	push	{r7}
 800d616:	b083      	sub	sp, #12
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	4618      	mov	r0, r3
 800d620:	370c      	adds	r7, #12
 800d622:	46bd      	mov	sp, r7
 800d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d628:	4770      	bx	lr

0800d62a <_ZSt13__invoke_implIvRMN7desenet6sensor13NetworkEntityEFvRNS0_22NetworkInterfaceDriverEmPKhjERPS2_JS4_mS6_jEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
 800d62a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d62e:	b088      	sub	sp, #32
 800d630:	af02      	add	r7, sp, #8
 800d632:	7538      	strb	r0, [r7, #20]
 800d634:	6139      	str	r1, [r7, #16]
 800d636:	60fa      	str	r2, [r7, #12]
 800d638:	60bb      	str	r3, [r7, #8]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 800d63a:	68f8      	ldr	r0, [r7, #12]
 800d63c:	f7ff ff64 	bl	800d508 <_ZSt7forwardIRPN7desenet6sensor13NetworkEntityEEOT_RNSt16remove_referenceIS5_E4typeE>
 800d640:	4603      	mov	r3, r0
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	693a      	ldr	r2, [r7, #16]
 800d646:	6852      	ldr	r2, [r2, #4]
 800d648:	1052      	asrs	r2, r2, #1
 800d64a:	189d      	adds	r5, r3, r2
 800d64c:	693a      	ldr	r2, [r7, #16]
 800d64e:	6852      	ldr	r2, [r2, #4]
 800d650:	f002 0201 	and.w	r2, r2, #1
 800d654:	2a00      	cmp	r2, #0
 800d656:	d102      	bne.n	800d65e <_ZSt13__invoke_implIvRMN7desenet6sensor13NetworkEntityEFvRNS0_22NetworkInterfaceDriverEmPKhjERPS2_JS4_mS6_jEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x34>
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	681c      	ldr	r4, [r3, #0]
 800d65c:	e008      	b.n	800d670 <_ZSt13__invoke_implIvRMN7desenet6sensor13NetworkEntityEFvRNS0_22NetworkInterfaceDriverEmPKhjERPS2_JS4_mS6_jEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x46>
 800d65e:	693a      	ldr	r2, [r7, #16]
 800d660:	6852      	ldr	r2, [r2, #4]
 800d662:	1052      	asrs	r2, r2, #1
 800d664:	4413      	add	r3, r2
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	693a      	ldr	r2, [r7, #16]
 800d66a:	6812      	ldr	r2, [r2, #0]
 800d66c:	4413      	add	r3, r2
 800d66e:	681c      	ldr	r4, [r3, #0]
 800d670:	68b8      	ldr	r0, [r7, #8]
 800d672:	f7ff f845 	bl	800c700 <_ZSt7forwardIRN7desenet22NetworkInterfaceDriverEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d676:	4680      	mov	r8, r0
 800d678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d67a:	f7ff f84c 	bl	800c716 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800d67e:	4603      	mov	r3, r0
 800d680:	681e      	ldr	r6, [r3, #0]
 800d682:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d684:	f7ff f852 	bl	800c72c <_ZSt7forwardIPKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800d688:	4603      	mov	r3, r0
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	607b      	str	r3, [r7, #4]
 800d68e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d690:	f7ff f857 	bl	800c742 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d694:	4603      	mov	r3, r0
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	9300      	str	r3, [sp, #0]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	4632      	mov	r2, r6
 800d69e:	4641      	mov	r1, r8
 800d6a0:	4628      	mov	r0, r5
 800d6a2:	47a0      	blx	r4
 800d6a4:	bf00      	nop
    }
 800d6a6:	3718      	adds	r7, #24
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d6ae <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b084      	sub	sp, #16
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	60f8      	str	r0, [r7, #12]
 800d6b6:	60b9      	str	r1, [r7, #8]
 800d6b8:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800d6ba:	68f8      	ldr	r0, [r7, #12]
 800d6bc:	f000 f9ac 	bl	800da18 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEE8max_sizeEv>
 800d6c0:	4602      	mov	r2, r0
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	bf8c      	ite	hi
 800d6c8:	2301      	movhi	r3, #1
 800d6ca:	2300      	movls	r3, #0
 800d6cc:	b2db      	uxtb	r3, r3
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d001      	beq.n	800d6d6 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800d6d2:	f008 fefc 	bl	80164ce <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d6d6:	68ba      	ldr	r2, [r7, #8]
 800d6d8:	4613      	mov	r3, r2
 800d6da:	005b      	lsls	r3, r3, #1
 800d6dc:	4413      	add	r3, r2
 800d6de:	009b      	lsls	r3, r3, #2
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f008 fed0 	bl	8016486 <_Znwj>
 800d6e6:	4603      	mov	r3, r0
      }
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3710      	adds	r7, #16
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <_ZNSaISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b082      	sub	sp, #8
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	6039      	str	r1, [r7, #0]
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 f99a 	bl	800da34 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS2_E_SaIvELNS_12_Lock_policyE0EEEC1Ev>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	4618      	mov	r0, r3
 800d704:	3708      	adds	r7, #8
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}

0800d70a <_ZNSaISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800d70a:	b580      	push	{r7, lr}
 800d70c:	b082      	sub	sp, #8
 800d70e:	af00      	add	r7, sp, #0
 800d710:	6078      	str	r0, [r7, #4]
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f000 f999 	bl	800da4a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS2_E_SaIvELNS_12_Lock_policyE0EEED1Ev>
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	4618      	mov	r0, r3
 800d71c:	3708      	adds	r7, #8
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERSC_>:
    __allocate_guarded(_Alloc& __a)
 800d722:	b580      	push	{r7, lr}
 800d724:	b082      	sub	sp, #8
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
 800d72a:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800d72c:	2101      	movs	r1, #1
 800d72e:	6838      	ldr	r0, [r7, #0]
 800d730:	f000 f996 	bl	800da60 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERSA_j>
 800d734:	4603      	mov	r3, r0
 800d736:	461a      	mov	r2, r3
 800d738:	6839      	ldr	r1, [r7, #0]
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f000 f99f 	bl	800da7e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERSA_PS9_>
    }
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	3708      	adds	r7, #8
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}

0800d748 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800d748:	b580      	push	{r7, lr}
 800d74a:	b082      	sub	sp, #8
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d007      	beq.n	800d768 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6818      	ldr	r0, [r3, #0]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	2201      	movs	r2, #1
 800d762:	4619      	mov	r1, r3
 800d764:	f000 f99f 	bl	800daa6 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERSA_PS9_j>
      }
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	4618      	mov	r0, r3
 800d76c:	3708      	adds	r7, #8
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}

0800d772 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 800d772:	b580      	push	{r7, lr}
 800d774:	b082      	sub	sp, #8
 800d776:	af00      	add	r7, sp, #0
 800d778:	6078      	str	r0, [r7, #4]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	685b      	ldr	r3, [r3, #4]
 800d77e:	4618      	mov	r0, r3
 800d780:	f000 f9a0 	bl	800dac4 <_ZSt12__to_addressISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_SB_>
 800d784:	4603      	mov	r3, r0
 800d786:	4618      	mov	r0, r3
 800d788:	3708      	adds	r7, #8
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
	...

0800d790 <_ZNSt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES0_S4_RKS5_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800d790:	b5b0      	push	{r4, r5, r7, lr}
 800d792:	b084      	sub	sp, #16
 800d794:	af00      	add	r7, sp, #0
 800d796:	60f8      	str	r0, [r7, #12]
 800d798:	60b9      	str	r1, [r7, #8]
 800d79a:	713a      	strb	r2, [r7, #4]
 800d79c:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f7fa fc6d 	bl	8008080 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800d7a6:	4a0a      	ldr	r2, [pc, #40]	; (800d7d0 <_ZNSt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES0_S4_RKS5_+0x40>)
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	601a      	str	r2, [r3, #0]
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	f103 040c 	add.w	r4, r3, #12
 800d7b2:	1d3b      	adds	r3, r7, #4
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f7ff f888 	bl	800c8ca <_ZSt4moveIRZNK3hei12SharedBufferIhE4copyEvEUlPhE_EONSt16remove_referenceIT_E4typeEOS7_>
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	462a      	mov	r2, r5
 800d7be:	68b9      	ldr	r1, [r7, #8]
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	f000 f98a 	bl	800dada <_ZNSt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES0_S4_RKS5_>
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3710      	adds	r7, #16
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bdb0      	pop	{r4, r5, r7, pc}
 800d7d0:	0801bf3c 	.word	0x0801bf3c

0800d7d4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	605a      	str	r2, [r3, #4]
	return *this;
 800d7e4:	687b      	ldr	r3, [r7, #4]
      }
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	370c      	adds	r7, #12
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr

0800d7f2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b084      	sub	sp, #16
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	60f8      	str	r0, [r7, #12]
 800d7fa:	60b9      	str	r1, [r7, #8]
 800d7fc:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800d7fe:	68f8      	ldr	r0, [r7, #12]
 800d800:	f000 f988 	bl	800db14 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEE8max_sizeEv>
 800d804:	4602      	mov	r2, r0
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	4293      	cmp	r3, r2
 800d80a:	bf8c      	ite	hi
 800d80c:	2301      	movhi	r3, #1
 800d80e:	2300      	movls	r3, #0
 800d810:	b2db      	uxtb	r3, r3
 800d812:	2b00      	cmp	r3, #0
 800d814:	d001      	beq.n	800d81a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800d816:	f008 fe5a 	bl	80164ce <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d81a:	68ba      	ldr	r2, [r7, #8]
 800d81c:	4613      	mov	r3, r2
 800d81e:	005b      	lsls	r3, r3, #1
 800d820:	4413      	add	r3, r2
 800d822:	00db      	lsls	r3, r3, #3
 800d824:	4618      	mov	r0, r3
 800d826:	f008 fe2e 	bl	8016486 <_Znwj>
 800d82a:	4603      	mov	r3, r0
      }
 800d82c:	4618      	mov	r0, r3
 800d82e:	3710      	adds	r7, #16
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <_ZNSt11_Tuple_implILj3EJSt12_PlaceholderILi3EES0_ILi4EEEEC1ERKS1_RKS2_>:
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	60b9      	str	r1, [r7, #8]
 800d83e:	607a      	str	r2, [r7, #4]
      : _Inherited(__tail...), _Base(__head) { }
 800d840:	6879      	ldr	r1, [r7, #4]
 800d842:	68f8      	ldr	r0, [r7, #12]
 800d844:	f000 f974 	bl	800db30 <_ZNSt11_Tuple_implILj4EJSt12_PlaceholderILi4EEEEC1ERKS1_>
 800d848:	68b9      	ldr	r1, [r7, #8]
 800d84a:	68f8      	ldr	r0, [r7, #12]
 800d84c:	f000 f97e 	bl	800db4c <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	4618      	mov	r0, r3
 800d854:	3710      	adds	r7, #16
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}

0800d85a <_ZNSt10_Head_baseILj2ESt12_PlaceholderILi2EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 800d85a:	b480      	push	{r7}
 800d85c:	b083      	sub	sp, #12
 800d85e:	af00      	add	r7, sp, #0
 800d860:	6078      	str	r0, [r7, #4]
 800d862:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	4618      	mov	r0, r3
 800d868:	370c      	adds	r7, #12
 800d86a:	46bd      	mov	sp, r7
 800d86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d870:	4770      	bx	lr

0800d872 <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 800d872:	b480      	push	{r7}
 800d874:	b083      	sub	sp, #12
 800d876:	af00      	add	r7, sp, #0
 800d878:	6078      	str	r0, [r7, #4]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	4618      	mov	r0, r3
 800d87e:	370c      	adds	r7, #12
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr

0800d888 <_ZNSt11_Tuple_implILj4EJSt12_PlaceholderILi4EEEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800d888:	b580      	push	{r7, lr}
 800d88a:	b082      	sub	sp, #8
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f000 f967 	bl	800db64 <_ZNSt10_Head_baseILj4ESt12_PlaceholderILi4EELb1EE7_M_headERS2_>
 800d896:	4603      	mov	r3, r0
 800d898:	4618      	mov	r0, r3
 800d89a:	3708      	adds	r7, #8
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <_ZSt7forwardISt12_PlaceholderILi4EEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d8a0:	b480      	push	{r7}
 800d8a2:	b083      	sub	sp, #12
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	370c      	adds	r7, #12
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b4:	4770      	bx	lr

0800d8b6 <_ZNSt10_Head_baseILj4ESt12_PlaceholderILi4EELb1EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800d8b6:	b580      	push	{r7, lr}
 800d8b8:	b082      	sub	sp, #8
 800d8ba:	af00      	add	r7, sp, #0
 800d8bc:	6078      	str	r0, [r7, #4]
 800d8be:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 800d8c0:	6838      	ldr	r0, [r7, #0]
 800d8c2:	f7ff ffed 	bl	800d8a0 <_ZSt7forwardISt12_PlaceholderILi4EEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3708      	adds	r7, #8
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <_ZNSt11_Tuple_implILj1EJOmOPKhOjEEC1ImJS2_jEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800d8d0:	b5b0      	push	{r4, r5, r7, lr}
 800d8d2:	b084      	sub	sp, #16
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	60f8      	str	r0, [r7, #12]
 800d8d8:	60b9      	str	r1, [r7, #8]
 800d8da:	607a      	str	r2, [r7, #4]
 800d8dc:	603b      	str	r3, [r7, #0]
	  _Base(std::forward<_UHead>(__head)) { }
 800d8de:	68fc      	ldr	r4, [r7, #12]
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f7fe ff23 	bl	800c72c <_ZSt7forwardIPKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800d8e6:	4605      	mov	r5, r0
 800d8e8:	6838      	ldr	r0, [r7, #0]
 800d8ea:	f7fe ff2a 	bl	800c742 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	4629      	mov	r1, r5
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	f000 f940 	bl	800db7a <_ZNSt11_Tuple_implILj2EJOPKhOjEEC1IS1_JjEvEEOT_DpOT0_>
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	f103 0408 	add.w	r4, r3, #8
 800d900:	68b8      	ldr	r0, [r7, #8]
 800d902:	f7fe ff08 	bl	800c716 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800d906:	4603      	mov	r3, r0
 800d908:	4619      	mov	r1, r3
 800d90a:	4620      	mov	r0, r4
 800d90c:	f000 f82a 	bl	800d964 <_ZNSt10_Head_baseILj1EOmLb0EEC1ImEEOT_>
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	4618      	mov	r0, r3
 800d914:	3710      	adds	r7, #16
 800d916:	46bd      	mov	sp, r7
 800d918:	bdb0      	pop	{r4, r5, r7, pc}

0800d91a <_ZNSt10_Head_baseILj0ERN7desenet22NetworkInterfaceDriverELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800d91a:	b480      	push	{r7}
 800d91c:	b083      	sub	sp, #12
 800d91e:	af00      	add	r7, sp, #0
 800d920:	6078      	str	r0, [r7, #4]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	4618      	mov	r0, r3
 800d928:	370c      	adds	r7, #12
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr

0800d932 <_ZNSt11_Tuple_implILj1EJOmOPKhOjEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800d932:	b580      	push	{r7, lr}
 800d934:	b082      	sub	sp, #8
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	3308      	adds	r3, #8
 800d93e:	4618      	mov	r0, r3
 800d940:	f000 f939 	bl	800dbb6 <_ZNSt10_Head_baseILj1EOmLb0EE7_M_headERS1_>
 800d944:	4603      	mov	r3, r0
 800d946:	4618      	mov	r0, r3
 800d948:	3708      	adds	r7, #8
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}

0800d94e <_ZSt7forwardIOmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d94e:	b480      	push	{r7}
 800d950:	b083      	sub	sp, #12
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	4618      	mov	r0, r3
 800d95a:	370c      	adds	r7, #12
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr

0800d964 <_ZNSt10_Head_baseILj1EOmLb0EEC1ImEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800d96e:	6838      	ldr	r0, [r7, #0]
 800d970:	f7fe fed1 	bl	800c716 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800d974:	4602      	mov	r2, r0
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	601a      	str	r2, [r3, #0]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	4618      	mov	r0, r3
 800d97e:	3708      	adds	r7, #8
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}

0800d984 <_ZSt3getILj0EJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>:
    get(tuple<_Elements...>& __t) noexcept
 800d984:	b580      	push	{r7, lr}
 800d986:	b082      	sub	sp, #8
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	4618      	mov	r0, r3
 800d990:	f000 f93b 	bl	800dc0a <_ZSt12__get_helperILj0ERN7desenet22NetworkInterfaceDriverEJOmOPKhOjEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE>
 800d994:	4603      	mov	r3, r0
 800d996:	4618      	mov	r0, r3
 800d998:	3708      	adds	r7, #8
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}

0800d99e <_ZSt3getILj1EJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>:
    get(tuple<_Elements...>& __t) noexcept
 800d99e:	b580      	push	{r7, lr}
 800d9a0:	b082      	sub	sp, #8
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f000 f93a 	bl	800dc22 <_ZSt12__get_helperILj1EOmJOPKhOjEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3708      	adds	r7, #8
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}

0800d9b8 <_ZSt3getILj2EJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>:
    get(tuple<_Elements...>& __t) noexcept
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b082      	sub	sp, #8
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f000 f939 	bl	800dc3a <_ZSt12__get_helperILj2EOPKhJOjEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3708      	adds	r7, #8
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}

0800d9d2 <_ZSt7forwardIOPKhEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d9d2:	b480      	push	{r7}
 800d9d4:	b083      	sub	sp, #12
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	4618      	mov	r0, r3
 800d9de:	370c      	adds	r7, #12
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e6:	4770      	bx	lr

0800d9e8 <_ZSt3getILj3EJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSC_>:
    get(tuple<_Elements...>& __t) noexcept
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b082      	sub	sp, #8
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f000 f92d 	bl	800dc52 <_ZSt12__get_helperILj3EOjJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3708      	adds	r7, #8
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}

0800da02 <_ZSt7forwardIOjEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800da02:	b480      	push	{r7}
 800da04:	b083      	sub	sp, #12
 800da06:	af00      	add	r7, sp, #0
 800da08:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	4618      	mov	r0, r3
 800da0e:	370c      	adds	r7, #12
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr

0800da18 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800da18:	b480      	push	{r7}
 800da1a:	b083      	sub	sp, #12
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800da20:	4b03      	ldr	r3, [pc, #12]	; (800da30 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIPN7desenet6sensor19AbstractApplicationEEE8max_sizeEv+0x18>)
      }
 800da22:	4618      	mov	r0, r3
 800da24:	370c      	adds	r7, #12
 800da26:	46bd      	mov	sp, r7
 800da28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2c:	4770      	bx	lr
 800da2e:	bf00      	nop
 800da30:	0aaaaaaa 	.word	0x0aaaaaaa

0800da34 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS2_E_SaIvELNS_12_Lock_policyE0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800da34:	b480      	push	{r7}
 800da36:	b083      	sub	sp, #12
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	4618      	mov	r0, r3
 800da40:	370c      	adds	r7, #12
 800da42:	46bd      	mov	sp, r7
 800da44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da48:	4770      	bx	lr

0800da4a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS2_E_SaIvELNS_12_Lock_policyE0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800da4a:	b480      	push	{r7}
 800da4c:	b083      	sub	sp, #12
 800da4e:	af00      	add	r7, sp, #0
 800da50:	6078      	str	r0, [r7, #4]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	4618      	mov	r0, r3
 800da56:	370c      	adds	r7, #12
 800da58:	46bd      	mov	sp, r7
 800da5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5e:	4770      	bx	lr

0800da60 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERSA_j>:
      allocate(allocator_type& __a, size_type __n)
 800da60:	b580      	push	{r7, lr}
 800da62:	b082      	sub	sp, #8
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800da6a:	2200      	movs	r2, #0
 800da6c:	6839      	ldr	r1, [r7, #0]
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f000 f8fb 	bl	800dc6a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS2_E_SaIvELNS_12_Lock_policyE0EEE8allocateEjPKv>
 800da74:	4603      	mov	r3, r0
 800da76:	4618      	mov	r0, r3
 800da78:	3708      	adds	r7, #8
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}

0800da7e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERSA_PS9_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800da7e:	b580      	push	{r7, lr}
 800da80:	b084      	sub	sp, #16
 800da82:	af00      	add	r7, sp, #0
 800da84:	60f8      	str	r0, [r7, #12]
 800da86:	60b9      	str	r1, [r7, #8]
 800da88:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800da8a:	68b8      	ldr	r0, [r7, #8]
 800da8c:	f000 f90b 	bl	800dca6 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSB_>
 800da90:	4602      	mov	r2, r0
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	601a      	str	r2, [r3, #0]
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	605a      	str	r2, [r3, #4]
      { }
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	4618      	mov	r0, r3
 800daa0:	3710      	adds	r7, #16
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}

0800daa6 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERSA_PS9_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800daa6:	b580      	push	{r7, lr}
 800daa8:	b084      	sub	sp, #16
 800daaa:	af00      	add	r7, sp, #0
 800daac:	60f8      	str	r0, [r7, #12]
 800daae:	60b9      	str	r1, [r7, #8]
 800dab0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800dab2:	687a      	ldr	r2, [r7, #4]
 800dab4:	68b9      	ldr	r1, [r7, #8]
 800dab6:	68f8      	ldr	r0, [r7, #12]
 800dab8:	f000 f900 	bl	800dcbc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS2_E_SaIvELNS_12_Lock_policyE0EEE10deallocateEPS9_j>
 800dabc:	bf00      	nop
 800dabe:	3710      	adds	r7, #16
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <_ZSt12__to_addressISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_SB_>:
    __to_address(_Tp* __ptr) noexcept
 800dac4:	b480      	push	{r7}
 800dac6:	b083      	sub	sp, #12
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
      return __ptr;
 800dacc:	687b      	ldr	r3, [r7, #4]
    }
 800dace:	4618      	mov	r0, r3
 800dad0:	370c      	adds	r7, #12
 800dad2:	46bd      	mov	sp, r7
 800dad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad8:	4770      	bx	lr

0800dada <_ZNSt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES0_S4_RKS5_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800dada:	b580      	push	{r7, lr}
 800dadc:	b084      	sub	sp, #16
 800dade:	af00      	add	r7, sp, #0
 800dae0:	60f8      	str	r0, [r7, #12]
 800dae2:	60b9      	str	r1, [r7, #8]
 800dae4:	713a      	strb	r2, [r7, #4]
 800dae6:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800dae8:	1d3b      	adds	r3, r7, #4
 800daea:	4618      	mov	r0, r3
 800daec:	f7fe feed 	bl	800c8ca <_ZSt4moveIRZNK3hei12SharedBufferIhE4copyEvEUlPhE_EONSt16remove_referenceIT_E4typeEOS7_>
 800daf0:	4603      	mov	r3, r0
 800daf2:	4619      	mov	r1, r3
 800daf4:	68f8      	ldr	r0, [r7, #12]
 800daf6:	f000 f8ee 	bl	800dcd6 <_ZNSt14_Sp_ebo_helperILi0EZNK3hei12SharedBufferIhE4copyEvEUlPhE_Lb1EEC1EOS4_>
 800dafa:	6839      	ldr	r1, [r7, #0]
 800dafc:	68f8      	ldr	r0, [r7, #12]
 800dafe:	f7fa fb34 	bl	800816a <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	68ba      	ldr	r2, [r7, #8]
 800db06:	601a      	str	r2, [r3, #0]
	{ }
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	4618      	mov	r0, r3
 800db0c:	3710      	adds	r7, #16
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}
	...

0800db14 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800db14:	b480      	push	{r7}
 800db16:	b083      	sub	sp, #12
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800db1c:	4b03      	ldr	r3, [pc, #12]	; (800db2c <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIN7desenet6sensor13NetworkEntity12EventElementEEE8max_sizeEv+0x18>)
      }
 800db1e:	4618      	mov	r0, r3
 800db20:	370c      	adds	r7, #12
 800db22:	46bd      	mov	sp, r7
 800db24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db28:	4770      	bx	lr
 800db2a:	bf00      	nop
 800db2c:	05555555 	.word	0x05555555

0800db30 <_ZNSt11_Tuple_implILj4EJSt12_PlaceholderILi4EEEEC1ERKS1_>:
      constexpr _Tuple_impl(const _Head& __head)
 800db30:	b580      	push	{r7, lr}
 800db32:	b082      	sub	sp, #8
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 800db3a:	6839      	ldr	r1, [r7, #0]
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f000 f8d7 	bl	800dcf0 <_ZNSt10_Head_baseILj4ESt12_PlaceholderILi4EELb1EEC1ERKS1_>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	4618      	mov	r0, r3
 800db46:	3708      	adds	r7, #8
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}

0800db4c <_ZNSt10_Head_baseILj3ESt12_PlaceholderILi3EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 800db4c:	b480      	push	{r7}
 800db4e:	b083      	sub	sp, #12
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
 800db54:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	4618      	mov	r0, r3
 800db5a:	370c      	adds	r7, #12
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr

0800db64 <_ZNSt10_Head_baseILj4ESt12_PlaceholderILi4EELb1EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 800db64:	b480      	push	{r7}
 800db66:	b083      	sub	sp, #12
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	4618      	mov	r0, r3
 800db70:	370c      	adds	r7, #12
 800db72:	46bd      	mov	sp, r7
 800db74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db78:	4770      	bx	lr

0800db7a <_ZNSt11_Tuple_implILj2EJOPKhOjEEC1IS1_JjEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800db7a:	b590      	push	{r4, r7, lr}
 800db7c:	b085      	sub	sp, #20
 800db7e:	af00      	add	r7, sp, #0
 800db80:	60f8      	str	r0, [r7, #12]
 800db82:	60b9      	str	r1, [r7, #8]
 800db84:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800db86:	68fc      	ldr	r4, [r7, #12]
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f7fe fdda 	bl	800c742 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800db8e:	4603      	mov	r3, r0
 800db90:	4619      	mov	r1, r3
 800db92:	4620      	mov	r0, r4
 800db94:	f000 f8b8 	bl	800dd08 <_ZNSt11_Tuple_implILj3EJOjEEC1IjEEOT_>
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	1d1c      	adds	r4, r3, #4
 800db9c:	68b8      	ldr	r0, [r7, #8]
 800db9e:	f7fe fdc5 	bl	800c72c <_ZSt7forwardIPKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800dba2:	4603      	mov	r3, r0
 800dba4:	4619      	mov	r1, r3
 800dba6:	4620      	mov	r0, r4
 800dba8:	f000 f81f 	bl	800dbea <_ZNSt10_Head_baseILj2EOPKhLb0EEC1IS1_EEOT_>
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3714      	adds	r7, #20
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd90      	pop	{r4, r7, pc}

0800dbb6 <_ZNSt10_Head_baseILj1EOmLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800dbb6:	b480      	push	{r7}
 800dbb8:	b083      	sub	sp, #12
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	6078      	str	r0, [r7, #4]
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	370c      	adds	r7, #12
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbcc:	4770      	bx	lr

0800dbce <_ZNSt11_Tuple_implILj2EJOPKhOjEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dbce:	b580      	push	{r7, lr}
 800dbd0:	b082      	sub	sp, #8
 800dbd2:	af00      	add	r7, sp, #0
 800dbd4:	6078      	str	r0, [r7, #4]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	3304      	adds	r3, #4
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f000 f8a7 	bl	800dd2e <_ZNSt10_Head_baseILj2EOPKhLb0EE7_M_headERS3_>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3708      	adds	r7, #8
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}

0800dbea <_ZNSt10_Head_baseILj2EOPKhLb0EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800dbea:	b580      	push	{r7, lr}
 800dbec:	b082      	sub	sp, #8
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
 800dbf2:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800dbf4:	6838      	ldr	r0, [r7, #0]
 800dbf6:	f7fe fd99 	bl	800c72c <_ZSt7forwardIPKhEOT_RNSt16remove_referenceIS2_E4typeE>
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	601a      	str	r2, [r3, #0]
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	4618      	mov	r0, r3
 800dc04:	3708      	adds	r7, #8
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}

0800dc0a <_ZSt12__get_helperILj0ERN7desenet22NetworkInterfaceDriverEJOmOPKhOjEERT0_RSt11_Tuple_implIXT_EJS8_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800dc0a:	b580      	push	{r7, lr}
 800dc0c:	b082      	sub	sp, #8
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f7ff fc4f 	bl	800d4b6 <_ZNSt11_Tuple_implILj0EJRN7desenet22NetworkInterfaceDriverEOmOPKhOjEE7_M_headERS8_>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3708      	adds	r7, #8
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}

0800dc22 <_ZSt12__get_helperILj1EOmJOPKhOjEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800dc22:	b580      	push	{r7, lr}
 800dc24:	b082      	sub	sp, #8
 800dc26:	af00      	add	r7, sp, #0
 800dc28:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f7ff fe81 	bl	800d932 <_ZNSt11_Tuple_implILj1EJOmOPKhOjEE7_M_headERS5_>
 800dc30:	4603      	mov	r3, r0
 800dc32:	4618      	mov	r0, r3
 800dc34:	3708      	adds	r7, #8
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}

0800dc3a <_ZSt12__get_helperILj2EOPKhJOjEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800dc3a:	b580      	push	{r7, lr}
 800dc3c:	b082      	sub	sp, #8
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f7ff ffc3 	bl	800dbce <_ZNSt11_Tuple_implILj2EJOPKhOjEE7_M_headERS4_>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3708      	adds	r7, #8
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}

0800dc52 <_ZSt12__get_helperILj3EOjJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800dc52:	b580      	push	{r7, lr}
 800dc54:	b082      	sub	sp, #8
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f000 f873 	bl	800dd46 <_ZNSt11_Tuple_implILj3EJOjEE7_M_headERS1_>
 800dc60:	4603      	mov	r3, r0
 800dc62:	4618      	mov	r0, r3
 800dc64:	3708      	adds	r7, #8
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}

0800dc6a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS2_E_SaIvELNS_12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800dc6a:	b580      	push	{r7, lr}
 800dc6c:	b084      	sub	sp, #16
 800dc6e:	af00      	add	r7, sp, #0
 800dc70:	60f8      	str	r0, [r7, #12]
 800dc72:	60b9      	str	r1, [r7, #8]
 800dc74:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800dc76:	68f8      	ldr	r0, [r7, #12]
 800dc78:	f000 f882 	bl	800dd80 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS2_E_SaIvELNS_12_Lock_policyE0EEE8max_sizeEv>
 800dc7c:	4602      	mov	r2, r0
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	4293      	cmp	r3, r2
 800dc82:	bf8c      	ite	hi
 800dc84:	2301      	movhi	r3, #1
 800dc86:	2300      	movls	r3, #0
 800dc88:	b2db      	uxtb	r3, r3
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d001      	beq.n	800dc92 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS2_E_SaIvELNS_12_Lock_policyE0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800dc8e:	f008 fc1e 	bl	80164ce <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	011b      	lsls	r3, r3, #4
 800dc96:	4618      	mov	r0, r3
 800dc98:	f008 fbf5 	bl	8016486 <_Znwj>
 800dc9c:	4603      	mov	r3, r0
      }
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3710      	adds	r7, #16
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}

0800dca6 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSB_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800dca6:	b480      	push	{r7}
 800dca8:	b083      	sub	sp, #12
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	370c      	adds	r7, #12
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcba:	4770      	bx	lr

0800dcbc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS2_E_SaIvELNS_12_Lock_policyE0EEE10deallocateEPS9_j>:
      deallocate(pointer __p, size_type)
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b084      	sub	sp, #16
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	60f8      	str	r0, [r7, #12]
 800dcc4:	60b9      	str	r1, [r7, #8]
 800dcc6:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800dcc8:	68b8      	ldr	r0, [r7, #8]
 800dcca:	f008 fbc7 	bl	801645c <_ZdlPv>
      }
 800dcce:	bf00      	nop
 800dcd0:	3710      	adds	r7, #16
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}

0800dcd6 <_ZNSt14_Sp_ebo_helperILi0EZNK3hei12SharedBufferIhE4copyEvEUlPhE_Lb1EEC1EOS4_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 800dcd6:	b580      	push	{r7, lr}
 800dcd8:	b082      	sub	sp, #8
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	6078      	str	r0, [r7, #4]
 800dcde:	6039      	str	r1, [r7, #0]
 800dce0:	6838      	ldr	r0, [r7, #0]
 800dce2:	f7fe fdf2 	bl	800c8ca <_ZSt4moveIRZNK3hei12SharedBufferIhE4copyEvEUlPhE_EONSt16remove_referenceIT_E4typeEOS7_>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	4618      	mov	r0, r3
 800dcea:	3708      	adds	r7, #8
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <_ZNSt10_Head_baseILj4ESt12_PlaceholderILi4EELb1EEC1ERKS1_>:
      constexpr _Head_base(const _Head& __h)
 800dcf0:	b480      	push	{r7}
 800dcf2:	b083      	sub	sp, #12
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	6039      	str	r1, [r7, #0]
      : _Head(__h) { }
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	370c      	adds	r7, #12
 800dd00:	46bd      	mov	sp, r7
 800dd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd06:	4770      	bx	lr

0800dd08 <_ZNSt11_Tuple_implILj3EJOjEEC1IjEEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 800dd08:	b590      	push	{r4, r7, lr}
 800dd0a:	b083      	sub	sp, #12
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 800dd12:	687c      	ldr	r4, [r7, #4]
 800dd14:	6838      	ldr	r0, [r7, #0]
 800dd16:	f7fe fd14 	bl	800c742 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	4620      	mov	r0, r4
 800dd20:	f000 f81e 	bl	800dd60 <_ZNSt10_Head_baseILj3EOjLb0EEC1IjEEOT_>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	4618      	mov	r0, r3
 800dd28:	370c      	adds	r7, #12
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd90      	pop	{r4, r7, pc}

0800dd2e <_ZNSt10_Head_baseILj2EOPKhLb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800dd2e:	b480      	push	{r7}
 800dd30:	b083      	sub	sp, #12
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	6078      	str	r0, [r7, #4]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	370c      	adds	r7, #12
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd44:	4770      	bx	lr

0800dd46 <_ZNSt11_Tuple_implILj3EJOjEE7_M_headERS1_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dd46:	b580      	push	{r7, lr}
 800dd48:	b082      	sub	sp, #8
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	6078      	str	r0, [r7, #4]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	4618      	mov	r0, r3
 800dd52:	f000 f821 	bl	800dd98 <_ZNSt10_Head_baseILj3EOjLb0EE7_M_headERS1_>
 800dd56:	4603      	mov	r3, r0
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3708      	adds	r7, #8
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <_ZNSt10_Head_baseILj3EOjLb0EEC1IjEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b082      	sub	sp, #8
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800dd6a:	6838      	ldr	r0, [r7, #0]
 800dd6c:	f7fe fce9 	bl	800c742 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800dd70:	4602      	mov	r2, r0
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	601a      	str	r2, [r3, #0]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3708      	adds	r7, #8
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS2_E_SaIvELNS_12_Lock_policyE0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800dd80:	b480      	push	{r7}
 800dd82:	b083      	sub	sp, #12
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800dd88:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	370c      	adds	r7, #12
 800dd90:	46bd      	mov	sp, r7
 800dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd96:	4770      	bx	lr

0800dd98 <_ZNSt10_Head_baseILj3EOjLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800dd98:	b480      	push	{r7}
 800dd9a:	b083      	sub	sp, #12
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4618      	mov	r0, r3
 800dda6:	370c      	adds	r7, #12
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr

0800ddb0 <_Z41__static_initialization_and_destruction_0ii>:
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b088      	sub	sp, #32
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d122      	bne.n	800de06 <_Z41__static_initialization_and_destruction_0ii+0x56>
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d11d      	bne.n	800de06 <_Z41__static_initialization_and_destruction_0ii+0x56>
 800ddca:	4b18      	ldr	r3, [pc, #96]	; (800de2c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	613b      	str	r3, [r7, #16]
 800ddd0:	f107 0310 	add.w	r3, r7, #16
 800ddd4:	60bb      	str	r3, [r7, #8]
 800ddd6:	2304      	movs	r3, #4
 800ddd8:	60fb      	str	r3, [r7, #12]
 800ddda:	f107 0308 	add.w	r3, r7, #8
 800ddde:	e893 0006 	ldmia.w	r3, {r1, r2}
 800dde2:	4813      	ldr	r0, [pc, #76]	; (800de30 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800dde4:	f7f8 ff6e 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
  static const desenet::Address SENSOR_ADDRESS({0xC7, 0xC7, 0xC7, 0xC7});	///< @brief Sensor's reception address.
 800dde8:	4b12      	ldr	r3, [pc, #72]	; (800de34 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	61fb      	str	r3, [r7, #28]
 800ddee:	f107 031c 	add.w	r3, r7, #28
 800ddf2:	617b      	str	r3, [r7, #20]
 800ddf4:	2304      	movs	r3, #4
 800ddf6:	61bb      	str	r3, [r7, #24]
 800ddf8:	f107 0314 	add.w	r3, r7, #20
 800ddfc:	e893 0006 	ldmia.w	r3, {r1, r2}
 800de00:	480d      	ldr	r0, [pc, #52]	; (800de38 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800de02:	f7f8 ff5f 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d10a      	bne.n	800de22 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de12:	4293      	cmp	r3, r2
 800de14:	d105      	bne.n	800de22 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800de16:	4808      	ldr	r0, [pc, #32]	; (800de38 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800de18:	f7f9 f890 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 800de1c:	4804      	ldr	r0, [pc, #16]	; (800de30 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800de1e:	f7f9 f88d 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
 800de22:	bf00      	nop
 800de24:	3720      	adds	r7, #32
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
 800de2a:	bf00      	nop
 800de2c:	08019130 	.word	0x08019130
 800de30:	200016dc 	.word	0x200016dc
 800de34:	08019134 	.word	0x08019134
 800de38:	200016e4 	.word	0x200016e4

0800de3c <_ZNSt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b082      	sub	sp, #8
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	4a05      	ldr	r2, [pc, #20]	; (800de5c <_ZNSt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	601a      	str	r2, [r3, #0]
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	4618      	mov	r0, r3
 800de4e:	f7f9 fe89 	bl	8007b64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	4618      	mov	r0, r3
 800de56:	3708      	adds	r7, #8
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	0801bf3c 	.word	0x0801bf3c

0800de60 <_ZNSt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800de60:	b580      	push	{r7, lr}
 800de62:	b082      	sub	sp, #8
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f7ff ffe7 	bl	800de3c <_ZNSt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800de6e:	2110      	movs	r1, #16
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	f008 faf5 	bl	8016460 <_ZdlPvj>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4618      	mov	r0, r3
 800de7a:	3708      	adds	r7, #8
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}

0800de80 <_ZNSt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800de80:	b580      	push	{r7, lr}
 800de82:	b082      	sub	sp, #8
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	330c      	adds	r3, #12
 800de8c:	4618      	mov	r0, r3
 800de8e:	f000 f840 	bl	800df12 <_ZNSt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 800de92:	4602      	mov	r2, r0
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	68db      	ldr	r3, [r3, #12]
 800de98:	4619      	mov	r1, r3
 800de9a:	4610      	mov	r0, r2
 800de9c:	f7fd fee6 	bl	800bc6c <_ZZNK3hei12SharedBufferIhE4copyEvENKUlPhE_clES2_>
 800dea0:	bf00      	nop
 800dea2:	3708      	adds	r7, #8
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}

0800dea8 <_ZNSt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b086      	sub	sp, #24
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	330c      	adds	r3, #12
 800deb4:	4618      	mov	r0, r3
 800deb6:	f000 f838 	bl	800df2a <_ZNSt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800deba:	4602      	mov	r2, r0
 800debc:	f107 0314 	add.w	r3, r7, #20
 800dec0:	4611      	mov	r1, r2
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7ff fc14 	bl	800d6f0 <_ZNSaISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800dec8:	f107 0114 	add.w	r1, r7, #20
 800decc:	f107 030c 	add.w	r3, r7, #12
 800ded0:	687a      	ldr	r2, [r7, #4]
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7ff fdd3 	bl	800da7e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERSA_PS9_>
	this->~_Sp_counted_deleter();
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f7ff ffaf 	bl	800de3c <_ZNSt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800dede:	f107 030c 	add.w	r3, r7, #12
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7ff fc30 	bl	800d748 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS1_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 800dee8:	f107 0314 	add.w	r3, r7, #20
 800deec:	4618      	mov	r0, r3
 800deee:	f7ff fc0c 	bl	800d70a <_ZNSaISt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
      }
 800def2:	bf00      	nop
 800def4:	3718      	adds	r7, #24
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}

0800defa <_ZNSt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 800defa:	b480      	push	{r7}
 800defc:	b083      	sub	sp, #12
 800defe:	af00      	add	r7, sp, #0
 800df00:	6078      	str	r0, [r7, #4]
 800df02:	6039      	str	r1, [r7, #0]
        return nullptr;
 800df04:	2300      	movs	r3, #0
      }
 800df06:	4618      	mov	r0, r3
 800df08:	370c      	adds	r7, #12
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr

0800df12 <_ZNSt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800df12:	b580      	push	{r7, lr}
 800df14:	b082      	sub	sp, #8
 800df16:	af00      	add	r7, sp, #0
 800df18:	6078      	str	r0, [r7, #4]
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f000 f811 	bl	800df42 <_ZNSt14_Sp_ebo_helperILi0EZNK3hei12SharedBufferIhE4copyEvEUlPhE_Lb1EE6_S_getERS5_>
 800df20:	4603      	mov	r3, r0
 800df22:	4618      	mov	r0, r3
 800df24:	3708      	adds	r7, #8
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}

0800df2a <_ZNSt19_Sp_counted_deleterIPhZNK3hei12SharedBufferIhE4copyEvEUlS0_E_SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800df2a:	b580      	push	{r7, lr}
 800df2c:	b082      	sub	sp, #8
 800df2e:	af00      	add	r7, sp, #0
 800df30:	6078      	str	r0, [r7, #4]
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f7fa fa06 	bl	8008344 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 800df38:	4603      	mov	r3, r0
 800df3a:	4618      	mov	r0, r3
 800df3c:	3708      	adds	r7, #8
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}

0800df42 <_ZNSt14_Sp_ebo_helperILi0EZNK3hei12SharedBufferIhE4copyEvEUlPhE_Lb1EE6_S_getERS5_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800df42:	b480      	push	{r7}
 800df44:	b083      	sub	sp, #12
 800df46:	af00      	add	r7, sp, #0
 800df48:	6078      	str	r0, [r7, #4]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	4618      	mov	r0, r3
 800df4e:	370c      	adds	r7, #12
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr

0800df58 <_GLOBAL__sub_I__ZN7desenet6sensor13NetworkEntity10_pInstanceE>:
 800df58:	b580      	push	{r7, lr}
 800df5a:	af00      	add	r7, sp, #0
 800df5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800df60:	2001      	movs	r0, #1
 800df62:	f7ff ff25 	bl	800ddb0 <_Z41__static_initialization_and_destruction_0ii>
 800df66:	bd80      	pop	{r7, pc}

0800df68 <_GLOBAL__sub_D__ZN7desenet6sensor13NetworkEntity10_pInstanceE>:
 800df68:	b580      	push	{r7, lr}
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800df70:	2000      	movs	r0, #0
 800df72:	f7ff ff1d 	bl	800ddb0 <_Z41__static_initialization_and_destruction_0ii>
 800df76:	bd80      	pop	{r7, pc}

0800df78 <_Z41__static_initialization_and_destruction_0ii>:
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   //
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   //
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   //
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   //
    { 0x00, 0x06, 0x09, 0x09, 0x06, 0x00 },   //
 };
 800df78:	b580      	push	{r7, lr}
 800df7a:	b088      	sub	sp, #32
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
 800df80:	6039      	str	r1, [r7, #0]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2b01      	cmp	r3, #1
 800df86:	d122      	bne.n	800dfce <_Z41__static_initialization_and_destruction_0ii+0x56>
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df8e:	4293      	cmp	r3, r2
 800df90:	d11d      	bne.n	800dfce <_Z41__static_initialization_and_destruction_0ii+0x56>
 800df92:	4b18      	ldr	r3, [pc, #96]	; (800dff4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	613b      	str	r3, [r7, #16]
 800df98:	f107 0310 	add.w	r3, r7, #16
 800df9c:	60bb      	str	r3, [r7, #8]
 800df9e:	2304      	movs	r3, #4
 800dfa0:	60fb      	str	r3, [r7, #12]
 800dfa2:	f107 0308 	add.w	r3, r7, #8
 800dfa6:	e893 0006 	ldmia.w	r3, {r1, r2}
 800dfaa:	4813      	ldr	r0, [pc, #76]	; (800dff8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800dfac:	f7f8 fe8a 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
  static const desenet::Address SENSOR_ADDRESS({0xC7, 0xC7, 0xC7, 0xC7});	///< @brief Sensor's reception address.
 800dfb0:	4b12      	ldr	r3, [pc, #72]	; (800dffc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	61fb      	str	r3, [r7, #28]
 800dfb6:	f107 031c 	add.w	r3, r7, #28
 800dfba:	617b      	str	r3, [r7, #20]
 800dfbc:	2304      	movs	r3, #4
 800dfbe:	61bb      	str	r3, [r7, #24]
 800dfc0:	f107 0314 	add.w	r3, r7, #20
 800dfc4:	e893 0006 	ldmia.w	r3, {r1, r2}
 800dfc8:	480d      	ldr	r0, [pc, #52]	; (800e000 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800dfca:	f7f8 fe7b 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d10a      	bne.n	800dfea <_Z41__static_initialization_and_destruction_0ii+0x72>
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	d105      	bne.n	800dfea <_Z41__static_initialization_and_destruction_0ii+0x72>
 800dfde:	4808      	ldr	r0, [pc, #32]	; (800e000 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800dfe0:	f7f8 ffac 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 800dfe4:	4804      	ldr	r0, [pc, #16]	; (800dff8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800dfe6:	f7f8 ffa9 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
 800dfea:	bf00      	nop
 800dfec:	3720      	adds	r7, #32
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
 800dff2:	bf00      	nop
 800dff4:	08019224 	.word	0x08019224
 800dff8:	200016f0 	.word	0x200016f0
 800dffc:	08019228 	.word	0x08019228
 800e000:	200016f8 	.word	0x200016f8

0800e004 <_GLOBAL__sub_I__ZN24MonochromeDisplayPainter10FontLookupE>:
 800e004:	b580      	push	{r7, lr}
 800e006:	af00      	add	r7, sp, #0
 800e008:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e00c:	2001      	movs	r0, #1
 800e00e:	f7ff ffb3 	bl	800df78 <_Z41__static_initialization_and_destruction_0ii>
 800e012:	bd80      	pop	{r7, pc}

0800e014 <_GLOBAL__sub_D__ZN24MonochromeDisplayPainter10FontLookupE>:
 800e014:	b580      	push	{r7, lr}
 800e016:	af00      	add	r7, sp, #0
 800e018:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e01c:	2000      	movs	r0, #0
 800e01e:	f7ff ffab 	bl	800df78 <_Z41__static_initialization_and_destruction_0ii>
 800e022:	bd80      	pop	{r7, pc}

0800e024 <_ZN18IMonochromeDisplay5PointC1Eii>:
		inline explicit Point( int x = 0 , int y = 0 ) : x( x ) , y( y ) {}
 800e024:	b480      	push	{r7}
 800e026:	b085      	sub	sp, #20
 800e028:	af00      	add	r7, sp, #0
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	60b9      	str	r1, [r7, #8]
 800e02e:	607a      	str	r2, [r7, #4]
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	68ba      	ldr	r2, [r7, #8]
 800e034:	601a      	str	r2, [r3, #0]
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	687a      	ldr	r2, [r7, #4]
 800e03a:	605a      	str	r2, [r3, #4]
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	4618      	mov	r0, r3
 800e040:	3714      	adds	r7, #20
 800e042:	46bd      	mov	sp, r7
 800e044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e048:	4770      	bx	lr
	...

0800e04c <_ZN24MonochromeDisplayPainterC1EP18IMonochromeDisplayb>:
  #include "fixmath/fix16.h"
  #include "fixmath/fix16.hpp"
#endif // DISPLAYPAINTER_USE_EXTENED_FEATURES
#include "MonochromeDisplayPainter"

MonochromeDisplayPainter::MonochromeDisplayPainter( IMonochromeDisplay * display , bool autoUpdate )
 800e04c:	b590      	push	{r4, r7, lr}
 800e04e:	b085      	sub	sp, #20
 800e050:	af00      	add	r7, sp, #0
 800e052:	60f8      	str	r0, [r7, #12]
 800e054:	60b9      	str	r1, [r7, #8]
 800e056:	4613      	mov	r3, r2
 800e058:	71fb      	strb	r3, [r7, #7]
	: _display( display ) , _offscreenBitmap( NULL ) , _disableSync( false ) , _autoUpdate( autoUpdate )
 800e05a:	4a0f      	ldr	r2, [pc, #60]	; (800e098 <_ZN24MonochromeDisplayPainterC1EP18IMonochromeDisplayb+0x4c>)
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	601a      	str	r2, [r3, #0]
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	68ba      	ldr	r2, [r7, #8]
 800e064:	605a      	str	r2, [r3, #4]
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	2200      	movs	r2, #0
 800e06a:	60da      	str	r2, [r3, #12]
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	2200      	movs	r2, #0
 800e070:	741a      	strb	r2, [r3, #16]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	79fa      	ldrb	r2, [r7, #7]
 800e076:	745a      	strb	r2, [r3, #17]
{
	// Ask the display for his accelerated drawing methods.
	if ( display ) _accelMethods = display->acceleratedDrawingMethods();
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d007      	beq.n	800e08e <_ZN24MonochromeDisplayPainterC1EP18IMonochromeDisplayb+0x42>
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	330c      	adds	r3, #12
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	68fc      	ldr	r4, [r7, #12]
 800e088:	68b8      	ldr	r0, [r7, #8]
 800e08a:	4798      	blx	r3
 800e08c:	60a0      	str	r0, [r4, #8]
}
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	4618      	mov	r0, r3
 800e092:	3714      	adds	r7, #20
 800e094:	46bd      	mov	sp, r7
 800e096:	bd90      	pop	{r4, r7, pc}
 800e098:	0801c2e0 	.word	0x0801c2e0

0800e09c <_ZN24MonochromeDisplayPainterD1Ev>:

MonochromeDisplayPainter::~MonochromeDisplayPainter()
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b082      	sub	sp, #8
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
 800e0a4:	4a05      	ldr	r2, [pc, #20]	; (800e0bc <_ZN24MonochromeDisplayPainterD1Ev+0x20>)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	601a      	str	r2, [r3, #0]
{
	// End painting.
	end();
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f000 f832 	bl	800e114 <_ZN24MonochromeDisplayPainter3endEv>
}
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3708      	adds	r7, #8
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}
 800e0ba:	bf00      	nop
 800e0bc:	0801c2e0 	.word	0x0801c2e0

0800e0c0 <_ZN24MonochromeDisplayPainterD0Ev>:
MonochromeDisplayPainter::~MonochromeDisplayPainter()
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b082      	sub	sp, #8
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
}
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f7ff ffe7 	bl	800e09c <_ZN24MonochromeDisplayPainterD1Ev>
 800e0ce:	2114      	movs	r1, #20
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f008 f9c5 	bl	8016460 <_ZdlPvj>
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3708      	adds	r7, #8
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <_ZN24MonochromeDisplayPainter5beginEP18IMonochromeDisplay>:

void MonochromeDisplayPainter::begin( IMonochromeDisplay * display )
{
 800e0e0:	b590      	push	{r4, r7, lr}
 800e0e2:	b083      	sub	sp, #12
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	6039      	str	r1, [r7, #0]
	// End the work relationship with the old display if there was any.
	end();
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f000 f812 	bl	800e114 <_ZN24MonochromeDisplayPainter3endEv>

	// Set display pointer and ask the device for his capabilities.
	_display = display;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	683a      	ldr	r2, [r7, #0]
 800e0f4:	605a      	str	r2, [r3, #4]
	if ( display ) _accelMethods = display->acceleratedDrawingMethods();
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d007      	beq.n	800e10c <_ZN24MonochromeDisplayPainter5beginEP18IMonochromeDisplay+0x2c>
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	330c      	adds	r3, #12
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	687c      	ldr	r4, [r7, #4]
 800e106:	6838      	ldr	r0, [r7, #0]
 800e108:	4798      	blx	r3
 800e10a:	60a0      	str	r0, [r4, #8]
}
 800e10c:	bf00      	nop
 800e10e:	370c      	adds	r7, #12
 800e110:	46bd      	mov	sp, r7
 800e112:	bd90      	pop	{r4, r7, pc}

0800e114 <_ZN24MonochromeDisplayPainter3endEv>:

void MonochromeDisplayPainter::end()
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b082      	sub	sp, #8
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
	// Commit changes if the display exists.
	if ( _display && !_autoUpdate )
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	685b      	ldr	r3, [r3, #4]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d009      	beq.n	800e138 <_ZN24MonochromeDisplayPainter3endEv+0x24>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	7c5b      	ldrb	r3, [r3, #17]
 800e128:	f083 0301 	eor.w	r3, r3, #1
 800e12c:	b2db      	uxtb	r3, r3
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d002      	beq.n	800e138 <_ZN24MonochromeDisplayPainter3endEv+0x24>
		update();
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 f8ea 	bl	800e30c <_ZN24MonochromeDisplayPainter6updateEv>

	// We can not work anymore with the recent display object.
	_display = NULL;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2200      	movs	r2, #0
 800e13c:	605a      	str	r2, [r3, #4]

	// If we used an off-screen bitmap, we have to remove it.
	if ( _offscreenBitmap )
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	68db      	ldr	r3, [r3, #12]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d00b      	beq.n	800e15e <_ZN24MonochromeDisplayPainter3endEv+0x4a>
	{
		delete[] _offscreenBitmap;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	68db      	ldr	r3, [r3, #12]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d004      	beq.n	800e158 <_ZN24MonochromeDisplayPainter3endEv+0x44>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	68db      	ldr	r3, [r3, #12]
 800e152:	4618      	mov	r0, r3
 800e154:	f008 f986 	bl	8016464 <_ZdaPv>
		_offscreenBitmap = NULL;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2200      	movs	r2, #0
 800e15c:	60da      	str	r2, [r3, #12]
	}
}
 800e15e:	bf00      	nop
 800e160:	3708      	adds	r7, #8
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
	...

0800e168 <_ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE>:

void MonochromeDisplayPainter::clear( IMonochromeDisplay::PixelColor color )
{
 800e168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e16a:	b093      	sub	sp, #76	; 0x4c
 800e16c:	af02      	add	r7, sp, #8
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	460b      	mov	r3, r1
 800e172:	70fb      	strb	r3, [r7, #3]
	assert( _display );
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d105      	bne.n	800e188 <_ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE+0x20>
 800e17c:	4b60      	ldr	r3, [pc, #384]	; (800e300 <_ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE+0x198>)
 800e17e:	4a61      	ldr	r2, [pc, #388]	; (800e304 <_ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE+0x19c>)
 800e180:	2136      	movs	r1, #54	; 0x36
 800e182:	4861      	ldr	r0, [pc, #388]	; (800e308 <_ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE+0x1a0>)
 800e184:	f008 fa5a 	bl	801663c <__assert_func>
	if ( _display )
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	685b      	ldr	r3, [r3, #4]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	f000 80b2 	beq.w	800e2f6 <_ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE+0x18e>
	{
		// Try first the accelerated clear method.
		if ( _accelMethods.clearAccelerated )
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	7a1b      	ldrb	r3, [r3, #8]
 800e196:	f003 0301 	and.w	r3, r3, #1
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d03e      	beq.n	800e21e <_ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE+0xb6>
		{
			_display->clear( color );
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	685a      	ldr	r2, [r3, #4]
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	685b      	ldr	r3, [r3, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	3324      	adds	r3, #36	; 0x24
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800e1b2:	4610      	mov	r0, r2
 800e1b4:	4798      	blx	r3

			if ( _offscreenBitmap )
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	68db      	ldr	r3, [r3, #12]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	f000 809b 	beq.w	800e2f6 <_ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE+0x18e>
			{
				memset( _offscreenBitmap , color == IMonochromeDisplay::White ? 0x00 : 0xFF ,
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	68dd      	ldr	r5, [r3, #12]
 800e1c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e1c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e1cc:	d101      	bne.n	800e1d2 <_ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE+0x6a>
 800e1ce:	2600      	movs	r6, #0
 800e1d0:	e000      	b.n	800e1d4 <_ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE+0x6c>
 800e1d2:	26ff      	movs	r6, #255	; 0xff
						( ( _display->resolution().width * _display->resolution().height ) + 7 ) / 8 );
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6859      	ldr	r1, [r3, #4]
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	3308      	adds	r3, #8
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	f107 0208 	add.w	r2, r7, #8
 800e1e6:	4610      	mov	r0, r2
 800e1e8:	4798      	blx	r3
 800e1ea:	68bc      	ldr	r4, [r7, #8]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6859      	ldr	r1, [r3, #4]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	685b      	ldr	r3, [r3, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	3308      	adds	r3, #8
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	f107 0210 	add.w	r2, r7, #16
 800e1fe:	4610      	mov	r0, r2
 800e200:	4798      	blx	r3
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	fb03 f304 	mul.w	r3, r3, r4
 800e208:	3307      	adds	r3, #7
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	da00      	bge.n	800e210 <_ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE+0xa8>
 800e20e:	3307      	adds	r3, #7
 800e210:	10db      	asrs	r3, r3, #3
				memset( _offscreenBitmap , color == IMonochromeDisplay::White ? 0x00 : 0xFF ,
 800e212:	461a      	mov	r2, r3
 800e214:	4631      	mov	r1, r6
 800e216:	4628      	mov	r0, r5
 800e218:	f008 faa8 	bl	801676c <memset>
		{
			drawRectangle( IMonochromeDisplay::Point( 0 , 0 ) , _display->resolution() ,
					       IMonochromeDisplay::Undefined , color );
		}
	}
}
 800e21c:	e06b      	b.n	800e2f6 <_ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE+0x18e>
		else if ( _accelMethods.memoryCopyAccelerated )
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	7a1b      	ldrb	r3, [r3, #8]
 800e222:	f003 0302 	and.w	r3, r3, #2
 800e226:	b2db      	uxtb	r3, r3
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d047      	beq.n	800e2bc <_ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE+0x154>
			_createOffsetBitmap();
 800e22c:	2100      	movs	r1, #0
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f000 fbae 	bl	800e990 <_ZN24MonochromeDisplayPainter19_createOffsetBitmapEb>
			memset( _offscreenBitmap , color == IMonochromeDisplay::White ? 0x00 : 0xFF ,
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	68dd      	ldr	r5, [r3, #12]
 800e238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e23c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e240:	d101      	bne.n	800e246 <_ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE+0xde>
 800e242:	2600      	movs	r6, #0
 800e244:	e000      	b.n	800e248 <_ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE+0xe0>
 800e246:	26ff      	movs	r6, #255	; 0xff
					( ( _display->resolution().width * _display->resolution().height ) + 7 ) / 8 );
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6859      	ldr	r1, [r3, #4]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	685b      	ldr	r3, [r3, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	3308      	adds	r3, #8
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	f107 0218 	add.w	r2, r7, #24
 800e25a:	4610      	mov	r0, r2
 800e25c:	4798      	blx	r3
 800e25e:	69bc      	ldr	r4, [r7, #24]
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6859      	ldr	r1, [r3, #4]
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	685b      	ldr	r3, [r3, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	3308      	adds	r3, #8
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	f107 0220 	add.w	r2, r7, #32
 800e272:	4610      	mov	r0, r2
 800e274:	4798      	blx	r3
 800e276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e278:	fb03 f304 	mul.w	r3, r3, r4
 800e27c:	3307      	adds	r3, #7
 800e27e:	2b00      	cmp	r3, #0
 800e280:	da00      	bge.n	800e284 <_ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE+0x11c>
 800e282:	3307      	adds	r3, #7
 800e284:	10db      	asrs	r3, r3, #3
			memset( _offscreenBitmap , color == IMonochromeDisplay::White ? 0x00 : 0xFF ,
 800e286:	461a      	mov	r2, r3
 800e288:	4631      	mov	r1, r6
 800e28a:	4628      	mov	r0, r5
 800e28c:	f008 fa6e 	bl	801676c <memset>
			if ( _autoUpdate )
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	7c5b      	ldrb	r3, [r3, #17]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d02e      	beq.n	800e2f6 <_ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE+0x18e>
				_syncDisplay( 0 , _display->resolution().height );
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6859      	ldr	r1, [r3, #4]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	685b      	ldr	r3, [r3, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	3308      	adds	r3, #8
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e2aa:	4610      	mov	r0, r2
 800e2ac:	4798      	blx	r3
 800e2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	2100      	movs	r1, #0
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f000 fcb8 	bl	800ec2a <_ZN24MonochromeDisplayPainter12_syncDisplayEii>
}
 800e2ba:	e01c      	b.n	800e2f6 <_ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE+0x18e>
			drawRectangle( IMonochromeDisplay::Point( 0 , 0 ) , _display->resolution() ,
 800e2bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	2100      	movs	r1, #0
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7ff fead 	bl	800e024 <_ZN18IMonochromeDisplay5PointC1Eii>
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6859      	ldr	r1, [r3, #4]
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	685b      	ldr	r3, [r3, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	3308      	adds	r3, #8
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e2dc:	4610      	mov	r0, r2
 800e2de:	4798      	blx	r3
 800e2e0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e2e4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800e2e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e2ec:	9300      	str	r3, [sp, #0]
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f000 f925 	bl	800e540 <_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_>
}
 800e2f6:	bf00      	nop
 800e2f8:	3744      	adds	r7, #68	; 0x44
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2fe:	bf00      	nop
 800e300:	0801922c 	.word	0x0801922c
 800e304:	08019238 	.word	0x08019238
 800e308:	08019280 	.word	0x08019280

0800e30c <_ZN24MonochromeDisplayPainter6updateEv>:
{
	_autoUpdate = autoUpdate;
}

void MonochromeDisplayPainter::update()
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b084      	sub	sp, #16
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
	_syncDisplay( 0 , _display->resolution().height );
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6859      	ldr	r1, [r3, #4]
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	685b      	ldr	r3, [r3, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	3308      	adds	r3, #8
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	f107 0208 	add.w	r2, r7, #8
 800e326:	4610      	mov	r0, r2
 800e328:	4798      	blx	r3
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	461a      	mov	r2, r3
 800e32e:	2100      	movs	r1, #0
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f000 fc7a 	bl	800ec2a <_ZN24MonochromeDisplayPainter12_syncDisplayEii>
}
 800e336:	bf00      	nop
 800e338:	3710      	adds	r7, #16
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}

0800e33e <_ZSt3maxIiERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800e33e:	b480      	push	{r7}
 800e340:	b083      	sub	sp, #12
 800e342:	af00      	add	r7, sp, #0
 800e344:	6078      	str	r0, [r7, #4]
 800e346:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681a      	ldr	r2, [r3, #0]
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	429a      	cmp	r2, r3
 800e352:	da01      	bge.n	800e358 <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	e000      	b.n	800e35a <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 800e358:	687b      	ldr	r3, [r7, #4]
    }
 800e35a:	4618      	mov	r0, r3
 800e35c:	370c      	adds	r7, #12
 800e35e:	46bd      	mov	sp, r7
 800e360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e364:	4770      	bx	lr
	...

0800e368 <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE>:
}

void MonochromeDisplayPainter::drawLine( const IMonochromeDisplay::Point & begin ,
										 const IMonochromeDisplay::Point & end ,
										 IMonochromeDisplay::PixelColor color )
{
 800e368:	b590      	push	{r4, r7, lr}
 800e36a:	b08d      	sub	sp, #52	; 0x34
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	60f8      	str	r0, [r7, #12]
 800e370:	60b9      	str	r1, [r7, #8]
 800e372:	607a      	str	r2, [r7, #4]
 800e374:	70fb      	strb	r3, [r7, #3]
	assert( _display );
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d105      	bne.n	800e38a <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE+0x22>
 800e37e:	4b6d      	ldr	r3, [pc, #436]	; (800e534 <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE+0x1cc>)
 800e380:	4a6d      	ldr	r2, [pc, #436]	; (800e538 <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE+0x1d0>)
 800e382:	2187      	movs	r1, #135	; 0x87
 800e384:	486d      	ldr	r0, [pc, #436]	; (800e53c <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE+0x1d4>)
 800e386:	f008 f959 	bl	801663c <__assert_func>
	if ( _display )
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	f000 80cc 	beq.w	800e52c <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE+0x1c4>
	{
		// Try first the accelerated method.
		if ( _accelMethods.drawLineAccelerated && !_offscreenBitmap )
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	7a1b      	ldrb	r3, [r3, #8]
 800e398:	f003 0304 	and.w	r3, r3, #4
 800e39c:	b2db      	uxtb	r3, r3
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d010      	beq.n	800e3c4 <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE+0x5c>
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	68db      	ldr	r3, [r3, #12]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d10c      	bne.n	800e3c4 <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE+0x5c>
		{
			_display->drawLine( begin , end , color );
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	6858      	ldr	r0, [r3, #4]
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	685b      	ldr	r3, [r3, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	3330      	adds	r3, #48	; 0x30
 800e3b6:	681c      	ldr	r4, [r3, #0]
 800e3b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	68b9      	ldr	r1, [r7, #8]
 800e3c0:	47a0      	blx	r4
			// Sync affected lines with hardware screen.
			if ( _autoUpdate )
				_syncDisplay( std::min( begin.y , end.y ) , std::max( begin.y , end.y ) + 1 );
		}
	}
}
 800e3c2:	e0b3      	b.n	800e52c <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE+0x1c4>
			if ( _accelMethods.memoryCopyAccelerated )
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	7a1b      	ldrb	r3, [r3, #8]
 800e3c8:	f003 0302 	and.w	r3, r3, #2
 800e3cc:	b2db      	uxtb	r3, r3
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d003      	beq.n	800e3da <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE+0x72>
				_createOffsetBitmap( true );
 800e3d2:	2101      	movs	r1, #1
 800e3d4:	68f8      	ldr	r0, [r7, #12]
 800e3d6:	f000 fadb 	bl	800e990 <_ZN24MonochromeDisplayPainter19_createOffsetBitmapEb>
			IMonochromeDisplay::Point p = begin;
 800e3da:	68ba      	ldr	r2, [r7, #8]
 800e3dc:	f107 0310 	add.w	r3, r7, #16
 800e3e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e3e4:	e883 0003 	stmia.w	r3, {r0, r1}
			dx = end.x - begin.x;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681a      	ldr	r2, [r3, #0]
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	1ad3      	subs	r3, r2, r3
 800e3f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			dy = end.y - begin.y;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	685a      	ldr	r2, [r3, #4]
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	1ad3      	subs	r3, r2, r3
 800e3fe:	62bb      	str	r3, [r7, #40]	; 0x28
			if ( dx >= 0 ) ix = 1;
 800e400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e402:	2b00      	cmp	r3, #0
 800e404:	db02      	blt.n	800e40c <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE+0xa4>
 800e406:	2301      	movs	r3, #1
 800e408:	627b      	str	r3, [r7, #36]	; 0x24
 800e40a:	e007      	b.n	800e41c <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE+0xb4>
				ix = -1;
 800e40c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e410:	627b      	str	r3, [r7, #36]	; 0x24
				dx = abs( dx );
 800e412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e414:	2b00      	cmp	r3, #0
 800e416:	bfb8      	it	lt
 800e418:	425b      	neglt	r3, r3
 800e41a:	62fb      	str	r3, [r7, #44]	; 0x2c
			if ( dy >= 0 ) iy = 1;
 800e41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41e:	2b00      	cmp	r3, #0
 800e420:	db02      	blt.n	800e428 <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE+0xc0>
 800e422:	2301      	movs	r3, #1
 800e424:	623b      	str	r3, [r7, #32]
 800e426:	e007      	b.n	800e438 <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE+0xd0>
				iy = -1;
 800e428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e42c:	623b      	str	r3, [r7, #32]
				dy = abs( dy );
 800e42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e430:	2b00      	cmp	r3, #0
 800e432:	bfb8      	it	lt
 800e434:	425b      	neglt	r3, r3
 800e436:	62bb      	str	r3, [r7, #40]	; 0x28
			if ( dx > dy )
 800e438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43c:	429a      	cmp	r2, r3
 800e43e:	dd2b      	ble.n	800e498 <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE+0x130>
				err = 2 * dy - dx;
 800e440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e442:	005a      	lsls	r2, r3, #1
 800e444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e446:	1ad3      	subs	r3, r2, r3
 800e448:	61fb      	str	r3, [r7, #28]
				for ( i = 0 ; i <= dx ; i++ )
 800e44a:	2300      	movs	r3, #0
 800e44c:	61bb      	str	r3, [r7, #24]
 800e44e:	69ba      	ldr	r2, [r7, #24]
 800e450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e452:	429a      	cmp	r2, r3
 800e454:	dc4c      	bgt.n	800e4f0 <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE+0x188>
					_setPixel( p , color );
 800e456:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e45a:	f107 0310 	add.w	r3, r7, #16
 800e45e:	4619      	mov	r1, r3
 800e460:	68f8      	ldr	r0, [r7, #12]
 800e462:	f000 faf4 	bl	800ea4e <_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE>
					if ( err >= 0 )
 800e466:	69fb      	ldr	r3, [r7, #28]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	db08      	blt.n	800e47e <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE+0x116>
						err -= 2 * dx;
 800e46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e46e:	005b      	lsls	r3, r3, #1
 800e470:	69fa      	ldr	r2, [r7, #28]
 800e472:	1ad3      	subs	r3, r2, r3
 800e474:	61fb      	str	r3, [r7, #28]
						p.y += iy;
 800e476:	697a      	ldr	r2, [r7, #20]
 800e478:	6a3b      	ldr	r3, [r7, #32]
 800e47a:	4413      	add	r3, r2
 800e47c:	617b      	str	r3, [r7, #20]
					err += 2 * dy;
 800e47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e480:	005b      	lsls	r3, r3, #1
 800e482:	69fa      	ldr	r2, [r7, #28]
 800e484:	4413      	add	r3, r2
 800e486:	61fb      	str	r3, [r7, #28]
					p.x += ix;
 800e488:	693a      	ldr	r2, [r7, #16]
 800e48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48c:	4413      	add	r3, r2
 800e48e:	613b      	str	r3, [r7, #16]
				for ( i = 0 ; i <= dx ; i++ )
 800e490:	69bb      	ldr	r3, [r7, #24]
 800e492:	3301      	adds	r3, #1
 800e494:	61bb      	str	r3, [r7, #24]
 800e496:	e7da      	b.n	800e44e <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE+0xe6>
				err = 2 * dx - dy;
 800e498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e49a:	005a      	lsls	r2, r3, #1
 800e49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e49e:	1ad3      	subs	r3, r2, r3
 800e4a0:	61fb      	str	r3, [r7, #28]
				for ( i = 0 ; i <= dy ; i++ )
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	61bb      	str	r3, [r7, #24]
 800e4a6:	69ba      	ldr	r2, [r7, #24]
 800e4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	dc20      	bgt.n	800e4f0 <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE+0x188>
					_setPixel( p , color );
 800e4ae:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e4b2:	f107 0310 	add.w	r3, r7, #16
 800e4b6:	4619      	mov	r1, r3
 800e4b8:	68f8      	ldr	r0, [r7, #12]
 800e4ba:	f000 fac8 	bl	800ea4e <_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE>
					if (err >= 0)
 800e4be:	69fb      	ldr	r3, [r7, #28]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	db08      	blt.n	800e4d6 <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE+0x16e>
						err -= 2 * dy;
 800e4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c6:	005b      	lsls	r3, r3, #1
 800e4c8:	69fa      	ldr	r2, [r7, #28]
 800e4ca:	1ad3      	subs	r3, r2, r3
 800e4cc:	61fb      	str	r3, [r7, #28]
						p.x += ix;
 800e4ce:	693a      	ldr	r2, [r7, #16]
 800e4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d2:	4413      	add	r3, r2
 800e4d4:	613b      	str	r3, [r7, #16]
					err += 2 * dx;
 800e4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d8:	005b      	lsls	r3, r3, #1
 800e4da:	69fa      	ldr	r2, [r7, #28]
 800e4dc:	4413      	add	r3, r2
 800e4de:	61fb      	str	r3, [r7, #28]
					p.y += iy;
 800e4e0:	697a      	ldr	r2, [r7, #20]
 800e4e2:	6a3b      	ldr	r3, [r7, #32]
 800e4e4:	4413      	add	r3, r2
 800e4e6:	617b      	str	r3, [r7, #20]
				for ( i = 0 ; i <= dy ; i++ )
 800e4e8:	69bb      	ldr	r3, [r7, #24]
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	61bb      	str	r3, [r7, #24]
 800e4ee:	e7da      	b.n	800e4a6 <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE+0x13e>
			if ( _autoUpdate )
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	7c5b      	ldrb	r3, [r3, #17]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d019      	beq.n	800e52c <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE+0x1c4>
				_syncDisplay( std::min( begin.y , end.y ) , std::max( begin.y , end.y ) + 1 );
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	1d1a      	adds	r2, r3, #4
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	3304      	adds	r3, #4
 800e500:	4619      	mov	r1, r3
 800e502:	4610      	mov	r0, r2
 800e504:	f000 fb7d 	bl	800ec02 <_ZSt3minIiERKT_S2_S2_>
 800e508:	4603      	mov	r3, r0
 800e50a:	681c      	ldr	r4, [r3, #0]
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	1d1a      	adds	r2, r3, #4
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	3304      	adds	r3, #4
 800e514:	4619      	mov	r1, r3
 800e516:	4610      	mov	r0, r2
 800e518:	f7ff ff11 	bl	800e33e <_ZSt3maxIiERKT_S2_S2_>
 800e51c:	4603      	mov	r3, r0
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	3301      	adds	r3, #1
 800e522:	461a      	mov	r2, r3
 800e524:	4621      	mov	r1, r4
 800e526:	68f8      	ldr	r0, [r7, #12]
 800e528:	f000 fb7f 	bl	800ec2a <_ZN24MonochromeDisplayPainter12_syncDisplayEii>
}
 800e52c:	bf00      	nop
 800e52e:	3734      	adds	r7, #52	; 0x34
 800e530:	46bd      	mov	sp, r7
 800e532:	bd90      	pop	{r4, r7, pc}
 800e534:	0801922c 	.word	0x0801922c
 800e538:	08019370 	.word	0x08019370
 800e53c:	08019280 	.word	0x08019280

0800e540 <_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_>:

void MonochromeDisplayPainter::drawRectangle( const IMonochromeDisplay::Point & topLeft ,
											  const IMonochromeDisplay::Size & size ,
											  IMonochromeDisplay::PixelColor stroke ,
											  IMonochromeDisplay::PixelColor fill )
{
 800e540:	b590      	push	{r4, r7, lr}
 800e542:	b099      	sub	sp, #100	; 0x64
 800e544:	af00      	add	r7, sp, #0
 800e546:	60f8      	str	r0, [r7, #12]
 800e548:	60b9      	str	r1, [r7, #8]
 800e54a:	607a      	str	r2, [r7, #4]
 800e54c:	70fb      	strb	r3, [r7, #3]
	assert( _display );
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	685b      	ldr	r3, [r3, #4]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d105      	bne.n	800e562 <_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_+0x22>
 800e556:	4b9b      	ldr	r3, [pc, #620]	; (800e7c4 <_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_+0x284>)
 800e558:	4a9b      	ldr	r2, [pc, #620]	; (800e7c8 <_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_+0x288>)
 800e55a:	21de      	movs	r1, #222	; 0xde
 800e55c:	489b      	ldr	r0, [pc, #620]	; (800e7cc <_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_+0x28c>)
 800e55e:	f008 f86d 	bl	801663c <__assert_func>
	if ( _display )
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	685b      	ldr	r3, [r3, #4]
 800e566:	2b00      	cmp	r3, #0
 800e568:	f000 8127 	beq.w	800e7ba <_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_+0x27a>
	{
		// Do we need to fill the rectangle?
		if ( fill != IMonochromeDisplay::Undefined )
 800e56c:	f997 3070 	ldrsb.w	r3, [r7, #112]	; 0x70
 800e570:	2b00      	cmp	r3, #0
 800e572:	d06d      	beq.n	800e650 <_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_+0x110>
		{
			// Try first the accelerated method.
			if ( _accelMethods.drawRectangeFillAccelerated && !_offscreenBitmap )
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	7a1b      	ldrb	r3, [r3, #8]
 800e578:	f003 0310 	and.w	r3, r3, #16
 800e57c:	b2db      	uxtb	r3, r3
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d010      	beq.n	800e5a4 <_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_+0x64>
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	68db      	ldr	r3, [r3, #12]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d10c      	bne.n	800e5a4 <_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_+0x64>
			{
				_display->fillRectangle( topLeft , size , fill );
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	6858      	ldr	r0, [r3, #4]
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	685b      	ldr	r3, [r3, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	3338      	adds	r3, #56	; 0x38
 800e596:	681c      	ldr	r4, [r3, #0]
 800e598:	f997 3070 	ldrsb.w	r3, [r7, #112]	; 0x70
 800e59c:	687a      	ldr	r2, [r7, #4]
 800e59e:	68b9      	ldr	r1, [r7, #8]
 800e5a0:	47a0      	blx	r4
 800e5a2:	e055      	b.n	800e650 <_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_+0x110>

			// Fall back to software rendered method by either buffer copy or direct pixel access.
			else
			{
				// If memory copy acceleration is supported, ensure that the local buffer is ready.
				if ( _accelMethods.memoryCopyAccelerated )
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	7a1b      	ldrb	r3, [r3, #8]
 800e5a8:	f003 0302 	and.w	r3, r3, #2
 800e5ac:	b2db      	uxtb	r3, r3
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d003      	beq.n	800e5ba <_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_+0x7a>
					_createOffsetBitmap( true );
 800e5b2:	2101      	movs	r1, #1
 800e5b4:	68f8      	ldr	r0, [r7, #12]
 800e5b6:	f000 f9eb 	bl	800e990 <_ZN24MonochromeDisplayPainter19_createOffsetBitmapEb>

				// Calculate fill surface.
				IMonochromeDisplay::Point start = topLeft;
 800e5ba:	68ba      	ldr	r2, [r7, #8]
 800e5bc:	f107 0318 	add.w	r3, r7, #24
 800e5c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e5c4:	e883 0003 	stmia.w	r3, {r0, r1}
				IMonochromeDisplay::Point end( topLeft.x + size.width - 1 , topLeft.y + size.height - 1 );
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	681a      	ldr	r2, [r3, #0]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	4413      	add	r3, r2
 800e5d2:	1e59      	subs	r1, r3, #1
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	685a      	ldr	r2, [r3, #4]
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	685b      	ldr	r3, [r3, #4]
 800e5dc:	4413      	add	r3, r2
 800e5de:	1e5a      	subs	r2, r3, #1
 800e5e0:	f107 0310 	add.w	r3, r7, #16
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7ff fd1d 	bl	800e024 <_ZN18IMonochromeDisplay5PointC1Eii>

				// If there is a stroke, we can fill less points.
				if ( stroke != IMonochromeDisplay::Undefined )
 800e5ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d00b      	beq.n	800e60a <_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_+0xca>
				{
					start.x++;
 800e5f2:	69bb      	ldr	r3, [r7, #24]
 800e5f4:	3301      	adds	r3, #1
 800e5f6:	61bb      	str	r3, [r7, #24]
					start.y++;
 800e5f8:	69fb      	ldr	r3, [r7, #28]
 800e5fa:	3301      	adds	r3, #1
 800e5fc:	61fb      	str	r3, [r7, #28]
					end.x--;
 800e5fe:	693b      	ldr	r3, [r7, #16]
 800e600:	3b01      	subs	r3, #1
 800e602:	613b      	str	r3, [r7, #16]
					end.y--;
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	3b01      	subs	r3, #1
 800e608:	617b      	str	r3, [r7, #20]
				}

				// Fill the rectangle.
				for ( int x =start.x ; x <= end.x ; ++x )
 800e60a:	69bb      	ldr	r3, [r7, #24]
 800e60c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e612:	429a      	cmp	r2, r3
 800e614:	dc1c      	bgt.n	800e650 <_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_+0x110>
					for ( int y = start.y ; y <= end.y ; ++y )
 800e616:	69fb      	ldr	r3, [r7, #28]
 800e618:	65bb      	str	r3, [r7, #88]	; 0x58
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e61e:	429a      	cmp	r2, r3
 800e620:	dc12      	bgt.n	800e648 <_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_+0x108>
						_setPixel( IMonochromeDisplay::Point( x , y ) , fill );
 800e622:	f107 0320 	add.w	r3, r7, #32
 800e626:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e628:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7ff fcfa 	bl	800e024 <_ZN18IMonochromeDisplay5PointC1Eii>
 800e630:	f997 2070 	ldrsb.w	r2, [r7, #112]	; 0x70
 800e634:	f107 0320 	add.w	r3, r7, #32
 800e638:	4619      	mov	r1, r3
 800e63a:	68f8      	ldr	r0, [r7, #12]
 800e63c:	f000 fa07 	bl	800ea4e <_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE>
					for ( int y = start.y ; y <= end.y ; ++y )
 800e640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e642:	3301      	adds	r3, #1
 800e644:	65bb      	str	r3, [r7, #88]	; 0x58
 800e646:	e7e8      	b.n	800e61a <_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_+0xda>
				for ( int x =start.x ; x <= end.x ; ++x )
 800e648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e64a:	3301      	adds	r3, #1
 800e64c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e64e:	e7de      	b.n	800e60e <_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_+0xce>
			}
		}

		// Draw border if needed.
		if ( stroke != IMonochromeDisplay::Undefined )
 800e650:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e654:	2b00      	cmp	r3, #0
 800e656:	f000 809e 	beq.w	800e796 <_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_+0x256>
		{
			// Try first the accelerated method.
			if ( _accelMethods.drawRectangleStrokeAccelerated && !_offscreenBitmap )
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	7a1b      	ldrb	r3, [r3, #8]
 800e65e:	f003 0308 	and.w	r3, r3, #8
 800e662:	b2db      	uxtb	r3, r3
 800e664:	2b00      	cmp	r3, #0
 800e666:	d010      	beq.n	800e68a <_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_+0x14a>
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	68db      	ldr	r3, [r3, #12]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d10c      	bne.n	800e68a <_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_+0x14a>
			{
				_display->drawRectangle( topLeft , size , stroke );
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	6858      	ldr	r0, [r3, #4]
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	685b      	ldr	r3, [r3, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	3334      	adds	r3, #52	; 0x34
 800e67c:	681c      	ldr	r4, [r3, #0]
 800e67e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e682:	687a      	ldr	r2, [r7, #4]
 800e684:	68b9      	ldr	r1, [r7, #8]
 800e686:	47a0      	blx	r4
 800e688:	e085      	b.n	800e796 <_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_+0x256>

			// Fall back to software rendered method.
			else
			{
				// If memory copy acceleration is supported, ensure that the local buffer is ready.
				if ( _accelMethods.memoryCopyAccelerated )
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	7a1b      	ldrb	r3, [r3, #8]
 800e68e:	f003 0302 	and.w	r3, r3, #2
 800e692:	b2db      	uxtb	r3, r3
 800e694:	2b00      	cmp	r3, #0
 800e696:	d006      	beq.n	800e6a6 <_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_+0x166>
				{
					_createOffsetBitmap( true );
 800e698:	2101      	movs	r1, #1
 800e69a:	68f8      	ldr	r0, [r7, #12]
 800e69c:	f000 f978 	bl	800e990 <_ZN24MonochromeDisplayPainter19_createOffsetBitmapEb>

					// Do not flush the display buffer 4 times to the display!
					_disableSync = true;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	741a      	strb	r2, [r3, #16]
				}

				drawLine( topLeft ,
						  IMonochromeDisplay::Point( topLeft.x , topLeft.y + size.height - 1 ) ,
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	6819      	ldr	r1, [r3, #0]
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	685a      	ldr	r2, [r3, #4]
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	685b      	ldr	r3, [r3, #4]
 800e6b2:	4413      	add	r3, r2
 800e6b4:	1e5a      	subs	r2, r3, #1
 800e6b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7ff fcb2 	bl	800e024 <_ZN18IMonochromeDisplay5PointC1Eii>
				drawLine( topLeft ,
 800e6c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e6c4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e6c8:	68b9      	ldr	r1, [r7, #8]
 800e6ca:	68f8      	ldr	r0, [r7, #12]
 800e6cc:	f7ff fe4c 	bl	800e368 <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE>
						  stroke );
				drawLine( IMonochromeDisplay::Point( topLeft.x , topLeft.y + size.height - 1 ) ,
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	6819      	ldr	r1, [r3, #0]
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	685a      	ldr	r2, [r3, #4]
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	685b      	ldr	r3, [r3, #4]
 800e6dc:	4413      	add	r3, r2
 800e6de:	1e5a      	subs	r2, r3, #1
 800e6e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f7ff fc9d 	bl	800e024 <_ZN18IMonochromeDisplay5PointC1Eii>
						  IMonochromeDisplay::Point( topLeft.x + size.width - 1 , topLeft.y + size.height - 1 ) ,
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	681a      	ldr	r2, [r3, #0]
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4413      	add	r3, r2
 800e6f4:	1e59      	subs	r1, r3, #1
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	685a      	ldr	r2, [r3, #4]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	685b      	ldr	r3, [r3, #4]
 800e6fe:	4413      	add	r3, r2
 800e700:	1e5a      	subs	r2, r3, #1
 800e702:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e706:	4618      	mov	r0, r3
 800e708:	f7ff fc8c 	bl	800e024 <_ZN18IMonochromeDisplay5PointC1Eii>
				drawLine( IMonochromeDisplay::Point( topLeft.x , topLeft.y + size.height - 1 ) ,
 800e70c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e710:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e714:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800e718:	68f8      	ldr	r0, [r7, #12]
 800e71a:	f7ff fe25 	bl	800e368 <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE>
						  stroke);
				drawLine( IMonochromeDisplay::Point( topLeft.x + size.width - 1 , topLeft.y + size.height - 1 ) ,
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	681a      	ldr	r2, [r3, #0]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	4413      	add	r3, r2
 800e728:	1e59      	subs	r1, r3, #1
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	685a      	ldr	r2, [r3, #4]
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	685b      	ldr	r3, [r3, #4]
 800e732:	4413      	add	r3, r2
 800e734:	1e5a      	subs	r2, r3, #1
 800e736:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e73a:	4618      	mov	r0, r3
 800e73c:	f7ff fc72 	bl	800e024 <_ZN18IMonochromeDisplay5PointC1Eii>
						  IMonochromeDisplay::Point( topLeft.x + size.width - 1 , topLeft.y ) ,
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	681a      	ldr	r2, [r3, #0]
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	4413      	add	r3, r2
 800e74a:	1e59      	subs	r1, r3, #1
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	685a      	ldr	r2, [r3, #4]
 800e750:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e754:	4618      	mov	r0, r3
 800e756:	f7ff fc65 	bl	800e024 <_ZN18IMonochromeDisplay5PointC1Eii>
				drawLine( IMonochromeDisplay::Point( topLeft.x + size.width - 1 , topLeft.y + size.height - 1 ) ,
 800e75a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e75e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e762:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800e766:	68f8      	ldr	r0, [r7, #12]
 800e768:	f7ff fdfe 	bl	800e368 <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE>
						  stroke );
				drawLine( IMonochromeDisplay::Point( topLeft.x + size.width - 1 , topLeft.y ) ,
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	681a      	ldr	r2, [r3, #0]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	4413      	add	r3, r2
 800e776:	1e59      	subs	r1, r3, #1
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	685a      	ldr	r2, [r3, #4]
 800e77c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e780:	4618      	mov	r0, r3
 800e782:	f7ff fc4f 	bl	800e024 <_ZN18IMonochromeDisplay5PointC1Eii>
 800e786:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e78a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800e78e:	68ba      	ldr	r2, [r7, #8]
 800e790:	68f8      	ldr	r0, [r7, #12]
 800e792:	f7ff fde9 	bl	800e368 <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE>
						  stroke );
			}
		}

		// Finally sync screen.
		_disableSync = false;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	2200      	movs	r2, #0
 800e79a:	741a      	strb	r2, [r3, #16]
		if ( _autoUpdate )
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	7c5b      	ldrb	r3, [r3, #17]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d00a      	beq.n	800e7ba <_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_+0x27a>
			_syncDisplay( topLeft.y , topLeft.y + size.height );
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	6859      	ldr	r1, [r3, #4]
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	685a      	ldr	r2, [r3, #4]
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	685b      	ldr	r3, [r3, #4]
 800e7b0:	4413      	add	r3, r2
 800e7b2:	461a      	mov	r2, r3
 800e7b4:	68f8      	ldr	r0, [r7, #12]
 800e7b6:	f000 fa38 	bl	800ec2a <_ZN24MonochromeDisplayPainter12_syncDisplayEii>
	}
}
 800e7ba:	bf00      	nop
 800e7bc:	3764      	adds	r7, #100	; 0x64
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd90      	pop	{r4, r7, pc}
 800e7c2:	bf00      	nop
 800e7c4:	0801922c 	.word	0x0801922c
 800e7c8:	080193fc 	.word	0x080193fc
 800e7cc:	08019280 	.word	0x08019280

0800e7d0 <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE>:
#endif // DISPLAYPAINTER_USE_EXTENED_FEATURES

void MonochromeDisplayPainter::drawText( const IMonochromeDisplay::Point & topLeft ,
			   	   	   	   	   	   	     const std::string & text ,
			   	   	   	   	   	   	     IMonochromeDisplay::PixelColor color )
{
 800e7d0:	b590      	push	{r4, r7, lr}
 800e7d2:	b08f      	sub	sp, #60	; 0x3c
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	60f8      	str	r0, [r7, #12]
 800e7d8:	60b9      	str	r1, [r7, #8]
 800e7da:	607a      	str	r2, [r7, #4]
 800e7dc:	70fb      	strb	r3, [r7, #3]
	assert( _display );
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	685b      	ldr	r3, [r3, #4]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d106      	bne.n	800e7f4 <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0x24>
 800e7e6:	4b66      	ldr	r3, [pc, #408]	; (800e980 <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0x1b0>)
 800e7e8:	4a66      	ldr	r2, [pc, #408]	; (800e984 <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0x1b4>)
 800e7ea:	f240 1193 	movw	r1, #403	; 0x193
 800e7ee:	4866      	ldr	r0, [pc, #408]	; (800e988 <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0x1b8>)
 800e7f0:	f007 ff24 	bl	801663c <__assert_func>
	if ( _display )
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	685b      	ldr	r3, [r3, #4]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	f000 80bc 	beq.w	800e976 <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0x1a6>
	{
		// Well we need some text.
		if ( !text.empty() )
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f007 feb6 	bl	8016570 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 800e804:	4603      	mov	r3, r0
 800e806:	f083 0301 	eor.w	r3, r3, #1
 800e80a:	b2db      	uxtb	r3, r3
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	f000 80b2 	beq.w	800e976 <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0x1a6>
		{
			// Try first the accelerated method.
			if ( _accelMethods.drawTextAccelerated && !_offscreenBitmap )
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	7a1b      	ldrb	r3, [r3, #8]
 800e816:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e81a:	b2db      	uxtb	r3, r3
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d010      	beq.n	800e842 <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0x72>
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	68db      	ldr	r3, [r3, #12]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d10c      	bne.n	800e842 <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0x72>
			{
				_display->drawText( topLeft , text , color );
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	6858      	ldr	r0, [r3, #4]
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	685b      	ldr	r3, [r3, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	3344      	adds	r3, #68	; 0x44
 800e834:	681c      	ldr	r4, [r3, #0]
 800e836:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e83a:	687a      	ldr	r2, [r7, #4]
 800e83c:	68b9      	ldr	r1, [r7, #8]
 800e83e:	47a0      	blx	r4
				if ( _autoUpdate )
					_syncDisplay( topLeft.y , topLeft.y + 7 );
			}
		}
	}
}
 800e840:	e099      	b.n	800e976 <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0x1a6>
				if ( _accelMethods.memoryCopyAccelerated )
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	7a1b      	ldrb	r3, [r3, #8]
 800e846:	f003 0302 	and.w	r3, r3, #2
 800e84a:	b2db      	uxtb	r3, r3
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d003      	beq.n	800e858 <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0x88>
					_createOffsetBitmap( true );
 800e850:	2101      	movs	r1, #1
 800e852:	68f8      	ldr	r0, [r7, #12]
 800e854:	f000 f89c 	bl	800e990 <_ZN24MonochromeDisplayPainter19_createOffsetBitmapEb>
				IMonochromeDisplay::Point p = topLeft;
 800e858:	68ba      	ldr	r2, [r7, #8]
 800e85a:	f107 0310 	add.w	r3, r7, #16
 800e85e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e862:	e883 0003 	stmia.w	r3, {r0, r1}
				unsigned int textPosition = 0;
 800e866:	2300      	movs	r3, #0
 800e868:	637b      	str	r3, [r7, #52]	; 0x34
				while( p.x <= ( _display->resolution().width - 5 ) && textPosition < text.size() )
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	6859      	ldr	r1, [r3, #4]
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	685b      	ldr	r3, [r3, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	3308      	adds	r3, #8
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	f107 0218 	add.w	r2, r7, #24
 800e87c:	4610      	mov	r0, r2
 800e87e:	4798      	blx	r3
 800e880:	69bb      	ldr	r3, [r7, #24]
 800e882:	1f1a      	subs	r2, r3, #4
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	429a      	cmp	r2, r3
 800e888:	dd08      	ble.n	800e89c <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0xcc>
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f007 fe6e 	bl	801656c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800e890:	4602      	mov	r2, r0
 800e892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e894:	4293      	cmp	r3, r2
 800e896:	d201      	bcs.n	800e89c <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0xcc>
 800e898:	2301      	movs	r3, #1
 800e89a:	e000      	b.n	800e89e <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0xce>
 800e89c:	2300      	movs	r3, #0
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d05c      	beq.n	800e95c <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0x18c>
					unsigned char character = text[textPosition];
 800e8a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f007 fe68 	bl	801657a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	781b      	ldrb	r3, [r3, #0]
 800e8ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					if ( character > 223 ) character -= 86;
 800e8b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e8b6:	2bdf      	cmp	r3, #223	; 0xdf
 800e8b8:	d904      	bls.n	800e8c4 <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0xf4>
 800e8ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e8be:	3b56      	subs	r3, #86	; 0x56
 800e8c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					if ( character < 32 || character > 177 ) character = ' ';
 800e8c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e8c8:	2b1f      	cmp	r3, #31
 800e8ca:	d903      	bls.n	800e8d4 <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0x104>
 800e8cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e8d0:	2bb1      	cmp	r3, #177	; 0xb1
 800e8d2:	d902      	bls.n	800e8da <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0x10a>
 800e8d4:	2320      	movs	r3, #32
 800e8d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					for ( int x = 0 ; x < 5 ; ++x )
 800e8da:	2300      	movs	r3, #0
 800e8dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e0:	2b04      	cmp	r3, #4
 800e8e2:	dc34      	bgt.n	800e94e <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0x17e>
						for ( int y = 0 ; y < 7 ; ++y )
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	62bb      	str	r3, [r7, #40]	; 0x28
 800e8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ea:	2b06      	cmp	r3, #6
 800e8ec:	dc2b      	bgt.n	800e946 <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0x176>
							if ( FontLookup[character - 32][x] & ( 1 << y ) )
 800e8ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e8f2:	f1a3 0220 	sub.w	r2, r3, #32
 800e8f6:	4925      	ldr	r1, [pc, #148]	; (800e98c <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0x1bc>)
 800e8f8:	4613      	mov	r3, r2
 800e8fa:	005b      	lsls	r3, r3, #1
 800e8fc:	4413      	add	r3, r2
 800e8fe:	005b      	lsls	r3, r3, #1
 800e900:	18ca      	adds	r2, r1, r3
 800e902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e904:	4413      	add	r3, r2
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	461a      	mov	r2, r3
 800e90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90c:	fa42 f303 	asr.w	r3, r2, r3
 800e910:	f003 0301 	and.w	r3, r3, #1
 800e914:	2b00      	cmp	r3, #0
 800e916:	d012      	beq.n	800e93e <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0x16e>
								_setPixel( IMonochromeDisplay::Point( p.x + x , p.y + y ) , color );
 800e918:	693a      	ldr	r2, [r7, #16]
 800e91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e91c:	18d1      	adds	r1, r2, r3
 800e91e:	697a      	ldr	r2, [r7, #20]
 800e920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e922:	441a      	add	r2, r3
 800e924:	f107 0320 	add.w	r3, r7, #32
 800e928:	4618      	mov	r0, r3
 800e92a:	f7ff fb7b 	bl	800e024 <_ZN18IMonochromeDisplay5PointC1Eii>
 800e92e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e932:	f107 0320 	add.w	r3, r7, #32
 800e936:	4619      	mov	r1, r3
 800e938:	68f8      	ldr	r0, [r7, #12]
 800e93a:	f000 f888 	bl	800ea4e <_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE>
						for ( int y = 0 ; y < 7 ; ++y )
 800e93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e940:	3301      	adds	r3, #1
 800e942:	62bb      	str	r3, [r7, #40]	; 0x28
 800e944:	e7d0      	b.n	800e8e8 <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0x118>
					for ( int x = 0 ; x < 5 ; ++x )
 800e946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e948:	3301      	adds	r3, #1
 800e94a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e94c:	e7c7      	b.n	800e8de <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0x10e>
					textPosition++;
 800e94e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e950:	3301      	adds	r3, #1
 800e952:	637b      	str	r3, [r7, #52]	; 0x34
					p.x += 6;
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	3306      	adds	r3, #6
 800e958:	613b      	str	r3, [r7, #16]
				while( p.x <= ( _display->resolution().width - 5 ) && textPosition < text.size() )
 800e95a:	e786      	b.n	800e86a <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0x9a>
				if ( _autoUpdate )
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	7c5b      	ldrb	r3, [r3, #17]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d008      	beq.n	800e976 <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0x1a6>
					_syncDisplay( topLeft.y , topLeft.y + 7 );
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	6859      	ldr	r1, [r3, #4]
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	685b      	ldr	r3, [r3, #4]
 800e96c:	3307      	adds	r3, #7
 800e96e:	461a      	mov	r2, r3
 800e970:	68f8      	ldr	r0, [r7, #12]
 800e972:	f000 f95a 	bl	800ec2a <_ZN24MonochromeDisplayPainter12_syncDisplayEii>
}
 800e976:	bf00      	nop
 800e978:	373c      	adds	r7, #60	; 0x3c
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd90      	pop	{r4, r7, pc}
 800e97e:	bf00      	nop
 800e980:	0801922c 	.word	0x0801922c
 800e984:	080194ac 	.word	0x080194ac
 800e988:	08019280 	.word	0x08019280
 800e98c:	0801bf70 	.word	0x0801bf70

0800e990 <_ZN24MonochromeDisplayPainter19_createOffsetBitmapEb>:
	}
}
#endif // DISPLAYPAINTER_USE_EXTENED_FEATURES

void MonochromeDisplayPainter::_createOffsetBitmap( bool copyFromDisplay )
{
 800e990:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e992:	b08d      	sub	sp, #52	; 0x34
 800e994:	af00      	add	r7, sp, #0
 800e996:	60f8      	str	r0, [r7, #12]
 800e998:	460b      	mov	r3, r1
 800e99a:	72fb      	strb	r3, [r7, #11]
	// Do we need to create the bitmap or does it already exists?
	if ( !_offscreenBitmap )
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	68db      	ldr	r3, [r3, #12]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d150      	bne.n	800ea46 <_ZN24MonochromeDisplayPainter19_createOffsetBitmapEb+0xb6>
	{
		// Allocate memory for off-screen bitmap.
		_offscreenBitmap =
			new uint8_t[( ( _display->resolution().width * _display->resolution().height ) + 7 ) / 8];
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	6859      	ldr	r1, [r3, #4]
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	685b      	ldr	r3, [r3, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	3308      	adds	r3, #8
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f107 0210 	add.w	r2, r7, #16
 800e9b6:	4610      	mov	r0, r2
 800e9b8:	4798      	blx	r3
 800e9ba:	693c      	ldr	r4, [r7, #16]
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	6859      	ldr	r1, [r3, #4]
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	685b      	ldr	r3, [r3, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	3308      	adds	r3, #8
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	f107 0218 	add.w	r2, r7, #24
 800e9ce:	4610      	mov	r0, r2
 800e9d0:	4798      	blx	r3
 800e9d2:	69fb      	ldr	r3, [r7, #28]
 800e9d4:	fb03 f304 	mul.w	r3, r3, r4
 800e9d8:	3307      	adds	r3, #7
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	da00      	bge.n	800e9e0 <_ZN24MonochromeDisplayPainter19_createOffsetBitmapEb+0x50>
 800e9de:	3307      	adds	r3, #7
 800e9e0:	10db      	asrs	r3, r3, #3
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f007 fd60 	bl	80164a8 <_Znaj>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	461a      	mov	r2, r3
		_offscreenBitmap =
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	60da      	str	r2, [r3, #12]

		// If needed, we copy the actual content of the display to the off-screen buffer.
		if ( copyFromDisplay )
 800e9f0:	7afb      	ldrb	r3, [r7, #11]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d027      	beq.n	800ea46 <_ZN24MonochromeDisplayPainter19_createOffsetBitmapEb+0xb6>
			_display->readDisplayMemory( 0 , _offscreenBitmap ,
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	685e      	ldr	r6, [r3, #4]
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	685b      	ldr	r3, [r3, #4]
					_display->resolution().width * _display->resolution().height );
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	332c      	adds	r3, #44	; 0x2c
 800ea02:	681c      	ldr	r4, [r3, #0]
			_display->readDisplayMemory( 0 , _offscreenBitmap ,
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	68db      	ldr	r3, [r3, #12]
 800ea08:	607b      	str	r3, [r7, #4]
					_display->resolution().width * _display->resolution().height );
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	6859      	ldr	r1, [r3, #4]
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	685b      	ldr	r3, [r3, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	3308      	adds	r3, #8
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	f107 0220 	add.w	r2, r7, #32
 800ea1c:	4610      	mov	r0, r2
 800ea1e:	4798      	blx	r3
 800ea20:	6a3d      	ldr	r5, [r7, #32]
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	6859      	ldr	r1, [r3, #4]
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	685b      	ldr	r3, [r3, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	3308      	adds	r3, #8
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ea34:	4610      	mov	r0, r2
 800ea36:	4798      	blx	r3
 800ea38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea3a:	fb03 f305 	mul.w	r3, r3, r5
			_display->readDisplayMemory( 0 , _offscreenBitmap ,
 800ea3e:	687a      	ldr	r2, [r7, #4]
 800ea40:	2100      	movs	r1, #0
 800ea42:	4630      	mov	r0, r6
 800ea44:	47a0      	blx	r4
	}
}
 800ea46:	bf00      	nop
 800ea48:	3734      	adds	r7, #52	; 0x34
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ea4e <_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE>:

void MonochromeDisplayPainter::_setPixel( const IMonochromeDisplay::Point & p , IMonochromeDisplay::PixelColor color )
{
 800ea4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea50:	b091      	sub	sp, #68	; 0x44
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	60f8      	str	r0, [r7, #12]
 800ea56:	60b9      	str	r1, [r7, #8]
 800ea58:	4613      	mov	r3, r2
 800ea5a:	71fb      	strb	r3, [r7, #7]
	// Check pixel bounds.
	if ( p.x >= 0 && p.x < _display->resolution().width && p.y >= 0 && p.y < _display->resolution().height )
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	db25      	blt.n	800eab0 <_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE+0x62>
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	681c      	ldr	r4, [r3, #0]
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	6859      	ldr	r1, [r3, #4]
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	685b      	ldr	r3, [r3, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	3308      	adds	r3, #8
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f107 0210 	add.w	r2, r7, #16
 800ea7a:	4610      	mov	r0, r2
 800ea7c:	4798      	blx	r3
 800ea7e:	693b      	ldr	r3, [r7, #16]
 800ea80:	429c      	cmp	r4, r3
 800ea82:	da15      	bge.n	800eab0 <_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE+0x62>
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	685b      	ldr	r3, [r3, #4]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	db11      	blt.n	800eab0 <_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE+0x62>
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	685c      	ldr	r4, [r3, #4]
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	6859      	ldr	r1, [r3, #4]
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	3308      	adds	r3, #8
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	f107 0218 	add.w	r2, r7, #24
 800eaa2:	4610      	mov	r0, r2
 800eaa4:	4798      	blx	r3
 800eaa6:	69fb      	ldr	r3, [r7, #28]
 800eaa8:	429c      	cmp	r4, r3
 800eaaa:	da01      	bge.n	800eab0 <_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE+0x62>
 800eaac:	2301      	movs	r3, #1
 800eaae:	e000      	b.n	800eab2 <_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE+0x64>
 800eab0:	2300      	movs	r3, #0
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	f000 80a1 	beq.w	800ebfa <_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE+0x1ac>
	{
		// Do we need to draw into the off-screen bitmap?
		if ( _offscreenBitmap )
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	68db      	ldr	r3, [r3, #12]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	f000 8091 	beq.w	800ebe4 <_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE+0x196>
		{
			// Draw into the off-screen bitmap.
			if ( color == IMonochromeDisplay::White )
 800eac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eac6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eaca:	d143      	bne.n	800eb54 <_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE+0x106>
				*( _offscreenBitmap + ( p.y * _display->resolution().width + p.x ) / 8 ) &=
					~( 1 << ( ( p.y * _display->resolution().width + p.x ) % 8 ) );
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	685c      	ldr	r4, [r3, #4]
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	6859      	ldr	r1, [r3, #4]
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	3308      	adds	r3, #8
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f107 0220 	add.w	r2, r7, #32
 800eae2:	4610      	mov	r0, r2
 800eae4:	4798      	blx	r3
 800eae6:	6a3b      	ldr	r3, [r7, #32]
 800eae8:	fb03 f204 	mul.w	r2, r3, r4
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	4413      	add	r3, r2
 800eaf2:	425a      	negs	r2, r3
 800eaf4:	f003 0307 	and.w	r3, r3, #7
 800eaf8:	f002 0207 	and.w	r2, r2, #7
 800eafc:	bf58      	it	pl
 800eafe:	4253      	negpl	r3, r2
 800eb00:	2201      	movs	r2, #1
 800eb02:	fa02 f303 	lsl.w	r3, r2, r3
 800eb06:	43de      	mvns	r6, r3
				*( _offscreenBitmap + ( p.y * _display->resolution().width + p.x ) / 8 ) &=
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	68dc      	ldr	r4, [r3, #12]
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	685d      	ldr	r5, [r3, #4]
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	6859      	ldr	r1, [r3, #4]
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	685b      	ldr	r3, [r3, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	3308      	adds	r3, #8
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800eb22:	4610      	mov	r0, r2
 800eb24:	4798      	blx	r3
 800eb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb28:	fb03 f205 	mul.w	r2, r3, r5
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	4413      	add	r3, r2
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	da00      	bge.n	800eb38 <_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE+0xea>
 800eb36:	3307      	adds	r3, #7
 800eb38:	10db      	asrs	r3, r3, #3
 800eb3a:	4619      	mov	r1, r3
 800eb3c:	460b      	mov	r3, r1
 800eb3e:	4423      	add	r3, r4
 800eb40:	781b      	ldrb	r3, [r3, #0]
 800eb42:	b25a      	sxtb	r2, r3
 800eb44:	b273      	sxtb	r3, r6
 800eb46:	4013      	ands	r3, r2
 800eb48:	b25a      	sxtb	r2, r3
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	68db      	ldr	r3, [r3, #12]
 800eb4e:	440b      	add	r3, r1
 800eb50:	b2d2      	uxtb	r2, r2
 800eb52:	701a      	strb	r2, [r3, #0]

			if ( color == IMonochromeDisplay::Black )
 800eb54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb58:	2b01      	cmp	r3, #1
 800eb5a:	d14e      	bne.n	800ebfa <_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE+0x1ac>
				*( _offscreenBitmap + ( p.y * _display->resolution().width + p.x ) / 8 ) |=
					( 1 << ( ( p.y * _display->resolution().width + p.x ) % 8 ) );
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	685c      	ldr	r4, [r3, #4]
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	6859      	ldr	r1, [r3, #4]
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	685b      	ldr	r3, [r3, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	3308      	adds	r3, #8
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800eb72:	4610      	mov	r0, r2
 800eb74:	4798      	blx	r3
 800eb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb78:	fb03 f204 	mul.w	r2, r3, r4
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	4413      	add	r3, r2
 800eb82:	425a      	negs	r2, r3
 800eb84:	f003 0307 	and.w	r3, r3, #7
 800eb88:	f002 0207 	and.w	r2, r2, #7
 800eb8c:	bf58      	it	pl
 800eb8e:	4253      	negpl	r3, r2
 800eb90:	2201      	movs	r2, #1
 800eb92:	fa02 f603 	lsl.w	r6, r2, r3
				*( _offscreenBitmap + ( p.y * _display->resolution().width + p.x ) / 8 ) |=
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	68dc      	ldr	r4, [r3, #12]
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	685d      	ldr	r5, [r3, #4]
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	6859      	ldr	r1, [r3, #4]
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	685b      	ldr	r3, [r3, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	3308      	adds	r3, #8
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ebb0:	4610      	mov	r0, r2
 800ebb2:	4798      	blx	r3
 800ebb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb6:	fb03 f205 	mul.w	r2, r3, r5
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	4413      	add	r3, r2
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	da00      	bge.n	800ebc6 <_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE+0x178>
 800ebc4:	3307      	adds	r3, #7
 800ebc6:	10db      	asrs	r3, r3, #3
 800ebc8:	4619      	mov	r1, r3
 800ebca:	460b      	mov	r3, r1
 800ebcc:	4423      	add	r3, r4
 800ebce:	781b      	ldrb	r3, [r3, #0]
 800ebd0:	b25a      	sxtb	r2, r3
 800ebd2:	b273      	sxtb	r3, r6
 800ebd4:	4313      	orrs	r3, r2
 800ebd6:	b25a      	sxtb	r2, r3
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	68db      	ldr	r3, [r3, #12]
 800ebdc:	440b      	add	r3, r1
 800ebde:	b2d2      	uxtb	r2, r2
 800ebe0:	701a      	strb	r2, [r3, #0]
		{
			// Draw directly onto the display.
			_display->setPixel( p , color );
		}
	}
}
 800ebe2:	e00a      	b.n	800ebfa <_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE+0x1ac>
			_display->setPixel( p , color );
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	6858      	ldr	r0, [r3, #4]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	685b      	ldr	r3, [r3, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	3320      	adds	r3, #32
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800ebf6:	68b9      	ldr	r1, [r7, #8]
 800ebf8:	4798      	blx	r3
}
 800ebfa:	bf00      	nop
 800ebfc:	3744      	adds	r7, #68	; 0x44
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ec02 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800ec02:	b480      	push	{r7}
 800ec04:	b083      	sub	sp, #12
 800ec06:	af00      	add	r7, sp, #0
 800ec08:	6078      	str	r0, [r7, #4]
 800ec0a:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	681a      	ldr	r2, [r3, #0]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	da01      	bge.n	800ec1c <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	e000      	b.n	800ec1e <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 800ec1c:	687b      	ldr	r3, [r7, #4]
    }
 800ec1e:	4618      	mov	r0, r3
 800ec20:	370c      	adds	r7, #12
 800ec22:	46bd      	mov	sp, r7
 800ec24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec28:	4770      	bx	lr

0800ec2a <_ZN24MonochromeDisplayPainter12_syncDisplayEii>:

void MonochromeDisplayPainter::_syncDisplay( int startLine , int endLine )
{
 800ec2a:	b590      	push	{r4, r7, lr}
 800ec2c:	b091      	sub	sp, #68	; 0x44
 800ec2e:	af00      	add	r7, sp, #0
 800ec30:	60f8      	str	r0, [r7, #12]
 800ec32:	60b9      	str	r1, [r7, #8]
 800ec34:	607a      	str	r2, [r7, #4]
	// Do we need to sync the display.
	if ( _offscreenBitmap && !_disableSync )
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	68db      	ldr	r3, [r3, #12]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d07b      	beq.n	800ed36 <_ZN24MonochromeDisplayPainter12_syncDisplayEii+0x10c>
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	7c1b      	ldrb	r3, [r3, #16]
 800ec42:	f083 0301 	eor.w	r3, r3, #1
 800ec46:	b2db      	uxtb	r3, r3
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d074      	beq.n	800ed36 <_ZN24MonochromeDisplayPainter12_syncDisplayEii+0x10c>
	{
		// Check line (Y) bounds.
		if ( startLine >= 0 && startLine <= _display->resolution().height &&
 800ec4c:	68bb      	ldr	r3, [r7, #8]
			 endLine >= 0 && endLine <= _display->resolution().height )
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	db22      	blt.n	800ec98 <_ZN24MonochromeDisplayPainter12_syncDisplayEii+0x6e>
		if ( startLine >= 0 && startLine <= _display->resolution().height &&
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	6859      	ldr	r1, [r3, #4]
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	685b      	ldr	r3, [r3, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	3308      	adds	r3, #8
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	f107 0214 	add.w	r2, r7, #20
 800ec64:	4610      	mov	r0, r2
 800ec66:	4798      	blx	r3
 800ec68:	69ba      	ldr	r2, [r7, #24]
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	db13      	blt.n	800ec98 <_ZN24MonochromeDisplayPainter12_syncDisplayEii+0x6e>
			 endLine >= 0 && endLine <= _display->resolution().height )
 800ec70:	687b      	ldr	r3, [r7, #4]
		if ( startLine >= 0 && startLine <= _display->resolution().height &&
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	db10      	blt.n	800ec98 <_ZN24MonochromeDisplayPainter12_syncDisplayEii+0x6e>
			 endLine >= 0 && endLine <= _display->resolution().height )
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	6859      	ldr	r1, [r3, #4]
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	3308      	adds	r3, #8
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	f107 021c 	add.w	r2, r7, #28
 800ec88:	4610      	mov	r0, r2
 800ec8a:	4798      	blx	r3
 800ec8c:	6a3a      	ldr	r2, [r7, #32]
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	db01      	blt.n	800ec98 <_ZN24MonochromeDisplayPainter12_syncDisplayEii+0x6e>
 800ec94:	2301      	movs	r3, #1
 800ec96:	e000      	b.n	800ec9a <_ZN24MonochromeDisplayPainter12_syncDisplayEii+0x70>
 800ec98:	2300      	movs	r3, #0
		if ( startLine >= 0 && startLine <= _display->resolution().height &&
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d04b      	beq.n	800ed36 <_ZN24MonochromeDisplayPainter12_syncDisplayEii+0x10c>
		{
			size_t bitOffset = std::min( startLine , endLine ) * _display->resolution().width;
 800ec9e:	1d3a      	adds	r2, r7, #4
 800eca0:	f107 0308 	add.w	r3, r7, #8
 800eca4:	4611      	mov	r1, r2
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7ff ffab 	bl	800ec02 <_ZSt3minIiERKT_S2_S2_>
 800ecac:	4603      	mov	r3, r0
 800ecae:	681c      	ldr	r4, [r3, #0]
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	6859      	ldr	r1, [r3, #4]
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	685b      	ldr	r3, [r3, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	3308      	adds	r3, #8
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ecc2:	4610      	mov	r0, r2
 800ecc4:	4798      	blx	r3
 800ecc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc8:	fb03 f304 	mul.w	r3, r3, r4
 800eccc:	63fb      	str	r3, [r7, #60]	; 0x3c
			size_t numberOfBits = _display->resolution().width * abs( endLine - startLine );
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	6859      	ldr	r1, [r3, #4]
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	685b      	ldr	r3, [r3, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	3308      	adds	r3, #8
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800ece0:	4610      	mov	r0, r2
 800ece2:	4798      	blx	r3
 800ece4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece6:	6879      	ldr	r1, [r7, #4]
 800ece8:	68ba      	ldr	r2, [r7, #8]
 800ecea:	1a8a      	subs	r2, r1, r2
 800ecec:	2a00      	cmp	r2, #0
 800ecee:	bfb8      	it	lt
 800ecf0:	4252      	neglt	r2, r2
 800ecf2:	fb02 f303 	mul.w	r3, r2, r3
 800ecf6:	63bb      	str	r3, [r7, #56]	; 0x38
			size_t modulo = bitOffset % 8;
 800ecf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecfa:	f003 0307 	and.w	r3, r3, #7
 800ecfe:	637b      	str	r3, [r7, #52]	; 0x34

			// Align the start address and the number of bits to 8 bit bounds.
			if ( modulo )
 800ed00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d007      	beq.n	800ed16 <_ZN24MonochromeDisplayPainter12_syncDisplayEii+0xec>
			{
				bitOffset -= modulo;
 800ed06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed0a:	1ad3      	subs	r3, r2, r3
 800ed0c:	63fb      	str	r3, [r7, #60]	; 0x3c
				numberOfBits += modulo;
 800ed0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed12:	4413      	add	r3, r2
 800ed14:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			// Write the off-screen bitmap buffer to the display.
			_display->writeDisplayMemory( bitOffset / 8 , _offscreenBitmap + bitOffset / 8 , numberOfBits );
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	6858      	ldr	r0, [r3, #4]
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	3328      	adds	r3, #40	; 0x28
 800ed22:	681c      	ldr	r4, [r3, #0]
 800ed24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed26:	08d9      	lsrs	r1, r3, #3
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	68da      	ldr	r2, [r3, #12]
 800ed2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed2e:	08db      	lsrs	r3, r3, #3
 800ed30:	441a      	add	r2, r3
 800ed32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed34:	47a0      	blx	r4
		}
	}
}
 800ed36:	bf00      	nop
 800ed38:	3744      	adds	r7, #68	; 0x44
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd90      	pop	{r4, r7, pc}
	...

0800ed40 <_Z41__static_initialization_and_destruction_0ii>:
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b088      	sub	sp, #32
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	6039      	str	r1, [r7, #0]
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2b01      	cmp	r3, #1
 800ed4e:	d122      	bne.n	800ed96 <_Z41__static_initialization_and_destruction_0ii+0x56>
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed56:	4293      	cmp	r3, r2
 800ed58:	d11d      	bne.n	800ed96 <_Z41__static_initialization_and_destruction_0ii+0x56>
 800ed5a:	4b18      	ldr	r3, [pc, #96]	; (800edbc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	613b      	str	r3, [r7, #16]
 800ed60:	f107 0310 	add.w	r3, r7, #16
 800ed64:	60bb      	str	r3, [r7, #8]
 800ed66:	2304      	movs	r3, #4
 800ed68:	60fb      	str	r3, [r7, #12]
 800ed6a:	f107 0308 	add.w	r3, r7, #8
 800ed6e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ed72:	4813      	ldr	r0, [pc, #76]	; (800edc0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800ed74:	f7f7 ffa6 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
  static const desenet::Address SENSOR_ADDRESS({0xC7, 0xC7, 0xC7, 0xC7});	///< @brief Sensor's reception address.
 800ed78:	4b12      	ldr	r3, [pc, #72]	; (800edc4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	61fb      	str	r3, [r7, #28]
 800ed7e:	f107 031c 	add.w	r3, r7, #28
 800ed82:	617b      	str	r3, [r7, #20]
 800ed84:	2304      	movs	r3, #4
 800ed86:	61bb      	str	r3, [r7, #24]
 800ed88:	f107 0314 	add.w	r3, r7, #20
 800ed8c:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ed90:	480d      	ldr	r0, [pc, #52]	; (800edc8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800ed92:	f7f7 ff97 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d10a      	bne.n	800edb2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eda2:	4293      	cmp	r3, r2
 800eda4:	d105      	bne.n	800edb2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800eda6:	4808      	ldr	r0, [pc, #32]	; (800edc8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800eda8:	f7f8 f8c8 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 800edac:	4804      	ldr	r0, [pc, #16]	; (800edc0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800edae:	f7f8 f8c5 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
 800edb2:	bf00      	nop
 800edb4:	3720      	adds	r7, #32
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}
 800edba:	bf00      	nop
 800edbc:	08019614 	.word	0x08019614
 800edc0:	20001700 	.word	0x20001700
 800edc4:	08019618 	.word	0x08019618
 800edc8:	20001708 	.word	0x20001708

0800edcc <_GLOBAL__sub_I__ZN24MonochromeDisplayPainterC2EP18IMonochromeDisplayb>:
 800edcc:	b580      	push	{r7, lr}
 800edce:	af00      	add	r7, sp, #0
 800edd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800edd4:	2001      	movs	r0, #1
 800edd6:	f7ff ffb3 	bl	800ed40 <_Z41__static_initialization_and_destruction_0ii>
 800edda:	bd80      	pop	{r7, pc}

0800eddc <_GLOBAL__sub_D__ZN24MonochromeDisplayPainterC2EP18IMonochromeDisplayb>:
 800eddc:	b580      	push	{r7, lr}
 800edde:	af00      	add	r7, sp, #0
 800ede0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ede4:	2000      	movs	r0, #0
 800ede6:	f7ff ffab 	bl	800ed40 <_Z41__static_initialization_and_destruction_0ii>
 800edea:	bd80      	pop	{r7, pc}

0800edec <_ZN5board13Accelerometer13isInitializedEv>:
	static void getAccelerationValues(int16_t & x, int16_t & y, int16_t & z);
	static void onIrq(uint16_t GPIO_Pin);

protected:
	static void initializeAccelerometer();
	inline static bool isInitialized() { return _bInitialized; }
 800edec:	b480      	push	{r7}
 800edee:	af00      	add	r7, sp, #0
 800edf0:	4b03      	ldr	r3, [pc, #12]	; (800ee00 <_ZN5board13Accelerometer13isInitializedEv+0x14>)
 800edf2:	781b      	ldrb	r3, [r3, #0]
 800edf4:	4618      	mov	r0, r3
 800edf6:	46bd      	mov	sp, r7
 800edf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfc:	4770      	bx	lr
 800edfe:	bf00      	nop
 800ee00:	20001720 	.word	0x20001720

0800ee04 <_ZN5board13Accelerometer23initializeAccelerometerEv>:
} acc_data;

bool Accelerometer::_bInitialized = false;

void Accelerometer::initializeAccelerometer()
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	af00      	add	r7, sp, #0
    Accelerometer_Init();
 800ee08:	f000 f8a8 	bl	800ef5c <Accelerometer_Init>

#if (ACCELEROMETER_ENABLE_IRQ != 0)
    Accelerometer_EnableInterrupt();
#endif
}
 800ee0c:	bf00      	nop
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <_ZN5board13Accelerometer21getAccelerationValuesERsS1_S1_>:

// static
void Accelerometer::getAccelerationValues(int16_t & x, int16_t & y, int16_t & z)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b086      	sub	sp, #24
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	60f8      	str	r0, [r7, #12]
 800ee18:	60b9      	str	r1, [r7, #8]
 800ee1a:	607a      	str	r2, [r7, #4]
	int16_t tx = 0, ty = 0, tz = 0;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	82fb      	strh	r3, [r7, #22]
 800ee20:	2300      	movs	r3, #0
 800ee22:	82bb      	strh	r3, [r7, #20]
 800ee24:	2300      	movs	r3, #0
 800ee26:	827b      	strh	r3, [r7, #18]

	Accelerometer_Get(&tx, &ty, &tz);
 800ee28:	f107 0212 	add.w	r2, r7, #18
 800ee2c:	f107 0114 	add.w	r1, r7, #20
 800ee30:	f107 0316 	add.w	r3, r7, #22
 800ee34:	4618      	mov	r0, r3
 800ee36:	f000 f8cd 	bl	800efd4 <Accelerometer_Get>

	x = tx;
 800ee3a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	801a      	strh	r2, [r3, #0]
	y = ty;
 800ee42:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	801a      	strh	r2, [r3, #0]
	z = tz;
 800ee4a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	801a      	strh	r2, [r3, #0]
}
 800ee52:	bf00      	nop
 800ee54:	3718      	adds	r7, #24
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}

0800ee5a <_ZN5board13Accelerometer5onIrqEt>:

void Accelerometer::onIrq(uint16_t GPIO_Pin)
{
 800ee5a:	b480      	push	{r7}
 800ee5c:	b083      	sub	sp, #12
 800ee5e:	af00      	add	r7, sp, #0
 800ee60:	4603      	mov	r3, r0
 800ee62:	80fb      	strh	r3, [r7, #6]
	Trace::outln("Acc::FF_WU_SRC");
#endif
#if (ACCELEROMETER_ENABLE_IRQ != 0)
	Accelerometer_ClearInterrupt();
#endif
}
 800ee64:	bf00      	nop
 800ee66:	370c      	adds	r7, #12
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6e:	4770      	bx	lr

0800ee70 <_ZN5board13Accelerometer10initializeEv>:

bool Accelerometer::initialize()
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b082      	sub	sp, #8
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
	if (!isInitialized())
 800ee78:	f7ff ffb8 	bl	800edec <_ZN5board13Accelerometer13isInitializedEv>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	f083 0301 	eor.w	r3, r3, #1
 800ee82:	b2db      	uxtb	r3, r3
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d003      	beq.n	800ee90 <_ZN5board13Accelerometer10initializeEv+0x20>
	{
		initializeAccelerometer();
 800ee88:	f7ff ffbc 	bl	800ee04 <_ZN5board13Accelerometer23initializeAccelerometerEv>
		return true;
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	e005      	b.n	800ee9c <_ZN5board13Accelerometer10initializeEv+0x2c>
	}
	assert(false);	// Resource should only be initialized once. Maybe you have more then one instance of Accelerometer.
 800ee90:	4b04      	ldr	r3, [pc, #16]	; (800eea4 <_ZN5board13Accelerometer10initializeEv+0x34>)
 800ee92:	4a05      	ldr	r2, [pc, #20]	; (800eea8 <_ZN5board13Accelerometer10initializeEv+0x38>)
 800ee94:	213a      	movs	r1, #58	; 0x3a
 800ee96:	4805      	ldr	r0, [pc, #20]	; (800eeac <_ZN5board13Accelerometer10initializeEv+0x3c>)
 800ee98:	f007 fbd0 	bl	801663c <__assert_func>
	return false;
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3708      	adds	r7, #8
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}
 800eea4:	0801961c 	.word	0x0801961c
 800eea8:	08019624 	.word	0x08019624
 800eeac:	0801964c 	.word	0x0801964c

0800eeb0 <_Z41__static_initialization_and_destruction_0ii>:
	Trace::out("Acc::wakeup");
#endif
	Accelerometer_Init();
}

} // namespace board
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b088      	sub	sp, #32
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	6039      	str	r1, [r7, #0]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2b01      	cmp	r3, #1
 800eebe:	d122      	bne.n	800ef06 <_Z41__static_initialization_and_destruction_0ii+0x56>
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d11d      	bne.n	800ef06 <_Z41__static_initialization_and_destruction_0ii+0x56>
 800eeca:	4b18      	ldr	r3, [pc, #96]	; (800ef2c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	613b      	str	r3, [r7, #16]
 800eed0:	f107 0310 	add.w	r3, r7, #16
 800eed4:	60bb      	str	r3, [r7, #8]
 800eed6:	2304      	movs	r3, #4
 800eed8:	60fb      	str	r3, [r7, #12]
 800eeda:	f107 0308 	add.w	r3, r7, #8
 800eede:	e893 0006 	ldmia.w	r3, {r1, r2}
 800eee2:	4813      	ldr	r0, [pc, #76]	; (800ef30 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800eee4:	f7f7 feee 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
  static const desenet::Address SENSOR_ADDRESS({0xC7, 0xC7, 0xC7, 0xC7});	///< @brief Sensor's reception address.
 800eee8:	4b12      	ldr	r3, [pc, #72]	; (800ef34 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	61fb      	str	r3, [r7, #28]
 800eeee:	f107 031c 	add.w	r3, r7, #28
 800eef2:	617b      	str	r3, [r7, #20]
 800eef4:	2304      	movs	r3, #4
 800eef6:	61bb      	str	r3, [r7, #24]
 800eef8:	f107 0314 	add.w	r3, r7, #20
 800eefc:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ef00:	480d      	ldr	r0, [pc, #52]	; (800ef38 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800ef02:	f7f7 fedf 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d10a      	bne.n	800ef22 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d105      	bne.n	800ef22 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800ef16:	4808      	ldr	r0, [pc, #32]	; (800ef38 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800ef18:	f7f8 f810 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 800ef1c:	4804      	ldr	r0, [pc, #16]	; (800ef30 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800ef1e:	f7f8 f80d 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
 800ef22:	bf00      	nop
 800ef24:	3720      	adds	r7, #32
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	080197d0 	.word	0x080197d0
 800ef30:	20001710 	.word	0x20001710
 800ef34:	080197d4 	.word	0x080197d4
 800ef38:	20001718 	.word	0x20001718

0800ef3c <_GLOBAL__sub_I__ZN5board13Accelerometer13_bInitializedE>:
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	af00      	add	r7, sp, #0
 800ef40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ef44:	2001      	movs	r0, #1
 800ef46:	f7ff ffb3 	bl	800eeb0 <_Z41__static_initialization_and_destruction_0ii>
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <_GLOBAL__sub_D__ZN5board13Accelerometer13_bInitializedE>:
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	af00      	add	r7, sp, #0
 800ef50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ef54:	2000      	movs	r0, #0
 800ef56:	f7ff ffab 	bl	800eeb0 <_Z41__static_initialization_and_destruction_0ii>
 800ef5a:	bd80      	pop	{r7, pc}

0800ef5c <Accelerometer_Init>:

//********************************************************************************
// Init this sensors
//********************************************************************************
uint32_t Accelerometer_Init()
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b084      	sub	sp, #16
 800ef60:	af02      	add	r7, sp, #8
    uint8_t data[5];

    data[0] = ACCEL_WHO_AM_I;
 800ef62:	230f      	movs	r3, #15
 800ef64:	703b      	strb	r3, [r7, #0]
    HAL_I2C_Master_Transmit(&ACCEL_I2C,ACCEL_ADDR,data,1,20);
 800ef66:	463a      	mov	r2, r7
 800ef68:	2314      	movs	r3, #20
 800ef6a:	9300      	str	r3, [sp, #0]
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	2132      	movs	r1, #50	; 0x32
 800ef70:	4816      	ldr	r0, [pc, #88]	; (800efcc <Accelerometer_Init+0x70>)
 800ef72:	f7f2 ff0d 	bl	8001d90 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&ACCEL_I2C,ACCEL_ADDR,data,1,20);
 800ef76:	463a      	mov	r2, r7
 800ef78:	2314      	movs	r3, #20
 800ef7a:	9300      	str	r3, [sp, #0]
 800ef7c:	2301      	movs	r3, #1
 800ef7e:	2132      	movs	r1, #50	; 0x32
 800ef80:	4812      	ldr	r0, [pc, #72]	; (800efcc <Accelerometer_Init+0x70>)
 800ef82:	f7f2 fff9 	bl	8001f78 <HAL_I2C_Master_Receive>
    if(data[0] != ACCEL_WHO_AM_I_DATA)
 800ef86:	783b      	ldrb	r3, [r7, #0]
 800ef88:	2b33      	cmp	r3, #51	; 0x33
 800ef8a:	d001      	beq.n	800ef90 <Accelerometer_Init+0x34>
    {
        return ACCEL_RESPONSE_ERROR;
 800ef8c:	4b10      	ldr	r3, [pc, #64]	; (800efd0 <Accelerometer_Init+0x74>)
 800ef8e:	e018      	b.n	800efc2 <Accelerometer_Init+0x66>
    }
    //------------------------------------------------------------------------------
    data[0] = ACCEL_CTRL_REG0;						// disable internal pull-up
 800ef90:	231e      	movs	r3, #30
 800ef92:	703b      	strb	r3, [r7, #0]
    data[1] = 0x90;												// 25 Hz measure
 800ef94:	2390      	movs	r3, #144	; 0x90
 800ef96:	707b      	strb	r3, [r7, #1]
    HAL_I2C_Master_Transmit(&ACCEL_I2C,ACCEL_ADDR,data,2,20);
 800ef98:	463a      	mov	r2, r7
 800ef9a:	2314      	movs	r3, #20
 800ef9c:	9300      	str	r3, [sp, #0]
 800ef9e:	2302      	movs	r3, #2
 800efa0:	2132      	movs	r1, #50	; 0x32
 800efa2:	480a      	ldr	r0, [pc, #40]	; (800efcc <Accelerometer_Init+0x70>)
 800efa4:	f7f2 fef4 	bl	8001d90 <HAL_I2C_Master_Transmit>
    //------------------------------------------------------------------------------
    data[0] = ACCEL_CTRL_REG1;
 800efa8:	2320      	movs	r3, #32
 800efaa:	703b      	strb	r3, [r7, #0]
    data[1] = 0xB7;												// 25 Hz measure, high resolution
 800efac:	23b7      	movs	r3, #183	; 0xb7
 800efae:	707b      	strb	r3, [r7, #1]
    HAL_I2C_Master_Transmit(&ACCEL_I2C,ACCEL_ADDR,data,2,20);
 800efb0:	463a      	mov	r2, r7
 800efb2:	2314      	movs	r3, #20
 800efb4:	9300      	str	r3, [sp, #0]
 800efb6:	2302      	movs	r3, #2
 800efb8:	2132      	movs	r1, #50	; 0x32
 800efba:	4804      	ldr	r0, [pc, #16]	; (800efcc <Accelerometer_Init+0x70>)
 800efbc:	f7f2 fee8 	bl	8001d90 <HAL_I2C_Master_Transmit>

    return 0;   // no error
 800efc0:	2300      	movs	r3, #0
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3708      	adds	r7, #8
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}
 800efca:	bf00      	nop
 800efcc:	20001cb4 	.word	0x20001cb4
 800efd0:	ffff0001 	.word	0xffff0001

0800efd4 <Accelerometer_Get>:
//********************************************************************************
// Measure this sensors values x,y,z
// Values are signed in mg
//********************************************************************************
uint32_t Accelerometer_Get(int16_t * x, int16_t * y, int16_t * z)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b088      	sub	sp, #32
 800efd8:	af02      	add	r7, sp, #8
 800efda:	60f8      	str	r0, [r7, #12]
 800efdc:	60b9      	str	r1, [r7, #8]
 800efde:	607a      	str	r2, [r7, #4]
    uint8_t tmp[7];

    tmp[0] = ACCEL_DATA_REGS;
 800efe0:	23a8      	movs	r3, #168	; 0xa8
 800efe2:	743b      	strb	r3, [r7, #16]
    HAL_I2C_Master_Transmit(&ACCEL_I2C,ACCEL_ADDR,tmp,1,20);
 800efe4:	f107 0210 	add.w	r2, r7, #16
 800efe8:	2314      	movs	r3, #20
 800efea:	9300      	str	r3, [sp, #0]
 800efec:	2301      	movs	r3, #1
 800efee:	2132      	movs	r1, #50	; 0x32
 800eff0:	4820      	ldr	r0, [pc, #128]	; (800f074 <Accelerometer_Get+0xa0>)
 800eff2:	f7f2 fecd 	bl	8001d90 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&ACCEL_I2C,ACCEL_ADDR,tmp,6,20);
 800eff6:	f107 0210 	add.w	r2, r7, #16
 800effa:	2314      	movs	r3, #20
 800effc:	9300      	str	r3, [sp, #0]
 800effe:	2306      	movs	r3, #6
 800f000:	2132      	movs	r1, #50	; 0x32
 800f002:	481c      	ldr	r0, [pc, #112]	; (800f074 <Accelerometer_Get+0xa0>)
 800f004:	f7f2 ffb8 	bl	8001f78 <HAL_I2C_Master_Receive>
    *x = tmp[0] | (tmp[1] << 8);
 800f008:	7c3b      	ldrb	r3, [r7, #16]
 800f00a:	b21a      	sxth	r2, r3
 800f00c:	7c7b      	ldrb	r3, [r7, #17]
 800f00e:	021b      	lsls	r3, r3, #8
 800f010:	b21b      	sxth	r3, r3
 800f012:	4313      	orrs	r3, r2
 800f014:	b21a      	sxth	r2, r3
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	801a      	strh	r2, [r3, #0]
    *y = tmp[2] | (tmp[3] << 8);
 800f01a:	7cbb      	ldrb	r3, [r7, #18]
 800f01c:	b21a      	sxth	r2, r3
 800f01e:	7cfb      	ldrb	r3, [r7, #19]
 800f020:	021b      	lsls	r3, r3, #8
 800f022:	b21b      	sxth	r3, r3
 800f024:	4313      	orrs	r3, r2
 800f026:	b21a      	sxth	r2, r3
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	801a      	strh	r2, [r3, #0]
    *z = tmp[4] | (tmp[5] << 8);
 800f02c:	7d3b      	ldrb	r3, [r7, #20]
 800f02e:	b21a      	sxth	r2, r3
 800f030:	7d7b      	ldrb	r3, [r7, #21]
 800f032:	021b      	lsls	r3, r3, #8
 800f034:	b21b      	sxth	r3, r3
 800f036:	4313      	orrs	r3, r2
 800f038:	b21a      	sxth	r2, r3
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	801a      	strh	r2, [r3, #0]
    // for high resolution (shift value)
    *x = *x >> 4;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f044:	111b      	asrs	r3, r3, #4
 800f046:	b21a      	sxth	r2, r3
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	801a      	strh	r2, [r3, #0]
    *y = *y >> 4;
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f052:	111b      	asrs	r3, r3, #4
 800f054:	b21a      	sxth	r2, r3
 800f056:	68bb      	ldr	r3, [r7, #8]
 800f058:	801a      	strh	r2, [r3, #0]
    *z = *z >> 4;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f060:	111b      	asrs	r3, r3, #4
 800f062:	b21a      	sxth	r2, r3
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	801a      	strh	r2, [r3, #0]
    return 0;
 800f068:	2300      	movs	r3, #0
}
 800f06a:	4618      	mov	r0, r3
 800f06c:	3718      	adds	r7, #24
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
 800f072:	bf00      	nop
 800f074:	20001cb4 	.word	0x20001cb4

0800f078 <_ZN5board10initializeEv>:
#include "platform-config.h"
#include "trace/trace.h"
#include "board.h"

void board::initialize()
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	af00      	add	r7, sp, #0
#if (USE_TRACE != 0)
	Trace::initialize();
 800f07c:	f000 fcf2 	bl	800fa64 <_ZN5Trace10initializeEv>
#endif // USE_TRACE
}
 800f080:	bf00      	nop
 800f082:	bd80      	pop	{r7, pc}

0800f084 <_Z41__static_initialization_and_destruction_0ii>:
 800f084:	b580      	push	{r7, lr}
 800f086:	b088      	sub	sp, #32
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	6039      	str	r1, [r7, #0]
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2b01      	cmp	r3, #1
 800f092:	d122      	bne.n	800f0da <_Z41__static_initialization_and_destruction_0ii+0x56>
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f09a:	4293      	cmp	r3, r2
 800f09c:	d11d      	bne.n	800f0da <_Z41__static_initialization_and_destruction_0ii+0x56>
 800f09e:	4b18      	ldr	r3, [pc, #96]	; (800f100 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	613b      	str	r3, [r7, #16]
 800f0a4:	f107 0310 	add.w	r3, r7, #16
 800f0a8:	60bb      	str	r3, [r7, #8]
 800f0aa:	2304      	movs	r3, #4
 800f0ac:	60fb      	str	r3, [r7, #12]
 800f0ae:	f107 0308 	add.w	r3, r7, #8
 800f0b2:	e893 0006 	ldmia.w	r3, {r1, r2}
 800f0b6:	4813      	ldr	r0, [pc, #76]	; (800f104 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800f0b8:	f7f7 fe04 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
  static const desenet::Address SENSOR_ADDRESS({0xC7, 0xC7, 0xC7, 0xC7});	///< @brief Sensor's reception address.
 800f0bc:	4b12      	ldr	r3, [pc, #72]	; (800f108 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	61fb      	str	r3, [r7, #28]
 800f0c2:	f107 031c 	add.w	r3, r7, #28
 800f0c6:	617b      	str	r3, [r7, #20]
 800f0c8:	2304      	movs	r3, #4
 800f0ca:	61bb      	str	r3, [r7, #24]
 800f0cc:	f107 0314 	add.w	r3, r7, #20
 800f0d0:	e893 0006 	ldmia.w	r3, {r1, r2}
 800f0d4:	480d      	ldr	r0, [pc, #52]	; (800f10c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800f0d6:	f7f7 fdf5 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d10a      	bne.n	800f0f6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0e6:	4293      	cmp	r3, r2
 800f0e8:	d105      	bne.n	800f0f6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800f0ea:	4808      	ldr	r0, [pc, #32]	; (800f10c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800f0ec:	f7f7 ff26 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 800f0f0:	4804      	ldr	r0, [pc, #16]	; (800f104 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800f0f2:	f7f7 ff23 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
 800f0f6:	bf00      	nop
 800f0f8:	3720      	adds	r7, #32
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}
 800f0fe:	bf00      	nop
 800f100:	080198c4 	.word	0x080198c4
 800f104:	20001724 	.word	0x20001724
 800f108:	080198c8 	.word	0x080198c8
 800f10c:	2000172c 	.word	0x2000172c

0800f110 <_GLOBAL__sub_I__ZN5board10initializeEv>:
 800f110:	b580      	push	{r7, lr}
 800f112:	af00      	add	r7, sp, #0
 800f114:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f118:	2001      	movs	r0, #1
 800f11a:	f7ff ffb3 	bl	800f084 <_Z41__static_initialization_and_destruction_0ii>
 800f11e:	bd80      	pop	{r7, pc}

0800f120 <_GLOBAL__sub_D__ZN5board10initializeEv>:
 800f120:	b580      	push	{r7, lr}
 800f122:	af00      	add	r7, sp, #0
 800f124:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f128:	2000      	movs	r0, #0
 800f12a:	f7ff ffab 	bl	800f084 <_Z41__static_initialization_and_destruction_0ii>
 800f12e:	bd80      	pop	{r7, pc}

0800f130 <_ZN9IJoystickC1Ev>:
 */
class IJoystick
{
protected:
    // It is just an interface, so constructor and destructor should be not public.
    explicit IJoystick() {}
 800f130:	b480      	push	{r7}
 800f132:	b083      	sub	sp, #12
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	4a04      	ldr	r2, [pc, #16]	; (800f14c <_ZN9IJoystickC1Ev+0x1c>)
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	601a      	str	r2, [r3, #0]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	4618      	mov	r0, r3
 800f142:	370c      	adds	r7, #12
 800f144:	46bd      	mov	sp, r7
 800f146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14a:	4770      	bx	lr
 800f14c:	0801c338 	.word	0x0801c338

0800f150 <_ZN9IJoystickD1Ev>:
    virtual ~IJoystick() {}
 800f150:	b480      	push	{r7}
 800f152:	b083      	sub	sp, #12
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	4a04      	ldr	r2, [pc, #16]	; (800f16c <_ZN9IJoystickD1Ev+0x1c>)
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	601a      	str	r2, [r3, #0]
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	4618      	mov	r0, r3
 800f162:	370c      	adds	r7, #12
 800f164:	46bd      	mov	sp, r7
 800f166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16a:	4770      	bx	lr
 800f16c:	0801c338 	.word	0x0801c338

0800f170 <_ZN9IJoystickD0Ev>:
 800f170:	b580      	push	{r7, lr}
 800f172:	b082      	sub	sp, #8
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	6878      	ldr	r0, [r7, #4]
 800f17a:	f7ff ffe9 	bl	800f150 <_ZN9IJoystickD1Ev>
 800f17e:	2104      	movs	r1, #4
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f007 f96d 	bl	8016460 <_ZdlPvj>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	4618      	mov	r0, r3
 800f18a:	3708      	adds	r7, #8
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <_ZN5board8JoystickC1Ev>:
#include "main.h"
#include "critical/critical.h"
#include "xf/xfstaticevent.h"
#include "joystick.h"
namespace board{
Joystick::Joystick()
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7ff ffc8 	bl	800f130 <_ZN9IJoystickC1Ev>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	3304      	adds	r3, #4
 800f1a4:	2100      	movs	r1, #0
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f005 f960 	bl	801446c <_ZN10XFReactiveC1EP8XFThread>
 800f1ac:	4a0c      	ldr	r2, [pc, #48]	; (800f1e0 <_ZN5board8JoystickC1Ev+0x50>)
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	601a      	str	r2, [r3, #0]
 800f1b2:	4a0c      	ldr	r2, [pc, #48]	; (800f1e4 <_ZN5board8JoystickC1Ev+0x54>)
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	605a      	str	r2, [r3, #4]
{
	_bInitialized = false;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	741a      	strb	r2, [r3, #16]
	_pObserver = NULL;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	615a      	str	r2, [r3, #20]
	_position.position = Invalid;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	761a      	strb	r2, [r3, #24]
	_currentState = STATE_INITIAL;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2201      	movs	r2, #1
 800f1ce:	771a      	strb	r2, [r3, #28]
	_timeoutActive = false;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	775a      	strb	r2, [r3, #29]
}
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	4618      	mov	r0, r3
 800f1da:	3708      	adds	r7, #8
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}
 800f1e0:	0801c2f0 	.word	0x0801c2f0
 800f1e4:	0801c314 	.word	0x0801c314

0800f1e8 <_ZN5board8Joystick10initializeEv>:
	_position.position = Invalid;
	_currentState = STATE_INITIAL;
}

bool Joystick::initialize()
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b083      	sub	sp, #12
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
	if (!_bInitialized)
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	7c1b      	ldrb	r3, [r3, #16]
 800f1f4:	f083 0301 	eor.w	r3, r3, #1
 800f1f8:	b2db      	uxtb	r3, r3
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d004      	beq.n	800f208 <_ZN5board8Joystick10initializeEv+0x20>
	{
		_bInitialized = true;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2201      	movs	r2, #1
 800f202:	741a      	strb	r2, [r3, #16]

		return true;
 800f204:	2301      	movs	r3, #1
 800f206:	e000      	b.n	800f20a <_ZN5board8Joystick10initializeEv+0x22>
	}
	return false;
 800f208:	2300      	movs	r3, #0
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	370c      	adds	r7, #12
 800f20e:	46bd      	mov	sp, r7
 800f210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f214:	4770      	bx	lr

0800f216 <_ZN5board8Joystick11setObserverEP17IJoystickObserver>:

bool Joystick::setObserver(IJoystickObserver * observer)
{
 800f216:	b480      	push	{r7}
 800f218:	b083      	sub	sp, #12
 800f21a:	af00      	add	r7, sp, #0
 800f21c:	6078      	str	r0, [r7, #4]
 800f21e:	6039      	str	r1, [r7, #0]
	_pObserver = observer;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	683a      	ldr	r2, [r7, #0]
 800f224:	615a      	str	r2, [r3, #20]

	return true;
 800f226:	2301      	movs	r3, #1
}
 800f228:	4618      	mov	r0, r3
 800f22a:	370c      	adds	r7, #12
 800f22c:	46bd      	mov	sp, r7
 800f22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f232:	4770      	bx	lr

0800f234 <_ZN5board8Joystick5startEv>:

void Joystick::start()
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b082      	sub	sp, #8
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
	startBehavior();
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	1d1a      	adds	r2, r3, #4
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	3308      	adds	r3, #8
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	4610      	mov	r0, r2
 800f24a:	4798      	blx	r3
}
 800f24c:	bf00      	nop
 800f24e:	3708      	adds	r7, #8
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}

0800f254 <__tcf_0>:

//static
Joystick & Joystick::instance()
{
	static Joystick joystick;
 800f254:	b580      	push	{r7, lr}
 800f256:	af00      	add	r7, sp, #0
 800f258:	4801      	ldr	r0, [pc, #4]	; (800f260 <__tcf_0+0xc>)
 800f25a:	f000 fa5d 	bl	800f718 <_ZN5board8JoystickD1Ev>
 800f25e:	bd80      	pop	{r7, pc}
 800f260:	20001744 	.word	0x20001744

0800f264 <_ZN5board8Joystick8instanceEv>:
{
 800f264:	b580      	push	{r7, lr}
 800f266:	af00      	add	r7, sp, #0
	static Joystick joystick;
 800f268:	4b12      	ldr	r3, [pc, #72]	; (800f2b4 <_ZN5board8Joystick8instanceEv+0x50>)
 800f26a:	781b      	ldrb	r3, [r3, #0]
 800f26c:	f3bf 8f5b 	dmb	ish
 800f270:	b2db      	uxtb	r3, r3
 800f272:	f003 0301 	and.w	r3, r3, #1
 800f276:	2b00      	cmp	r3, #0
 800f278:	bf0c      	ite	eq
 800f27a:	2301      	moveq	r3, #1
 800f27c:	2300      	movne	r3, #0
 800f27e:	b2db      	uxtb	r3, r3
 800f280:	2b00      	cmp	r3, #0
 800f282:	d013      	beq.n	800f2ac <_ZN5board8Joystick8instanceEv+0x48>
 800f284:	480b      	ldr	r0, [pc, #44]	; (800f2b4 <_ZN5board8Joystick8instanceEv+0x50>)
 800f286:	f007 f8ef 	bl	8016468 <__cxa_guard_acquire>
 800f28a:	4603      	mov	r3, r0
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	bf14      	ite	ne
 800f290:	2301      	movne	r3, #1
 800f292:	2300      	moveq	r3, #0
 800f294:	b2db      	uxtb	r3, r3
 800f296:	2b00      	cmp	r3, #0
 800f298:	d008      	beq.n	800f2ac <_ZN5board8Joystick8instanceEv+0x48>
 800f29a:	4807      	ldr	r0, [pc, #28]	; (800f2b8 <_ZN5board8Joystick8instanceEv+0x54>)
 800f29c:	f7ff ff78 	bl	800f190 <_ZN5board8JoystickC1Ev>
 800f2a0:	4804      	ldr	r0, [pc, #16]	; (800f2b4 <_ZN5board8Joystick8instanceEv+0x50>)
 800f2a2:	f007 f8ed 	bl	8016480 <__cxa_guard_release>
 800f2a6:	4805      	ldr	r0, [pc, #20]	; (800f2bc <_ZN5board8Joystick8instanceEv+0x58>)
 800f2a8:	f007 f9e6 	bl	8016678 <atexit>

	return joystick;
 800f2ac:	4b02      	ldr	r3, [pc, #8]	; (800f2b8 <_ZN5board8Joystick8instanceEv+0x54>)
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	bd80      	pop	{r7, pc}
 800f2b2:	bf00      	nop
 800f2b4:	20001764 	.word	0x20001764
 800f2b8:	20001744 	.word	0x20001744
 800f2bc:	0800f255 	.word	0x0800f255

0800f2c0 <_ZNK5board8Joystick8positionEv>:

IJoystick::Position Joystick::position() const
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b083      	sub	sp, #12
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
	return _position;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	699b      	ldr	r3, [r3, #24]
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	370c      	adds	r7, #12
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr

0800f2d8 <_ZNK5board8Joystick19_readActualPositionEv>:

Joystick::PressedButtons Joystick::_readActualPosition() const
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b084      	sub	sp, #16
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
    PressedButtons pressed = Invalid;
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	60fb      	str	r3, [r7, #12]

    // Check UP button pressed
    pressed |= (HAL_GPIO_ReadPin(NAVS_UP_GPIO_Port, NAVS_UP_Pin) == GPIO_PIN_RESET) ? JoystickButton::Up : JoystickButton::Invalid;
 800f2e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f2e8:	4826      	ldr	r0, [pc, #152]	; (800f384 <_ZNK5board8Joystick19_readActualPositionEv+0xac>)
 800f2ea:	f7f2 fc79 	bl	8001be0 <HAL_GPIO_ReadPin>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d101      	bne.n	800f2f8 <_ZNK5board8Joystick19_readActualPositionEv+0x20>
 800f2f4:	2308      	movs	r3, #8
 800f2f6:	e000      	b.n	800f2fa <_ZNK5board8Joystick19_readActualPositionEv+0x22>
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	4313      	orrs	r3, r2
 800f300:	60fb      	str	r3, [r7, #12]

    // Check DOWN button pressed
    pressed |= (HAL_GPIO_ReadPin(NAVS_DOWN_GPIO_Port, NAVS_DOWN_Pin) == GPIO_PIN_RESET) ? JoystickButton::Down : JoystickButton::Invalid;
 800f302:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f30a:	f7f2 fc69 	bl	8001be0 <HAL_GPIO_ReadPin>
 800f30e:	4603      	mov	r3, r0
 800f310:	2b00      	cmp	r3, #0
 800f312:	d101      	bne.n	800f318 <_ZNK5board8Joystick19_readActualPositionEv+0x40>
 800f314:	2310      	movs	r3, #16
 800f316:	e000      	b.n	800f31a <_ZNK5board8Joystick19_readActualPositionEv+0x42>
 800f318:	2300      	movs	r3, #0
 800f31a:	461a      	mov	r2, r3
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	4313      	orrs	r3, r2
 800f320:	60fb      	str	r3, [r7, #12]

    // And also for the remaining buttons
    pressed |= (HAL_GPIO_ReadPin(NAVS_LEFT_GPIO_Port, NAVS_LEFT_Pin) == GPIO_PIN_RESET) ? JoystickButton::Left : JoystickButton::Invalid;
 800f322:	2110      	movs	r1, #16
 800f324:	4818      	ldr	r0, [pc, #96]	; (800f388 <_ZNK5board8Joystick19_readActualPositionEv+0xb0>)
 800f326:	f7f2 fc5b 	bl	8001be0 <HAL_GPIO_ReadPin>
 800f32a:	4603      	mov	r3, r0
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d101      	bne.n	800f334 <_ZNK5board8Joystick19_readActualPositionEv+0x5c>
 800f330:	2302      	movs	r3, #2
 800f332:	e000      	b.n	800f336 <_ZNK5board8Joystick19_readActualPositionEv+0x5e>
 800f334:	2300      	movs	r3, #0
 800f336:	461a      	mov	r2, r3
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	4313      	orrs	r3, r2
 800f33c:	60fb      	str	r3, [r7, #12]
    pressed |= (HAL_GPIO_ReadPin(NAVS_RIGHT_GPIO_Port, NAVS_RIGHT_Pin) == GPIO_PIN_RESET) ? JoystickButton::Right : JoystickButton::Invalid;
 800f33e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f342:	4810      	ldr	r0, [pc, #64]	; (800f384 <_ZNK5board8Joystick19_readActualPositionEv+0xac>)
 800f344:	f7f2 fc4c 	bl	8001be0 <HAL_GPIO_ReadPin>
 800f348:	4603      	mov	r3, r0
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d101      	bne.n	800f352 <_ZNK5board8Joystick19_readActualPositionEv+0x7a>
 800f34e:	2304      	movs	r3, #4
 800f350:	e000      	b.n	800f354 <_ZNK5board8Joystick19_readActualPositionEv+0x7c>
 800f352:	2300      	movs	r3, #0
 800f354:	461a      	mov	r2, r3
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	4313      	orrs	r3, r2
 800f35a:	60fb      	str	r3, [r7, #12]
    pressed |= (HAL_GPIO_ReadPin(NAVS_CENTER_GPIO_Port, NAVS_CENTER_Pin) == GPIO_PIN_RESET) ? JoystickButton::Pressed : JoystickButton::Invalid;
 800f35c:	2120      	movs	r1, #32
 800f35e:	480a      	ldr	r0, [pc, #40]	; (800f388 <_ZNK5board8Joystick19_readActualPositionEv+0xb0>)
 800f360:	f7f2 fc3e 	bl	8001be0 <HAL_GPIO_ReadPin>
 800f364:	4603      	mov	r3, r0
 800f366:	2b00      	cmp	r3, #0
 800f368:	d101      	bne.n	800f36e <_ZNK5board8Joystick19_readActualPositionEv+0x96>
 800f36a:	2320      	movs	r3, #32
 800f36c:	e000      	b.n	800f370 <_ZNK5board8Joystick19_readActualPositionEv+0x98>
 800f36e:	2300      	movs	r3, #0
 800f370:	461a      	mov	r2, r3
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	4313      	orrs	r3, r2
 800f376:	60fb      	str	r3, [r7, #12]

    return pressed;
 800f378:	68fb      	ldr	r3, [r7, #12]
}
 800f37a:	4618      	mov	r0, r3
 800f37c:	3710      	adds	r7, #16
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}
 800f382:	bf00      	nop
 800f384:	48000800 	.word	0x48000800
 800f388:	48000400 	.word	0x48000400

0800f38c <_ZN5board8Joystick12processEventEv>:

EventStatus Joystick::processEvent()
{
 800f38c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f38e:	b085      	sub	sp, #20
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
	eEventStatus eventStatus = EventStatus::Unknown;
 800f394:	2300      	movs	r3, #0
 800f396:	72fb      	strb	r3, [r7, #11]

	switch (_currentState)
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	7f1b      	ldrb	r3, [r3, #28]
 800f39c:	2b01      	cmp	r3, #1
 800f39e:	d002      	beq.n	800f3a6 <_ZN5board8Joystick12processEventEv+0x1a>
 800f3a0:	2b02      	cmp	r3, #2
 800f3a2:	d02b      	beq.n	800f3fc <_ZN5board8Joystick12processEventEv+0x70>
				eventStatus = EventStatus::Consumed;
			}
		}
		break;
	default:
		break;
 800f3a4:	e097      	b.n	800f4d6 <_ZN5board8Joystick12processEventEv+0x14a>
			if (getCurrentEvent()->getEventType() == IXFEvent::Initial)
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	3304      	adds	r3, #4
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f005 f93c 	bl	8014628 <_ZNK10XFReactive15getCurrentEventEv>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f7f7 fabd 	bl	8006932 <_ZNK8IXFEvent12getEventTypeEv>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	2b01      	cmp	r3, #1
 800f3bc:	bf0c      	ite	eq
 800f3be:	2301      	moveq	r3, #1
 800f3c0:	2300      	movne	r3, #0
 800f3c2:	b2db      	uxtb	r3, r3
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	f000 8083 	beq.w	800f4d0 <_ZN5board8Joystick12processEventEv+0x144>
				GEN(XFNullTransition());
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	1d1d      	adds	r5, r3, #4
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	685b      	ldr	r3, [r3, #4]
 800f3d2:	330c      	adds	r3, #12
 800f3d4:	681c      	ldr	r4, [r3, #0]
 800f3d6:	2014      	movs	r0, #20
 800f3d8:	f007 f855 	bl	8016486 <_Znwj>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	461e      	mov	r6, r3
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	2100      	movs	r1, #0
 800f3e4:	4630      	mov	r0, r6
 800f3e6:	f004 ffc9 	bl	801437c <_ZN16XFNullTransitionC1EiP11IXFReactive>
 800f3ea:	4631      	mov	r1, r6
 800f3ec:	4628      	mov	r0, r5
 800f3ee:	47a0      	blx	r4
				_currentState = STATE_CHECK_JOYSTICK;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2202      	movs	r2, #2
 800f3f4:	771a      	strb	r2, [r3, #28]
				eventStatus = EventStatus::Consumed;
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	72fb      	strb	r3, [r7, #11]
		break;
 800f3fa:	e069      	b.n	800f4d0 <_ZN5board8Joystick12processEventEv+0x144>
		    if (getCurrentEvent()->getEventType() == IXFEvent::Event &&
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	3304      	adds	r3, #4
 800f400:	4618      	mov	r0, r3
 800f402:	f005 f911 	bl	8014628 <_ZNK10XFReactive15getCurrentEventEv>
 800f406:	4603      	mov	r3, r0
 800f408:	4618      	mov	r0, r3
 800f40a:	f7f7 fa92 	bl	8006932 <_ZNK8IXFEvent12getEventTypeEv>
 800f40e:	4603      	mov	r3, r0
 800f410:	2b03      	cmp	r3, #3
 800f412:	d10d      	bne.n	800f430 <_ZN5board8Joystick12processEventEv+0xa4>
		        getCurrentEvent()->getId() == Event_IRQ)
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	3304      	adds	r3, #4
 800f418:	4618      	mov	r0, r3
 800f41a:	f005 f905 	bl	8014628 <_ZNK10XFReactive15getCurrentEventEv>
 800f41e:	4603      	mov	r3, r0
 800f420:	4618      	mov	r0, r3
 800f422:	f7f7 fa93 	bl	800694c <_ZNK8IXFEvent5getIdEv>
 800f426:	4603      	mov	r3, r0
		    if (getCurrentEvent()->getEventType() == IXFEvent::Event &&
 800f428:	2b01      	cmp	r3, #1
 800f42a:	d101      	bne.n	800f430 <_ZN5board8Joystick12processEventEv+0xa4>
 800f42c:	2301      	movs	r3, #1
 800f42e:	e000      	b.n	800f432 <_ZN5board8Joystick12processEventEv+0xa6>
 800f430:	2300      	movs	r3, #0
 800f432:	2b00      	cmp	r3, #0
 800f434:	d017      	beq.n	800f466 <_ZN5board8Joystick12processEventEv+0xda>
		          if (!_timeoutActive)
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	7f5b      	ldrb	r3, [r3, #29]
 800f43a:	f083 0301 	eor.w	r3, r3, #1
 800f43e:	b2db      	uxtb	r3, r3
 800f440:	2b00      	cmp	r3, #0
 800f442:	d00d      	beq.n	800f460 <_ZN5board8Joystick12processEventEv+0xd4>
		              getThread()->scheduleTimeout(Timeout_CHECK_JOYSTICK_id, 50, this);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	1d1a      	adds	r2, r3, #4
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	685b      	ldr	r3, [r3, #4]
 800f44c:	3318      	adds	r3, #24
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	4610      	mov	r0, r2
 800f452:	4798      	blx	r3
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	3304      	adds	r3, #4
 800f458:	2232      	movs	r2, #50	; 0x32
 800f45a:	2101      	movs	r1, #1
 800f45c:	f005 fa9f 	bl	801499e <_ZN8XFThread15scheduleTimeoutEiiP11IXFReactive>
		          _timeoutActive = true;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2201      	movs	r2, #1
 800f464:	775a      	strb	r2, [r3, #29]
			if (getCurrentEvent()->getEventType() == IXFEvent::NullTransition ||
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	3304      	adds	r3, #4
 800f46a:	4618      	mov	r0, r3
 800f46c:	f005 f8dc 	bl	8014628 <_ZNK10XFReactive15getCurrentEventEv>
 800f470:	4603      	mov	r3, r0
 800f472:	4618      	mov	r0, r3
 800f474:	f7f7 fa5d 	bl	8006932 <_ZNK8IXFEvent12getEventTypeEv>
 800f478:	4603      	mov	r3, r0
 800f47a:	2b02      	cmp	r3, #2
 800f47c:	d017      	beq.n	800f4ae <_ZN5board8Joystick12processEventEv+0x122>
				(getCurrentEvent()->getEventType() == IXFEvent::Timeout &&
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	3304      	adds	r3, #4
 800f482:	4618      	mov	r0, r3
 800f484:	f005 f8d0 	bl	8014628 <_ZNK10XFReactive15getCurrentEventEv>
 800f488:	4603      	mov	r3, r0
 800f48a:	4618      	mov	r0, r3
 800f48c:	f7f7 fa51 	bl	8006932 <_ZNK8IXFEvent12getEventTypeEv>
 800f490:	4603      	mov	r3, r0
			if (getCurrentEvent()->getEventType() == IXFEvent::NullTransition ||
 800f492:	2b04      	cmp	r3, #4
 800f494:	d10d      	bne.n	800f4b2 <_ZN5board8Joystick12processEventEv+0x126>
				 getCurrentTimeout()->getId() == Timeout_CHECK_JOYSTICK_id))
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	3304      	adds	r3, #4
 800f49a:	4618      	mov	r0, r3
 800f49c:	f005 f8de 	bl	801465c <_ZN10XFReactive17getCurrentTimeoutEv>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7f7 fa52 	bl	800694c <_ZNK8IXFEvent5getIdEv>
 800f4a8:	4603      	mov	r3, r0
				(getCurrentEvent()->getEventType() == IXFEvent::Timeout &&
 800f4aa:	2b01      	cmp	r3, #1
 800f4ac:	d101      	bne.n	800f4b2 <_ZN5board8Joystick12processEventEv+0x126>
			if (getCurrentEvent()->getEventType() == IXFEvent::NullTransition ||
 800f4ae:	2301      	movs	r3, #1
 800f4b0:	e000      	b.n	800f4b4 <_ZN5board8Joystick12processEventEv+0x128>
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d00d      	beq.n	800f4d4 <_ZN5board8Joystick12processEventEv+0x148>
					doCheckJoystickState();
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f000 f81d 	bl	800f4f8 <_ZN5board8Joystick20doCheckJoystickStateEv>
				_timeoutActive = false;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	775a      	strb	r2, [r3, #29]
				_currentState = STATE_CHECK_JOYSTICK;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2202      	movs	r2, #2
 800f4c8:	771a      	strb	r2, [r3, #28]
				eventStatus = EventStatus::Consumed;
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	72fb      	strb	r3, [r7, #11]
		break;
 800f4ce:	e001      	b.n	800f4d4 <_ZN5board8Joystick12processEventEv+0x148>
		break;
 800f4d0:	bf00      	nop
 800f4d2:	e000      	b.n	800f4d6 <_ZN5board8Joystick12processEventEv+0x14a>
		break;
 800f4d4:	bf00      	nop
	}

	return eventStatus;
 800f4d6:	7afa      	ldrb	r2, [r7, #11]
 800f4d8:	f107 030c 	add.w	r3, r7, #12
 800f4dc:	4611      	mov	r1, r2
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7f7 fa40 	bl	8006964 <_ZN11EventStatusC1ENS_12eEventStatusE>
 800f4e4:	7b3b      	ldrb	r3, [r7, #12]
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3714      	adds	r7, #20
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f4ee <_ZThn4_N5board8Joystick12processEventEv>:
	const Joystick & operator =(const Joystick & j) { (void)(j); return j; }	///< Forbids to copy a joystick.

	PressedButtons _readActualPosition() const;         ///< Reads the button state on the corresponding GPIOs.

	// From XFReactive
	virtual EventStatus processEvent();
 800f4ee:	f1a0 0004 	sub.w	r0, r0, #4
 800f4f2:	f7ff bf4b 	b.w	800f38c <_ZN5board8Joystick12processEventEv>
	...

0800f4f8 <_ZN5board8Joystick20doCheckJoystickStateEv>:

void Joystick::doCheckJoystickState()
{
 800f4f8:	b5b0      	push	{r4, r5, r7, lr}
 800f4fa:	b084      	sub	sp, #16
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
	// Store previously calculated value
	const Position oldPosition = _position;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	699b      	ldr	r3, [r3, #24]
 800f504:	60fb      	str	r3, [r7, #12]

	_position.pressedButtons =  _readActualPosition();
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f7ff fee6 	bl	800f2d8 <_ZNK5board8Joystick19_readActualPositionEv>
 800f50c:	4602      	mov	r2, r0
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	619a      	str	r2, [r3, #24]

	//Trace::outln("Button state: 0x%0X", _position.pressedButtons);

	// Did the position of the joystick change?
	if (oldPosition.pressedButtons != _position.pressedButtons)
 800f512:	68fa      	ldr	r2, [r7, #12]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	699b      	ldr	r3, [r3, #24]
 800f518:	429a      	cmp	r2, r3
 800f51a:	d073      	beq.n	800f604 <_ZN5board8Joystick20doCheckJoystickStateEv+0x10c>
	{
#if (JOYSTICK_TRACE_VERBOSE != 0)

	    if ((oldPosition.pressedButtons & JoystickButton::Up) != (_position.pressedButtons & JoystickButton::Up))
 800f51c:	68fa      	ldr	r2, [r7, #12]
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	699b      	ldr	r3, [r3, #24]
 800f522:	4053      	eors	r3, r2
 800f524:	f003 0308 	and.w	r3, r3, #8
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d00a      	beq.n	800f542 <_ZN5board8Joystick20doCheckJoystickStateEv+0x4a>
	    {
            traceOut("Joystick button up %s", (_position.pressedButtons == JoystickButton::Up) ? "pressed" : "released");
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	699b      	ldr	r3, [r3, #24]
 800f530:	2b08      	cmp	r3, #8
 800f532:	d101      	bne.n	800f538 <_ZN5board8Joystick20doCheckJoystickStateEv+0x40>
 800f534:	4b35      	ldr	r3, [pc, #212]	; (800f60c <_ZN5board8Joystick20doCheckJoystickStateEv+0x114>)
 800f536:	e000      	b.n	800f53a <_ZN5board8Joystick20doCheckJoystickStateEv+0x42>
 800f538:	4b35      	ldr	r3, [pc, #212]	; (800f610 <_ZN5board8Joystick20doCheckJoystickStateEv+0x118>)
 800f53a:	4619      	mov	r1, r3
 800f53c:	4835      	ldr	r0, [pc, #212]	; (800f614 <_ZN5board8Joystick20doCheckJoystickStateEv+0x11c>)
 800f53e:	f000 f873 	bl	800f628 <_ZN5board8Joystick8traceOutEPKcz>
	    }

        if ((oldPosition.pressedButtons & JoystickButton::Down) != (_position.pressedButtons & JoystickButton::Down))
 800f542:	68fa      	ldr	r2, [r7, #12]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	699b      	ldr	r3, [r3, #24]
 800f548:	4053      	eors	r3, r2
 800f54a:	f003 0310 	and.w	r3, r3, #16
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d00a      	beq.n	800f568 <_ZN5board8Joystick20doCheckJoystickStateEv+0x70>
        {
            traceOut("Joystick button down %s", (_position.pressedButtons == JoystickButton::Down) ? "pressed" : "released");
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	699b      	ldr	r3, [r3, #24]
 800f556:	2b10      	cmp	r3, #16
 800f558:	d101      	bne.n	800f55e <_ZN5board8Joystick20doCheckJoystickStateEv+0x66>
 800f55a:	4b2c      	ldr	r3, [pc, #176]	; (800f60c <_ZN5board8Joystick20doCheckJoystickStateEv+0x114>)
 800f55c:	e000      	b.n	800f560 <_ZN5board8Joystick20doCheckJoystickStateEv+0x68>
 800f55e:	4b2c      	ldr	r3, [pc, #176]	; (800f610 <_ZN5board8Joystick20doCheckJoystickStateEv+0x118>)
 800f560:	4619      	mov	r1, r3
 800f562:	482d      	ldr	r0, [pc, #180]	; (800f618 <_ZN5board8Joystick20doCheckJoystickStateEv+0x120>)
 800f564:	f000 f860 	bl	800f628 <_ZN5board8Joystick8traceOutEPKcz>
        }

        if ((oldPosition.pressedButtons & JoystickButton::Left) != (_position.pressedButtons & JoystickButton::Left))
 800f568:	68fa      	ldr	r2, [r7, #12]
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	699b      	ldr	r3, [r3, #24]
 800f56e:	4053      	eors	r3, r2
 800f570:	f003 0302 	and.w	r3, r3, #2
 800f574:	2b00      	cmp	r3, #0
 800f576:	d00a      	beq.n	800f58e <_ZN5board8Joystick20doCheckJoystickStateEv+0x96>
        {
            traceOut("Joystick button left %s", (_position.pressedButtons == JoystickButton::Left) ? "pressed" : "released");
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	699b      	ldr	r3, [r3, #24]
 800f57c:	2b02      	cmp	r3, #2
 800f57e:	d101      	bne.n	800f584 <_ZN5board8Joystick20doCheckJoystickStateEv+0x8c>
 800f580:	4b22      	ldr	r3, [pc, #136]	; (800f60c <_ZN5board8Joystick20doCheckJoystickStateEv+0x114>)
 800f582:	e000      	b.n	800f586 <_ZN5board8Joystick20doCheckJoystickStateEv+0x8e>
 800f584:	4b22      	ldr	r3, [pc, #136]	; (800f610 <_ZN5board8Joystick20doCheckJoystickStateEv+0x118>)
 800f586:	4619      	mov	r1, r3
 800f588:	4824      	ldr	r0, [pc, #144]	; (800f61c <_ZN5board8Joystick20doCheckJoystickStateEv+0x124>)
 800f58a:	f000 f84d 	bl	800f628 <_ZN5board8Joystick8traceOutEPKcz>
        }

        if ((oldPosition.pressedButtons & JoystickButton::Right) != (_position.pressedButtons & JoystickButton::Right))
 800f58e:	68fa      	ldr	r2, [r7, #12]
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	699b      	ldr	r3, [r3, #24]
 800f594:	4053      	eors	r3, r2
 800f596:	f003 0304 	and.w	r3, r3, #4
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d00a      	beq.n	800f5b4 <_ZN5board8Joystick20doCheckJoystickStateEv+0xbc>
        {
            traceOut("Joystick button right %s", (_position.pressedButtons == JoystickButton::Right) ? "pressed" : "released");
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	699b      	ldr	r3, [r3, #24]
 800f5a2:	2b04      	cmp	r3, #4
 800f5a4:	d101      	bne.n	800f5aa <_ZN5board8Joystick20doCheckJoystickStateEv+0xb2>
 800f5a6:	4b19      	ldr	r3, [pc, #100]	; (800f60c <_ZN5board8Joystick20doCheckJoystickStateEv+0x114>)
 800f5a8:	e000      	b.n	800f5ac <_ZN5board8Joystick20doCheckJoystickStateEv+0xb4>
 800f5aa:	4b19      	ldr	r3, [pc, #100]	; (800f610 <_ZN5board8Joystick20doCheckJoystickStateEv+0x118>)
 800f5ac:	4619      	mov	r1, r3
 800f5ae:	481c      	ldr	r0, [pc, #112]	; (800f620 <_ZN5board8Joystick20doCheckJoystickStateEv+0x128>)
 800f5b0:	f000 f83a 	bl	800f628 <_ZN5board8Joystick8traceOutEPKcz>
        }

        if ((oldPosition.pressedButtons & JoystickButton::Pressed) != (_position.pressedButtons & JoystickButton::Pressed))
 800f5b4:	68fa      	ldr	r2, [r7, #12]
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	699b      	ldr	r3, [r3, #24]
 800f5ba:	4053      	eors	r3, r2
 800f5bc:	f003 0320 	and.w	r3, r3, #32
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d00a      	beq.n	800f5da <_ZN5board8Joystick20doCheckJoystickStateEv+0xe2>
        {
            traceOut("Joystick button center %s", (_position.pressedButtons == JoystickButton::Pressed) ? "pressed" : "released");
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	699b      	ldr	r3, [r3, #24]
 800f5c8:	2b20      	cmp	r3, #32
 800f5ca:	d101      	bne.n	800f5d0 <_ZN5board8Joystick20doCheckJoystickStateEv+0xd8>
 800f5cc:	4b0f      	ldr	r3, [pc, #60]	; (800f60c <_ZN5board8Joystick20doCheckJoystickStateEv+0x114>)
 800f5ce:	e000      	b.n	800f5d2 <_ZN5board8Joystick20doCheckJoystickStateEv+0xda>
 800f5d0:	4b0f      	ldr	r3, [pc, #60]	; (800f610 <_ZN5board8Joystick20doCheckJoystickStateEv+0x118>)
 800f5d2:	4619      	mov	r1, r3
 800f5d4:	4813      	ldr	r0, [pc, #76]	; (800f624 <_ZN5board8Joystick20doCheckJoystickStateEv+0x12c>)
 800f5d6:	f000 f827 	bl	800f628 <_ZN5board8Joystick8traceOutEPKcz>
        }

#endif // (JOYSTICK_TRACE_VERBOSE != 0)

		// Notify observer
		if (_pObserver)
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	695b      	ldr	r3, [r3, #20]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d010      	beq.n	800f604 <_ZN5board8Joystick20doCheckJoystickStateEv+0x10c>
		{
			_pObserver->onPositionChange(position());
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	695d      	ldr	r5, [r3, #20]
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	695b      	ldr	r3, [r3, #20]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	3308      	adds	r3, #8
 800f5ee:	681c      	ldr	r4, [r3, #0]
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	3314      	adds	r3, #20
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	4798      	blx	r3
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	4619      	mov	r1, r3
 800f600:	4628      	mov	r0, r5
 800f602:	47a0      	blx	r4
		}
	}
}
 800f604:	bf00      	nop
 800f606:	3710      	adds	r7, #16
 800f608:	46bd      	mov	sp, r7
 800f60a:	bdb0      	pop	{r4, r5, r7, pc}
 800f60c:	080198cc 	.word	0x080198cc
 800f610:	080198d4 	.word	0x080198d4
 800f614:	080198e0 	.word	0x080198e0
 800f618:	080198f8 	.word	0x080198f8
 800f61c:	08019910 	.word	0x08019910
 800f620:	08019928 	.word	0x08019928
 800f624:	08019944 	.word	0x08019944

0800f628 <_ZN5board8Joystick8traceOutEPKcz>:

void Joystick::traceOut(const char * const format, ...)
{
 800f628:	b40f      	push	{r0, r1, r2, r3}
 800f62a:	b580      	push	{r7, lr}
 800f62c:	b082      	sub	sp, #8
 800f62e:	af00      	add	r7, sp, #0
	static const unsigned int STR_SIZE = 64;
	static char str[STR_SIZE];

	va_list args;

	va_start(args, format);
 800f630:	f107 0314 	add.w	r3, r7, #20
 800f634:	607b      	str	r3, [r7, #4]
	vsiprintf(str, format, args);
 800f636:	687a      	ldr	r2, [r7, #4]
 800f638:	6939      	ldr	r1, [r7, #16]
 800f63a:	480c      	ldr	r0, [pc, #48]	; (800f66c <_ZN5board8Joystick8traceOutEPKcz+0x44>)
 800f63c:	f007 fd6a 	bl	8017114 <vsiprintf>
	va_end(args);

	assert(strlen(str) < STR_SIZE);		// Uups! str is too small
 800f640:	480a      	ldr	r0, [pc, #40]	; (800f66c <_ZN5board8Joystick8traceOutEPKcz+0x44>)
 800f642:	f7f0 fe15 	bl	8000270 <strlen>
 800f646:	4603      	mov	r3, r0
 800f648:	2b3f      	cmp	r3, #63	; 0x3f
 800f64a:	d905      	bls.n	800f658 <_ZN5board8Joystick8traceOutEPKcz+0x30>
 800f64c:	4b08      	ldr	r3, [pc, #32]	; (800f670 <_ZN5board8Joystick8traceOutEPKcz+0x48>)
 800f64e:	4a09      	ldr	r2, [pc, #36]	; (800f674 <_ZN5board8Joystick8traceOutEPKcz+0x4c>)
 800f650:	21c7      	movs	r1, #199	; 0xc7
 800f652:	4809      	ldr	r0, [pc, #36]	; (800f678 <_ZN5board8Joystick8traceOutEPKcz+0x50>)
 800f654:	f006 fff2 	bl	801663c <__assert_func>

	Trace::outln(str);
 800f658:	4804      	ldr	r0, [pc, #16]	; (800f66c <_ZN5board8Joystick8traceOutEPKcz+0x44>)
 800f65a:	f000 fa7f 	bl	800fb5c <_ZN5Trace5outlnEPKcz>
#else
	(void)(format);
#endif
}
 800f65e:	bf00      	nop
 800f660:	3708      	adds	r7, #8
 800f662:	46bd      	mov	sp, r7
 800f664:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f668:	b004      	add	sp, #16
 800f66a:	4770      	bx	lr
 800f66c:	20001768 	.word	0x20001768
 800f670:	08019960 	.word	0x08019960
 800f674:	08019978 	.word	0x08019978
 800f678:	080199b0 	.word	0x080199b0

0800f67c <__tcf_1>:

void Joystick::onIrq(uint16_t GPIO_Pin)
{
    static XFStaticEvent irqEvent(Event_IRQ);
 800f67c:	b580      	push	{r7, lr}
 800f67e:	af00      	add	r7, sp, #0
 800f680:	4801      	ldr	r0, [pc, #4]	; (800f688 <__tcf_1+0xc>)
 800f682:	f005 f83b 	bl	80146fc <_ZN13XFStaticEventD1Ev>
 800f686:	bd80      	pop	{r7, pc}
 800f688:	200017a8 	.word	0x200017a8

0800f68c <_ZN5board8Joystick5onIrqEt>:
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b082      	sub	sp, #8
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
 800f694:	460b      	mov	r3, r1
 800f696:	807b      	strh	r3, [r7, #2]
    static XFStaticEvent irqEvent(Event_IRQ);
 800f698:	4b1b      	ldr	r3, [pc, #108]	; (800f708 <_ZN5board8Joystick5onIrqEt+0x7c>)
 800f69a:	781b      	ldrb	r3, [r3, #0]
 800f69c:	f3bf 8f5b 	dmb	ish
 800f6a0:	b2db      	uxtb	r3, r3
 800f6a2:	f003 0301 	and.w	r3, r3, #1
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	bf0c      	ite	eq
 800f6aa:	2301      	moveq	r3, #1
 800f6ac:	2300      	movne	r3, #0
 800f6ae:	b2db      	uxtb	r3, r3
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d015      	beq.n	800f6e0 <_ZN5board8Joystick5onIrqEt+0x54>
 800f6b4:	4814      	ldr	r0, [pc, #80]	; (800f708 <_ZN5board8Joystick5onIrqEt+0x7c>)
 800f6b6:	f006 fed7 	bl	8016468 <__cxa_guard_acquire>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	bf14      	ite	ne
 800f6c0:	2301      	movne	r3, #1
 800f6c2:	2300      	moveq	r3, #0
 800f6c4:	b2db      	uxtb	r3, r3
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d00a      	beq.n	800f6e0 <_ZN5board8Joystick5onIrqEt+0x54>
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	2101      	movs	r1, #1
 800f6ce:	480f      	ldr	r0, [pc, #60]	; (800f70c <_ZN5board8Joystick5onIrqEt+0x80>)
 800f6d0:	f004 fff8 	bl	80146c4 <_ZN13XFStaticEventC1EiP11IXFReactive>
 800f6d4:	480c      	ldr	r0, [pc, #48]	; (800f708 <_ZN5board8Joystick5onIrqEt+0x7c>)
 800f6d6:	f006 fed3 	bl	8016480 <__cxa_guard_release>
 800f6da:	480d      	ldr	r0, [pc, #52]	; (800f710 <_ZN5board8Joystick5onIrqEt+0x84>)
 800f6dc:	f006 ffcc 	bl	8016678 <atexit>

    enterISR();
 800f6e0:	4b0c      	ldr	r3, [pc, #48]	; (800f714 <_ZN5board8Joystick5onIrqEt+0x88>)
 800f6e2:	2201      	movs	r2, #1
 800f6e4:	701a      	strb	r2, [r3, #0]
    pushEvent( &irqEvent );
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	1d1a      	adds	r2, r3, #4
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	685b      	ldr	r3, [r3, #4]
 800f6ee:	330c      	adds	r3, #12
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	4906      	ldr	r1, [pc, #24]	; (800f70c <_ZN5board8Joystick5onIrqEt+0x80>)
 800f6f4:	4610      	mov	r0, r2
 800f6f6:	4798      	blx	r3
    exitISR();
 800f6f8:	4b06      	ldr	r3, [pc, #24]	; (800f714 <_ZN5board8Joystick5onIrqEt+0x88>)
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	701a      	strb	r2, [r3, #0]
}
 800f6fe:	bf00      	nop
 800f700:	3708      	adds	r7, #8
 800f702:	46bd      	mov	sp, r7
 800f704:	bd80      	pop	{r7, pc}
 800f706:	bf00      	nop
 800f708:	200017bc 	.word	0x200017bc
 800f70c:	200017a8 	.word	0x200017a8
 800f710:	0800f67d 	.word	0x0800f67d
 800f714:	20001b8c 	.word	0x20001b8c

0800f718 <_ZN5board8JoystickD1Ev>:
class Joystick : public IJoystick, public XFReactive
 800f718:	b580      	push	{r7, lr}
 800f71a:	b082      	sub	sp, #8
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
 800f720:	4a09      	ldr	r2, [pc, #36]	; (800f748 <_ZN5board8JoystickD1Ev+0x30>)
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	601a      	str	r2, [r3, #0]
 800f726:	4a09      	ldr	r2, [pc, #36]	; (800f74c <_ZN5board8JoystickD1Ev+0x34>)
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	605a      	str	r2, [r3, #4]
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	3304      	adds	r3, #4
 800f730:	4618      	mov	r0, r3
 800f732:	f004 febd 	bl	80144b0 <_ZN10XFReactiveD1Ev>
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	4618      	mov	r0, r3
 800f73a:	f7ff fd09 	bl	800f150 <_ZN9IJoystickD1Ev>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	4618      	mov	r0, r3
 800f742:	3708      	adds	r7, #8
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}
 800f748:	0801c2f0 	.word	0x0801c2f0
 800f74c:	0801c314 	.word	0x0801c314

0800f750 <_ZThn4_N5board8JoystickD1Ev>:
 800f750:	f1a0 0004 	sub.w	r0, r0, #4
 800f754:	e7e0      	b.n	800f718 <_ZN5board8JoystickD1Ev>
 800f756:	bf00      	nop

0800f758 <_ZN5board8JoystickD0Ev>:
 800f758:	b580      	push	{r7, lr}
 800f75a:	b082      	sub	sp, #8
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	6878      	ldr	r0, [r7, #4]
 800f762:	f7ff ffd9 	bl	800f718 <_ZN5board8JoystickD1Ev>
 800f766:	2120      	movs	r1, #32
 800f768:	6878      	ldr	r0, [r7, #4]
 800f76a:	f006 fe79 	bl	8016460 <_ZdlPvj>
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	4618      	mov	r0, r3
 800f772:	3708      	adds	r7, #8
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}

0800f778 <_ZThn4_N5board8JoystickD0Ev>:
 800f778:	f1a0 0004 	sub.w	r0, r0, #4
 800f77c:	e7ec      	b.n	800f758 <_ZN5board8JoystickD0Ev>
	...

0800f780 <_Z41__static_initialization_and_destruction_0ii>:
}
 800f780:	b580      	push	{r7, lr}
 800f782:	b088      	sub	sp, #32
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	6039      	str	r1, [r7, #0]
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2b01      	cmp	r3, #1
 800f78e:	d122      	bne.n	800f7d6 <_Z41__static_initialization_and_destruction_0ii+0x56>
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f796:	4293      	cmp	r3, r2
 800f798:	d11d      	bne.n	800f7d6 <_Z41__static_initialization_and_destruction_0ii+0x56>
 800f79a:	4b18      	ldr	r3, [pc, #96]	; (800f7fc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	613b      	str	r3, [r7, #16]
 800f7a0:	f107 0310 	add.w	r3, r7, #16
 800f7a4:	60bb      	str	r3, [r7, #8]
 800f7a6:	2304      	movs	r3, #4
 800f7a8:	60fb      	str	r3, [r7, #12]
 800f7aa:	f107 0308 	add.w	r3, r7, #8
 800f7ae:	e893 0006 	ldmia.w	r3, {r1, r2}
 800f7b2:	4813      	ldr	r0, [pc, #76]	; (800f800 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800f7b4:	f7f7 fa86 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
  static const desenet::Address SENSOR_ADDRESS({0xC7, 0xC7, 0xC7, 0xC7});	///< @brief Sensor's reception address.
 800f7b8:	4b12      	ldr	r3, [pc, #72]	; (800f804 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	61fb      	str	r3, [r7, #28]
 800f7be:	f107 031c 	add.w	r3, r7, #28
 800f7c2:	617b      	str	r3, [r7, #20]
 800f7c4:	2304      	movs	r3, #4
 800f7c6:	61bb      	str	r3, [r7, #24]
 800f7c8:	f107 0314 	add.w	r3, r7, #20
 800f7cc:	e893 0006 	ldmia.w	r3, {r1, r2}
 800f7d0:	480d      	ldr	r0, [pc, #52]	; (800f808 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800f7d2:	f7f7 fa77 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d10a      	bne.n	800f7f2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f7e2:	4293      	cmp	r3, r2
 800f7e4:	d105      	bne.n	800f7f2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800f7e6:	4808      	ldr	r0, [pc, #32]	; (800f808 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800f7e8:	f7f7 fba8 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 800f7ec:	4804      	ldr	r0, [pc, #16]	; (800f800 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800f7ee:	f7f7 fba5 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
 800f7f2:	bf00      	nop
 800f7f4:	3720      	adds	r7, #32
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	08019b28 	.word	0x08019b28
 800f800:	20001734 	.word	0x20001734
 800f804:	08019b2c 	.word	0x08019b2c
 800f808:	2000173c 	.word	0x2000173c

0800f80c <_GLOBAL__sub_I__ZN5board8JoystickC2Ev>:
 800f80c:	b580      	push	{r7, lr}
 800f80e:	af00      	add	r7, sp, #0
 800f810:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f814:	2001      	movs	r0, #1
 800f816:	f7ff ffb3 	bl	800f780 <_Z41__static_initialization_and_destruction_0ii>
 800f81a:	bd80      	pop	{r7, pc}

0800f81c <_GLOBAL__sub_D__ZN5board8JoystickC2Ev>:
 800f81c:	b580      	push	{r7, lr}
 800f81e:	af00      	add	r7, sp, #0
 800f820:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f824:	2000      	movs	r0, #0
 800f826:	f7ff ffab 	bl	800f780 <_Z41__static_initialization_and_destruction_0ii>
 800f82a:	bd80      	pop	{r7, pc}

0800f82c <_ZN10LedFlasherD1Ev>:
{
	friend class LedController;

protected:
	LedFlasher(uint16_t ledIndex, LedController & ledController);
	virtual ~LedFlasher() {}
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b082      	sub	sp, #8
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
 800f834:	4a05      	ldr	r2, [pc, #20]	; (800f84c <_ZN10LedFlasherD1Ev+0x20>)
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	601a      	str	r2, [r3, #0]
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	4618      	mov	r0, r3
 800f83e:	f004 fe37 	bl	80144b0 <_ZN10XFReactiveD1Ev>
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	4618      	mov	r0, r3
 800f846:	3708      	adds	r7, #8
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}
 800f84c:	0801e108 	.word	0x0801e108

0800f850 <_ZN10LedFlasherD0Ev>:
 800f850:	b580      	push	{r7, lr}
 800f852:	b082      	sub	sp, #8
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f7ff ffe7 	bl	800f82c <_ZN10LedFlasherD1Ev>
 800f85e:	2118      	movs	r1, #24
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f006 fdfd 	bl	8016460 <_ZdlPvj>
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	4618      	mov	r0, r3
 800f86a:	3708      	adds	r7, #8
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}

0800f870 <_ZN13LedControllerC1Ev>:
#include <cassert>
#include "main.h"
#include "mcu/mcu.h"
#include "ledcontroller.h"

LedController::LedController()
 800f870:	b580      	push	{r7, lr}
 800f872:	b082      	sub	sp, #8
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 : _bInitialized(false),
   _ledFlasher(0, *this)
 800f878:	4a08      	ldr	r2, [pc, #32]	; (800f89c <_ZN13LedControllerC1Ev+0x2c>)
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	601a      	str	r2, [r3, #0]
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2200      	movs	r2, #0
 800f882:	711a      	strb	r2, [r3, #4]
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	3308      	adds	r3, #8
 800f888:	687a      	ldr	r2, [r7, #4]
 800f88a:	2100      	movs	r1, #0
 800f88c:	4618      	mov	r0, r3
 800f88e:	f004 fa21 	bl	8013cd4 <_ZN10LedFlasherC1EtR13LedController>
{

}
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	4618      	mov	r0, r3
 800f896:	3708      	adds	r7, #8
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}
 800f89c:	0801c358 	.word	0x0801c358

0800f8a0 <_ZN13LedControllerD1Ev>:

LedController::~LedController()
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b082      	sub	sp, #8
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
 800f8a8:	4a06      	ldr	r2, [pc, #24]	; (800f8c4 <_ZN13LedControllerD1Ev+0x24>)
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	601a      	str	r2, [r3, #0]
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	3308      	adds	r3, #8
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f7ff ffba 	bl	800f82c <_ZN10LedFlasherD1Ev>
{

}
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	3708      	adds	r7, #8
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}
 800f8c2:	bf00      	nop
 800f8c4:	0801c358 	.word	0x0801c358

0800f8c8 <_ZN13LedControllerD0Ev>:
LedController::~LedController()
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b082      	sub	sp, #8
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
}
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f7ff ffe5 	bl	800f8a0 <_ZN13LedControllerD1Ev>
 800f8d6:	2120      	movs	r1, #32
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f006 fdc1 	bl	8016460 <_ZdlPvj>
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	3708      	adds	r7, #8
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}

0800f8e8 <__tcf_0>:

//static
LedController & LedController::instance()
{
	static LedController ledController;
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	af00      	add	r7, sp, #0
 800f8ec:	4801      	ldr	r0, [pc, #4]	; (800f8f4 <__tcf_0+0xc>)
 800f8ee:	f7ff ffd7 	bl	800f8a0 <_ZN13LedControllerD1Ev>
 800f8f2:	bd80      	pop	{r7, pc}
 800f8f4:	200017c0 	.word	0x200017c0

0800f8f8 <_ZN13LedController8instanceEv>:
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	af00      	add	r7, sp, #0
	static LedController ledController;
 800f8fc:	4b12      	ldr	r3, [pc, #72]	; (800f948 <_ZN13LedController8instanceEv+0x50>)
 800f8fe:	781b      	ldrb	r3, [r3, #0]
 800f900:	f3bf 8f5b 	dmb	ish
 800f904:	b2db      	uxtb	r3, r3
 800f906:	f003 0301 	and.w	r3, r3, #1
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	bf0c      	ite	eq
 800f90e:	2301      	moveq	r3, #1
 800f910:	2300      	movne	r3, #0
 800f912:	b2db      	uxtb	r3, r3
 800f914:	2b00      	cmp	r3, #0
 800f916:	d013      	beq.n	800f940 <_ZN13LedController8instanceEv+0x48>
 800f918:	480b      	ldr	r0, [pc, #44]	; (800f948 <_ZN13LedController8instanceEv+0x50>)
 800f91a:	f006 fda5 	bl	8016468 <__cxa_guard_acquire>
 800f91e:	4603      	mov	r3, r0
 800f920:	2b00      	cmp	r3, #0
 800f922:	bf14      	ite	ne
 800f924:	2301      	movne	r3, #1
 800f926:	2300      	moveq	r3, #0
 800f928:	b2db      	uxtb	r3, r3
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d008      	beq.n	800f940 <_ZN13LedController8instanceEv+0x48>
 800f92e:	4807      	ldr	r0, [pc, #28]	; (800f94c <_ZN13LedController8instanceEv+0x54>)
 800f930:	f7ff ff9e 	bl	800f870 <_ZN13LedControllerC1Ev>
 800f934:	4804      	ldr	r0, [pc, #16]	; (800f948 <_ZN13LedController8instanceEv+0x50>)
 800f936:	f006 fda3 	bl	8016480 <__cxa_guard_release>
 800f93a:	4805      	ldr	r0, [pc, #20]	; (800f950 <_ZN13LedController8instanceEv+0x58>)
 800f93c:	f006 fe9c 	bl	8016678 <atexit>
	
	return ledController;
 800f940:	4b02      	ldr	r3, [pc, #8]	; (800f94c <_ZN13LedController8instanceEv+0x54>)
}
 800f942:	4618      	mov	r0, r3
 800f944:	bd80      	pop	{r7, pc}
 800f946:	bf00      	nop
 800f948:	200017e0 	.word	0x200017e0
 800f94c:	200017c0 	.word	0x200017c0
 800f950:	0800f8e9 	.word	0x0800f8e9

0800f954 <_ZN13LedController10initializeEv>:

bool LedController::initialize()
{
 800f954:	b480      	push	{r7}
 800f956:	b083      	sub	sp, #12
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
	if (!_bInitialized)
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	791b      	ldrb	r3, [r3, #4]
 800f960:	f083 0301 	eor.w	r3, r3, #1
 800f964:	b2db      	uxtb	r3, r3
 800f966:	2b00      	cmp	r3, #0
 800f968:	d002      	beq.n	800f970 <_ZN13LedController10initializeEv+0x1c>
	{
		_bInitialized = true;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	2201      	movs	r2, #1
 800f96e:	711a      	strb	r2, [r3, #4]

	}
	return true;
 800f970:	2301      	movs	r3, #1
}
 800f972:	4618      	mov	r0, r3
 800f974:	370c      	adds	r7, #12
 800f976:	46bd      	mov	sp, r7
 800f978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97c:	4770      	bx	lr

0800f97e <_ZN13LedController5startEv>:

void LedController::start()
{
 800f97e:	b580      	push	{r7, lr}
 800f980:	b082      	sub	sp, #8
 800f982:	af00      	add	r7, sp, #0
 800f984:	6078      	str	r0, [r7, #4]
	_ledFlasher.start();
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	3308      	adds	r3, #8
 800f98a:	4618      	mov	r0, r3
 800f98c:	f004 f9c4 	bl	8013d18 <_ZN10LedFlasher5startEv>
}
 800f990:	bf00      	nop
 800f992:	3708      	adds	r7, #8
 800f994:	46bd      	mov	sp, r7
 800f996:	bd80      	pop	{r7, pc}

0800f998 <_ZN13LedController6setLedEib>:

void LedController::setLed(int index, bool bEnable)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b084      	sub	sp, #16
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	60f8      	str	r0, [r7, #12]
 800f9a0:	60b9      	str	r1, [r7, #8]
 800f9a2:	4613      	mov	r3, r2
 800f9a4:	71fb      	strb	r3, [r7, #7]
	assert(_bInitialized);	// Call method initialize() first!
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	791b      	ldrb	r3, [r3, #4]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d105      	bne.n	800f9ba <_ZN13LedController6setLedEib+0x22>
 800f9ae:	4b0e      	ldr	r3, [pc, #56]	; (800f9e8 <_ZN13LedController6setLedEib+0x50>)
 800f9b0:	4a0e      	ldr	r2, [pc, #56]	; (800f9ec <_ZN13LedController6setLedEib+0x54>)
 800f9b2:	212b      	movs	r1, #43	; 0x2b
 800f9b4:	480e      	ldr	r0, [pc, #56]	; (800f9f0 <_ZN13LedController6setLedEib+0x58>)
 800f9b6:	f006 fe41 	bl	801663c <__assert_func>

	if (index == 0)
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d10f      	bne.n	800f9e0 <_ZN13LedController6setLedEib+0x48>
	{
		// Using green LED 'LD2' on Nucleo board
		if (bEnable)
 800f9c0:	79fb      	ldrb	r3, [r7, #7]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d006      	beq.n	800f9d4 <_ZN13LedController6setLedEib+0x3c>
		{

			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800f9c6:	2201      	movs	r2, #1
 800f9c8:	2120      	movs	r1, #32
 800f9ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f9ce:	f7f2 f91f 	bl	8001c10 <HAL_GPIO_WritePin>
		else
		{
            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
		}
	}
}
 800f9d2:	e005      	b.n	800f9e0 <_ZN13LedController6setLedEib+0x48>
            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	2120      	movs	r1, #32
 800f9d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f9dc:	f7f2 f918 	bl	8001c10 <HAL_GPIO_WritePin>
}
 800f9e0:	bf00      	nop
 800f9e2:	3710      	adds	r7, #16
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}
 800f9e8:	08019b30 	.word	0x08019b30
 800f9ec:	08019b40 	.word	0x08019b40
 800f9f0:	08019b68 	.word	0x08019b68

0800f9f4 <_ZN13LedController8flashLedEt>:

void LedController::flashLed(uint16_t index /* = 0 */)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
 800f9fc:	460b      	mov	r3, r1
 800f9fe:	807b      	strh	r3, [r7, #2]
	if (index == 0)
 800fa00:	887b      	ldrh	r3, [r7, #2]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d104      	bne.n	800fa10 <_ZN13LedController8flashLedEt+0x1c>
	{
		_ledFlasher.flashLed();
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	3308      	adds	r3, #8
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f004 f990 	bl	8013d30 <_ZN10LedFlasher8flashLedEv>
	}
}
 800fa10:	bf00      	nop
 800fa12:	3708      	adds	r7, #8
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}

0800fa18 <_ZN4Uart4uartEh>:
	/**
	 * Static accessor to the instances of UART. Used by the factory.
	 * You should not use this method directly. Use the factory to
	 * access an UART instead.
	 */
	static inline Uart & uart(const unsigned char uartNbr)
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	4603      	mov	r3, r0
 800fa20:	71fb      	strb	r3, [r7, #7]
	{
		assert(uartNbr < UART_COUNT);
 800fa22:	79fb      	ldrb	r3, [r7, #7]
 800fa24:	2b02      	cmp	r3, #2
 800fa26:	d905      	bls.n	800fa34 <_ZN4Uart4uartEh+0x1c>
 800fa28:	4b06      	ldr	r3, [pc, #24]	; (800fa44 <_ZN4Uart4uartEh+0x2c>)
 800fa2a:	4a07      	ldr	r2, [pc, #28]	; (800fa48 <_ZN4Uart4uartEh+0x30>)
 800fa2c:	2125      	movs	r1, #37	; 0x25
 800fa2e:	4807      	ldr	r0, [pc, #28]	; (800fa4c <_ZN4Uart4uartEh+0x34>)
 800fa30:	f006 fe04 	bl	801663c <__assert_func>
		return *_sUart[uartNbr];
 800fa34:	79fb      	ldrb	r3, [r7, #7]
 800fa36:	4a06      	ldr	r2, [pc, #24]	; (800fa50 <_ZN4Uart4uartEh+0x38>)
 800fa38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	}
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	3708      	adds	r7, #8
 800fa40:	46bd      	mov	sp, r7
 800fa42:	bd80      	pop	{r7, pc}
 800fa44:	08019bfc 	.word	0x08019bfc
 800fa48:	08019c14 	.word	0x08019c14
 800fa4c:	08019c3c 	.word	0x08019c3c
 800fa50:	20001bc0 	.word	0x20001bc0

0800fa54 <__tcf_0>:
	static Uart uart(1);	// UART2

	uart.initialize(115200);
#endif // TC_STM32
#ifdef TC_STM32CUBEIDE
	static Uart uart(TRACE_UART_INDEX, &huart2);    // UART2
 800fa54:	b580      	push	{r7, lr}
 800fa56:	af00      	add	r7, sp, #0
 800fa58:	4801      	ldr	r0, [pc, #4]	; (800fa60 <__tcf_0+0xc>)
 800fa5a:	f004 f8a7 	bl	8013bac <_ZN4UartD1Ev>
 800fa5e:	bd80      	pop	{r7, pc}
 800fa60:	200018f4 	.word	0x200018f4

0800fa64 <_ZN5Trace10initializeEv>:
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	af00      	add	r7, sp, #0
	static Uart uart(TRACE_UART_INDEX, &huart2);    // UART2
 800fa68:	4b14      	ldr	r3, [pc, #80]	; (800fabc <_ZN5Trace10initializeEv+0x58>)
 800fa6a:	781b      	ldrb	r3, [r3, #0]
 800fa6c:	f3bf 8f5b 	dmb	ish
 800fa70:	b2db      	uxtb	r3, r3
 800fa72:	f003 0301 	and.w	r3, r3, #1
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	bf0c      	ite	eq
 800fa7a:	2301      	moveq	r3, #1
 800fa7c:	2300      	movne	r3, #0
 800fa7e:	b2db      	uxtb	r3, r3
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d016      	beq.n	800fab2 <_ZN5Trace10initializeEv+0x4e>
 800fa84:	480d      	ldr	r0, [pc, #52]	; (800fabc <_ZN5Trace10initializeEv+0x58>)
 800fa86:	f006 fcef 	bl	8016468 <__cxa_guard_acquire>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	bf14      	ite	ne
 800fa90:	2301      	movne	r3, #1
 800fa92:	2300      	moveq	r3, #0
 800fa94:	b2db      	uxtb	r3, r3
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d00b      	beq.n	800fab2 <_ZN5Trace10initializeEv+0x4e>
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	4a08      	ldr	r2, [pc, #32]	; (800fac0 <_ZN5Trace10initializeEv+0x5c>)
 800fa9e:	2101      	movs	r1, #1
 800faa0:	4808      	ldr	r0, [pc, #32]	; (800fac4 <_ZN5Trace10initializeEv+0x60>)
 800faa2:	f004 f837 	bl	8013b14 <_ZN4UartC1EhP20__UART_HandleTypeDefb>
 800faa6:	4805      	ldr	r0, [pc, #20]	; (800fabc <_ZN5Trace10initializeEv+0x58>)
 800faa8:	f006 fcea 	bl	8016480 <__cxa_guard_release>
 800faac:	4806      	ldr	r0, [pc, #24]	; (800fac8 <_ZN5Trace10initializeEv+0x64>)
 800faae:	f006 fde3 	bl	8016678 <atexit>

	// Baud-rate is defined by STM32CubeIDE's .ioc file
    uart.initialize();
 800fab2:	4804      	ldr	r0, [pc, #16]	; (800fac4 <_ZN5Trace10initializeEv+0x60>)
 800fab4:	f004 f89a 	bl	8013bec <_ZN4Uart10initializeEv>
#endif // TC_STM32CUBEIDE
#endif
#endif
}
 800fab8:	bf00      	nop
 800faba:	bd80      	pop	{r7, pc}
 800fabc:	20001984 	.word	0x20001984
 800fac0:	20001e98 	.word	0x20001e98
 800fac4:	200018f4 	.word	0x200018f4
 800fac8:	0800fa55 	.word	0x0800fa55

0800facc <_ZN5Trace6_printEPcb>:
 * @param str The string to print
 * @param addEndLine If true check if the string ends with a new line.
 */
// static
void Trace::_print(char * str, bool addEndLine /* = false */)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b084      	sub	sp, #16
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	460b      	mov	r3, r1
 800fad6:	70fb      	strb	r3, [r7, #3]
#if (USE_TRACE != 0)
	const int len = strlen(str);
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f7f0 fbc9 	bl	8000270 <strlen>
 800fade:	4603      	mov	r3, r0
 800fae0:	60fb      	str	r3, [r7, #12]

	if (addEndLine && (str[len - 1] != '\n'))
 800fae2:	78fb      	ldrb	r3, [r7, #3]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d01a      	beq.n	800fb1e <_ZN5Trace6_printEPcb+0x52>
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	3b01      	subs	r3, #1
 800faec:	687a      	ldr	r2, [r7, #4]
 800faee:	4413      	add	r3, r2
 800faf0:	781b      	ldrb	r3, [r3, #0]
 800faf2:	2b0a      	cmp	r3, #10
 800faf4:	d013      	beq.n	800fb1e <_ZN5Trace6_printEPcb+0x52>
		str[len + 1] = '\n';
		str[len + 2] = '\0';
		assert(len < TRACE_BUFFER_SIZE - 2);	// String too long for buffer
#else
		// Add "\r" (linux host)
		str[len] 	 = '\r';
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	687a      	ldr	r2, [r7, #4]
 800fafa:	4413      	add	r3, r2
 800fafc:	220d      	movs	r2, #13
 800fafe:	701a      	strb	r2, [r3, #0]
		str[len + 1] = '\0';
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	3301      	adds	r3, #1
 800fb04:	687a      	ldr	r2, [r7, #4]
 800fb06:	4413      	add	r3, r2
 800fb08:	2200      	movs	r2, #0
 800fb0a:	701a      	strb	r2, [r3, #0]
		assert(len < TRACE_BUFFER_SIZE - 1);	// String too long for buffer
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	2bfe      	cmp	r3, #254	; 0xfe
 800fb10:	dd0e      	ble.n	800fb30 <_ZN5Trace6_printEPcb+0x64>
 800fb12:	4b0e      	ldr	r3, [pc, #56]	; (800fb4c <_ZN5Trace6_printEPcb+0x80>)
 800fb14:	4a0e      	ldr	r2, [pc, #56]	; (800fb50 <_ZN5Trace6_printEPcb+0x84>)
 800fb16:	2143      	movs	r1, #67	; 0x43
 800fb18:	480e      	ldr	r0, [pc, #56]	; (800fb54 <_ZN5Trace6_printEPcb+0x88>)
 800fb1a:	f006 fd8f 	bl	801663c <__assert_func>
#endif
	}
	else
	{
		assert(len < TRACE_BUFFER_SIZE);		// String too long for buffer
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	2bff      	cmp	r3, #255	; 0xff
 800fb22:	dd05      	ble.n	800fb30 <_ZN5Trace6_printEPcb+0x64>
 800fb24:	4b0c      	ldr	r3, [pc, #48]	; (800fb58 <_ZN5Trace6_printEPcb+0x8c>)
 800fb26:	4a0a      	ldr	r2, [pc, #40]	; (800fb50 <_ZN5Trace6_printEPcb+0x84>)
 800fb28:	2148      	movs	r1, #72	; 0x48
 800fb2a:	480a      	ldr	r0, [pc, #40]	; (800fb54 <_ZN5Trace6_printEPcb+0x88>)
 800fb2c:	f006 fd86 	bl	801663c <__assert_func>
	}

	Uart::uart(TRACE_UART_INDEX).write(str);
 800fb30:	2001      	movs	r0, #1
 800fb32:	f7ff ff71 	bl	800fa18 <_ZN4Uart4uartEh>
 800fb36:	4603      	mov	r3, r0
 800fb38:	2200      	movs	r2, #0
 800fb3a:	6879      	ldr	r1, [r7, #4]
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f004 f860 	bl	8013c02 <_ZN4Uart5writeEPKcj>
#endif // USE_TRACE
}
 800fb42:	bf00      	nop
 800fb44:	3710      	adds	r7, #16
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
 800fb4a:	bf00      	nop
 800fb4c:	08019cc4 	.word	0x08019cc4
 800fb50:	08019ce0 	.word	0x08019ce0
 800fb54:	08019d08 	.word	0x08019d08
 800fb58:	08019d94 	.word	0x08019d94

0800fb5c <_ZN5Trace5outlnEPKcz>:

// static
void Trace::outln(const char * const format, ...)
{
 800fb5c:	b40f      	push	{r0, r1, r2, r3}
 800fb5e:	b580      	push	{r7, lr}
 800fb60:	b082      	sub	sp, #8
 800fb62:	af00      	add	r7, sp, #0
#if (USE_TRACE != 0)
	va_list args;

	va_start(args, format);
 800fb64:	f107 0314 	add.w	r3, r7, #20
 800fb68:	607b      	str	r3, [r7, #4]
	vsiprintf(strTrace, format, args);
 800fb6a:	687a      	ldr	r2, [r7, #4]
 800fb6c:	6939      	ldr	r1, [r7, #16]
 800fb6e:	4807      	ldr	r0, [pc, #28]	; (800fb8c <_ZN5Trace5outlnEPKcz+0x30>)
 800fb70:	f007 fad0 	bl	8017114 <vsiprintf>
	va_end(args);

	_print(strTrace, true);
 800fb74:	2101      	movs	r1, #1
 800fb76:	4805      	ldr	r0, [pc, #20]	; (800fb8c <_ZN5Trace5outlnEPKcz+0x30>)
 800fb78:	f7ff ffa8 	bl	800facc <_ZN5Trace6_printEPcb>
#endif // USE_TRACE
}
 800fb7c:	bf00      	nop
 800fb7e:	3708      	adds	r7, #8
 800fb80:	46bd      	mov	sp, r7
 800fb82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fb86:	b004      	add	sp, #16
 800fb88:	4770      	bx	lr
 800fb8a:	bf00      	nop
 800fb8c:	200017f4 	.word	0x200017f4

0800fb90 <trace>:

	va_end(arguments);
}

extern "C" void trace(const char * const format , ...)
{
 800fb90:	b40f      	push	{r0, r1, r2, r3}
 800fb92:	b580      	push	{r7, lr}
 800fb94:	b082      	sub	sp, #8
 800fb96:	af00      	add	r7, sp, #0
#if (USE_TRACE != 0)
	va_list args;
	va_start(args, format);
 800fb98:	f107 0314 	add.w	r3, r7, #20
 800fb9c:	607b      	str	r3, [r7, #4]
	vsprintf(strTrace, format, args);
 800fb9e:	687a      	ldr	r2, [r7, #4]
 800fba0:	6939      	ldr	r1, [r7, #16]
 800fba2:	4807      	ldr	r0, [pc, #28]	; (800fbc0 <trace+0x30>)
 800fba4:	f007 fab6 	bl	8017114 <vsiprintf>
	va_end(args);

	Trace::_print(strTrace, false);
 800fba8:	2100      	movs	r1, #0
 800fbaa:	4805      	ldr	r0, [pc, #20]	; (800fbc0 <trace+0x30>)
 800fbac:	f7ff ff8e 	bl	800facc <_ZN5Trace6_printEPcb>
#endif // USE_TRACE
}
 800fbb0:	bf00      	nop
 800fbb2:	3708      	adds	r7, #8
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fbba:	b004      	add	sp, #16
 800fbbc:	4770      	bx	lr
 800fbbe:	bf00      	nop
 800fbc0:	200017f4 	.word	0x200017f4

0800fbc4 <_Z41__static_initialization_and_destruction_0ii>:
	vsprintf(strTrace, format, args);
	va_end(args);

	Trace::_print(strTrace, true);
#endif // USE_TRACE
}
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b088      	sub	sp, #32
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
 800fbcc:	6039      	str	r1, [r7, #0]
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	2b01      	cmp	r3, #1
 800fbd2:	d122      	bne.n	800fc1a <_Z41__static_initialization_and_destruction_0ii+0x56>
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	d11d      	bne.n	800fc1a <_Z41__static_initialization_and_destruction_0ii+0x56>
 800fbde:	4b18      	ldr	r3, [pc, #96]	; (800fc40 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	613b      	str	r3, [r7, #16]
 800fbe4:	f107 0310 	add.w	r3, r7, #16
 800fbe8:	60bb      	str	r3, [r7, #8]
 800fbea:	2304      	movs	r3, #4
 800fbec:	60fb      	str	r3, [r7, #12]
 800fbee:	f107 0308 	add.w	r3, r7, #8
 800fbf2:	e893 0006 	ldmia.w	r3, {r1, r2}
 800fbf6:	4813      	ldr	r0, [pc, #76]	; (800fc44 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800fbf8:	f7f7 f864 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
  static const desenet::Address SENSOR_ADDRESS({0xC7, 0xC7, 0xC7, 0xC7});	///< @brief Sensor's reception address.
 800fbfc:	4b12      	ldr	r3, [pc, #72]	; (800fc48 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	61fb      	str	r3, [r7, #28]
 800fc02:	f107 031c 	add.w	r3, r7, #28
 800fc06:	617b      	str	r3, [r7, #20]
 800fc08:	2304      	movs	r3, #4
 800fc0a:	61bb      	str	r3, [r7, #24]
 800fc0c:	f107 0314 	add.w	r3, r7, #20
 800fc10:	e893 0006 	ldmia.w	r3, {r1, r2}
 800fc14:	480d      	ldr	r0, [pc, #52]	; (800fc4c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800fc16:	f7f7 f855 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d10a      	bne.n	800fc36 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc26:	4293      	cmp	r3, r2
 800fc28:	d105      	bne.n	800fc36 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800fc2a:	4808      	ldr	r0, [pc, #32]	; (800fc4c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800fc2c:	f7f7 f986 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 800fc30:	4804      	ldr	r0, [pc, #16]	; (800fc44 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800fc32:	f7f7 f983 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
 800fc36:	bf00      	nop
 800fc38:	3720      	adds	r7, #32
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}
 800fc3e:	bf00      	nop
 800fc40:	08019e98 	.word	0x08019e98
 800fc44:	200017e4 	.word	0x200017e4
 800fc48:	08019e9c 	.word	0x08019e9c
 800fc4c:	200017ec 	.word	0x200017ec

0800fc50 <_GLOBAL__sub_I_strTrace>:
 800fc50:	b580      	push	{r7, lr}
 800fc52:	af00      	add	r7, sp, #0
 800fc54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fc58:	2001      	movs	r0, #1
 800fc5a:	f7ff ffb3 	bl	800fbc4 <_Z41__static_initialization_and_destruction_0ii>
 800fc5e:	bd80      	pop	{r7, pc}

0800fc60 <_GLOBAL__sub_D_strTrace>:
 800fc60:	b580      	push	{r7, lr}
 800fc62:	af00      	add	r7, sp, #0
 800fc64:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fc68:	2000      	movs	r0, #0
 800fc6a:	f7ff ffab 	bl	800fbc4 <_Z41__static_initialization_and_destruction_0ii>
 800fc6e:	bd80      	pop	{r7, pc}

0800fc70 <_ZN2ep7DisplayC1Ev>:

namespace ep {

Display * Display::pInstance = nullptr;

Display::Display()
 800fc70:	b480      	push	{r7}
 800fc72:	b083      	sub	sp, #12
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
{
    spi = nullptr;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	601a      	str	r2, [r3, #0]
    pinDC = nullptr;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2200      	movs	r2, #0
 800fc82:	605a      	str	r2, [r3, #4]
    pinBusy = nullptr;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2200      	movs	r2, #0
 800fc88:	609a      	str	r2, [r3, #8]
    pinReset = nullptr;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	60da      	str	r2, [r3, #12]
    pInstance = nullptr;
 800fc90:	4b04      	ldr	r3, [pc, #16]	; (800fca4 <_ZN2ep7DisplayC1Ev+0x34>)
 800fc92:	2200      	movs	r2, #0
 800fc94:	601a      	str	r2, [r3, #0]
}
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	4618      	mov	r0, r3
 800fc9a:	370c      	adds	r7, #12
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca2:	4770      	bx	lr
 800fca4:	20001988 	.word	0x20001988

0800fca8 <_ZN2ep7Display10initializeEP19__SPI_HandleTypeDefPNS_3GpoEPNS_3GpiES4_>:
    pinDC    :   pin used to say to the display if it's some Data or a command
    pinBusy  :   pin used by the display to say if busy or not
    pinReset :   pin used to perform a reset to the display
******************************************************************************/
void Display::initialize(SPI_HandleTypeDef * spi, Gpo * pinDC, Gpi * pinBusy, Gpo * pinReset)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b084      	sub	sp, #16
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	60f8      	str	r0, [r7, #12]
 800fcb0:	60b9      	str	r1, [r7, #8]
 800fcb2:	607a      	str	r2, [r7, #4]
 800fcb4:	603b      	str	r3, [r7, #0]
    if (spi && pinDC && pinBusy && pinReset)
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d01b      	beq.n	800fcf4 <_ZN2ep7Display10initializeEP19__SPI_HandleTypeDefPNS_3GpoEPNS_3GpiES4_+0x4c>
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d018      	beq.n	800fcf4 <_ZN2ep7Display10initializeEP19__SPI_HandleTypeDefPNS_3GpoEPNS_3GpiES4_+0x4c>
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d015      	beq.n	800fcf4 <_ZN2ep7Display10initializeEP19__SPI_HandleTypeDefPNS_3GpoEPNS_3GpiES4_+0x4c>
 800fcc8:	69bb      	ldr	r3, [r7, #24]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d012      	beq.n	800fcf4 <_ZN2ep7Display10initializeEP19__SPI_HandleTypeDefPNS_3GpoEPNS_3GpiES4_+0x4c>
    {
        this->spi = spi;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	68ba      	ldr	r2, [r7, #8]
 800fcd2:	601a      	str	r2, [r3, #0]
        this->pinDC = pinDC;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	687a      	ldr	r2, [r7, #4]
 800fcd8:	605a      	str	r2, [r3, #4]
        this->pinBusy = pinBusy;
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	683a      	ldr	r2, [r7, #0]
 800fcde:	609a      	str	r2, [r3, #8]
        this->pinReset = pinReset;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	69ba      	ldr	r2, [r7, #24]
 800fce4:	60da      	str	r2, [r3, #12]
        pInstance = this;
 800fce6:	4a08      	ldr	r2, [pc, #32]	; (800fd08 <_ZN2ep7Display10initializeEP19__SPI_HandleTypeDefPNS_3GpoEPNS_3GpiES4_+0x60>)
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	6013      	str	r3, [r2, #0]
    }
    else
    {
        assert(false);
    }
    init();
 800fcec:	68f8      	ldr	r0, [r7, #12]
 800fcee:	f000 f84d 	bl	800fd8c <_ZN2ep7Display4initEv>
}
 800fcf2:	e005      	b.n	800fd00 <_ZN2ep7Display10initializeEP19__SPI_HandleTypeDefPNS_3GpoEPNS_3GpiES4_+0x58>
        assert(false);
 800fcf4:	4b05      	ldr	r3, [pc, #20]	; (800fd0c <_ZN2ep7Display10initializeEP19__SPI_HandleTypeDefPNS_3GpoEPNS_3GpiES4_+0x64>)
 800fcf6:	4a06      	ldr	r2, [pc, #24]	; (800fd10 <_ZN2ep7Display10initializeEP19__SPI_HandleTypeDefPNS_3GpoEPNS_3GpiES4_+0x68>)
 800fcf8:	2125      	movs	r1, #37	; 0x25
 800fcfa:	4806      	ldr	r0, [pc, #24]	; (800fd14 <_ZN2ep7Display10initializeEP19__SPI_HandleTypeDefPNS_3GpoEPNS_3GpiES4_+0x6c>)
 800fcfc:	f006 fc9e 	bl	801663c <__assert_func>
}
 800fd00:	3710      	adds	r7, #16
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bd80      	pop	{r7, pc}
 800fd06:	bf00      	nop
 800fd08:	20001988 	.word	0x20001988
 800fd0c:	08019ea0 	.word	0x08019ea0
 800fd10:	08019ea8 	.word	0x08019ea8
 800fd14:	08019ef8 	.word	0x08019ef8

0800fd18 <_ZN2ep7Display9SPI_WriteEh>:
function:	communicate with the command to the display
parameter:
    command :   value of the data or the command
******************************************************************************/
void Display::SPI_Write(unsigned char command)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b082      	sub	sp, #8
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
 800fd20:	460b      	mov	r3, r1
 800fd22:	70fb      	strb	r3, [r7, #3]
    HAL_SPI_Transmit(this->spi, &command, 1, -1);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6818      	ldr	r0, [r3, #0]
 800fd28:	1cf9      	adds	r1, r7, #3
 800fd2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd2e:	2201      	movs	r2, #1
 800fd30:	f7f4 f85f 	bl	8003df2 <HAL_SPI_Transmit>
}
 800fd34:	bf00      	nop
 800fd36:	3708      	adds	r7, #8
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}

0800fd3c <_ZN2ep7Display8writeCMDEh>:
function:	write a command to the display (well, to the chip)
parameter:
    command :   value of the command
******************************************************************************/
void Display::writeCMD(uint8_t command)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b082      	sub	sp, #8
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
 800fd44:	460b      	mov	r3, r1
 800fd46:	70fb      	strb	r3, [r7, #3]
    this->pinDC->off();
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	685b      	ldr	r3, [r3, #4]
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f000 fdc8 	bl	80108e2 <_ZN2ep3Gpo3offEv>
    SPI_Write(command);
 800fd52:	78fb      	ldrb	r3, [r7, #3]
 800fd54:	4619      	mov	r1, r3
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f7ff ffde 	bl	800fd18 <_ZN2ep7Display9SPI_WriteEh>
}
 800fd5c:	bf00      	nop
 800fd5e:	3708      	adds	r7, #8
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}

0800fd64 <_ZN2ep7Display9writeDATAEh>:
function:	write some data to the display (well, to the chip)
parameter:
    command : value of the data
******************************************************************************/
void Display::writeDATA(uint8_t command)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b082      	sub	sp, #8
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
 800fd6c:	460b      	mov	r3, r1
 800fd6e:	70fb      	strb	r3, [r7, #3]
    this->pinDC->on();
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	685b      	ldr	r3, [r3, #4]
 800fd74:	4618      	mov	r0, r3
 800fd76:	f000 fda3 	bl	80108c0 <_ZN2ep3Gpo2onEv>
    SPI_Write(command);
 800fd7a:	78fb      	ldrb	r3, [r7, #3]
 800fd7c:	4619      	mov	r1, r3
 800fd7e:	6878      	ldr	r0, [r7, #4]
 800fd80:	f7ff ffca 	bl	800fd18 <_ZN2ep7Display9SPI_WriteEh>
}
 800fd84:	bf00      	nop
 800fd86:	3708      	adds	r7, #8
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	bd80      	pop	{r7, pc}

0800fd8c <_ZN2ep7Display4initEv>:

/******************************************************************************
function:	Perform some init instructions for the display
******************************************************************************/
void Display::init()
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b086      	sub	sp, #24
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
	//GD : This annotation is used to notify that this isn't the settings that was found in Adafruit example code
	//But settings found for a better "short refresh" (most of them is certainly useless however)
    uint8_t buf[5];
    initReset();                    // Electronic paper IC reset
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f000 f8bb 	bl	800ff10 <_ZN2ep7Display9initResetEv>
    lcdChkstatus();
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	f000 f8d0 	bl	800ff40 <_ZN2ep7Display12lcdChkstatusEv>

    writeCMD(SSD1608_SW_RESET);     // soft reset
 800fda0:	2112      	movs	r1, #18
 800fda2:	6878      	ldr	r0, [r7, #4]
 800fda4:	f7ff ffca 	bl	800fd3c <_ZN2ep7Display8writeCMDEh>

    lcdChkstatus();
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f000 f8c9 	bl	800ff40 <_ZN2ep7Display12lcdChkstatusEv>

    // driver output control
    buf[0] = HEIGHT - 1;
 800fdae:	23c7      	movs	r3, #199	; 0xc7
 800fdb0:	733b      	strb	r3, [r7, #12]
    buf[1] = (HEIGHT - 1) >> 8;
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	737b      	strb	r3, [r7, #13]
    buf[2] = 0x00;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	73bb      	strb	r3, [r7, #14]
    writeCMD(SSD1608_DRIVER_CONTROL);
 800fdba:	2101      	movs	r1, #1
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	f7ff ffbd 	bl	800fd3c <_ZN2ep7Display8writeCMDEh>
    writeDATA(buf[0]);
 800fdc2:	7b3b      	ldrb	r3, [r7, #12]
 800fdc4:	4619      	mov	r1, r3
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f7ff ffcc 	bl	800fd64 <_ZN2ep7Display9writeDATAEh>
    writeDATA(buf[1]);
 800fdcc:	7b7b      	ldrb	r3, [r7, #13]
 800fdce:	4619      	mov	r1, r3
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f7ff ffc7 	bl	800fd64 <_ZN2ep7Display9writeDATAEh>
    writeDATA(buf[2]);
 800fdd6:	7bbb      	ldrb	r3, [r7, #14]
 800fdd8:	4619      	mov	r1, r3
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f7ff ffc2 	bl	800fd64 <_ZN2ep7Display9writeDATAEh>

    //Gate Driving voltage Control (GD)
    writeCMD(SSD1608_GATE_VOLTAGE);
 800fde0:	2103      	movs	r1, #3
 800fde2:	6878      	ldr	r0, [r7, #4]
 800fde4:	f7ff ffaa 	bl	800fd3c <_ZN2ep7Display8writeCMDEh>
    writeDATA(0x00);
 800fde8:	2100      	movs	r1, #0
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f7ff ffba 	bl	800fd64 <_ZN2ep7Display9writeDATAEh>

    // Set dummy line period
    writeCMD(SSD1608_WRITE_DUMMY);
 800fdf0:	213a      	movs	r1, #58	; 0x3a
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f7ff ffa2 	bl	800fd3c <_ZN2ep7Display8writeCMDEh>
    //writeDATA(0x1B);
    writeDATA(0x1A); //GD
 800fdf8:	211a      	movs	r1, #26
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f7ff ffb2 	bl	800fd64 <_ZN2ep7Display9writeDATAEh>

    // Set gate line width
    writeCMD(SSD1608_WRITE_GATELINE);
 800fe00:	213b      	movs	r1, #59	; 0x3b
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f7ff ff9a 	bl	800fd3c <_ZN2ep7Display8writeCMDEh>
    //writeDATA(0x0B);
    writeDATA(0x08);	//GD
 800fe08:	2108      	movs	r1, #8
 800fe0a:	6878      	ldr	r0, [r7, #4]
 800fe0c:	f7ff ffaa 	bl	800fd64 <_ZN2ep7Display9writeDATAEh>

    // Data entry sequence
    writeCMD(SSD1608_DATA_MODE);
 800fe10:	2111      	movs	r1, #17
 800fe12:	6878      	ldr	r0, [r7, #4]
 800fe14:	f7ff ff92 	bl	800fd3c <_ZN2ep7Display8writeCMDEh>
    writeDATA(0x03);
 800fe18:	2103      	movs	r1, #3
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f7ff ffa2 	bl	800fd64 <_ZN2ep7Display9writeDATAEh>

    // Set ram X start/end postion
    buf[0]=WIDTH / 8 - 1;
 800fe20:	2318      	movs	r3, #24
 800fe22:	733b      	strb	r3, [r7, #12]
    writeCMD(SSD1608_SET_RAMXPOS);
 800fe24:	2144      	movs	r1, #68	; 0x44
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f7ff ff88 	bl	800fd3c <_ZN2ep7Display8writeCMDEh>
    writeDATA(0x00);
 800fe2c:	2100      	movs	r1, #0
 800fe2e:	6878      	ldr	r0, [r7, #4]
 800fe30:	f7ff ff98 	bl	800fd64 <_ZN2ep7Display9writeDATAEh>
    writeDATA(buf[0]);
 800fe34:	7b3b      	ldrb	r3, [r7, #12]
 800fe36:	4619      	mov	r1, r3
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	f7ff ff93 	bl	800fd64 <_ZN2ep7Display9writeDATAEh>

    // Set ram Y start/end postion
    buf[0]=HEIGHT - 1;
 800fe3e:	23c7      	movs	r3, #199	; 0xc7
 800fe40:	733b      	strb	r3, [r7, #12]
    buf[1]=(HEIGHT - 1) >> 8;
 800fe42:	2300      	movs	r3, #0
 800fe44:	737b      	strb	r3, [r7, #13]
    writeCMD(SSD1608_SET_RAMYPOS);
 800fe46:	2145      	movs	r1, #69	; 0x45
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f7ff ff77 	bl	800fd3c <_ZN2ep7Display8writeCMDEh>
    writeDATA(0x00);
 800fe4e:	2100      	movs	r1, #0
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f7ff ff87 	bl	800fd64 <_ZN2ep7Display9writeDATAEh>
    writeDATA(0x00);
 800fe56:	2100      	movs	r1, #0
 800fe58:	6878      	ldr	r0, [r7, #4]
 800fe5a:	f7ff ff83 	bl	800fd64 <_ZN2ep7Display9writeDATAEh>
    writeDATA(buf[0]);
 800fe5e:	7b3b      	ldrb	r3, [r7, #12]
 800fe60:	4619      	mov	r1, r3
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f7ff ff7e 	bl	800fd64 <_ZN2ep7Display9writeDATAEh>
    writeDATA(buf[1]);
 800fe68:	7b7b      	ldrb	r3, [r7, #13]
 800fe6a:	4619      	mov	r1, r3
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f7ff ff79 	bl	800fd64 <_ZN2ep7Display9writeDATAEh>

    // Vcom Voltage
    writeCMD(SSD1608_WRITE_VCOM);
 800fe72:	212c      	movs	r1, #44	; 0x2c
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f7ff ff61 	bl	800fd3c <_ZN2ep7Display8writeCMDEh>
    //writeDATA(0x70);
    writeDATA(0xA8);	//GD
 800fe7a:	21a8      	movs	r1, #168	; 0xa8
 800fe7c:	6878      	ldr	r0, [r7, #4]
 800fe7e:	f7ff ff71 	bl	800fd64 <_ZN2ep7Display9writeDATAEh>

    writeCMD(SSD1608_WRITE_LUT);
 800fe82:	2132      	movs	r1, #50	; 0x32
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f7ff ff59 	bl	800fd3c <_ZN2ep7Display8writeCMDEh>
    for(uint32_t i = 0; i<30 ; i++){
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	617b      	str	r3, [r7, #20]
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	2b1d      	cmp	r3, #29
 800fe92:	d80b      	bhi.n	800feac <_ZN2ep7Display4initEv+0x120>
        writeDATA(LUT_DATA[i]);
 800fe94:	4a0d      	ldr	r2, [pc, #52]	; (800fecc <_ZN2ep7Display4initEv+0x140>)
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	4413      	add	r3, r2
 800fe9a:	781b      	ldrb	r3, [r3, #0]
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f7ff ff60 	bl	800fd64 <_ZN2ep7Display9writeDATAEh>
    for(uint32_t i = 0; i<30 ; i++){
 800fea4:	697b      	ldr	r3, [r7, #20]
 800fea6:	3301      	adds	r3, #1
 800fea8:	617b      	str	r3, [r7, #20]
 800feaa:	e7f0      	b.n	800fe8e <_ZN2ep7Display4initEv+0x102>
    }

    // border color
    buf[0] = 0x00;
 800feac:	2300      	movs	r3, #0
 800feae:	733b      	strb	r3, [r7, #12]
    writeCMD(SSD1608_WRITE_BORDER);
 800feb0:	213c      	movs	r1, #60	; 0x3c
 800feb2:	6878      	ldr	r0, [r7, #4]
 800feb4:	f7ff ff42 	bl	800fd3c <_ZN2ep7Display8writeCMDEh>
    writeDATA(buf[0]);
 800feb8:	7b3b      	ldrb	r3, [r7, #12]
 800feba:	4619      	mov	r1, r3
 800febc:	6878      	ldr	r0, [r7, #4]
 800febe:	f7ff ff51 	bl	800fd64 <_ZN2ep7Display9writeDATAEh>
}
 800fec2:	bf00      	nop
 800fec4:	3718      	adds	r7, #24
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}
 800feca:	bf00      	nop
 800fecc:	0801c360 	.word	0x0801c360

0800fed0 <_ZN2ep7Display18setLUTShortRefreshEv>:
	for(uint32_t i = 0; i<30 ; i++){
		writeDATA(LUT_DATA[i]);
	}
}

void Display::setLUTShortRefresh(){
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b084      	sub	sp, #16
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
	writeCMD(SSD1608_WRITE_LUT);
 800fed8:	2132      	movs	r1, #50	; 0x32
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f7ff ff2e 	bl	800fd3c <_ZN2ep7Display8writeCMDEh>
	for(uint32_t i = 0; i<30 ; i++){
 800fee0:	2300      	movs	r3, #0
 800fee2:	60fb      	str	r3, [r7, #12]
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	2b1d      	cmp	r3, #29
 800fee8:	d80b      	bhi.n	800ff02 <_ZN2ep7Display18setLUTShortRefreshEv+0x32>
		writeDATA(LUT_part1[i]);
 800feea:	4a08      	ldr	r2, [pc, #32]	; (800ff0c <_ZN2ep7Display18setLUTShortRefreshEv+0x3c>)
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	4413      	add	r3, r2
 800fef0:	781b      	ldrb	r3, [r3, #0]
 800fef2:	4619      	mov	r1, r3
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f7ff ff35 	bl	800fd64 <_ZN2ep7Display9writeDATAEh>
	for(uint32_t i = 0; i<30 ; i++){
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	3301      	adds	r3, #1
 800fefe:	60fb      	str	r3, [r7, #12]
 800ff00:	e7f0      	b.n	800fee4 <_ZN2ep7Display18setLUTShortRefreshEv+0x14>
	}
}
 800ff02:	bf00      	nop
 800ff04:	3710      	adds	r7, #16
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bd80      	pop	{r7, pc}
 800ff0a:	bf00      	nop
 800ff0c:	0801c380 	.word	0x0801c380

0800ff10 <_ZN2ep7Display9initResetEv>:

/******************************************************************************
function:	Perform a reset to the display
******************************************************************************/
void Display::initReset()
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b082      	sub	sp, #8
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
    this->pinReset->off();
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	68db      	ldr	r3, [r3, #12]
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f000 fce0 	bl	80108e2 <_ZN2ep3Gpo3offEv>
    HAL_Delay(50);
 800ff22:	2032      	movs	r0, #50	; 0x32
 800ff24:	f7f1 faba 	bl	800149c <HAL_Delay>
    this->pinReset->on();
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	68db      	ldr	r3, [r3, #12]
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f000 fcc7 	bl	80108c0 <_ZN2ep3Gpo2onEv>
    HAL_Delay(50);
 800ff32:	2032      	movs	r0, #50	; 0x32
 800ff34:	f7f1 fab2 	bl	800149c <HAL_Delay>
}
 800ff38:	bf00      	nop
 800ff3a:	3708      	adds	r7, #8
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}

0800ff40 <_ZN2ep7Display12lcdChkstatusEv>:

/******************************************************************************
function:	Check if the display is busy
******************************************************************************/
void Display::lcdChkstatus()
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b084      	sub	sp, #16
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
	GPIO_PinState busy;
    do
    {
        busy = this->pinBusy->read();
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	689b      	ldr	r3, [r3, #8]
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f000 fc7f 	bl	8010850 <_ZN2ep3Gpi4readEv>
 800ff52:	4603      	mov	r3, r0
 800ff54:	73fb      	strb	r3, [r7, #15]
    } while (busy == GPIO_PIN_SET);
 800ff56:	7bfb      	ldrb	r3, [r7, #15]
 800ff58:	2b01      	cmp	r3, #1
 800ff5a:	d100      	bne.n	800ff5e <_ZN2ep7Display12lcdChkstatusEv+0x1e>
    do
 800ff5c:	e7f4      	b.n	800ff48 <_ZN2ep7Display12lcdChkstatusEv+0x8>
    HAL_Delay(10);
 800ff5e:	200a      	movs	r0, #10
 800ff60:	f7f1 fa9c 	bl	800149c <HAL_Delay>
}
 800ff64:	bf00      	nop
 800ff66:	3710      	adds	r7, #16
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}

0800ff6c <_ZN2ep7Display7displayEPh>:
function:	Display the array (image)
parameter:
    image :   array which contain the picture
******************************************************************************/
void Display::display(uint8_t *image)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b084      	sub	sp, #16
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
 800ff74:	6039      	str	r1, [r7, #0]
    //Set ram address to 0
    // Set RAM X address counter
    writeCMD(SSD1608_SET_RAMXCOUNT);
 800ff76:	214e      	movs	r1, #78	; 0x4e
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f7ff fedf 	bl	800fd3c <_ZN2ep7Display8writeCMDEh>
    writeDATA(0x00);
 800ff7e:	2100      	movs	r1, #0
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	f7ff feef 	bl	800fd64 <_ZN2ep7Display9writeDATAEh>
    // Set RAM Y address counter
    writeCMD(SSD1608_SET_RAMYCOUNT);
 800ff86:	214f      	movs	r1, #79	; 0x4f
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f7ff fed7 	bl	800fd3c <_ZN2ep7Display8writeCMDEh>
    writeDATA(0x00);
 800ff8e:	2100      	movs	r1, #0
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	f7ff fee7 	bl	800fd64 <_ZN2ep7Display9writeDATAEh>
    writeDATA(0x00);
 800ff96:	2100      	movs	r1, #0
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f7ff fee3 	bl	800fd64 <_ZN2ep7Display9writeDATAEh>

    writeCMD(SSD1608_WRITE_RAM);
 800ff9e:	2124      	movs	r1, #36	; 0x24
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f7ff fecb 	bl	800fd3c <_ZN2ep7Display8writeCMDEh>
    for(uint32_t i=0;i<5000;i++){
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	60fb      	str	r3, [r7, #12]
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	f241 3287 	movw	r2, #4999	; 0x1387
 800ffb0:	4293      	cmp	r3, r2
 800ffb2:	d80b      	bhi.n	800ffcc <_ZN2ep7Display7displayEPh+0x60>
        writeDATA(image[i]);
 800ffb4:	683a      	ldr	r2, [r7, #0]
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	4413      	add	r3, r2
 800ffba:	781b      	ldrb	r3, [r3, #0]
 800ffbc:	4619      	mov	r1, r3
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f7ff fed0 	bl	800fd64 <_ZN2ep7Display9writeDATAEh>
    for(uint32_t i=0;i<5000;i++){
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	3301      	adds	r3, #1
 800ffc8:	60fb      	str	r3, [r7, #12]
 800ffca:	e7ee      	b.n	800ffaa <_ZN2ep7Display7displayEPh+0x3e>
    }
    writeCMD(SSD1608_DISP_CTRL2);
 800ffcc:	2122      	movs	r1, #34	; 0x22
 800ffce:	6878      	ldr	r0, [r7, #4]
 800ffd0:	f7ff feb4 	bl	800fd3c <_ZN2ep7Display8writeCMDEh>
    writeDATA(0xC7);
 800ffd4:	21c7      	movs	r1, #199	; 0xc7
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f7ff fec4 	bl	800fd64 <_ZN2ep7Display9writeDATAEh>
    writeCMD(SSD1608_MASTER_ACTIVATE);
 800ffdc:	2120      	movs	r1, #32
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	f7ff feac 	bl	800fd3c <_ZN2ep7Display8writeCMDEh>

    lcdChkstatus();
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f7ff ffab 	bl	800ff40 <_ZN2ep7Display12lcdChkstatusEv>
}
 800ffea:	bf00      	nop
 800ffec:	3710      	adds	r7, #16
 800ffee:	46bd      	mov	sp, r7
 800fff0:	bd80      	pop	{r7, pc}

0800fff2 <_ZN2ep5PaintC1Ev>:
#include <cmath>
#include "paint.h"

namespace ep {

Paint::Paint()
 800fff2:	b480      	push	{r7}
 800fff4:	b083      	sub	sp, #12
 800fff6:	af00      	add	r7, sp, #0
 800fff8:	6078      	str	r0, [r7, #4]
{
    buffer = nullptr;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2200      	movs	r2, #0
 800fffe:	605a      	str	r2, [r3, #4]
}
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	4618      	mov	r0, r3
 8010004:	370c      	adds	r7, #12
 8010006:	46bd      	mov	sp, r7
 8010008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000c:	4770      	bx	lr

0801000e <_ZN2ep5Paint10initializeEPNS_7DisplayE>:
void Paint::initialize(ep::Display * epd)
{
 801000e:	b480      	push	{r7}
 8010010:	b083      	sub	sp, #12
 8010012:	af00      	add	r7, sp, #0
 8010014:	6078      	str	r0, [r7, #4]
 8010016:	6039      	str	r1, [r7, #0]
    this->epd = epd;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	683a      	ldr	r2, [r7, #0]
 801001c:	601a      	str	r2, [r3, #0]
}
 801001e:	bf00      	nop
 8010020:	370c      	adds	r7, #12
 8010022:	46bd      	mov	sp, r7
 8010024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010028:	4770      	bx	lr

0801002a <_ZN2ep5Paint9setBufferEPhtttt>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint::setBuffer(uint8_t * buffer, uint16_t Width, uint16_t Height, uint16_t Rotate, uint16_t Color)
{
 801002a:	b480      	push	{r7}
 801002c:	b085      	sub	sp, #20
 801002e:	af00      	add	r7, sp, #0
 8010030:	60f8      	str	r0, [r7, #12]
 8010032:	60b9      	str	r1, [r7, #8]
 8010034:	4611      	mov	r1, r2
 8010036:	461a      	mov	r2, r3
 8010038:	460b      	mov	r3, r1
 801003a:	80fb      	strh	r3, [r7, #6]
 801003c:	4613      	mov	r3, r2
 801003e:	80bb      	strh	r3, [r7, #4]
    this->buffer = buffer;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	68ba      	ldr	r2, [r7, #8]
 8010044:	605a      	str	r2, [r3, #4]

    this->width = Width;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	88fa      	ldrh	r2, [r7, #6]
 801004a:	811a      	strh	r2, [r3, #8]
    this->height = Height;
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	88ba      	ldrh	r2, [r7, #4]
 8010050:	815a      	strh	r2, [r3, #10]

    this->widthMemory = Width;
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	88fa      	ldrh	r2, [r7, #6]
 8010056:	819a      	strh	r2, [r3, #12]
    this->heightMemory = Height;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	88ba      	ldrh	r2, [r7, #4]
 801005c:	81da      	strh	r2, [r3, #14]
    this->color = Color;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	8bba      	ldrh	r2, [r7, #28]
 8010062:	821a      	strh	r2, [r3, #16]
    this->widthByte = (Width % 8 == 0) ? (Width / 8) : (Width / 8 + 1);
 8010064:	88fb      	ldrh	r3, [r7, #6]
 8010066:	f003 0307 	and.w	r3, r3, #7
 801006a:	2b00      	cmp	r3, #0
 801006c:	d103      	bne.n	8010076 <_ZN2ep5Paint9setBufferEPhtttt+0x4c>
 801006e:	88fb      	ldrh	r3, [r7, #6]
 8010070:	08db      	lsrs	r3, r3, #3
 8010072:	b29b      	uxth	r3, r3
 8010074:	e004      	b.n	8010080 <_ZN2ep5Paint9setBufferEPhtttt+0x56>
 8010076:	88fb      	ldrh	r3, [r7, #6]
 8010078:	08db      	lsrs	r3, r3, #3
 801007a:	b29b      	uxth	r3, r3
 801007c:	3301      	adds	r3, #1
 801007e:	b29b      	uxth	r3, r3
 8010080:	68fa      	ldr	r2, [r7, #12]
 8010082:	82d3      	strh	r3, [r2, #22]
    this->heightByte = Height;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	88ba      	ldrh	r2, [r7, #4]
 8010088:	831a      	strh	r2, [r3, #24]

    this->rotate = Rotate;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	8b3a      	ldrh	r2, [r7, #24]
 801008e:	825a      	strh	r2, [r3, #18]

    this->mirror = MIRROR_NONE;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	2200      	movs	r2, #0
 8010094:	829a      	strh	r2, [r3, #20]

    if (Rotate == EP_DISPLAY_ROTATE_0 || Rotate == EP_DISPLAY_ROTATE_180)
 8010096:	8b3b      	ldrh	r3, [r7, #24]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d002      	beq.n	80100a2 <_ZN2ep5Paint9setBufferEPhtttt+0x78>
 801009c:	8b3b      	ldrh	r3, [r7, #24]
 801009e:	2bb4      	cmp	r3, #180	; 0xb4
 80100a0:	d106      	bne.n	80100b0 <_ZN2ep5Paint9setBufferEPhtttt+0x86>
    {
        this->width = Width;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	88fa      	ldrh	r2, [r7, #6]
 80100a6:	811a      	strh	r2, [r3, #8]
        this->height = Height;
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	88ba      	ldrh	r2, [r7, #4]
 80100ac:	815a      	strh	r2, [r3, #10]
 80100ae:	e005      	b.n	80100bc <_ZN2ep5Paint9setBufferEPhtttt+0x92>
    }
    else
    {
        this->width = Height;
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	88ba      	ldrh	r2, [r7, #4]
 80100b4:	811a      	strh	r2, [r3, #8]
        this->height = Width;
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	88fa      	ldrh	r2, [r7, #6]
 80100ba:	815a      	strh	r2, [r3, #10]
    }

    this->pixelCount = width * height;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	891a      	ldrh	r2, [r3, #8]
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	895b      	ldrh	r3, [r3, #10]
 80100c4:	fb12 f303 	smulbb	r3, r2, r3
 80100c8:	b29a      	uxth	r2, r3
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	835a      	strh	r2, [r3, #26]
    this->bytesCount = pixelCount / 8;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	8b5b      	ldrh	r3, [r3, #26]
 80100d2:	08db      	lsrs	r3, r3, #3
 80100d4:	b29a      	uxth	r2, r3
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	839a      	strh	r2, [r3, #28]

    this->buffer = buffer;
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	68ba      	ldr	r2, [r7, #8]
 80100de:	605a      	str	r2, [r3, #4]
}
 80100e0:	bf00      	nop
 80100e2:	3714      	adds	r7, #20
 80100e4:	46bd      	mov	sp, r7
 80100e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ea:	4770      	bx	lr

080100ec <_ZN2ep5Paint9setRotateEt>:
function:	Select buffer rotate
parameter:
    Rotate   :   0,90,180,270
******************************************************************************/
void Paint::setRotate(Rotation Rotate)
{
 80100ec:	b480      	push	{r7}
 80100ee:	b083      	sub	sp, #12
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
 80100f4:	460b      	mov	r3, r1
 80100f6:	807b      	strh	r3, [r7, #2]
    if (Rotate == EP_DISPLAY_ROTATE_0 || Rotate == EP_DISPLAY_ROTATE_90 || Rotate == EP_DISPLAY_ROTATE_180 || Rotate == EP_DISPLAY_ROTATE_270)
 80100f8:	887b      	ldrh	r3, [r7, #2]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d009      	beq.n	8010112 <_ZN2ep5Paint9setRotateEt+0x26>
 80100fe:	887b      	ldrh	r3, [r7, #2]
 8010100:	2b5a      	cmp	r3, #90	; 0x5a
 8010102:	d006      	beq.n	8010112 <_ZN2ep5Paint9setRotateEt+0x26>
 8010104:	887b      	ldrh	r3, [r7, #2]
 8010106:	2bb4      	cmp	r3, #180	; 0xb4
 8010108:	d003      	beq.n	8010112 <_ZN2ep5Paint9setRotateEt+0x26>
 801010a:	887b      	ldrh	r3, [r7, #2]
 801010c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010110:	d102      	bne.n	8010118 <_ZN2ep5Paint9setRotateEt+0x2c>
    {
        this->rotate = Rotate;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	887a      	ldrh	r2, [r7, #2]
 8010116:	825a      	strh	r2, [r3, #18]
    }
}
 8010118:	bf00      	nop
 801011a:	370c      	adds	r7, #12
 801011c:	46bd      	mov	sp, r7
 801011e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010122:	4770      	bx	lr

08010124 <_ZN2ep5Paint8setPixelEtttb>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint::setPixel(uint16_t Xpoint, uint16_t Ypoint, uint16_t Color, bool refresh)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b088      	sub	sp, #32
 8010128:	af00      	add	r7, sp, #0
 801012a:	60f8      	str	r0, [r7, #12]
 801012c:	4608      	mov	r0, r1
 801012e:	4611      	mov	r1, r2
 8010130:	461a      	mov	r2, r3
 8010132:	4603      	mov	r3, r0
 8010134:	817b      	strh	r3, [r7, #10]
 8010136:	460b      	mov	r3, r1
 8010138:	813b      	strh	r3, [r7, #8]
 801013a:	4613      	mov	r3, r2
 801013c:	80fb      	strh	r3, [r7, #6]
    uint16_t X, Y;
    uint32_t Addr;
    uint8_t Rdata;
    if (Xpoint > this->width || Ypoint > this->height)
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	891b      	ldrh	r3, [r3, #8]
 8010142:	897a      	ldrh	r2, [r7, #10]
 8010144:	429a      	cmp	r2, r3
 8010146:	f200 80c0 	bhi.w	80102ca <_ZN2ep5Paint8setPixelEtttb+0x1a6>
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	895b      	ldrh	r3, [r3, #10]
 801014e:	893a      	ldrh	r2, [r7, #8]
 8010150:	429a      	cmp	r2, r3
 8010152:	f200 80ba 	bhi.w	80102ca <_ZN2ep5Paint8setPixelEtttb+0x1a6>
    {
        return;
    }

    switch (this->rotate)
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	8a5b      	ldrh	r3, [r3, #18]
 801015a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801015e:	d029      	beq.n	80101b4 <_ZN2ep5Paint8setPixelEtttb+0x90>
 8010160:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010164:	dc30      	bgt.n	80101c8 <_ZN2ep5Paint8setPixelEtttb+0xa4>
 8010166:	2bb4      	cmp	r3, #180	; 0xb4
 8010168:	d015      	beq.n	8010196 <_ZN2ep5Paint8setPixelEtttb+0x72>
 801016a:	2bb4      	cmp	r3, #180	; 0xb4
 801016c:	dc2c      	bgt.n	80101c8 <_ZN2ep5Paint8setPixelEtttb+0xa4>
 801016e:	2b00      	cmp	r3, #0
 8010170:	d002      	beq.n	8010178 <_ZN2ep5Paint8setPixelEtttb+0x54>
 8010172:	2b5a      	cmp	r3, #90	; 0x5a
 8010174:	d005      	beq.n	8010182 <_ZN2ep5Paint8setPixelEtttb+0x5e>
 8010176:	e027      	b.n	80101c8 <_ZN2ep5Paint8setPixelEtttb+0xa4>
    {
    case 0:
        X = Xpoint;
 8010178:	897b      	ldrh	r3, [r7, #10]
 801017a:	83fb      	strh	r3, [r7, #30]
        Y = Ypoint;
 801017c:	893b      	ldrh	r3, [r7, #8]
 801017e:	83bb      	strh	r3, [r7, #28]
        break;
 8010180:	e028      	b.n	80101d4 <_ZN2ep5Paint8setPixelEtttb+0xb0>
    case 90:
        X = this->widthMemory - Ypoint - 1;
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	899a      	ldrh	r2, [r3, #12]
 8010186:	893b      	ldrh	r3, [r7, #8]
 8010188:	1ad3      	subs	r3, r2, r3
 801018a:	b29b      	uxth	r3, r3
 801018c:	3b01      	subs	r3, #1
 801018e:	83fb      	strh	r3, [r7, #30]
        Y = Xpoint;
 8010190:	897b      	ldrh	r3, [r7, #10]
 8010192:	83bb      	strh	r3, [r7, #28]
        break;
 8010194:	e01e      	b.n	80101d4 <_ZN2ep5Paint8setPixelEtttb+0xb0>
    case 180:
        X = this->widthMemory - Xpoint - 1;
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	899a      	ldrh	r2, [r3, #12]
 801019a:	897b      	ldrh	r3, [r7, #10]
 801019c:	1ad3      	subs	r3, r2, r3
 801019e:	b29b      	uxth	r3, r3
 80101a0:	3b01      	subs	r3, #1
 80101a2:	83fb      	strh	r3, [r7, #30]
        Y = this->heightMemory - Ypoint - 1;
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	89da      	ldrh	r2, [r3, #14]
 80101a8:	893b      	ldrh	r3, [r7, #8]
 80101aa:	1ad3      	subs	r3, r2, r3
 80101ac:	b29b      	uxth	r3, r3
 80101ae:	3b01      	subs	r3, #1
 80101b0:	83bb      	strh	r3, [r7, #28]
        break;
 80101b2:	e00f      	b.n	80101d4 <_ZN2ep5Paint8setPixelEtttb+0xb0>
    case 270:
        X = Ypoint;
 80101b4:	893b      	ldrh	r3, [r7, #8]
 80101b6:	83fb      	strh	r3, [r7, #30]
        Y = this->heightMemory - Xpoint - 1;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	89da      	ldrh	r2, [r3, #14]
 80101bc:	897b      	ldrh	r3, [r7, #10]
 80101be:	1ad3      	subs	r3, r2, r3
 80101c0:	b29b      	uxth	r3, r3
 80101c2:	3b01      	subs	r3, #1
 80101c4:	83bb      	strh	r3, [r7, #28]
        break;
 80101c6:	e005      	b.n	80101d4 <_ZN2ep5Paint8setPixelEtttb+0xb0>
    default:
        assert(false);
 80101c8:	4b44      	ldr	r3, [pc, #272]	; (80102dc <_ZN2ep5Paint8setPixelEtttb+0x1b8>)
 80101ca:	4a45      	ldr	r2, [pc, #276]	; (80102e0 <_ZN2ep5Paint8setPixelEtttb+0x1bc>)
 80101cc:	217a      	movs	r1, #122	; 0x7a
 80101ce:	4845      	ldr	r0, [pc, #276]	; (80102e4 <_ZN2ep5Paint8setPixelEtttb+0x1c0>)
 80101d0:	f006 fa34 	bl	801663c <__assert_func>
        return;
    }

    switch (this->mirror)
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	8a9b      	ldrh	r3, [r3, #20]
 80101d8:	2b03      	cmp	r3, #3
 80101da:	d878      	bhi.n	80102ce <_ZN2ep5Paint8setPixelEtttb+0x1aa>
 80101dc:	a201      	add	r2, pc, #4	; (adr r2, 80101e4 <_ZN2ep5Paint8setPixelEtttb+0xc0>)
 80101de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101e2:	bf00      	nop
 80101e4:	08010233 	.word	0x08010233
 80101e8:	080101f5 	.word	0x080101f5
 80101ec:	08010205 	.word	0x08010205
 80101f0:	08010215 	.word	0x08010215
    {
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = this->widthMemory - X - 1;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	899a      	ldrh	r2, [r3, #12]
 80101f8:	8bfb      	ldrh	r3, [r7, #30]
 80101fa:	1ad3      	subs	r3, r2, r3
 80101fc:	b29b      	uxth	r3, r3
 80101fe:	3b01      	subs	r3, #1
 8010200:	83fb      	strh	r3, [r7, #30]
        break;
 8010202:	e017      	b.n	8010234 <_ZN2ep5Paint8setPixelEtttb+0x110>
    case MIRROR_VERTICAL:
        Y = this->heightMemory - Y - 1;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	89da      	ldrh	r2, [r3, #14]
 8010208:	8bbb      	ldrh	r3, [r7, #28]
 801020a:	1ad3      	subs	r3, r2, r3
 801020c:	b29b      	uxth	r3, r3
 801020e:	3b01      	subs	r3, #1
 8010210:	83bb      	strh	r3, [r7, #28]
        break;
 8010212:	e00f      	b.n	8010234 <_ZN2ep5Paint8setPixelEtttb+0x110>
    case MIRROR_ORIGIN:
        X = this->widthMemory - X - 1;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	899a      	ldrh	r2, [r3, #12]
 8010218:	8bfb      	ldrh	r3, [r7, #30]
 801021a:	1ad3      	subs	r3, r2, r3
 801021c:	b29b      	uxth	r3, r3
 801021e:	3b01      	subs	r3, #1
 8010220:	83fb      	strh	r3, [r7, #30]
        Y = this->heightMemory - Y - 1;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	89da      	ldrh	r2, [r3, #14]
 8010226:	8bbb      	ldrh	r3, [r7, #28]
 8010228:	1ad3      	subs	r3, r2, r3
 801022a:	b29b      	uxth	r3, r3
 801022c:	3b01      	subs	r3, #1
 801022e:	83bb      	strh	r3, [r7, #28]
        break;
 8010230:	e000      	b.n	8010234 <_ZN2ep5Paint8setPixelEtttb+0x110>
        break;
 8010232:	bf00      	nop
    default:
        return;
    }

    if (X > this->widthMemory || Y > this->heightMemory)
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	899b      	ldrh	r3, [r3, #12]
 8010238:	8bfa      	ldrh	r2, [r7, #30]
 801023a:	429a      	cmp	r2, r3
 801023c:	d849      	bhi.n	80102d2 <_ZN2ep5Paint8setPixelEtttb+0x1ae>
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	89db      	ldrh	r3, [r3, #14]
 8010242:	8bba      	ldrh	r2, [r7, #28]
 8010244:	429a      	cmp	r2, r3
 8010246:	d844      	bhi.n	80102d2 <_ZN2ep5Paint8setPixelEtttb+0x1ae>
    {
        return;
    }

    Addr = X / 8 + Y * this->widthByte;
 8010248:	8bfb      	ldrh	r3, [r7, #30]
 801024a:	08db      	lsrs	r3, r3, #3
 801024c:	b29b      	uxth	r3, r3
 801024e:	4619      	mov	r1, r3
 8010250:	8bbb      	ldrh	r3, [r7, #28]
 8010252:	68fa      	ldr	r2, [r7, #12]
 8010254:	8ad2      	ldrh	r2, [r2, #22]
 8010256:	fb02 f303 	mul.w	r3, r2, r3
 801025a:	440b      	add	r3, r1
 801025c:	61bb      	str	r3, [r7, #24]
    Rdata = this->buffer[Addr];
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	685a      	ldr	r2, [r3, #4]
 8010262:	69bb      	ldr	r3, [r7, #24]
 8010264:	4413      	add	r3, r2
 8010266:	781b      	ldrb	r3, [r3, #0]
 8010268:	75fb      	strb	r3, [r7, #23]
    if (Color == EP_DISPLAY_BLACK)
 801026a:	88fb      	ldrh	r3, [r7, #6]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d113      	bne.n	8010298 <_ZN2ep5Paint8setPixelEtttb+0x174>
        this->buffer[Addr] = Rdata & ~(0x80 >> (X % 8));
 8010270:	8bfb      	ldrh	r3, [r7, #30]
 8010272:	f003 0307 	and.w	r3, r3, #7
 8010276:	2280      	movs	r2, #128	; 0x80
 8010278:	fa42 f303 	asr.w	r3, r2, r3
 801027c:	b25b      	sxtb	r3, r3
 801027e:	43db      	mvns	r3, r3
 8010280:	b25a      	sxtb	r2, r3
 8010282:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010286:	4013      	ands	r3, r2
 8010288:	b259      	sxtb	r1, r3
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	685a      	ldr	r2, [r3, #4]
 801028e:	69bb      	ldr	r3, [r7, #24]
 8010290:	4413      	add	r3, r2
 8010292:	b2ca      	uxtb	r2, r1
 8010294:	701a      	strb	r2, [r3, #0]
 8010296:	e010      	b.n	80102ba <_ZN2ep5Paint8setPixelEtttb+0x196>
    else
        this->buffer[Addr] = Rdata | (0x80 >> (X % 8));
 8010298:	8bfb      	ldrh	r3, [r7, #30]
 801029a:	f003 0307 	and.w	r3, r3, #7
 801029e:	2280      	movs	r2, #128	; 0x80
 80102a0:	fa42 f303 	asr.w	r3, r2, r3
 80102a4:	b25a      	sxtb	r2, r3
 80102a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80102aa:	4313      	orrs	r3, r2
 80102ac:	b259      	sxtb	r1, r3
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	685a      	ldr	r2, [r3, #4]
 80102b2:	69bb      	ldr	r3, [r7, #24]
 80102b4:	4413      	add	r3, r2
 80102b6:	b2ca      	uxtb	r2, r1
 80102b8:	701a      	strb	r2, [r3, #0]

    if (refresh)
 80102ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d008      	beq.n	80102d4 <_ZN2ep5Paint8setPixelEtttb+0x1b0>
    {
        update();
 80102c2:	68f8      	ldr	r0, [r7, #12]
 80102c4:	f000 f82a 	bl	801031c <_ZN2ep5Paint6updateEv>
 80102c8:	e004      	b.n	80102d4 <_ZN2ep5Paint8setPixelEtttb+0x1b0>
        return;
 80102ca:	bf00      	nop
 80102cc:	e002      	b.n	80102d4 <_ZN2ep5Paint8setPixelEtttb+0x1b0>
        return;
 80102ce:	bf00      	nop
 80102d0:	e000      	b.n	80102d4 <_ZN2ep5Paint8setPixelEtttb+0x1b0>
        return;
 80102d2:	bf00      	nop
    }
}
 80102d4:	3720      	adds	r7, #32
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}
 80102da:	bf00      	nop
 80102dc:	08019f94 	.word	0x08019f94
 80102e0:	08019f9c 	.word	0x08019f9c
 80102e4:	08019fdc 	.word	0x08019fdc

080102e8 <_ZN2ep5Paint5clearEhb>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint::clear(uint8_t Color, bool refresh)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b082      	sub	sp, #8
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	460b      	mov	r3, r1
 80102f2:	70fb      	strb	r3, [r7, #3]
 80102f4:	4613      	mov	r3, r2
 80102f6:	70bb      	strb	r3, [r7, #2]
    memset(this->buffer, Color, bytesCount);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6858      	ldr	r0, [r3, #4]
 80102fc:	78f9      	ldrb	r1, [r7, #3]
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	8b9b      	ldrh	r3, [r3, #28]
 8010302:	461a      	mov	r2, r3
 8010304:	f006 fa32 	bl	801676c <memset>

    if (refresh)
 8010308:	78bb      	ldrb	r3, [r7, #2]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d002      	beq.n	8010314 <_ZN2ep5Paint5clearEhb+0x2c>
    {
        update();
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	f000 f804 	bl	801031c <_ZN2ep5Paint6updateEv>
    }
}
 8010314:	bf00      	nop
 8010316:	3708      	adds	r7, #8
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}

0801031c <_ZN2ep5Paint6updateEv>:
    }
    update();
}

void Paint::update()
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b082      	sub	sp, #8
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
    epd->display(buffer);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	681a      	ldr	r2, [r3, #0]
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	685b      	ldr	r3, [r3, #4]
 801032c:	4619      	mov	r1, r3
 801032e:	4610      	mov	r0, r2
 8010330:	f7ff fe1c 	bl	800ff6c <_ZN2ep7Display7displayEPh>
}
 8010334:	bf00      	nop
 8010336:	3708      	adds	r7, #8
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}

0801033c <_ZN2ep5Paint9drawPointEttt9DOT_PIXEL9DOT_STYLEb>:
    Dot_Pixel	:	point size
    refresh		:	Send or not refresh command
******************************************************************************/
void Paint::drawPoint(uint16_t Xpoint, uint16_t Ypoint, uint16_t Color,
                      DOT_PIXEL Dot_Pixel, DOT_STYLE DOT_STYLE, bool refresh)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b088      	sub	sp, #32
 8010340:	af02      	add	r7, sp, #8
 8010342:	60f8      	str	r0, [r7, #12]
 8010344:	4608      	mov	r0, r1
 8010346:	4611      	mov	r1, r2
 8010348:	461a      	mov	r2, r3
 801034a:	4603      	mov	r3, r0
 801034c:	817b      	strh	r3, [r7, #10]
 801034e:	460b      	mov	r3, r1
 8010350:	813b      	strh	r3, [r7, #8]
 8010352:	4613      	mov	r3, r2
 8010354:	80fb      	strh	r3, [r7, #6]
    int16_t XDir_Num, YDir_Num;
    if (Xpoint > this->width || Ypoint > this->height)
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	891b      	ldrh	r3, [r3, #8]
 801035a:	897a      	ldrh	r2, [r7, #10]
 801035c:	429a      	cmp	r2, r3
 801035e:	f200 8092 	bhi.w	8010486 <_ZN2ep5Paint9drawPointEttt9DOT_PIXEL9DOT_STYLEb+0x14a>
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	895b      	ldrh	r3, [r3, #10]
 8010366:	893a      	ldrh	r2, [r7, #8]
 8010368:	429a      	cmp	r2, r3
 801036a:	f200 808c 	bhi.w	8010486 <_ZN2ep5Paint9drawPointEttt9DOT_PIXEL9DOT_STYLEb+0x14a>
    {
        return;
    }

    if (DOT_STYLE == DOT_FILL_AROUND)
 801036e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010372:	2b01      	cmp	r3, #1
 8010374:	d14d      	bne.n	8010412 <_ZN2ep5Paint9drawPointEttt9DOT_PIXEL9DOT_STYLEb+0xd6>
    {
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++)
 8010376:	2300      	movs	r3, #0
 8010378:	82fb      	strh	r3, [r7, #22]
 801037a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801037e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010382:	005b      	lsls	r3, r3, #1
 8010384:	3b01      	subs	r3, #1
 8010386:	429a      	cmp	r2, r3
 8010388:	da75      	bge.n	8010476 <_ZN2ep5Paint9drawPointEttt9DOT_PIXEL9DOT_STYLEb+0x13a>
        {
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 801038a:	2300      	movs	r3, #0
 801038c:	82bb      	strh	r3, [r7, #20]
 801038e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8010392:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010396:	005b      	lsls	r3, r3, #1
 8010398:	3b01      	subs	r3, #1
 801039a:	429a      	cmp	r2, r3
 801039c:	da32      	bge.n	8010404 <_ZN2ep5Paint9drawPointEttt9DOT_PIXEL9DOT_STYLEb+0xc8>
            {
                if (Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 801039e:	897a      	ldrh	r2, [r7, #10]
 80103a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80103a4:	441a      	add	r2, r3
 80103a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80103aa:	1ad3      	subs	r3, r2, r3
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	db29      	blt.n	8010404 <_ZN2ep5Paint9drawPointEttt9DOT_PIXEL9DOT_STYLEb+0xc8>
 80103b0:	893a      	ldrh	r2, [r7, #8]
 80103b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80103b6:	441a      	add	r2, r3
 80103b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80103bc:	1ad3      	subs	r3, r2, r3
 80103be:	2b00      	cmp	r3, #0
 80103c0:	db20      	blt.n	8010404 <_ZN2ep5Paint9drawPointEttt9DOT_PIXEL9DOT_STYLEb+0xc8>
                    break;
                setPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color, refresh);
 80103c2:	8afa      	ldrh	r2, [r7, #22]
 80103c4:	897b      	ldrh	r3, [r7, #10]
 80103c6:	4413      	add	r3, r2
 80103c8:	b29a      	uxth	r2, r3
 80103ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80103ce:	b29b      	uxth	r3, r3
 80103d0:	1ad3      	subs	r3, r2, r3
 80103d2:	b299      	uxth	r1, r3
 80103d4:	8aba      	ldrh	r2, [r7, #20]
 80103d6:	893b      	ldrh	r3, [r7, #8]
 80103d8:	4413      	add	r3, r2
 80103da:	b29a      	uxth	r2, r3
 80103dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80103e0:	b29b      	uxth	r3, r3
 80103e2:	1ad3      	subs	r3, r2, r3
 80103e4:	b29a      	uxth	r2, r3
 80103e6:	88f8      	ldrh	r0, [r7, #6]
 80103e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80103ec:	9300      	str	r3, [sp, #0]
 80103ee:	4603      	mov	r3, r0
 80103f0:	68f8      	ldr	r0, [r7, #12]
 80103f2:	f7ff fe97 	bl	8010124 <_ZN2ep5Paint8setPixelEtttb>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 80103f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80103fa:	b29b      	uxth	r3, r3
 80103fc:	3301      	adds	r3, #1
 80103fe:	b29b      	uxth	r3, r3
 8010400:	82bb      	strh	r3, [r7, #20]
 8010402:	e7c4      	b.n	801038e <_ZN2ep5Paint9drawPointEttt9DOT_PIXEL9DOT_STYLEb+0x52>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++)
 8010404:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010408:	b29b      	uxth	r3, r3
 801040a:	3301      	adds	r3, #1
 801040c:	b29b      	uxth	r3, r3
 801040e:	82fb      	strh	r3, [r7, #22]
 8010410:	e7b3      	b.n	801037a <_ZN2ep5Paint9drawPointEttt9DOT_PIXEL9DOT_STYLEb+0x3e>
            }
        }
    }
    else
    {
        for (XDir_Num = 0; XDir_Num < Dot_Pixel; XDir_Num++)
 8010412:	2300      	movs	r3, #0
 8010414:	82fb      	strh	r3, [r7, #22]
 8010416:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801041a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801041e:	429a      	cmp	r2, r3
 8010420:	da29      	bge.n	8010476 <_ZN2ep5Paint9drawPointEttt9DOT_PIXEL9DOT_STYLEb+0x13a>
        {
            for (YDir_Num = 0; YDir_Num < Dot_Pixel; YDir_Num++)
 8010422:	2300      	movs	r3, #0
 8010424:	82bb      	strh	r3, [r7, #20]
 8010426:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801042a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801042e:	429a      	cmp	r2, r3
 8010430:	da1a      	bge.n	8010468 <_ZN2ep5Paint9drawPointEttt9DOT_PIXEL9DOT_STYLEb+0x12c>
            {
                setPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color, refresh);
 8010432:	8afa      	ldrh	r2, [r7, #22]
 8010434:	897b      	ldrh	r3, [r7, #10]
 8010436:	4413      	add	r3, r2
 8010438:	b29b      	uxth	r3, r3
 801043a:	3b01      	subs	r3, #1
 801043c:	b299      	uxth	r1, r3
 801043e:	8aba      	ldrh	r2, [r7, #20]
 8010440:	893b      	ldrh	r3, [r7, #8]
 8010442:	4413      	add	r3, r2
 8010444:	b29b      	uxth	r3, r3
 8010446:	3b01      	subs	r3, #1
 8010448:	b29a      	uxth	r2, r3
 801044a:	88f8      	ldrh	r0, [r7, #6]
 801044c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010450:	9300      	str	r3, [sp, #0]
 8010452:	4603      	mov	r3, r0
 8010454:	68f8      	ldr	r0, [r7, #12]
 8010456:	f7ff fe65 	bl	8010124 <_ZN2ep5Paint8setPixelEtttb>
            for (YDir_Num = 0; YDir_Num < Dot_Pixel; YDir_Num++)
 801045a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801045e:	b29b      	uxth	r3, r3
 8010460:	3301      	adds	r3, #1
 8010462:	b29b      	uxth	r3, r3
 8010464:	82bb      	strh	r3, [r7, #20]
 8010466:	e7de      	b.n	8010426 <_ZN2ep5Paint9drawPointEttt9DOT_PIXEL9DOT_STYLEb+0xea>
        for (XDir_Num = 0; XDir_Num < Dot_Pixel; XDir_Num++)
 8010468:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801046c:	b29b      	uxth	r3, r3
 801046e:	3301      	adds	r3, #1
 8010470:	b29b      	uxth	r3, r3
 8010472:	82fb      	strh	r3, [r7, #22]
 8010474:	e7cf      	b.n	8010416 <_ZN2ep5Paint9drawPointEttt9DOT_PIXEL9DOT_STYLEb+0xda>
            }
        }
    }

    if (refresh)
 8010476:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801047a:	2b00      	cmp	r3, #0
 801047c:	d004      	beq.n	8010488 <_ZN2ep5Paint9drawPointEttt9DOT_PIXEL9DOT_STYLEb+0x14c>
    {
        update();
 801047e:	68f8      	ldr	r0, [r7, #12]
 8010480:	f7ff ff4c 	bl	801031c <_ZN2ep5Paint6updateEv>
 8010484:	e000      	b.n	8010488 <_ZN2ep5Paint9drawPointEttt9DOT_PIXEL9DOT_STYLEb+0x14c>
        return;
 8010486:	bf00      	nop
    }
}
 8010488:	3718      	adds	r7, #24
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}
	...

08010490 <_ZN2ep5Paint8drawLineEttttt10LINE_STYLE9DOT_PIXELb>:
    Color  		：	The color of the line segment
	refresh		:	Send or not refresh command
******************************************************************************/
void Paint::drawLine(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend,
                     uint16_t Color, LINE_STYLE Line_Style, DOT_PIXEL Dot_Pixel, bool refresh)
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b090      	sub	sp, #64	; 0x40
 8010494:	af04      	add	r7, sp, #16
 8010496:	60f8      	str	r0, [r7, #12]
 8010498:	4608      	mov	r0, r1
 801049a:	4611      	mov	r1, r2
 801049c:	461a      	mov	r2, r3
 801049e:	4603      	mov	r3, r0
 80104a0:	817b      	strh	r3, [r7, #10]
 80104a2:	460b      	mov	r3, r1
 80104a4:	813b      	strh	r3, [r7, #8]
 80104a6:	4613      	mov	r3, r2
 80104a8:	80fb      	strh	r3, [r7, #6]
    uint16_t Xpoint, Ypoint;
    int dx, dy;
    int XAddway, YAddway;
    int Esp;
    char Dotted_Len;
    if (Xstart > this->width || Ystart > this->height ||
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	891b      	ldrh	r3, [r3, #8]
 80104ae:	897a      	ldrh	r2, [r7, #10]
 80104b0:	429a      	cmp	r2, r3
 80104b2:	f200 80a5 	bhi.w	8010600 <_ZN2ep5Paint8drawLineEttttt10LINE_STYLE9DOT_PIXELb+0x170>
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	895b      	ldrh	r3, [r3, #10]
 80104ba:	893a      	ldrh	r2, [r7, #8]
 80104bc:	429a      	cmp	r2, r3
 80104be:	f200 809f 	bhi.w	8010600 <_ZN2ep5Paint8drawLineEttttt10LINE_STYLE9DOT_PIXELb+0x170>
        Xend > this->width || Yend > this->height)
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	891b      	ldrh	r3, [r3, #8]
    if (Xstart > this->width || Ystart > this->height ||
 80104c6:	88fa      	ldrh	r2, [r7, #6]
 80104c8:	429a      	cmp	r2, r3
 80104ca:	f200 8099 	bhi.w	8010600 <_ZN2ep5Paint8drawLineEttttt10LINE_STYLE9DOT_PIXELb+0x170>
        Xend > this->width || Yend > this->height)
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	895b      	ldrh	r3, [r3, #10]
 80104d2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80104d4:	429a      	cmp	r2, r3
 80104d6:	f200 8093 	bhi.w	8010600 <_ZN2ep5Paint8drawLineEttttt10LINE_STYLE9DOT_PIXELb+0x170>
    {
        return;
    }

    Xpoint = Xstart;
 80104da:	897b      	ldrh	r3, [r7, #10]
 80104dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
    Ypoint = Ystart;
 80104de:	893b      	ldrh	r3, [r7, #8]
 80104e0:	85bb      	strh	r3, [r7, #44]	; 0x2c
    dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 80104e2:	88fa      	ldrh	r2, [r7, #6]
 80104e4:	897b      	ldrh	r3, [r7, #10]
 80104e6:	1ad3      	subs	r3, r2, r3
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	bfb8      	it	lt
 80104ec:	425b      	neglt	r3, r3
 80104ee:	623b      	str	r3, [r7, #32]
    dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 80104f0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80104f2:	893b      	ldrh	r3, [r7, #8]
 80104f4:	1ad3      	subs	r3, r2, r3
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	bfb8      	it	lt
 80104fa:	425b      	neglt	r3, r3
 80104fc:	425b      	negs	r3, r3
 80104fe:	61fb      	str	r3, [r7, #28]

    // Increment direction, 1 is positive, -1 is counter;
    XAddway = Xstart < Xend ? 1 : -1;
 8010500:	897a      	ldrh	r2, [r7, #10]
 8010502:	88fb      	ldrh	r3, [r7, #6]
 8010504:	429a      	cmp	r2, r3
 8010506:	d201      	bcs.n	801050c <_ZN2ep5Paint8drawLineEttttt10LINE_STYLE9DOT_PIXELb+0x7c>
 8010508:	2301      	movs	r3, #1
 801050a:	e001      	b.n	8010510 <_ZN2ep5Paint8drawLineEttttt10LINE_STYLE9DOT_PIXELb+0x80>
 801050c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010510:	61bb      	str	r3, [r7, #24]
    YAddway = Ystart < Yend ? 1 : -1;
 8010512:	893a      	ldrh	r2, [r7, #8]
 8010514:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010516:	429a      	cmp	r2, r3
 8010518:	d201      	bcs.n	801051e <_ZN2ep5Paint8drawLineEttttt10LINE_STYLE9DOT_PIXELb+0x8e>
 801051a:	2301      	movs	r3, #1
 801051c:	e001      	b.n	8010522 <_ZN2ep5Paint8drawLineEttttt10LINE_STYLE9DOT_PIXELb+0x92>
 801051e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010522:	617b      	str	r3, [r7, #20]

    //Cumulative error
    Esp = dx + dy;
 8010524:	6a3a      	ldr	r2, [r7, #32]
 8010526:	69fb      	ldr	r3, [r7, #28]
 8010528:	4413      	add	r3, r2
 801052a:	62bb      	str	r3, [r7, #40]	; 0x28
    Dotted_Len = 0;
 801052c:	2300      	movs	r3, #0
 801052e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    for (;;)
    {
        Dotted_Len++;
 8010532:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010536:	3301      	adds	r3, #1
 8010538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0)
 801053c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8010540:	2b01      	cmp	r3, #1
 8010542:	d11e      	bne.n	8010582 <_ZN2ep5Paint8drawLineEttttt10LINE_STYLE9DOT_PIXELb+0xf2>
 8010544:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010548:	4b2f      	ldr	r3, [pc, #188]	; (8010608 <_ZN2ep5Paint8drawLineEttttt10LINE_STYLE9DOT_PIXELb+0x178>)
 801054a:	fba3 1302 	umull	r1, r3, r3, r2
 801054e:	0859      	lsrs	r1, r3, #1
 8010550:	460b      	mov	r3, r1
 8010552:	005b      	lsls	r3, r3, #1
 8010554:	440b      	add	r3, r1
 8010556:	1ad3      	subs	r3, r2, r3
 8010558:	b2db      	uxtb	r3, r3
 801055a:	2b00      	cmp	r3, #0
 801055c:	d111      	bne.n	8010582 <_ZN2ep5Paint8drawLineEttttt10LINE_STYLE9DOT_PIXELb+0xf2>
        {
            drawPoint(Xpoint, Ypoint, EP_DISPLAY_IMAGE_BACKGROUND, Dot_Pixel, DOT_STYLE_DFT, refresh);
 801055e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8010560:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8010562:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8010566:	9302      	str	r3, [sp, #8]
 8010568:	2301      	movs	r3, #1
 801056a:	9301      	str	r3, [sp, #4]
 801056c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8010570:	9300      	str	r3, [sp, #0]
 8010572:	23ff      	movs	r3, #255	; 0xff
 8010574:	68f8      	ldr	r0, [r7, #12]
 8010576:	f7ff fee1 	bl	801033c <_ZN2ep5Paint9drawPointEttt9DOT_PIXEL9DOT_STYLEb>
            Dotted_Len = 0;
 801057a:	2300      	movs	r3, #0
 801057c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010580:	e00e      	b.n	80105a0 <_ZN2ep5Paint8drawLineEttttt10LINE_STYLE9DOT_PIXELb+0x110>
        }
        else
        {
            drawPoint(Xpoint, Ypoint, Color, Dot_Pixel, DOT_STYLE_DFT, refresh);
 8010582:	8fb8      	ldrh	r0, [r7, #60]	; 0x3c
 8010584:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8010586:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8010588:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801058c:	9302      	str	r3, [sp, #8]
 801058e:	2301      	movs	r3, #1
 8010590:	9301      	str	r3, [sp, #4]
 8010592:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8010596:	9300      	str	r3, [sp, #0]
 8010598:	4603      	mov	r3, r0
 801059a:	68f8      	ldr	r0, [r7, #12]
 801059c:	f7ff fece 	bl	801033c <_ZN2ep5Paint9drawPointEttt9DOT_PIXEL9DOT_STYLEb>
        }
        if (2 * Esp >= dy)
 80105a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105a2:	005b      	lsls	r3, r3, #1
 80105a4:	69fa      	ldr	r2, [r7, #28]
 80105a6:	429a      	cmp	r2, r3
 80105a8:	dc0c      	bgt.n	80105c4 <_ZN2ep5Paint8drawLineEttttt10LINE_STYLE9DOT_PIXELb+0x134>
        {
            if (Xpoint == Xend)
 80105aa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80105ac:	88fb      	ldrh	r3, [r7, #6]
 80105ae:	429a      	cmp	r2, r3
 80105b0:	d01b      	beq.n	80105ea <_ZN2ep5Paint8drawLineEttttt10LINE_STYLE9DOT_PIXELb+0x15a>
                break;
            Esp += dy;
 80105b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105b4:	69fb      	ldr	r3, [r7, #28]
 80105b6:	4413      	add	r3, r2
 80105b8:	62bb      	str	r3, [r7, #40]	; 0x28
            Xpoint += XAddway;
 80105ba:	69bb      	ldr	r3, [r7, #24]
 80105bc:	b29a      	uxth	r2, r3
 80105be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80105c0:	4413      	add	r3, r2
 80105c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
        if (2 * Esp <= dx)
 80105c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c6:	005b      	lsls	r3, r3, #1
 80105c8:	6a3a      	ldr	r2, [r7, #32]
 80105ca:	429a      	cmp	r2, r3
 80105cc:	dbb1      	blt.n	8010532 <_ZN2ep5Paint8drawLineEttttt10LINE_STYLE9DOT_PIXELb+0xa2>
        {
            if (Ypoint == Yend)
 80105ce:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80105d0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80105d2:	429a      	cmp	r2, r3
 80105d4:	d00b      	beq.n	80105ee <_ZN2ep5Paint8drawLineEttttt10LINE_STYLE9DOT_PIXELb+0x15e>
                break;
            Esp += dx;
 80105d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105d8:	6a3b      	ldr	r3, [r7, #32]
 80105da:	4413      	add	r3, r2
 80105dc:	62bb      	str	r3, [r7, #40]	; 0x28
            Ypoint += YAddway;
 80105de:	697b      	ldr	r3, [r7, #20]
 80105e0:	b29a      	uxth	r2, r3
 80105e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80105e4:	4413      	add	r3, r2
 80105e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
        Dotted_Len++;
 80105e8:	e7a3      	b.n	8010532 <_ZN2ep5Paint8drawLineEttttt10LINE_STYLE9DOT_PIXELb+0xa2>
                break;
 80105ea:	bf00      	nop
 80105ec:	e000      	b.n	80105f0 <_ZN2ep5Paint8drawLineEttttt10LINE_STYLE9DOT_PIXELb+0x160>
                break;
 80105ee:	bf00      	nop
        }
    }

    if (refresh)
 80105f0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d004      	beq.n	8010602 <_ZN2ep5Paint8drawLineEttttt10LINE_STYLE9DOT_PIXELb+0x172>
    {
        update();
 80105f8:	68f8      	ldr	r0, [r7, #12]
 80105fa:	f7ff fe8f 	bl	801031c <_ZN2ep5Paint6updateEv>
 80105fe:	e000      	b.n	8010602 <_ZN2ep5Paint8drawLineEttttt10LINE_STYLE9DOT_PIXELb+0x172>
        return;
 8010600:	bf00      	nop
    }
}
 8010602:	3730      	adds	r7, #48	; 0x30
 8010604:	46bd      	mov	sp, r7
 8010606:	bd80      	pop	{r7, pc}
 8010608:	aaaaaaab 	.word	0xaaaaaaab

0801060c <_ZN2ep5Paint8drawCharEttcP6_tFontttb>:
    Color_Foreground : Select the foreground color of the character
    refresh			 :	Send or not refresh command
******************************************************************************/
void Paint::drawChar(uint16_t Xpoint, uint16_t Ypoint, const char Acsii_Char,
                     sFONT *Font, uint16_t Color_Background, uint16_t Color_Foreground, bool refresh)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b08a      	sub	sp, #40	; 0x28
 8010610:	af02      	add	r7, sp, #8
 8010612:	60f8      	str	r0, [r7, #12]
 8010614:	4608      	mov	r0, r1
 8010616:	4611      	mov	r1, r2
 8010618:	461a      	mov	r2, r3
 801061a:	4603      	mov	r3, r0
 801061c:	817b      	strh	r3, [r7, #10]
 801061e:	460b      	mov	r3, r1
 8010620:	813b      	strh	r3, [r7, #8]
 8010622:	4613      	mov	r3, r2
 8010624:	71fb      	strb	r3, [r7, #7]
    uint16_t Page, Column;
    uint32_t Char_Offset;
    const unsigned char *ptr;

    if (Xpoint > this->width || Ypoint > this->height)
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	891b      	ldrh	r3, [r3, #8]
 801062a:	897a      	ldrh	r2, [r7, #10]
 801062c:	429a      	cmp	r2, r3
 801062e:	f200 809f 	bhi.w	8010770 <_ZN2ep5Paint8drawCharEttcP6_tFontttb+0x164>
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	895b      	ldrh	r3, [r3, #10]
 8010636:	893a      	ldrh	r2, [r7, #8]
 8010638:	429a      	cmp	r2, r3
 801063a:	f200 8099 	bhi.w	8010770 <_ZN2ep5Paint8drawCharEttcP6_tFontttb+0x164>
    {
        return;
    }

    Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 801063e:	79fb      	ldrb	r3, [r7, #7]
 8010640:	3b20      	subs	r3, #32
 8010642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010644:	88d2      	ldrh	r2, [r2, #6]
 8010646:	fb02 f303 	mul.w	r3, r2, r3
 801064a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801064c:	8892      	ldrh	r2, [r2, #4]
 801064e:	08d2      	lsrs	r2, r2, #3
 8010650:	b292      	uxth	r2, r2
 8010652:	4611      	mov	r1, r2
 8010654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010656:	8892      	ldrh	r2, [r2, #4]
 8010658:	f002 0207 	and.w	r2, r2, #7
 801065c:	2a00      	cmp	r2, #0
 801065e:	d001      	beq.n	8010664 <_ZN2ep5Paint8drawCharEttcP6_tFontttb+0x58>
 8010660:	2201      	movs	r2, #1
 8010662:	e000      	b.n	8010666 <_ZN2ep5Paint8drawCharEttcP6_tFontttb+0x5a>
 8010664:	2200      	movs	r2, #0
 8010666:	440a      	add	r2, r1
 8010668:	fb02 f303 	mul.w	r3, r2, r3
 801066c:	617b      	str	r3, [r7, #20]
    ptr = &Font->table[Char_Offset];
 801066e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010670:	681a      	ldr	r2, [r3, #0]
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	4413      	add	r3, r2
 8010676:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page++)
 8010678:	2300      	movs	r3, #0
 801067a:	83fb      	strh	r3, [r7, #30]
 801067c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801067e:	88db      	ldrh	r3, [r3, #6]
 8010680:	8bfa      	ldrh	r2, [r7, #30]
 8010682:	429a      	cmp	r2, r3
 8010684:	d26c      	bcs.n	8010760 <_ZN2ep5Paint8drawCharEttcP6_tFontttb+0x154>
    {
        for (Column = 0; Column < Font->Width; Column++)
 8010686:	2300      	movs	r3, #0
 8010688:	83bb      	strh	r3, [r7, #28]
 801068a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801068c:	889b      	ldrh	r3, [r3, #4]
 801068e:	8bba      	ldrh	r2, [r7, #28]
 8010690:	429a      	cmp	r2, r3
 8010692:	d258      	bcs.n	8010746 <_ZN2ep5Paint8drawCharEttcP6_tFontttb+0x13a>
        {
            //To determine whether the font background color and screen background color is consistent
            if (EP_DISPLAY_FONT_BACKGROUND == Color_Background)
 8010694:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010696:	2bff      	cmp	r3, #255	; 0xff
 8010698:	d11c      	bne.n	80106d4 <_ZN2ep5Paint8drawCharEttcP6_tFontttb+0xc8>
            { //this process is to speed up the scan
                if (*ptr & (0x80 >> (Column % 8)))
 801069a:	69bb      	ldr	r3, [r7, #24]
 801069c:	781b      	ldrb	r3, [r3, #0]
 801069e:	4619      	mov	r1, r3
 80106a0:	8bbb      	ldrh	r3, [r7, #28]
 80106a2:	f003 0307 	and.w	r3, r3, #7
 80106a6:	2280      	movs	r2, #128	; 0x80
 80106a8:	fa42 f303 	asr.w	r3, r2, r3
 80106ac:	400b      	ands	r3, r1
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d03d      	beq.n	801072e <_ZN2ep5Paint8drawCharEttcP6_tFontttb+0x122>
                    setPixel(Xpoint + Column, Ypoint + Page, Color_Foreground, refresh);
 80106b2:	897a      	ldrh	r2, [r7, #10]
 80106b4:	8bbb      	ldrh	r3, [r7, #28]
 80106b6:	4413      	add	r3, r2
 80106b8:	b299      	uxth	r1, r3
 80106ba:	893a      	ldrh	r2, [r7, #8]
 80106bc:	8bfb      	ldrh	r3, [r7, #30]
 80106be:	4413      	add	r3, r2
 80106c0:	b29a      	uxth	r2, r3
 80106c2:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 80106c4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80106c8:	9300      	str	r3, [sp, #0]
 80106ca:	4603      	mov	r3, r0
 80106cc:	68f8      	ldr	r0, [r7, #12]
 80106ce:	f7ff fd29 	bl	8010124 <_ZN2ep5Paint8setPixelEtttb>
 80106d2:	e02c      	b.n	801072e <_ZN2ep5Paint8drawCharEttcP6_tFontttb+0x122>
            }
            else
            {
                if (*ptr & (0x80 >> (Column % 8)))
 80106d4:	69bb      	ldr	r3, [r7, #24]
 80106d6:	781b      	ldrb	r3, [r3, #0]
 80106d8:	4619      	mov	r1, r3
 80106da:	8bbb      	ldrh	r3, [r7, #28]
 80106dc:	f003 0307 	and.w	r3, r3, #7
 80106e0:	2280      	movs	r2, #128	; 0x80
 80106e2:	fa42 f303 	asr.w	r3, r2, r3
 80106e6:	400b      	ands	r3, r1
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d010      	beq.n	801070e <_ZN2ep5Paint8drawCharEttcP6_tFontttb+0x102>
                {
                    setPixel(Xpoint + Column, Ypoint + Page, Color_Foreground, refresh);
 80106ec:	897a      	ldrh	r2, [r7, #10]
 80106ee:	8bbb      	ldrh	r3, [r7, #28]
 80106f0:	4413      	add	r3, r2
 80106f2:	b299      	uxth	r1, r3
 80106f4:	893a      	ldrh	r2, [r7, #8]
 80106f6:	8bfb      	ldrh	r3, [r7, #30]
 80106f8:	4413      	add	r3, r2
 80106fa:	b29a      	uxth	r2, r3
 80106fc:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 80106fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8010702:	9300      	str	r3, [sp, #0]
 8010704:	4603      	mov	r3, r0
 8010706:	68f8      	ldr	r0, [r7, #12]
 8010708:	f7ff fd0c 	bl	8010124 <_ZN2ep5Paint8setPixelEtttb>
 801070c:	e00f      	b.n	801072e <_ZN2ep5Paint8drawCharEttcP6_tFontttb+0x122>
                }
                else
                {
                    setPixel(Xpoint + Column, Ypoint + Page, Color_Background, refresh);
 801070e:	897a      	ldrh	r2, [r7, #10]
 8010710:	8bbb      	ldrh	r3, [r7, #28]
 8010712:	4413      	add	r3, r2
 8010714:	b299      	uxth	r1, r3
 8010716:	893a      	ldrh	r2, [r7, #8]
 8010718:	8bfb      	ldrh	r3, [r7, #30]
 801071a:	4413      	add	r3, r2
 801071c:	b29a      	uxth	r2, r3
 801071e:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 8010720:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8010724:	9300      	str	r3, [sp, #0]
 8010726:	4603      	mov	r3, r0
 8010728:	68f8      	ldr	r0, [r7, #12]
 801072a:	f7ff fcfb 	bl	8010124 <_ZN2ep5Paint8setPixelEtttb>
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 801072e:	8bbb      	ldrh	r3, [r7, #28]
 8010730:	f003 0307 	and.w	r3, r3, #7
 8010734:	2b07      	cmp	r3, #7
 8010736:	d102      	bne.n	801073e <_ZN2ep5Paint8drawCharEttcP6_tFontttb+0x132>
                ptr++;
 8010738:	69bb      	ldr	r3, [r7, #24]
 801073a:	3301      	adds	r3, #1
 801073c:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column++)
 801073e:	8bbb      	ldrh	r3, [r7, #28]
 8010740:	3301      	adds	r3, #1
 8010742:	83bb      	strh	r3, [r7, #28]
 8010744:	e7a1      	b.n	801068a <_ZN2ep5Paint8drawCharEttcP6_tFontttb+0x7e>
        } // Write a line
        if (Font->Width % 8 != 0)
 8010746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010748:	889b      	ldrh	r3, [r3, #4]
 801074a:	f003 0307 	and.w	r3, r3, #7
 801074e:	2b00      	cmp	r3, #0
 8010750:	d002      	beq.n	8010758 <_ZN2ep5Paint8drawCharEttcP6_tFontttb+0x14c>
            ptr++;
 8010752:	69bb      	ldr	r3, [r7, #24]
 8010754:	3301      	adds	r3, #1
 8010756:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page++)
 8010758:	8bfb      	ldrh	r3, [r7, #30]
 801075a:	3301      	adds	r3, #1
 801075c:	83fb      	strh	r3, [r7, #30]
 801075e:	e78d      	b.n	801067c <_ZN2ep5Paint8drawCharEttcP6_tFontttb+0x70>
    } // Write all

    if (refresh)
 8010760:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8010764:	2b00      	cmp	r3, #0
 8010766:	d004      	beq.n	8010772 <_ZN2ep5Paint8drawCharEttcP6_tFontttb+0x166>
    {
        update();
 8010768:	68f8      	ldr	r0, [r7, #12]
 801076a:	f7ff fdd7 	bl	801031c <_ZN2ep5Paint6updateEv>
 801076e:	e000      	b.n	8010772 <_ZN2ep5Paint8drawCharEttcP6_tFontttb+0x166>
        return;
 8010770:	bf00      	nop
    }
}
 8010772:	3720      	adds	r7, #32
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}

08010778 <_ZN2ep5Paint10drawStringEttPKcP6_tFontttb>:
    Color_Foreground : Select the foreground color of the character
    refresh			 :	Send or not refresh command
******************************************************************************/
void Paint::drawString(uint16_t Xstart, uint16_t Ystart, const char *pString,
                       sFONT *Font, uint16_t Color_Background, uint16_t Color_Foreground, bool refresh)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b08a      	sub	sp, #40	; 0x28
 801077c:	af04      	add	r7, sp, #16
 801077e:	60f8      	str	r0, [r7, #12]
 8010780:	607b      	str	r3, [r7, #4]
 8010782:	460b      	mov	r3, r1
 8010784:	817b      	strh	r3, [r7, #10]
 8010786:	4613      	mov	r3, r2
 8010788:	813b      	strh	r3, [r7, #8]
    uint16_t Xpoint = Xstart;
 801078a:	897b      	ldrh	r3, [r7, #10]
 801078c:	82fb      	strh	r3, [r7, #22]
    uint16_t Ypoint = Ystart;
 801078e:	893b      	ldrh	r3, [r7, #8]
 8010790:	82bb      	strh	r3, [r7, #20]

    if (Xstart > this->width || Ystart > this->height)
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	891b      	ldrh	r3, [r3, #8]
 8010796:	897a      	ldrh	r2, [r7, #10]
 8010798:	429a      	cmp	r2, r3
 801079a:	d844      	bhi.n	8010826 <_ZN2ep5Paint10drawStringEttPKcP6_tFontttb+0xae>
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	895b      	ldrh	r3, [r3, #10]
 80107a0:	893a      	ldrh	r2, [r7, #8]
 80107a2:	429a      	cmp	r2, r3
 80107a4:	d83f      	bhi.n	8010826 <_ZN2ep5Paint10drawStringEttPKcP6_tFontttb+0xae>
    {
        return;
    }

    while (*pString != '\0')
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	781b      	ldrb	r3, [r3, #0]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d033      	beq.n	8010816 <_ZN2ep5Paint10drawStringEttPKcP6_tFontttb+0x9e>
    {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width) > this->width)
 80107ae:	8afb      	ldrh	r3, [r7, #22]
 80107b0:	6a3a      	ldr	r2, [r7, #32]
 80107b2:	8892      	ldrh	r2, [r2, #4]
 80107b4:	4413      	add	r3, r2
 80107b6:	68fa      	ldr	r2, [r7, #12]
 80107b8:	8912      	ldrh	r2, [r2, #8]
 80107ba:	4293      	cmp	r3, r2
 80107bc:	dd06      	ble.n	80107cc <_ZN2ep5Paint10drawStringEttPKcP6_tFontttb+0x54>
        {
            Xpoint = Xstart;
 80107be:	897b      	ldrh	r3, [r7, #10]
 80107c0:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 80107c2:	6a3b      	ldr	r3, [r7, #32]
 80107c4:	88da      	ldrh	r2, [r3, #6]
 80107c6:	8abb      	ldrh	r3, [r7, #20]
 80107c8:	4413      	add	r3, r2
 80107ca:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint + Font->Height) > this->height)
 80107cc:	8abb      	ldrh	r3, [r7, #20]
 80107ce:	6a3a      	ldr	r2, [r7, #32]
 80107d0:	88d2      	ldrh	r2, [r2, #6]
 80107d2:	4413      	add	r3, r2
 80107d4:	68fa      	ldr	r2, [r7, #12]
 80107d6:	8952      	ldrh	r2, [r2, #10]
 80107d8:	4293      	cmp	r3, r2
 80107da:	dd03      	ble.n	80107e4 <_ZN2ep5Paint10drawStringEttPKcP6_tFontttb+0x6c>
        {
            Xpoint = Xstart;
 80107dc:	897b      	ldrh	r3, [r7, #10]
 80107de:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 80107e0:	893b      	ldrh	r3, [r7, #8]
 80107e2:	82bb      	strh	r3, [r7, #20]
        }
        drawChar(Xpoint, Ypoint, *pString, Font, Color_Background, Color_Foreground, false);
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	7818      	ldrb	r0, [r3, #0]
 80107e8:	8aba      	ldrh	r2, [r7, #20]
 80107ea:	8af9      	ldrh	r1, [r7, #22]
 80107ec:	2300      	movs	r3, #0
 80107ee:	9303      	str	r3, [sp, #12]
 80107f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80107f2:	9302      	str	r3, [sp, #8]
 80107f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80107f6:	9301      	str	r3, [sp, #4]
 80107f8:	6a3b      	ldr	r3, [r7, #32]
 80107fa:	9300      	str	r3, [sp, #0]
 80107fc:	4603      	mov	r3, r0
 80107fe:	68f8      	ldr	r0, [r7, #12]
 8010800:	f7ff ff04 	bl	801060c <_ZN2ep5Paint8drawCharEttcP6_tFontttb>

        //The next character of the address
        pString++;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	3301      	adds	r3, #1
 8010808:	607b      	str	r3, [r7, #4]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 801080a:	6a3b      	ldr	r3, [r7, #32]
 801080c:	889a      	ldrh	r2, [r3, #4]
 801080e:	8afb      	ldrh	r3, [r7, #22]
 8010810:	4413      	add	r3, r2
 8010812:	82fb      	strh	r3, [r7, #22]
    while (*pString != '\0')
 8010814:	e7c7      	b.n	80107a6 <_ZN2ep5Paint10drawStringEttPKcP6_tFontttb+0x2e>
    }

    if (refresh)
 8010816:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801081a:	2b00      	cmp	r3, #0
 801081c:	d004      	beq.n	8010828 <_ZN2ep5Paint10drawStringEttPKcP6_tFontttb+0xb0>
    {
    	update();
 801081e:	68f8      	ldr	r0, [r7, #12]
 8010820:	f7ff fd7c 	bl	801031c <_ZN2ep5Paint6updateEv>
 8010824:	e000      	b.n	8010828 <_ZN2ep5Paint10drawStringEttPKcP6_tFontttb+0xb0>
        return;
 8010826:	bf00      	nop
    }
}
 8010828:	3718      	adds	r7, #24
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}

0801082e <_ZN2ep3GpiC1EP12GPIO_TypeDefm>:
 * @brief Initialize a new GPI object 
 * 
 * @param p1 Pin Number
 * @param port Port Name
 */
Gpi::Gpi(GPIO_TypeDef * port, uint32_t pin) : Gpio(port, pin)
 801082e:	b580      	push	{r7, lr}
 8010830:	b084      	sub	sp, #16
 8010832:	af00      	add	r7, sp, #0
 8010834:	60f8      	str	r0, [r7, #12]
 8010836:	60b9      	str	r1, [r7, #8]
 8010838:	607a      	str	r2, [r7, #4]
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	687a      	ldr	r2, [r7, #4]
 801083e:	68b9      	ldr	r1, [r7, #8]
 8010840:	4618      	mov	r0, r3
 8010842:	f000 f819 	bl	8010878 <_ZN2ep4GpioC1EP12GPIO_TypeDefm>
{

}
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	4618      	mov	r0, r3
 801084a:	3710      	adds	r7, #16
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}

08010850 <_ZN2ep3Gpi4readEv>:
 * @brief Read current pin state 
 * 
 * @return GPIO::PINSTATE (PIN_ON/PIN_OFF)
 */
GPIO_PinState Gpi::read()
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b084      	sub	sp, #16
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
	GPIO_PinState retVal = HAL_GPIO_ReadPin(port, pin);
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681a      	ldr	r2, [r3, #0]
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	685b      	ldr	r3, [r3, #4]
 8010860:	b29b      	uxth	r3, r3
 8010862:	4619      	mov	r1, r3
 8010864:	4610      	mov	r0, r2
 8010866:	f7f1 f9bb 	bl	8001be0 <HAL_GPIO_ReadPin>
 801086a:	4603      	mov	r3, r0
 801086c:	73fb      	strb	r3, [r7, #15]
    
    return retVal;
 801086e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010870:	4618      	mov	r0, r3
 8010872:	3710      	adds	r7, #16
 8010874:	46bd      	mov	sp, r7
 8010876:	bd80      	pop	{r7, pc}

08010878 <_ZN2ep4GpioC1EP12GPIO_TypeDefm>:
 * @brief Construct a new GPIO object 
 * 
 * @param p1 Pin Number
 * @param port Port Name
 */
Gpio::Gpio(GPIO_TypeDef * port, uint32_t pin) :
 8010878:	b480      	push	{r7}
 801087a:	b085      	sub	sp, #20
 801087c:	af00      	add	r7, sp, #0
 801087e:	60f8      	str	r0, [r7, #12]
 8010880:	60b9      	str	r1, [r7, #8]
 8010882:	607a      	str	r2, [r7, #4]
 port(port),
 pin(pin)
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	68ba      	ldr	r2, [r7, #8]
 8010888:	601a      	str	r2, [r3, #0]
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	687a      	ldr	r2, [r7, #4]
 801088e:	605a      	str	r2, [r3, #4]
{

}
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	4618      	mov	r0, r3
 8010894:	3714      	adds	r7, #20
 8010896:	46bd      	mov	sp, r7
 8010898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089c:	4770      	bx	lr

0801089e <_ZN2ep3GpoC1EP12GPIO_TypeDefm>:
 * @brief Construct a new Gpo object
 * 
 * @param p1 Pin number
 * @param port Port name
 */
Gpo::Gpo(GPIO_TypeDef * port, uint32_t pin) : Gpio(port, pin)
 801089e:	b580      	push	{r7, lr}
 80108a0:	b084      	sub	sp, #16
 80108a2:	af00      	add	r7, sp, #0
 80108a4:	60f8      	str	r0, [r7, #12]
 80108a6:	60b9      	str	r1, [r7, #8]
 80108a8:	607a      	str	r2, [r7, #4]
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	687a      	ldr	r2, [r7, #4]
 80108ae:	68b9      	ldr	r1, [r7, #8]
 80108b0:	4618      	mov	r0, r3
 80108b2:	f7ff ffe1 	bl	8010878 <_ZN2ep4GpioC1EP12GPIO_TypeDefm>
{

}
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	4618      	mov	r0, r3
 80108ba:	3710      	adds	r7, #16
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}

080108c0 <_ZN2ep3Gpo2onEv>:
/**
 * @brief Turn output pin on
 * 
 */
void Gpo::on()
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b082      	sub	sp, #8
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6818      	ldr	r0, [r3, #0]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	685b      	ldr	r3, [r3, #4]
 80108d0:	b29b      	uxth	r3, r3
 80108d2:	2201      	movs	r2, #1
 80108d4:	4619      	mov	r1, r3
 80108d6:	f7f1 f99b 	bl	8001c10 <HAL_GPIO_WritePin>
}
 80108da:	bf00      	nop
 80108dc:	3708      	adds	r7, #8
 80108de:	46bd      	mov	sp, r7
 80108e0:	bd80      	pop	{r7, pc}

080108e2 <_ZN2ep3Gpo3offEv>:
/**
 * @brief Turn output pin off
 * 
 */
void Gpo::off()
{
 80108e2:	b580      	push	{r7, lr}
 80108e4:	b082      	sub	sp, #8
 80108e6:	af00      	add	r7, sp, #0
 80108e8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	6818      	ldr	r0, [r3, #0]
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	685b      	ldr	r3, [r3, #4]
 80108f2:	b29b      	uxth	r3, r3
 80108f4:	2200      	movs	r2, #0
 80108f6:	4619      	mov	r1, r3
 80108f8:	f7f1 f98a 	bl	8001c10 <HAL_GPIO_WritePin>
}
 80108fc:	bf00      	nop
 80108fe:	3708      	adds	r7, #8
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}

08010904 <_ZN18IMonochromeDisplay4SizeC1Eii>:
		 * @brief Constructor, initializes the width and height of a size.
		 *
		 * @param width 	The width.
		 * @param height 	The height.
		 */
		inline explicit Size( int width = 0 , int height = 0 ) : width( width ) , height( height ) {}
 8010904:	b480      	push	{r7}
 8010906:	b085      	sub	sp, #20
 8010908:	af00      	add	r7, sp, #0
 801090a:	60f8      	str	r0, [r7, #12]
 801090c:	60b9      	str	r1, [r7, #8]
 801090e:	607a      	str	r2, [r7, #4]
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	68ba      	ldr	r2, [r7, #8]
 8010914:	601a      	str	r2, [r3, #0]
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	687a      	ldr	r2, [r7, #4]
 801091a:	605a      	str	r2, [r3, #4]
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	4618      	mov	r0, r3
 8010920:	3714      	adds	r7, #20
 8010922:	46bd      	mov	sp, r7
 8010924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010928:	4770      	bx	lr
	...

0801092c <_ZN18IMonochromeDisplayC1Ev>:
		int height;		///< @brief The height.
	};

protected:
	// It is just an interface, so constructor and destructor should be not public.
	explicit IMonochromeDisplay() {}
 801092c:	b480      	push	{r7}
 801092e:	b083      	sub	sp, #12
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
 8010934:	4a04      	ldr	r2, [pc, #16]	; (8010948 <_ZN18IMonochromeDisplayC1Ev+0x1c>)
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	601a      	str	r2, [r3, #0]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	4618      	mov	r0, r3
 801093e:	370c      	adds	r7, #12
 8010940:	46bd      	mov	sp, r7
 8010942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010946:	4770      	bx	lr
 8010948:	0801deb0 	.word	0x0801deb0

0801094c <_ZN18IMonochromeDisplayD1Ev>:
	virtual ~IMonochromeDisplay() {}
 801094c:	b480      	push	{r7}
 801094e:	b083      	sub	sp, #12
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
 8010954:	4a04      	ldr	r2, [pc, #16]	; (8010968 <_ZN18IMonochromeDisplayD1Ev+0x1c>)
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	601a      	str	r2, [r3, #0]
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	4618      	mov	r0, r3
 801095e:	370c      	adds	r7, #12
 8010960:	46bd      	mov	sp, r7
 8010962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010966:	4770      	bx	lr
 8010968:	0801deb0 	.word	0x0801deb0

0801096c <_ZN18IMonochromeDisplayD0Ev>:
 801096c:	b580      	push	{r7, lr}
 801096e:	b082      	sub	sp, #8
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	6878      	ldr	r0, [r7, #4]
 8010976:	f7ff ffe9 	bl	801094c <_ZN18IMonochromeDisplayD1Ev>
 801097a:	2104      	movs	r1, #4
 801097c:	6878      	ldr	r0, [r7, #4]
 801097e:	f005 fd6f 	bl	8016460 <_ZdlPvj>
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	4618      	mov	r0, r3
 8010986:	3708      	adds	r7, #8
 8010988:	46bd      	mov	sp, r7
 801098a:	bd80      	pop	{r7, pc}

0801098c <_ZN18IMonochromeDisplay5clearENS_10PixelColorE>:
	 *
	 * This method is OPTIONAL.
	 *
	 * @param background Pixel color to use for background color.
	 */
	virtual void clear( PixelColor background = White ) { (void)(background); }
 801098c:	b480      	push	{r7}
 801098e:	b083      	sub	sp, #12
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
 8010994:	460b      	mov	r3, r1
 8010996:	70fb      	strb	r3, [r7, #3]
 8010998:	bf00      	nop
 801099a:	370c      	adds	r7, #12
 801099c:	46bd      	mov	sp, r7
 801099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a2:	4770      	bx	lr

080109a4 <_ZN18IMonochromeDisplay18writeDisplayMemoryEjPKhj>:
	 *
	 * @param startAddress The start address inside the display memory.
	 * @param sourceBitmap Pointer to the data to be copied into the display buffer.
	 * @param numberOfBits The total number of bits to copy to the display.
	 */
	virtual void writeDisplayMemory( size_t startAddress , const uint8_t * const sourceBitmap ,
 80109a4:	b480      	push	{r7}
 80109a6:	b085      	sub	sp, #20
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	60f8      	str	r0, [r7, #12]
 80109ac:	60b9      	str	r1, [r7, #8]
 80109ae:	607a      	str	r2, [r7, #4]
 80109b0:	603b      	str	r3, [r7, #0]
									 size_t numberOfBits )
	{ (void)(startAddress); (void)(sourceBitmap); (void)(numberOfBits); }
 80109b2:	bf00      	nop
 80109b4:	3714      	adds	r7, #20
 80109b6:	46bd      	mov	sp, r7
 80109b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109bc:	4770      	bx	lr

080109be <_ZN18IMonochromeDisplay17readDisplayMemoryEjPhj>:
	 *
	 * @param startAddress 		The start address inside the display memory.
	 * @param destinationBitmap Pointer to the data to be copied into the display buffer.
	 * @param numberOfBits 		The total number of bits to copy to the display.
	 */
	virtual void readDisplayMemory( size_t startAddress , uint8_t * const destinationBitmap , size_t numberOfBits )
 80109be:	b480      	push	{r7}
 80109c0:	b085      	sub	sp, #20
 80109c2:	af00      	add	r7, sp, #0
 80109c4:	60f8      	str	r0, [r7, #12]
 80109c6:	60b9      	str	r1, [r7, #8]
 80109c8:	607a      	str	r2, [r7, #4]
 80109ca:	603b      	str	r3, [r7, #0]
	{ (void)(startAddress); (void)(destinationBitmap); (void)(numberOfBits);}
 80109cc:	bf00      	nop
 80109ce:	3714      	adds	r7, #20
 80109d0:	46bd      	mov	sp, r7
 80109d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d6:	4770      	bx	lr

080109d8 <_ZN18IMonochromeDisplay8drawLineERKNS_5PointES2_NS_10PixelColorE>:
	 *
	 * @param begin Start point of the line.
	 * @param end End point of the line.
	 * @param color The color the line should have.
	 */
	virtual void drawLine( const Point & begin , const Point & end , PixelColor color )
 80109d8:	b480      	push	{r7}
 80109da:	b085      	sub	sp, #20
 80109dc:	af00      	add	r7, sp, #0
 80109de:	60f8      	str	r0, [r7, #12]
 80109e0:	60b9      	str	r1, [r7, #8]
 80109e2:	607a      	str	r2, [r7, #4]
 80109e4:	70fb      	strb	r3, [r7, #3]
	{ (void)(begin); (void)(end); (void)(color); }
 80109e6:	bf00      	nop
 80109e8:	3714      	adds	r7, #20
 80109ea:	46bd      	mov	sp, r7
 80109ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f0:	4770      	bx	lr

080109f2 <_ZN18IMonochromeDisplay13drawRectangleERKNS_5PointERKNS_4SizeENS_10PixelColorE>:
	 *
	 * @param topLeft 	Start point of the rectangle.
	 * @param size 		The dimensions of the rectangle.
	 * @param color 	The color the rectangle stroke should have.
	 */
	virtual void drawRectangle( const Point & topLeft , const Size & size , PixelColor color )
 80109f2:	b480      	push	{r7}
 80109f4:	b085      	sub	sp, #20
 80109f6:	af00      	add	r7, sp, #0
 80109f8:	60f8      	str	r0, [r7, #12]
 80109fa:	60b9      	str	r1, [r7, #8]
 80109fc:	607a      	str	r2, [r7, #4]
 80109fe:	70fb      	strb	r3, [r7, #3]
	{ (void)(topLeft); (void)(size); (void)(color); }
 8010a00:	bf00      	nop
 8010a02:	3714      	adds	r7, #20
 8010a04:	46bd      	mov	sp, r7
 8010a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0a:	4770      	bx	lr

08010a0c <_ZN18IMonochromeDisplay13fillRectangleERKNS_5PointERKNS_4SizeENS_10PixelColorE>:
	 *
	 * @param topLeft 	Start point of the rectangle.
	 * @param size 		The dimensions of the rectangle.
	 * @param color 	The color the rectangle fill should have.
	 */
	virtual void fillRectangle( const Point & topLeft , const Size & size , PixelColor color )
 8010a0c:	b480      	push	{r7}
 8010a0e:	b085      	sub	sp, #20
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	60f8      	str	r0, [r7, #12]
 8010a14:	60b9      	str	r1, [r7, #8]
 8010a16:	607a      	str	r2, [r7, #4]
 8010a18:	70fb      	strb	r3, [r7, #3]
	{ (void)(topLeft); (void)(size); (void)(color); }
 8010a1a:	bf00      	nop
 8010a1c:	3714      	adds	r7, #20
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a24:	4770      	bx	lr

08010a26 <_ZN18IMonochromeDisplay11drawEllipseERKNS_5PointERKNS_4SizeENS_10PixelColorE>:
	 *
	 * @param topLeft 	Start point of the ellipse.
	 * @param size 		The dimensions of the ellipse.
	 * @param color 	The color the ellipse stroke should have.
	 */
	virtual void drawEllipse( const Point & topLeft , const Size & size , PixelColor color )
 8010a26:	b480      	push	{r7}
 8010a28:	b085      	sub	sp, #20
 8010a2a:	af00      	add	r7, sp, #0
 8010a2c:	60f8      	str	r0, [r7, #12]
 8010a2e:	60b9      	str	r1, [r7, #8]
 8010a30:	607a      	str	r2, [r7, #4]
 8010a32:	70fb      	strb	r3, [r7, #3]
	{ (void)(topLeft); (void)(size); (void)(color); }
 8010a34:	bf00      	nop
 8010a36:	3714      	adds	r7, #20
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3e:	4770      	bx	lr

08010a40 <_ZN18IMonochromeDisplay11fillEllipseERKNS_5PointERKNS_4SizeENS_10PixelColorE>:
	 *
	 * @param topLeft 	Start point of the ellipse.
	 * @param size 		The dimensions of the ellipse.
	 * @param color 	The color the ellipse fill should have.
	 */
	virtual void fillEllipse( const Point & topLeft , const Size & size , PixelColor color )
 8010a40:	b480      	push	{r7}
 8010a42:	b085      	sub	sp, #20
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	60f8      	str	r0, [r7, #12]
 8010a48:	60b9      	str	r1, [r7, #8]
 8010a4a:	607a      	str	r2, [r7, #4]
 8010a4c:	70fb      	strb	r3, [r7, #3]
	{ (void)(topLeft); (void)(size); (void)(color); }
 8010a4e:	bf00      	nop
 8010a50:	3714      	adds	r7, #20
 8010a52:	46bd      	mov	sp, r7
 8010a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a58:	4770      	bx	lr

08010a5a <_ZN18IMonochromeDisplay8drawTextERKNS_5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_10PixelColorE>:
	 *
	 * @param topLeft 	Start point of the text to display.
	 * @param text 		The text to render to the display.
	 * @param color 	The color the ellipse fill should have.
	 */
	virtual void drawText( const Point & topLeft , const std::string & text , PixelColor color )
 8010a5a:	b480      	push	{r7}
 8010a5c:	b085      	sub	sp, #20
 8010a5e:	af00      	add	r7, sp, #0
 8010a60:	60f8      	str	r0, [r7, #12]
 8010a62:	60b9      	str	r1, [r7, #8]
 8010a64:	607a      	str	r2, [r7, #4]
 8010a66:	70fb      	strb	r3, [r7, #3]
	{ (void)(topLeft); (void)(text); (void)(color); }
 8010a68:	bf00      	nop
 8010a6a:	3714      	adds	r7, #20
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a72:	4770      	bx	lr

08010a74 <_ZN17MonochromeDisplayC1Ev>:
#include "trace/trace.h"
#include "monochromedisplay.h"

extern "C" SPI_HandleTypeDef hspi2;         // Defined in main.c

MonochromeDisplay::MonochromeDisplay() :
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b082      	sub	sp, #8
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
 pinDC(DISP_DATA_GPIO_Port, DISP_DATA_Pin),
 pinBusy(DISP_BUSY_GPIO_Port, DISP_BUSY_Pin),
 pinReset(DISP_RESET_GPIO_Port, DISP_RESET_Pin)
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f7ff ff54 	bl	801092c <_ZN18IMonochromeDisplayC1Ev>
 8010a84:	4a1c      	ldr	r2, [pc, #112]	; (8010af8 <_ZN17MonochromeDisplayC1Ev+0x84>)
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	601a      	str	r2, [r3, #0]
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8010a90:	330c      	adds	r3, #12
 8010a92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010a96:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7ff feff 	bl	801089e <_ZN2ep3GpoC1EP12GPIO_TypeDefm>
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8010aa6:	3314      	adds	r3, #20
 8010aa8:	2240      	movs	r2, #64	; 0x40
 8010aaa:	4914      	ldr	r1, [pc, #80]	; (8010afc <_ZN17MonochromeDisplayC1Ev+0x88>)
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7ff febe 	bl	801082e <_ZN2ep3GpiC1EP12GPIO_TypeDefm>
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8010ab8:	331c      	adds	r3, #28
 8010aba:	2280      	movs	r2, #128	; 0x80
 8010abc:	4910      	ldr	r1, [pc, #64]	; (8010b00 <_ZN17MonochromeDisplayC1Ev+0x8c>)
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f7ff feed 	bl	801089e <_ZN2ep3GpoC1EP12GPIO_TypeDefm>
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8010aca:	3304      	adds	r3, #4
 8010acc:	4618      	mov	r0, r3
 8010ace:	f7ff f8cf 	bl	800fc70 <_ZN2ep7DisplayC1Ev>
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8010ad8:	3314      	adds	r3, #20
 8010ada:	4618      	mov	r0, r3
 8010adc:	f7ff fa89 	bl	800fff2 <_ZN2ep5PaintC1Ev>
{
    rotation = EP_DISPLAY_ROTATE_0;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8010ae6:	3314      	adds	r3, #20
 8010ae8:	2200      	movs	r2, #0
 8010aea:	801a      	strh	r2, [r3, #0]
}
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	4618      	mov	r0, r3
 8010af0:	3708      	adds	r7, #8
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bd80      	pop	{r7, pc}
 8010af6:	bf00      	nop
 8010af8:	0801de60 	.word	0x0801de60
 8010afc:	48000400 	.word	0x48000400
 8010b00:	48000800 	.word	0x48000800

08010b04 <_ZN17MonochromeDisplayD1Ev>:

MonochromeDisplay::~MonochromeDisplay()
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b082      	sub	sp, #8
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
 8010b0c:	4a05      	ldr	r2, [pc, #20]	; (8010b24 <_ZN17MonochromeDisplayD1Ev+0x20>)
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	601a      	str	r2, [r3, #0]
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	4618      	mov	r0, r3
 8010b16:	f7ff ff19 	bl	801094c <_ZN18IMonochromeDisplayD1Ev>
{

}
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3708      	adds	r7, #8
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}
 8010b24:	0801de60 	.word	0x0801de60

08010b28 <_ZN17MonochromeDisplayD0Ev>:
MonochromeDisplay::~MonochromeDisplay()
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b082      	sub	sp, #8
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
}
 8010b30:	6878      	ldr	r0, [r7, #4]
 8010b32:	f7ff ffe7 	bl	8010b04 <_ZN17MonochromeDisplayD1Ev>
 8010b36:	f241 31d8 	movw	r1, #5080	; 0x13d8
 8010b3a:	6878      	ldr	r0, [r7, #4]
 8010b3c:	f005 fc90 	bl	8016460 <_ZdlPvj>
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	4618      	mov	r0, r3
 8010b44:	3708      	adds	r7, #8
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}

08010b4a <_ZNK17MonochromeDisplay10resolutionEv>:

IMonochromeDisplay::Size MonochromeDisplay::resolution() const
{
 8010b4a:	b580      	push	{r7, lr}
 8010b4c:	b082      	sub	sp, #8
 8010b4e:	af00      	add	r7, sp, #0
 8010b50:	6078      	str	r0, [r7, #4]
 8010b52:	6039      	str	r1, [r7, #0]
	return Size(Width, Height);
 8010b54:	22c8      	movs	r2, #200	; 0xc8
 8010b56:	21c8      	movs	r1, #200	; 0xc8
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f7ff fed3 	bl	8010904 <_ZN18IMonochromeDisplay4SizeC1Eii>
}
 8010b5e:	6878      	ldr	r0, [r7, #4]
 8010b60:	3708      	adds	r7, #8
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}

08010b66 <_ZNK17MonochromeDisplay25acceleratedDrawingMethodsEv>:

IMonochromeDisplay::AcceleratedDrawingMethods MonochromeDisplay::acceleratedDrawingMethods() const
{
 8010b66:	b580      	push	{r7, lr}
 8010b68:	b084      	sub	sp, #16
 8010b6a:	af00      	add	r7, sp, #0
 8010b6c:	6078      	str	r0, [r7, #4]
	AcceleratedDrawingMethods accels;

	memset(&accels, 0, sizeof(AcceleratedDrawingMethods));
 8010b6e:	f107 030c 	add.w	r3, r7, #12
 8010b72:	2204      	movs	r2, #4
 8010b74:	2100      	movs	r1, #0
 8010b76:	4618      	mov	r0, r3
 8010b78:	f005 fdf8 	bl	801676c <memset>

	accels.clearAccelerated = 1;
 8010b7c:	7b3b      	ldrb	r3, [r7, #12]
 8010b7e:	f043 0301 	orr.w	r3, r3, #1
 8010b82:	733b      	strb	r3, [r7, #12]
	accels.drawLineAccelerated = 1;
 8010b84:	7b3b      	ldrb	r3, [r7, #12]
 8010b86:	f043 0304 	orr.w	r3, r3, #4
 8010b8a:	733b      	strb	r3, [r7, #12]
	accels.drawTextAccelerated = 1;
 8010b8c:	7b3b      	ldrb	r3, [r7, #12]
 8010b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b92:	733b      	strb	r3, [r7, #12]

	return accels;
 8010b94:	68fb      	ldr	r3, [r7, #12]
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	3710      	adds	r7, #16
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}
	...

08010ba0 <_ZN17MonochromeDisplay10initializeEv>:

bool MonochromeDisplay::initialize()
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b084      	sub	sp, #16
 8010ba4:	af02      	add	r7, sp, #8
 8010ba6:	6078      	str	r0, [r7, #4]
    rotation = EP_DISPLAY_ROTATE_270;   // Turn by 270° for the DeSEm Nucleo STM32L476 hardware
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8010bae:	3314      	adds	r3, #20
 8010bb0:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8010bb4:	801a      	strh	r2, [r3, #0]

    display.initialize(&hspi2, &pinDC, &pinBusy, &pinReset);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	f503 509d 	add.w	r0, r3, #5024	; 0x13a0
 8010bbc:	3004      	adds	r0, #4
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f503 529c 	add.w	r2, r3, #4992	; 0x1380
 8010bc4:	320c      	adds	r2, #12
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f503 519c 	add.w	r1, r3, #4992	; 0x1380
 8010bcc:	3114      	adds	r1, #20
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8010bd4:	331c      	adds	r3, #28
 8010bd6:	9300      	str	r3, [sp, #0]
 8010bd8:	460b      	mov	r3, r1
 8010bda:	4921      	ldr	r1, [pc, #132]	; (8010c60 <_ZN17MonochromeDisplay10initializeEv+0xc0>)
 8010bdc:	f7ff f864 	bl	800fca8 <_ZN2ep7Display10initializeEP19__SPI_HandleTypeDefPNS_3GpoEPNS_3GpiES4_>
    painter.initialize(&display);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8010be6:	3314      	adds	r3, #20
 8010be8:	687a      	ldr	r2, [r7, #4]
 8010bea:	f502 529d 	add.w	r2, r2, #5024	; 0x13a0
 8010bee:	3204      	adds	r2, #4
 8010bf0:	4611      	mov	r1, r2
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f7ff fa0b 	bl	801000e <_ZN2ep5Paint10initializeEPNS_7DisplayE>

    painter.setRotate(rotation);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f503 529d 	add.w	r2, r3, #5024	; 0x13a0
 8010bfe:	3214      	adds	r2, #20
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8010c06:	3314      	adds	r3, #20
 8010c08:	881b      	ldrh	r3, [r3, #0]
 8010c0a:	4619      	mov	r1, r3
 8010c0c:	4610      	mov	r0, r2
 8010c0e:	f7ff fa6d 	bl	80100ec <_ZN2ep5Paint9setRotateEt>

    painter.setBuffer(_lcdBuffer, Width, Height, rotation, EP_DISPLAY_WHITE);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f503 509d 	add.w	r0, r3, #5024	; 0x13a0
 8010c18:	3014      	adds	r0, #20
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	1d19      	adds	r1, r3, #4
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8010c24:	3314      	adds	r3, #20
 8010c26:	881b      	ldrh	r3, [r3, #0]
 8010c28:	22ff      	movs	r2, #255	; 0xff
 8010c2a:	9201      	str	r2, [sp, #4]
 8010c2c:	9300      	str	r3, [sp, #0]
 8010c2e:	23c8      	movs	r3, #200	; 0xc8
 8010c30:	22c8      	movs	r2, #200	; 0xc8
 8010c32:	f7ff f9fa 	bl	801002a <_ZN2ep5Paint9setBufferEPhtttt>

	clear();                            // Clear ePaper display (all pixels to white)
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	3324      	adds	r3, #36	; 0x24
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	4798      	blx	r3
	display.setLUTShortRefresh();       // Change to fast refresh
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8010c4c:	3304      	adds	r3, #4
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f7ff f93e 	bl	800fed0 <_ZN2ep7Display18setLUTShortRefreshEv>

	return true;
 8010c54:	2301      	movs	r3, #1
}
 8010c56:	4618      	mov	r0, r3
 8010c58:	3708      	adds	r7, #8
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	bd80      	pop	{r7, pc}
 8010c5e:	bf00      	nop
 8010c60:	20001d00 	.word	0x20001d00

08010c64 <_ZN17MonochromeDisplay6enableEv>:

bool MonochromeDisplay::enable()
{
 8010c64:	b480      	push	{r7}
 8010c66:	b083      	sub	sp, #12
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
	return true;    // ePaper display always on
 8010c6c:	2301      	movs	r3, #1
}
 8010c6e:	4618      	mov	r0, r3
 8010c70:	370c      	adds	r7, #12
 8010c72:	46bd      	mov	sp, r7
 8010c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c78:	4770      	bx	lr

08010c7a <_ZN17MonochromeDisplay7disableEv>:

bool MonochromeDisplay::disable()
{
 8010c7a:	b480      	push	{r7}
 8010c7c:	b083      	sub	sp, #12
 8010c7e:	af00      	add	r7, sp, #0
 8010c80:	6078      	str	r0, [r7, #4]
	return true;    // ePaper display always on
 8010c82:	2301      	movs	r3, #1
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	370c      	adds	r7, #12
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8e:	4770      	bx	lr

08010c90 <_ZN17MonochromeDisplay5pixelERKN18IMonochromeDisplay5PointE>:

IMonochromeDisplay::PixelColor MonochromeDisplay::pixel(const Point & point)
{
 8010c90:	b480      	push	{r7}
 8010c92:	b083      	sub	sp, #12
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
 8010c98:	6039      	str	r1, [r7, #0]
    // TODO: Returning right pixel is not easy for the ePaper display
    //       because internally the display can be rotated and even mirrored
    // painter.pixel(point);
    return White;
 8010c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	370c      	adds	r7, #12
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca8:	4770      	bx	lr

08010caa <_ZN17MonochromeDisplay8setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE>:

void MonochromeDisplay::setPixel(const Point & point , PixelColor color)
{
 8010caa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cac:	b087      	sub	sp, #28
 8010cae:	af02      	add	r7, sp, #8
 8010cb0:	60f8      	str	r0, [r7, #12]
 8010cb2:	60b9      	str	r1, [r7, #8]
 8010cb4:	4613      	mov	r3, r2
 8010cb6:	71fb      	strb	r3, [r7, #7]
    painter.setPixel(point.x, point.y, toEpDisplayColor(color), false);
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	f503 549d 	add.w	r4, r3, #5024	; 0x13a0
 8010cbe:	3414      	adds	r4, #20
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	b29d      	uxth	r5, r3
 8010cc6:	68bb      	ldr	r3, [r7, #8]
 8010cc8:	685b      	ldr	r3, [r3, #4]
 8010cca:	b29e      	uxth	r6, r3
 8010ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010cd0:	4619      	mov	r1, r3
 8010cd2:	68f8      	ldr	r0, [r7, #12]
 8010cd4:	f000 f898 	bl	8010e08 <_ZN17MonochromeDisplay16toEpDisplayColorEN18IMonochromeDisplay10PixelColorE>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	461a      	mov	r2, r3
 8010cdc:	2300      	movs	r3, #0
 8010cde:	9300      	str	r3, [sp, #0]
 8010ce0:	4613      	mov	r3, r2
 8010ce2:	4632      	mov	r2, r6
 8010ce4:	4629      	mov	r1, r5
 8010ce6:	4620      	mov	r0, r4
 8010ce8:	f7ff fa1c 	bl	8010124 <_ZN2ep5Paint8setPixelEtttb>
}
 8010cec:	bf00      	nop
 8010cee:	3714      	adds	r7, #20
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010cf4 <_ZN17MonochromeDisplay5clearEN18IMonochromeDisplay10PixelColorE>:

void MonochromeDisplay::clear(PixelColor background /* = White */)
{
 8010cf4:	b590      	push	{r4, r7, lr}
 8010cf6:	b083      	sub	sp, #12
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
 8010cfc:	460b      	mov	r3, r1
 8010cfe:	70fb      	strb	r3, [r7, #3]
	painter.clear(toEpDisplayColor(background));
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	f503 549d 	add.w	r4, r3, #5024	; 0x13a0
 8010d06:	3414      	adds	r4, #20
 8010d08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010d0c:	4619      	mov	r1, r3
 8010d0e:	6878      	ldr	r0, [r7, #4]
 8010d10:	f000 f87a 	bl	8010e08 <_ZN17MonochromeDisplay16toEpDisplayColorEN18IMonochromeDisplay10PixelColorE>
 8010d14:	4603      	mov	r3, r0
 8010d16:	b2db      	uxtb	r3, r3
 8010d18:	2201      	movs	r2, #1
 8010d1a:	4619      	mov	r1, r3
 8010d1c:	4620      	mov	r0, r4
 8010d1e:	f7ff fae3 	bl	80102e8 <_ZN2ep5Paint5clearEhb>
}
 8010d22:	bf00      	nop
 8010d24:	370c      	adds	r7, #12
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd90      	pop	{r4, r7, pc}

08010d2a <_ZN17MonochromeDisplay8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE>:

void MonochromeDisplay::drawLine(const Point & begin, const Point & end, PixelColor color)
{
 8010d2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d2e:	b08b      	sub	sp, #44	; 0x2c
 8010d30:	af06      	add	r7, sp, #24
 8010d32:	60f8      	str	r0, [r7, #12]
 8010d34:	60b9      	str	r1, [r7, #8]
 8010d36:	607a      	str	r2, [r7, #4]
 8010d38:	70fb      	strb	r3, [r7, #3]
    painter.drawLine(begin.x, begin.y, end.x, end.y, toEpDisplayColor(color), LINE_STYLE_SOLID, DOT_PIXEL_2X2, false);
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	f503 549d 	add.w	r4, r3, #5024	; 0x13a0
 8010d40:	3414      	adds	r4, #20
 8010d42:	68bb      	ldr	r3, [r7, #8]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	b29e      	uxth	r6, r3
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	685b      	ldr	r3, [r3, #4]
 8010d4c:	fa1f f883 	uxth.w	r8, r3
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	fa1f f983 	uxth.w	r9, r3
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	685b      	ldr	r3, [r3, #4]
 8010d5c:	b29d      	uxth	r5, r3
 8010d5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010d62:	4619      	mov	r1, r3
 8010d64:	68f8      	ldr	r0, [r7, #12]
 8010d66:	f000 f84f 	bl	8010e08 <_ZN17MonochromeDisplay16toEpDisplayColorEN18IMonochromeDisplay10PixelColorE>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	461a      	mov	r2, r3
 8010d6e:	2300      	movs	r3, #0
 8010d70:	9304      	str	r3, [sp, #16]
 8010d72:	2302      	movs	r3, #2
 8010d74:	9303      	str	r3, [sp, #12]
 8010d76:	2300      	movs	r3, #0
 8010d78:	9302      	str	r3, [sp, #8]
 8010d7a:	9201      	str	r2, [sp, #4]
 8010d7c:	9500      	str	r5, [sp, #0]
 8010d7e:	464b      	mov	r3, r9
 8010d80:	4642      	mov	r2, r8
 8010d82:	4631      	mov	r1, r6
 8010d84:	4620      	mov	r0, r4
 8010d86:	f7ff fb83 	bl	8010490 <_ZN2ep5Paint8drawLineEttttt10LINE_STYLE9DOT_PIXELb>
    painter.update();
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8010d90:	3314      	adds	r3, #20
 8010d92:	4618      	mov	r0, r3
 8010d94:	f7ff fac2 	bl	801031c <_ZN2ep5Paint6updateEv>
}
 8010d98:	bf00      	nop
 8010d9a:	3714      	adds	r7, #20
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08010da4 <_ZN17MonochromeDisplay8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE>:

void MonochromeDisplay::drawText(const Point & topLeft , const std::string & text, PixelColor color)
{
 8010da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010da8:	b088      	sub	sp, #32
 8010daa:	af04      	add	r7, sp, #16
 8010dac:	60f8      	str	r0, [r7, #12]
 8010dae:	60b9      	str	r1, [r7, #8]
 8010db0:	607a      	str	r2, [r7, #4]
 8010db2:	70fb      	strb	r3, [r7, #3]
    painter.drawString(topLeft.x, topLeft.y, text.c_str(), &Font24, EP_DISPLAY_WHITE, toEpDisplayColor(color), true);
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	f503 549d 	add.w	r4, r3, #5024	; 0x13a0
 8010dba:	3414      	adds	r4, #20
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	b29d      	uxth	r5, r3
 8010dc2:	68bb      	ldr	r3, [r7, #8]
 8010dc4:	685b      	ldr	r3, [r3, #4]
 8010dc6:	b29e      	uxth	r6, r3
 8010dc8:	6878      	ldr	r0, [r7, #4]
 8010dca:	f005 fbd9 	bl	8016580 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8010dce:	4680      	mov	r8, r0
 8010dd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010dd4:	4619      	mov	r1, r3
 8010dd6:	68f8      	ldr	r0, [r7, #12]
 8010dd8:	f000 f816 	bl	8010e08 <_ZN17MonochromeDisplay16toEpDisplayColorEN18IMonochromeDisplay10PixelColorE>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	461a      	mov	r2, r3
 8010de0:	2301      	movs	r3, #1
 8010de2:	9303      	str	r3, [sp, #12]
 8010de4:	9202      	str	r2, [sp, #8]
 8010de6:	23ff      	movs	r3, #255	; 0xff
 8010de8:	9301      	str	r3, [sp, #4]
 8010dea:	4b06      	ldr	r3, [pc, #24]	; (8010e04 <_ZN17MonochromeDisplay8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE+0x60>)
 8010dec:	9300      	str	r3, [sp, #0]
 8010dee:	4643      	mov	r3, r8
 8010df0:	4632      	mov	r2, r6
 8010df2:	4629      	mov	r1, r5
 8010df4:	4620      	mov	r0, r4
 8010df6:	f7ff fcbf 	bl	8010778 <_ZN2ep5Paint10drawStringEttPKcP6_tFontttb>
}
 8010dfa:	bf00      	nop
 8010dfc:	3710      	adds	r7, #16
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e04:	2000000c 	.word	0x2000000c

08010e08 <_ZN17MonochromeDisplay16toEpDisplayColorEN18IMonochromeDisplay10PixelColorE>:
{
	painter.update();
}

uint16_t MonochromeDisplay::toEpDisplayColor(PixelColor pixelColor)
{
 8010e08:	b480      	push	{r7}
 8010e0a:	b083      	sub	sp, #12
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	460b      	mov	r3, r1
 8010e12:	70fb      	strb	r3, [r7, #3]
    return (pixelColor == IMonochromeDisplay::White) ? EP_DISPLAY_WHITE : EP_DISPLAY_BLACK;
 8010e14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010e18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e1c:	d101      	bne.n	8010e22 <_ZN17MonochromeDisplay16toEpDisplayColorEN18IMonochromeDisplay10PixelColorE+0x1a>
 8010e1e:	23ff      	movs	r3, #255	; 0xff
 8010e20:	e000      	b.n	8010e24 <_ZN17MonochromeDisplay16toEpDisplayColorEN18IMonochromeDisplay10PixelColorE+0x1c>
 8010e22:	2300      	movs	r3, #0
}
 8010e24:	4618      	mov	r0, r3
 8010e26:	370c      	adds	r7, #12
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2e:	4770      	bx	lr

08010e30 <_Z41__static_initialization_and_destruction_0ii>:
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b088      	sub	sp, #32
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	6039      	str	r1, [r7, #0]
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2b01      	cmp	r3, #1
 8010e3e:	d122      	bne.n	8010e86 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e46:	4293      	cmp	r3, r2
 8010e48:	d11d      	bne.n	8010e86 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8010e4a:	4b18      	ldr	r3, [pc, #96]	; (8010eac <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	613b      	str	r3, [r7, #16]
 8010e50:	f107 0310 	add.w	r3, r7, #16
 8010e54:	60bb      	str	r3, [r7, #8]
 8010e56:	2304      	movs	r3, #4
 8010e58:	60fb      	str	r3, [r7, #12]
 8010e5a:	f107 0308 	add.w	r3, r7, #8
 8010e5e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8010e62:	4813      	ldr	r0, [pc, #76]	; (8010eb0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8010e64:	f7f5 ff2e 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
  static const desenet::Address SENSOR_ADDRESS({0xC7, 0xC7, 0xC7, 0xC7});	///< @brief Sensor's reception address.
 8010e68:	4b12      	ldr	r3, [pc, #72]	; (8010eb4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	61fb      	str	r3, [r7, #28]
 8010e6e:	f107 031c 	add.w	r3, r7, #28
 8010e72:	617b      	str	r3, [r7, #20]
 8010e74:	2304      	movs	r3, #4
 8010e76:	61bb      	str	r3, [r7, #24]
 8010e78:	f107 0314 	add.w	r3, r7, #20
 8010e7c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8010e80:	480d      	ldr	r0, [pc, #52]	; (8010eb8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8010e82:	f7f5 ff1f 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d10a      	bne.n	8010ea2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8010e8c:	683b      	ldr	r3, [r7, #0]
 8010e8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e92:	4293      	cmp	r3, r2
 8010e94:	d105      	bne.n	8010ea2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8010e96:	4808      	ldr	r0, [pc, #32]	; (8010eb8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8010e98:	f7f6 f850 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 8010e9c:	4804      	ldr	r0, [pc, #16]	; (8010eb0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8010e9e:	f7f6 f84d 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
 8010ea2:	bf00      	nop
 8010ea4:	3720      	adds	r7, #32
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
 8010eaa:	bf00      	nop
 8010eac:	0801a160 	.word	0x0801a160
 8010eb0:	2000198c 	.word	0x2000198c
 8010eb4:	0801a164 	.word	0x0801a164
 8010eb8:	20001994 	.word	0x20001994

08010ebc <_GLOBAL__sub_I__ZN17MonochromeDisplayC2Ev>:
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	af00      	add	r7, sp, #0
 8010ec0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010ec4:	2001      	movs	r0, #1
 8010ec6:	f7ff ffb3 	bl	8010e30 <_Z41__static_initialization_and_destruction_0ii>
 8010eca:	bd80      	pop	{r7, pc}

08010ecc <_GLOBAL__sub_D__ZN17MonochromeDisplayC2Ev>:
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	af00      	add	r7, sp, #0
 8010ed0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010ed4:	2000      	movs	r0, #0
 8010ed6:	f7ff ffab 	bl	8010e30 <_Z41__static_initialization_and_destruction_0ii>
 8010eda:	bd80      	pop	{r7, pc}

08010edc <_ZN13SimpleDisplayC1Ev>:
#include "gui/MonochromeDisplayPainter"
#include "simpledisplay.h"

SimpleDisplay::SimpleDisplay()
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b082      	sub	sp, #8
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f7ff fdc4 	bl	8010a74 <_ZN17MonochromeDisplayC1Ev>
 8010eec:	4a03      	ldr	r2, [pc, #12]	; (8010efc <_ZN13SimpleDisplayC1Ev+0x20>)
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	601a      	str	r2, [r3, #0]
{
}
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	3708      	adds	r7, #8
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd80      	pop	{r7, pc}
 8010efc:	0801df00 	.word	0x0801df00

08010f00 <_ZN13SimpleDisplayD1Ev>:

SimpleDisplay::~SimpleDisplay()
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b082      	sub	sp, #8
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
 8010f08:	4a05      	ldr	r2, [pc, #20]	; (8010f20 <_ZN13SimpleDisplayD1Ev+0x20>)
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	601a      	str	r2, [r3, #0]
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	4618      	mov	r0, r3
 8010f12:	f7ff fdf7 	bl	8010b04 <_ZN17MonochromeDisplayD1Ev>
{
}
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	4618      	mov	r0, r3
 8010f1a:	3708      	adds	r7, #8
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}
 8010f20:	0801df00 	.word	0x0801df00

08010f24 <_ZN13SimpleDisplayD0Ev>:
SimpleDisplay::~SimpleDisplay()
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b082      	sub	sp, #8
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
}
 8010f2c:	6878      	ldr	r0, [r7, #4]
 8010f2e:	f7ff ffe7 	bl	8010f00 <_ZN13SimpleDisplayD1Ev>
 8010f32:	f241 31d8 	movw	r1, #5080	; 0x13d8
 8010f36:	6878      	ldr	r0, [r7, #4]
 8010f38:	f005 fa92 	bl	8016460 <_ZdlPvj>
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	4618      	mov	r0, r3
 8010f40:	3708      	adds	r7, #8
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}

08010f46 <_ZN13SimpleDisplay10initializeEv>:

bool SimpleDisplay::initialize()
{
 8010f46:	b580      	push	{r7, lr}
 8010f48:	b082      	sub	sp, #8
 8010f4a:	af00      	add	r7, sp, #0
 8010f4c:	6078      	str	r0, [r7, #4]
	return BaseClass::initialize();
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7ff fe25 	bl	8010ba0 <_ZN17MonochromeDisplay10initializeEv>
 8010f56:	4603      	mov	r3, r0
}
 8010f58:	4618      	mov	r0, r3
 8010f5a:	3708      	adds	r7, #8
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}

08010f60 <_ZN13SimpleDisplay5clearEv>:

void SimpleDisplay::clear()
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b088      	sub	sp, #32
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
	MonochromeDisplayPainter painter(this, false);
 8010f68:	6879      	ldr	r1, [r7, #4]
 8010f6a:	f107 030c 	add.w	r3, r7, #12
 8010f6e:	2200      	movs	r2, #0
 8010f70:	4618      	mov	r0, r3
 8010f72:	f7fd f86b 	bl	800e04c <_ZN24MonochromeDisplayPainterC1EP18IMonochromeDisplayb>
	painter.clear();
 8010f76:	f107 030c 	add.w	r3, r7, #12
 8010f7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f7fd f8f2 	bl	800e168 <_ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE>
	painter.end();
 8010f84:	f107 030c 	add.w	r3, r7, #12
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f7fd f8c3 	bl	800e114 <_ZN24MonochromeDisplayPainter3endEv>
	MonochromeDisplayPainter painter(this, false);
 8010f8e:	f107 030c 	add.w	r3, r7, #12
 8010f92:	4618      	mov	r0, r3
 8010f94:	f7fd f882 	bl	800e09c <_ZN24MonochromeDisplayPainterD1Ev>
}
 8010f98:	bf00      	nop
 8010f9a:	3720      	adds	r7, #32
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}

08010fa0 <_ZN13SimpleDisplay8drawTextEPKctt>:
	painter.drawRectangle(Point(0, row * 8), Size(SimpleDisplay::X_MAX, 8), IMonochromeDisplay::White, IMonochromeDisplay::White);
	painter.end();
}

void SimpleDisplay::drawText(const char * str, uint16_t col, uint16_t row)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b092      	sub	sp, #72	; 0x48
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	60f8      	str	r0, [r7, #12]
 8010fa8:	60b9      	str	r1, [r7, #8]
 8010faa:	4611      	mov	r1, r2
 8010fac:	461a      	mov	r2, r3
 8010fae:	460b      	mov	r3, r1
 8010fb0:	80fb      	strh	r3, [r7, #6]
 8010fb2:	4613      	mov	r3, r2
 8010fb4:	80bb      	strh	r3, [r7, #4]
	MonochromeDisplayPainter painter(this, false);
 8010fb6:	68f9      	ldr	r1, [r7, #12]
 8010fb8:	f107 0310 	add.w	r3, r7, #16
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	f7fd f844 	bl	800e04c <_ZN24MonochromeDisplayPainterC1EP18IMonochromeDisplayb>
	painter.begin(this);
 8010fc4:	68fa      	ldr	r2, [r7, #12]
 8010fc6:	f107 0310 	add.w	r3, r7, #16
 8010fca:	4611      	mov	r1, r2
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f7fd f887 	bl	800e0e0 <_ZN24MonochromeDisplayPainter5beginEP18IMonochromeDisplay>
	painter.drawText(IMonochromeDisplay::Point(col, row*8), str, IMonochromeDisplay::Black);
 8010fd2:	88f9      	ldrh	r1, [r7, #6]
 8010fd4:	88bb      	ldrh	r3, [r7, #4]
 8010fd6:	00da      	lsls	r2, r3, #3
 8010fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f7fd f821 	bl	800e024 <_ZN18IMonochromeDisplay5PointC1Eii>
 8010fe2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f005 fa63 	bl	80164b2 <_ZNSaIcEC1Ev>
 8010fec:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8010ff0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010ff4:	68b9      	ldr	r1, [r7, #8]
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	f005 fae8 	bl	80165cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8010ffc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011000:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8011004:	f107 0010 	add.w	r0, r7, #16
 8011008:	2301      	movs	r3, #1
 801100a:	f7fd fbe1 	bl	800e7d0 <_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_10PixelColorE>
 801100e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011012:	4618      	mov	r0, r3
 8011014:	f005 faa4 	bl	8016560 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8011018:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801101c:	4618      	mov	r0, r3
 801101e:	f005 fa49 	bl	80164b4 <_ZNSaIcED1Ev>
	painter.end();
 8011022:	f107 0310 	add.w	r3, r7, #16
 8011026:	4618      	mov	r0, r3
 8011028:	f7fd f874 	bl	800e114 <_ZN24MonochromeDisplayPainter3endEv>
	MonochromeDisplayPainter painter(this, false);
 801102c:	f107 0310 	add.w	r3, r7, #16
 8011030:	4618      	mov	r0, r3
 8011032:	f7fd f833 	bl	800e09c <_ZN24MonochromeDisplayPainterD1Ev>
}
 8011036:	bf00      	nop
 8011038:	3748      	adds	r7, #72	; 0x48
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}

0801103e <_ZN13SimpleDisplay8drawLineERKN18IMonochromeDisplay5PointES3_>:

void SimpleDisplay::drawLine(const SimpleDisplay::Point & begin, const SimpleDisplay::Point & end)
{
 801103e:	b580      	push	{r7, lr}
 8011040:	b08a      	sub	sp, #40	; 0x28
 8011042:	af00      	add	r7, sp, #0
 8011044:	60f8      	str	r0, [r7, #12]
 8011046:	60b9      	str	r1, [r7, #8]
 8011048:	607a      	str	r2, [r7, #4]
	MonochromeDisplayPainter painter(this, false);
 801104a:	68f9      	ldr	r1, [r7, #12]
 801104c:	f107 0314 	add.w	r3, r7, #20
 8011050:	2200      	movs	r2, #0
 8011052:	4618      	mov	r0, r3
 8011054:	f7fc fffa 	bl	800e04c <_ZN24MonochromeDisplayPainterC1EP18IMonochromeDisplayb>
	painter.begin(this);
 8011058:	68fa      	ldr	r2, [r7, #12]
 801105a:	f107 0314 	add.w	r3, r7, #20
 801105e:	4611      	mov	r1, r2
 8011060:	4618      	mov	r0, r3
 8011062:	f7fd f83d 	bl	800e0e0 <_ZN24MonochromeDisplayPainter5beginEP18IMonochromeDisplay>
	painter.drawLine(begin, end, IMonochromeDisplay::Black);
 8011066:	f107 0014 	add.w	r0, r7, #20
 801106a:	2301      	movs	r3, #1
 801106c:	687a      	ldr	r2, [r7, #4]
 801106e:	68b9      	ldr	r1, [r7, #8]
 8011070:	f7fd f97a 	bl	800e368 <_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE>
	painter.end();
 8011074:	f107 0314 	add.w	r3, r7, #20
 8011078:	4618      	mov	r0, r3
 801107a:	f7fd f84b 	bl	800e114 <_ZN24MonochromeDisplayPainter3endEv>
	MonochromeDisplayPainter painter(this, false);
 801107e:	f107 0314 	add.w	r3, r7, #20
 8011082:	4618      	mov	r0, r3
 8011084:	f7fd f80a 	bl	800e09c <_ZN24MonochromeDisplayPainterD1Ev>
}
 8011088:	bf00      	nop
 801108a:	3728      	adds	r7, #40	; 0x28
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}

08011090 <_Z41__static_initialization_and_destruction_0ii>:
{
	MonochromeDisplayPainter painter(this, false);
	painter.begin(this);
	painter.drawRectangle(topLeft, size, IMonochromeDisplay::Black, (fill) ? IMonochromeDisplay::Black : IMonochromeDisplay::Undefined);
	painter.end();
}
 8011090:	b580      	push	{r7, lr}
 8011092:	b088      	sub	sp, #32
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
 8011098:	6039      	str	r1, [r7, #0]
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	2b01      	cmp	r3, #1
 801109e:	d122      	bne.n	80110e6 <_Z41__static_initialization_and_destruction_0ii+0x56>
 80110a0:	683b      	ldr	r3, [r7, #0]
 80110a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80110a6:	4293      	cmp	r3, r2
 80110a8:	d11d      	bne.n	80110e6 <_Z41__static_initialization_and_destruction_0ii+0x56>
 80110aa:	4b18      	ldr	r3, [pc, #96]	; (801110c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	613b      	str	r3, [r7, #16]
 80110b0:	f107 0310 	add.w	r3, r7, #16
 80110b4:	60bb      	str	r3, [r7, #8]
 80110b6:	2304      	movs	r3, #4
 80110b8:	60fb      	str	r3, [r7, #12]
 80110ba:	f107 0308 	add.w	r3, r7, #8
 80110be:	e893 0006 	ldmia.w	r3, {r1, r2}
 80110c2:	4813      	ldr	r0, [pc, #76]	; (8011110 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80110c4:	f7f5 fdfe 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
  static const desenet::Address SENSOR_ADDRESS({0xC7, 0xC7, 0xC7, 0xC7});	///< @brief Sensor's reception address.
 80110c8:	4b12      	ldr	r3, [pc, #72]	; (8011114 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	61fb      	str	r3, [r7, #28]
 80110ce:	f107 031c 	add.w	r3, r7, #28
 80110d2:	617b      	str	r3, [r7, #20]
 80110d4:	2304      	movs	r3, #4
 80110d6:	61bb      	str	r3, [r7, #24]
 80110d8:	f107 0314 	add.w	r3, r7, #20
 80110dc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80110e0:	480d      	ldr	r0, [pc, #52]	; (8011118 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80110e2:	f7f5 fdef 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d10a      	bne.n	8011102 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80110f2:	4293      	cmp	r3, r2
 80110f4:	d105      	bne.n	8011102 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80110f6:	4808      	ldr	r0, [pc, #32]	; (8011118 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80110f8:	f7f5 ff20 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 80110fc:	4804      	ldr	r0, [pc, #16]	; (8011110 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80110fe:	f7f5 ff1d 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
 8011102:	bf00      	nop
 8011104:	3720      	adds	r7, #32
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}
 801110a:	bf00      	nop
 801110c:	0801a254 	.word	0x0801a254
 8011110:	2000199c 	.word	0x2000199c
 8011114:	0801a258 	.word	0x0801a258
 8011118:	200019a4 	.word	0x200019a4

0801111c <_GLOBAL__sub_I__ZN13SimpleDisplayC2Ev>:
 801111c:	b580      	push	{r7, lr}
 801111e:	af00      	add	r7, sp, #0
 8011120:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011124:	2001      	movs	r0, #1
 8011126:	f7ff ffb3 	bl	8011090 <_Z41__static_initialization_and_destruction_0ii>
 801112a:	bd80      	pop	{r7, pc}

0801112c <_GLOBAL__sub_D__ZN13SimpleDisplayC2Ev>:
 801112c:	b580      	push	{r7, lr}
 801112e:	af00      	add	r7, sp, #0
 8011130:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011134:	2000      	movs	r0, #0
 8011136:	f7ff ffab 	bl	8011090 <_Z41__static_initialization_and_destruction_0ii>
 801113a:	bd80      	pop	{r7, pc}

0801113c <_ZN3phy7AddressILj4EEaSERKS1_>:
class Address
 801113c:	b480      	push	{r7}
 801113e:	b083      	sub	sp, #12
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
 8011144:	6039      	str	r1, [r7, #0]
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	1d19      	adds	r1, r3, #4
 801114a:	2203      	movs	r2, #3
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	3304      	adds	r3, #4
 8011150:	2a00      	cmp	r2, #0
 8011152:	db05      	blt.n	8011160 <_ZN3phy7AddressILj4EEaSERKS1_+0x24>
 8011154:	7818      	ldrb	r0, [r3, #0]
 8011156:	7008      	strb	r0, [r1, #0]
 8011158:	3101      	adds	r1, #1
 801115a:	3301      	adds	r3, #1
 801115c:	3a01      	subs	r2, #1
 801115e:	e7f7      	b.n	8011150 <_ZN3phy7AddressILj4EEaSERKS1_+0x14>
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	4618      	mov	r0, r3
 8011164:	370c      	adds	r7, #12
 8011166:	46bd      	mov	sp, r7
 8011168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116c:	4770      	bx	lr
	...

08011170 <_ZN3phy7AddressILj4EEC1ERKS1_>:
 8011170:	b480      	push	{r7}
 8011172:	b083      	sub	sp, #12
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
 8011178:	6039      	str	r1, [r7, #0]
 801117a:	4a07      	ldr	r2, [pc, #28]	; (8011198 <_ZN3phy7AddressILj4EEC1ERKS1_+0x28>)
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	601a      	str	r2, [r3, #0]
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	683a      	ldr	r2, [r7, #0]
 8011184:	6852      	ldr	r2, [r2, #4]
 8011186:	605a      	str	r2, [r3, #4]
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	4618      	mov	r0, r3
 801118c:	370c      	adds	r7, #12
 801118e:	46bd      	mov	sp, r7
 8011190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011194:	4770      	bx	lr
 8011196:	bf00      	nop
 8011198:	0801bdb8 	.word	0x0801bdb8

0801119c <_ZNK7desenet5FrameixEj>:
        const uint8_t & operator[](size_t index) const { return buffer_[index]; }	///< Byte access (read-only) to buffer
 801119c:	b580      	push	{r7, lr}
 801119e:	b082      	sub	sp, #8
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
 80111a4:	6039      	str	r1, [r7, #0]
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	6839      	ldr	r1, [r7, #0]
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7f8 fcbc 	bl	8009b28 <_ZNK3hei12SharedBufferIhEixEj>
 80111b0:	4603      	mov	r3, r0
 80111b2:	4618      	mov	r0, r3
 80111b4:	3708      	adds	r7, #8
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}

080111ba <_ZN7desenet5FrameixEj>:
        uint8_t & operator[]( size_t index ) { return buffer_[index]; }				///< Byte access (write) to buffer
 80111ba:	b580      	push	{r7, lr}
 80111bc:	b082      	sub	sp, #8
 80111be:	af00      	add	r7, sp, #0
 80111c0:	6078      	str	r0, [r7, #4]
 80111c2:	6039      	str	r1, [r7, #0]
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6839      	ldr	r1, [r7, #0]
 80111c8:	4618      	mov	r0, r3
 80111ca:	f7f5 fdaf 	bl	8006d2c <_ZN3hei12SharedBufferIhEixEj>
 80111ce:	4603      	mov	r3, r0
 80111d0:	4618      	mov	r0, r3
 80111d2:	3708      	adds	r7, #8
 80111d4:	46bd      	mov	sp, r7
 80111d6:	bd80      	pop	{r7, pc}

080111d8 <_ZNK6NrfSpi13isInitializedEv>:
public:
	NrfSpi(Spi & spi);
	virtual ~NrfSpi();

	bool initialize();													///< Initializes the NrfSpi. Should be called after construction.
	inline bool isInitialized() const { return _bInitialized; }			///< Returns true if the #initialize method was already called.
 80111d8:	b480      	push	{r7}
 80111da:	b083      	sub	sp, #12
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	791b      	ldrb	r3, [r3, #4]
 80111e4:	4618      	mov	r0, r3
 80111e6:	370c      	adds	r7, #12
 80111e8:	46bd      	mov	sp, r7
 80111ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ee:	4770      	bx	lr

080111f0 <_ZNK6NrfSpi15featuresEnabledEv>:

	tStatus writeRegister(eNrfRegister reg, tRegister value);				///< Writes a value to the transceivers register
	tStatus writeRegister(eNrfRegister reg, const tAddress & address);		///< Writes an address to the transceivers register

	bool activateFeatures(bool enable);										///< Activates some features of the transceiver chip
	inline bool featuresEnabled() const { return _bNrfFeaturesEnabled; }	///< Returns true if the features of the transceiver are enabled
 80111f0:	b480      	push	{r7}
 80111f2:	b083      	sub	sp, #12
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	7b1b      	ldrb	r3, [r3, #12]
 80111fc:	4618      	mov	r0, r3
 80111fe:	370c      	adds	r7, #12
 8011200:	46bd      	mov	sp, r7
 8011202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011206:	4770      	bx	lr

08011208 <_ZNK6NrfSpi6sDelayEm>:

protected:
	#define CSN_TIME      2
	#define CE_HIGH_TIME  10000

	inline void sDelay(unsigned long a) const { while (--a!=0); }
 8011208:	b480      	push	{r7}
 801120a:	b083      	sub	sp, #12
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
 8011210:	6039      	str	r1, [r7, #0]
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	3b01      	subs	r3, #1
 8011216:	603b      	str	r3, [r7, #0]
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	2b00      	cmp	r3, #0
 801121c:	bf14      	ite	ne
 801121e:	2301      	movne	r3, #1
 8011220:	2300      	moveq	r3, #0
 8011222:	b2db      	uxtb	r3, r3
 8011224:	2b00      	cmp	r3, #0
 8011226:	d000      	beq.n	801122a <_ZNK6NrfSpi6sDelayEm+0x22>
 8011228:	e7f3      	b.n	8011212 <_ZNK6NrfSpi6sDelayEm+0xa>
 801122a:	bf00      	nop
 801122c:	370c      	adds	r7, #12
 801122e:	46bd      	mov	sp, r7
 8011230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011234:	4770      	bx	lr

08011236 <_ZNK6NrfSpi8enableCSEv>:
	inline void enableCS() const { sDelay(CSN_TIME); HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_RESET); }		///< Selects transceiver
 8011236:	b580      	push	{r7, lr}
 8011238:	b082      	sub	sp, #8
 801123a:	af00      	add	r7, sp, #0
 801123c:	6078      	str	r0, [r7, #4]
 801123e:	2102      	movs	r1, #2
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	f7ff ffe1 	bl	8011208 <_ZNK6NrfSpi6sDelayEm>
 8011246:	2200      	movs	r2, #0
 8011248:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801124c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011250:	f7f0 fcde 	bl	8001c10 <HAL_GPIO_WritePin>
 8011254:	bf00      	nop
 8011256:	3708      	adds	r7, #8
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}

0801125c <_ZNK6NrfSpi9disableCSEv>:
	inline void disableCS() const { HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_SET); }						///< Releases transceiver
 801125c:	b580      	push	{r7, lr}
 801125e:	b082      	sub	sp, #8
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
 8011264:	2201      	movs	r2, #1
 8011266:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801126a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801126e:	f7f0 fccf 	bl	8001c10 <HAL_GPIO_WritePin>
 8011272:	bf00      	nop
 8011274:	3708      	adds	r7, #8
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}

0801127a <_ZN6NrfSpi3spiEv>:
	inline void disableCE() const { HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET); }

	tStatus sendByte(unsigned char data);

private:
	inline Spi & spi() { return _spi; }
 801127a:	b480      	push	{r7}
 801127c:	b083      	sub	sp, #12
 801127e:	af00      	add	r7, sp, #0
 8011280:	6078      	str	r0, [r7, #4]
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	689b      	ldr	r3, [r3, #8]
 8011286:	4618      	mov	r0, r3
 8011288:	370c      	adds	r7, #12
 801128a:	46bd      	mov	sp, r7
 801128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011290:	4770      	bx	lr
	...

08011294 <_ZN6NrfSpiC1ER3Spi>:
#include "desenet/frame.h"
#include "nrfspi.h"

using desenet::Frame;

NrfSpi::NrfSpi(Spi & spi)
 8011294:	b480      	push	{r7}
 8011296:	b083      	sub	sp, #12
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
 801129c:	6039      	str	r1, [r7, #0]
 : _bInitialized(false),
   _spi(spi),
   _bNrfFeaturesEnabled(false)
 801129e:	4a09      	ldr	r2, [pc, #36]	; (80112c4 <_ZN6NrfSpiC1ER3Spi+0x30>)
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	601a      	str	r2, [r3, #0]
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	2200      	movs	r2, #0
 80112a8:	711a      	strb	r2, [r3, #4]
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	683a      	ldr	r2, [r7, #0]
 80112ae:	609a      	str	r2, [r3, #8]
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2200      	movs	r2, #0
 80112b4:	731a      	strb	r2, [r3, #12]
{

}
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	4618      	mov	r0, r3
 80112ba:	370c      	adds	r7, #12
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	4770      	bx	lr
 80112c4:	0801df50 	.word	0x0801df50

080112c8 <_ZN6NrfSpiD1Ev>:

NrfSpi::~NrfSpi()
 80112c8:	b480      	push	{r7}
 80112ca:	b083      	sub	sp, #12
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
 80112d0:	4a04      	ldr	r2, [pc, #16]	; (80112e4 <_ZN6NrfSpiD1Ev+0x1c>)
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	601a      	str	r2, [r3, #0]
{

}
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	4618      	mov	r0, r3
 80112da:	370c      	adds	r7, #12
 80112dc:	46bd      	mov	sp, r7
 80112de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e2:	4770      	bx	lr
 80112e4:	0801df50 	.word	0x0801df50

080112e8 <_ZN6NrfSpiD0Ev>:
NrfSpi::~NrfSpi()
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b082      	sub	sp, #8
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
}
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f7ff ffe9 	bl	80112c8 <_ZN6NrfSpiD1Ev>
 80112f6:	2110      	movs	r1, #16
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	f005 f8b1 	bl	8016460 <_ZdlPvj>
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	4618      	mov	r0, r3
 8011302:	3708      	adds	r7, #8
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}

08011308 <_ZN6NrfSpi10initializeEv>:

bool NrfSpi::initialize()
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b082      	sub	sp, #8
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
	if (!isInitialized())
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f7ff ff61 	bl	80111d8 <_ZNK6NrfSpi13isInitializedEv>
 8011316:	4603      	mov	r3, r0
 8011318:	f083 0301 	eor.w	r3, r3, #1
 801131c:	b2db      	uxtb	r3, r3
 801131e:	2b00      	cmp	r3, #0
 8011320:	d00b      	beq.n	801133a <_ZN6NrfSpi10initializeEv+0x32>
	{
		_bInitialized = true;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2201      	movs	r2, #1
 8011326:	711a      	strb	r2, [r3, #4]

		spi().initialize();
 8011328:	6878      	ldr	r0, [r7, #4]
 801132a:	f7ff ffa6 	bl	801127a <_ZN6NrfSpi3spiEv>
 801132e:	4603      	mov	r3, r0
 8011330:	4618      	mov	r0, r3
 8011332:	f002 fbaf 	bl	8013a94 <_ZN3Spi10initializeEv>

		return true;
 8011336:	2301      	movs	r3, #1
 8011338:	e000      	b.n	801133c <_ZN6NrfSpi10initializeEv+0x34>
	}
	return false;
 801133a:	2300      	movs	r3, #0
}
 801133c:	4618      	mov	r0, r3
 801133e:	3708      	adds	r7, #8
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}

08011344 <_ZN6NrfSpi6statusEv>:

NrfSpi::tStatus NrfSpi::status()
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b082      	sub	sp, #8
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
	return sendCmd(NrfSpi::NOP);
 801134c:	21ff      	movs	r1, #255	; 0xff
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f000 f806 	bl	8011360 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE>
 8011354:	4603      	mov	r3, r0
}
 8011356:	4618      	mov	r0, r3
 8011358:	3708      	adds	r7, #8
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}
	...

08011360 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE>:

NrfSpi::tStatus NrfSpi::sendCmd(eNrfSpiCmd cmd)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b084      	sub	sp, #16
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
 8011368:	460b      	mov	r3, r1
 801136a:	70fb      	strb	r3, [r7, #3]
	tStatus status = 0x00;
 801136c:	2300      	movs	r3, #0
 801136e:	73fb      	strb	r3, [r7, #15]

	assert(cmd != R_RX_PAYLOAD);			// Use readFrame() instead
 8011370:	78fb      	ldrb	r3, [r7, #3]
 8011372:	2b61      	cmp	r3, #97	; 0x61
 8011374:	d105      	bne.n	8011382 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x22>
 8011376:	4b40      	ldr	r3, [pc, #256]	; (8011478 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x118>)
 8011378:	4a40      	ldr	r2, [pc, #256]	; (801147c <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x11c>)
 801137a:	2129      	movs	r1, #41	; 0x29
 801137c:	4840      	ldr	r0, [pc, #256]	; (8011480 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x120>)
 801137e:	f005 f95d 	bl	801663c <__assert_func>
	assert(cmd != W_TX_PAYLOAD);			// Use sendFrame() instead
 8011382:	78fb      	ldrb	r3, [r7, #3]
 8011384:	2ba0      	cmp	r3, #160	; 0xa0
 8011386:	d105      	bne.n	8011394 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x34>
 8011388:	4b3e      	ldr	r3, [pc, #248]	; (8011484 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x124>)
 801138a:	4a3c      	ldr	r2, [pc, #240]	; (801147c <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x11c>)
 801138c:	212a      	movs	r1, #42	; 0x2a
 801138e:	483c      	ldr	r0, [pc, #240]	; (8011480 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x120>)
 8011390:	f005 f954 	bl	801663c <__assert_func>
	assert(cmd != W_REGISTER);				// Use writeRegister() methods instead
 8011394:	78fb      	ldrb	r3, [r7, #3]
 8011396:	2b01      	cmp	r3, #1
 8011398:	d105      	bne.n	80113a6 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x46>
 801139a:	4b3b      	ldr	r3, [pc, #236]	; (8011488 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x128>)
 801139c:	4a37      	ldr	r2, [pc, #220]	; (801147c <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x11c>)
 801139e:	212b      	movs	r1, #43	; 0x2b
 80113a0:	4837      	ldr	r0, [pc, #220]	; (8011480 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x120>)
 80113a2:	f005 f94b 	bl	801663c <__assert_func>
	assert(cmd != R_REGISTER);				// Use readRegister() methods instead
 80113a6:	78fb      	ldrb	r3, [r7, #3]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d105      	bne.n	80113b8 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x58>
 80113ac:	4b37      	ldr	r3, [pc, #220]	; (801148c <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x12c>)
 80113ae:	4a33      	ldr	r2, [pc, #204]	; (801147c <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x11c>)
 80113b0:	212c      	movs	r1, #44	; 0x2c
 80113b2:	4833      	ldr	r0, [pc, #204]	; (8011480 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x120>)
 80113b4:	f005 f942 	bl	801663c <__assert_func>
	assert(cmd != W_ACK_PAYLOAD);
 80113b8:	78fb      	ldrb	r3, [r7, #3]
 80113ba:	2ba1      	cmp	r3, #161	; 0xa1
 80113bc:	d105      	bne.n	80113ca <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x6a>
 80113be:	4b34      	ldr	r3, [pc, #208]	; (8011490 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x130>)
 80113c0:	4a2e      	ldr	r2, [pc, #184]	; (801147c <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x11c>)
 80113c2:	212d      	movs	r1, #45	; 0x2d
 80113c4:	482e      	ldr	r0, [pc, #184]	; (8011480 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x120>)
 80113c6:	f005 f939 	bl	801663c <__assert_func>
	assert(cmd != W_TX_PAYLOAD_NO_ACK);
 80113ca:	78fb      	ldrb	r3, [r7, #3]
 80113cc:	2bb0      	cmp	r3, #176	; 0xb0
 80113ce:	d105      	bne.n	80113dc <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x7c>
 80113d0:	4b30      	ldr	r3, [pc, #192]	; (8011494 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x134>)
 80113d2:	4a2a      	ldr	r2, [pc, #168]	; (801147c <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x11c>)
 80113d4:	212e      	movs	r1, #46	; 0x2e
 80113d6:	482a      	ldr	r0, [pc, #168]	; (8011480 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x120>)
 80113d8:	f005 f930 	bl	801663c <__assert_func>

	enableCS();
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	f7ff ff2a 	bl	8011236 <_ZNK6NrfSpi8enableCSEv>

	switch (cmd)
 80113e2:	78fb      	ldrb	r3, [r7, #3]
 80113e4:	2bff      	cmp	r3, #255	; 0xff
 80113e6:	d01c      	beq.n	8011422 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0xc2>
 80113e8:	2bff      	cmp	r3, #255	; 0xff
 80113ea:	dc3d      	bgt.n	8011468 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x108>
 80113ec:	2be3      	cmp	r3, #227	; 0xe3
 80113ee:	dc3b      	bgt.n	8011468 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x108>
 80113f0:	2be1      	cmp	r3, #225	; 0xe1
 80113f2:	da16      	bge.n	8011422 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0xc2>
 80113f4:	2bb0      	cmp	r3, #176	; 0xb0
 80113f6:	d036      	beq.n	8011466 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x106>
 80113f8:	2bb0      	cmp	r3, #176	; 0xb0
 80113fa:	dc35      	bgt.n	8011468 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x108>
 80113fc:	2ba1      	cmp	r3, #161	; 0xa1
 80113fe:	dc33      	bgt.n	8011468 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x108>
 8011400:	2ba0      	cmp	r3, #160	; 0xa0
 8011402:	da30      	bge.n	8011466 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x106>
 8011404:	2b61      	cmp	r3, #97	; 0x61
 8011406:	d02e      	beq.n	8011466 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x106>
 8011408:	2b61      	cmp	r3, #97	; 0x61
 801140a:	dc2d      	bgt.n	8011468 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x108>
 801140c:	2b60      	cmp	r3, #96	; 0x60
 801140e:	d01c      	beq.n	801144a <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0xea>
 8011410:	2b60      	cmp	r3, #96	; 0x60
 8011412:	dc29      	bgt.n	8011468 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x108>
 8011414:	2b01      	cmp	r3, #1
 8011416:	dc01      	bgt.n	801141c <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0xbc>
 8011418:	2b00      	cmp	r3, #0
	case W_REGISTER:
	case R_REGISTER:
	case W_ACK_PAYLOAD:
	case W_TX_PAYLOAD_NO_ACK:
		// To nothing
		break;
 801141a:	e024      	b.n	8011466 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x106>
	switch (cmd)
 801141c:	2b50      	cmp	r3, #80	; 0x50
 801141e:	d008      	beq.n	8011432 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0xd2>
 8011420:	e022      	b.n	8011468 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x108>
		status = sendByte(cmd);
 8011422:	78fb      	ldrb	r3, [r7, #3]
 8011424:	4619      	mov	r1, r3
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f000 fad8 	bl	80119dc <_ZN6NrfSpi8sendByteEh>
 801142c:	4603      	mov	r3, r0
 801142e:	73fb      	strb	r3, [r7, #15]
		break;
 8011430:	e01a      	b.n	8011468 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x108>
		status = sendByte(cmd);
 8011432:	78fb      	ldrb	r3, [r7, #3]
 8011434:	4619      	mov	r1, r3
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	f000 fad0 	bl	80119dc <_ZN6NrfSpi8sendByteEh>
 801143c:	4603      	mov	r3, r0
 801143e:	73fb      	strb	r3, [r7, #15]
		sendByte(ACTIVATE_DATA);
 8011440:	2173      	movs	r1, #115	; 0x73
 8011442:	6878      	ldr	r0, [r7, #4]
 8011444:	f000 faca 	bl	80119dc <_ZN6NrfSpi8sendByteEh>
		break;
 8011448:	e00e      	b.n	8011468 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x108>
		status = sendByte(cmd);
 801144a:	78fb      	ldrb	r3, [r7, #3]
 801144c:	4619      	mov	r1, r3
 801144e:	6878      	ldr	r0, [r7, #4]
 8011450:	f000 fac4 	bl	80119dc <_ZN6NrfSpi8sendByteEh>
 8011454:	4603      	mov	r3, r0
 8011456:	73fb      	strb	r3, [r7, #15]
		status = sendByte(NOP);
 8011458:	21ff      	movs	r1, #255	; 0xff
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	f000 fabe 	bl	80119dc <_ZN6NrfSpi8sendByteEh>
 8011460:	4603      	mov	r3, r0
 8011462:	73fb      	strb	r3, [r7, #15]
		break;
 8011464:	e000      	b.n	8011468 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE+0x108>
		break;
 8011466:	bf00      	nop
	}

	disableCS();
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	f7ff fef7 	bl	801125c <_ZNK6NrfSpi9disableCSEv>
	return status;
 801146e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011470:	4618      	mov	r0, r3
 8011472:	3710      	adds	r7, #16
 8011474:	46bd      	mov	sp, r7
 8011476:	bd80      	pop	{r7, pc}
 8011478:	0801a25c 	.word	0x0801a25c
 801147c:	0801a270 	.word	0x0801a270
 8011480:	0801a2a4 	.word	0x0801a2a4
 8011484:	0801a33c 	.word	0x0801a33c
 8011488:	0801a350 	.word	0x0801a350
 801148c:	0801a364 	.word	0x0801a364
 8011490:	0801a378 	.word	0x0801a378
 8011494:	0801a390 	.word	0x0801a390

08011498 <_ZN6NrfSpi9sendFrameERKN7desenet5FrameE>:
/**
 * Sends a frame to the destination node. Use TX_ADDR register to
 * set the address for the destination node.
 */
NrfSpi::tStatus NrfSpi::sendFrame(const Frame & frame)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b084      	sub	sp, #16
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
 80114a0:	6039      	str	r1, [r7, #0]
	tStatus status = 0x00;
 80114a2:	2300      	movs	r3, #0
 80114a4:	72fb      	strb	r3, [r7, #11]

	enableCS();
 80114a6:	6878      	ldr	r0, [r7, #4]
 80114a8:	f7ff fec5 	bl	8011236 <_ZNK6NrfSpi8enableCSEv>

	status = sendByte(W_TX_PAYLOAD);
 80114ac:	21a0      	movs	r1, #160	; 0xa0
 80114ae:	6878      	ldr	r0, [r7, #4]
 80114b0:	f000 fa94 	bl	80119dc <_ZN6NrfSpi8sendByteEh>
 80114b4:	4603      	mov	r3, r0
 80114b6:	72fb      	strb	r3, [r7, #11]

	for (size_t i = 0; i < frame.length(); i++)
 80114b8:	2300      	movs	r3, #0
 80114ba:	60fb      	str	r3, [r7, #12]
 80114bc:	6838      	ldr	r0, [r7, #0]
 80114be:	f7f7 fb59 	bl	8008b74 <_ZNK7desenet5Frame6lengthEv>
 80114c2:	4602      	mov	r2, r0
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	4293      	cmp	r3, r2
 80114c8:	bf34      	ite	cc
 80114ca:	2301      	movcc	r3, #1
 80114cc:	2300      	movcs	r3, #0
 80114ce:	b2db      	uxtb	r3, r3
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d00d      	beq.n	80114f0 <_ZN6NrfSpi9sendFrameERKN7desenet5FrameE+0x58>
	{
		sendByte(frame[i]);
 80114d4:	68f9      	ldr	r1, [r7, #12]
 80114d6:	6838      	ldr	r0, [r7, #0]
 80114d8:	f7ff fe60 	bl	801119c <_ZNK7desenet5FrameixEj>
 80114dc:	4603      	mov	r3, r0
 80114de:	781b      	ldrb	r3, [r3, #0]
 80114e0:	4619      	mov	r1, r3
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f000 fa7a 	bl	80119dc <_ZN6NrfSpi8sendByteEh>
	for (size_t i = 0; i < frame.length(); i++)
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	3301      	adds	r3, #1
 80114ec:	60fb      	str	r3, [r7, #12]
 80114ee:	e7e5      	b.n	80114bc <_ZN6NrfSpi9sendFrameERKN7desenet5FrameE+0x24>
	}

	disableCS();
 80114f0:	6878      	ldr	r0, [r7, #4]
 80114f2:	f7ff feb3 	bl	801125c <_ZNK6NrfSpi9disableCSEv>
	return status;
 80114f6:	7afb      	ldrb	r3, [r7, #11]
}
 80114f8:	4618      	mov	r0, r3
 80114fa:	3710      	adds	r7, #16
 80114fc:	46bd      	mov	sp, r7
 80114fe:	bd80      	pop	{r7, pc}

08011500 <_ZN6NrfSpi8transmitEPKhRKj>:
/**
 * Sends the buffer to the destination node. Use TX_ADDR register to
 * set the address for the destination node.
 */
NrfSpi::tStatus NrfSpi::transmit(const uint8_t * const buffer, const std::size_t & length)
{
 8011500:	b580      	push	{r7, lr}
 8011502:	b086      	sub	sp, #24
 8011504:	af00      	add	r7, sp, #0
 8011506:	60f8      	str	r0, [r7, #12]
 8011508:	60b9      	str	r1, [r7, #8]
 801150a:	607a      	str	r2, [r7, #4]
	tStatus status = 0x00;
 801150c:	2300      	movs	r3, #0
 801150e:	74fb      	strb	r3, [r7, #19]

	enableCS();
 8011510:	68f8      	ldr	r0, [r7, #12]
 8011512:	f7ff fe90 	bl	8011236 <_ZNK6NrfSpi8enableCSEv>

	status = sendByte(W_TX_PAYLOAD);
 8011516:	21a0      	movs	r1, #160	; 0xa0
 8011518:	68f8      	ldr	r0, [r7, #12]
 801151a:	f000 fa5f 	bl	80119dc <_ZN6NrfSpi8sendByteEh>
 801151e:	4603      	mov	r3, r0
 8011520:	74fb      	strb	r3, [r7, #19]

	for (size_t i = 0; i < length; i++)
 8011522:	2300      	movs	r3, #0
 8011524:	617b      	str	r3, [r7, #20]
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	697a      	ldr	r2, [r7, #20]
 801152c:	429a      	cmp	r2, r3
 801152e:	d20b      	bcs.n	8011548 <_ZN6NrfSpi8transmitEPKhRKj+0x48>
	{
		sendByte(buffer[i]);
 8011530:	68ba      	ldr	r2, [r7, #8]
 8011532:	697b      	ldr	r3, [r7, #20]
 8011534:	4413      	add	r3, r2
 8011536:	781b      	ldrb	r3, [r3, #0]
 8011538:	4619      	mov	r1, r3
 801153a:	68f8      	ldr	r0, [r7, #12]
 801153c:	f000 fa4e 	bl	80119dc <_ZN6NrfSpi8sendByteEh>
	for (size_t i = 0; i < length; i++)
 8011540:	697b      	ldr	r3, [r7, #20]
 8011542:	3301      	adds	r3, #1
 8011544:	617b      	str	r3, [r7, #20]
 8011546:	e7ee      	b.n	8011526 <_ZN6NrfSpi8transmitEPKhRKj+0x26>
	}

	disableCS();
 8011548:	68f8      	ldr	r0, [r7, #12]
 801154a:	f7ff fe87 	bl	801125c <_ZNK6NrfSpi9disableCSEv>
	return status;
 801154e:	7cfb      	ldrb	r3, [r7, #19]
}
 8011550:	4618      	mov	r0, r3
 8011552:	3718      	adds	r7, #24
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}

08011558 <_ZN6NrfSpi9readFrameERN7desenet5FrameE>:

NrfSpi::tStatus NrfSpi::readFrame(Frame & frame)
{
 8011558:	b590      	push	{r4, r7, lr}
 801155a:	b085      	sub	sp, #20
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
 8011560:	6039      	str	r1, [r7, #0]
	tStatus status = 0x00;
 8011562:	2300      	movs	r3, #0
 8011564:	72fb      	strb	r3, [r7, #11]

	assert(frame.length());		// Please specify how many bytes you want to read
 8011566:	6838      	ldr	r0, [r7, #0]
 8011568:	f7f7 fb04 	bl	8008b74 <_ZNK7desenet5Frame6lengthEv>
 801156c:	4603      	mov	r3, r0
 801156e:	2b00      	cmp	r3, #0
 8011570:	d105      	bne.n	801157e <_ZN6NrfSpi9readFrameERN7desenet5FrameE+0x26>
 8011572:	4b1b      	ldr	r3, [pc, #108]	; (80115e0 <_ZN6NrfSpi9readFrameERN7desenet5FrameE+0x88>)
 8011574:	4a1b      	ldr	r2, [pc, #108]	; (80115e4 <_ZN6NrfSpi9readFrameERN7desenet5FrameE+0x8c>)
 8011576:	217e      	movs	r1, #126	; 0x7e
 8011578:	481b      	ldr	r0, [pc, #108]	; (80115e8 <_ZN6NrfSpi9readFrameERN7desenet5FrameE+0x90>)
 801157a:	f005 f85f 	bl	801663c <__assert_func>

	enableCS();
 801157e:	6878      	ldr	r0, [r7, #4]
 8011580:	f7ff fe59 	bl	8011236 <_ZNK6NrfSpi8enableCSEv>

	status = sendByte(R_RX_PAYLOAD);
 8011584:	2161      	movs	r1, #97	; 0x61
 8011586:	6878      	ldr	r0, [r7, #4]
 8011588:	f000 fa28 	bl	80119dc <_ZN6NrfSpi8sendByteEh>
 801158c:	4603      	mov	r3, r0
 801158e:	72fb      	strb	r3, [r7, #11]

	for (size_t i = 0; i < frame.length() - Frame::HEADER_SIZE; i++)
 8011590:	2300      	movs	r3, #0
 8011592:	60fb      	str	r3, [r7, #12]
 8011594:	6838      	ldr	r0, [r7, #0]
 8011596:	f7f7 faed 	bl	8008b74 <_ZNK7desenet5Frame6lengthEv>
 801159a:	4603      	mov	r3, r0
 801159c:	3b05      	subs	r3, #5
 801159e:	68fa      	ldr	r2, [r7, #12]
 80115a0:	429a      	cmp	r2, r3
 80115a2:	bf34      	ite	cc
 80115a4:	2301      	movcc	r3, #1
 80115a6:	2300      	movcs	r3, #0
 80115a8:	b2db      	uxtb	r3, r3
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d010      	beq.n	80115d0 <_ZN6NrfSpi9readFrameERN7desenet5FrameE+0x78>
	{
		frame[Frame::HEADER_SIZE + i] = sendByte(NOP);
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	3305      	adds	r3, #5
 80115b2:	4619      	mov	r1, r3
 80115b4:	6838      	ldr	r0, [r7, #0]
 80115b6:	f7ff fe00 	bl	80111ba <_ZN7desenet5FrameixEj>
 80115ba:	4604      	mov	r4, r0
 80115bc:	21ff      	movs	r1, #255	; 0xff
 80115be:	6878      	ldr	r0, [r7, #4]
 80115c0:	f000 fa0c 	bl	80119dc <_ZN6NrfSpi8sendByteEh>
 80115c4:	4603      	mov	r3, r0
 80115c6:	7023      	strb	r3, [r4, #0]
	for (size_t i = 0; i < frame.length() - Frame::HEADER_SIZE; i++)
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	3301      	adds	r3, #1
 80115cc:	60fb      	str	r3, [r7, #12]
 80115ce:	e7e1      	b.n	8011594 <_ZN6NrfSpi9readFrameERN7desenet5FrameE+0x3c>
	}

	disableCS();
 80115d0:	6878      	ldr	r0, [r7, #4]
 80115d2:	f7ff fe43 	bl	801125c <_ZNK6NrfSpi9disableCSEv>
	return status;
 80115d6:	7afb      	ldrb	r3, [r7, #11]
}
 80115d8:	4618      	mov	r0, r3
 80115da:	3714      	adds	r7, #20
 80115dc:	46bd      	mov	sp, r7
 80115de:	bd90      	pop	{r4, r7, pc}
 80115e0:	0801a3ac 	.word	0x0801a3ac
 80115e4:	0801a3bc 	.word	0x0801a3bc
 80115e8:	0801a2a4 	.word	0x0801a2a4

080115ec <_ZN6NrfSpi12readRegisterENS_12eNrfRegisterE>:

NrfSpi::tRegister NrfSpi::readRegister(eNrfRegister reg)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b084      	sub	sp, #16
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
 80115f4:	460b      	mov	r3, r1
 80115f6:	70fb      	strb	r3, [r7, #3]
	tRegister value;

	// All but not these registers are allowed
	assert(!(reg == TX_ADDR || (reg >= RX_ADDR_P0 && reg <= RX_ADDR_P5)));
 80115f8:	78fb      	ldrb	r3, [r7, #3]
 80115fa:	2b10      	cmp	r3, #16
 80115fc:	d005      	beq.n	801160a <_ZN6NrfSpi12readRegisterENS_12eNrfRegisterE+0x1e>
 80115fe:	78fb      	ldrb	r3, [r7, #3]
 8011600:	2b09      	cmp	r3, #9
 8011602:	d908      	bls.n	8011616 <_ZN6NrfSpi12readRegisterENS_12eNrfRegisterE+0x2a>
 8011604:	78fb      	ldrb	r3, [r7, #3]
 8011606:	2b0f      	cmp	r3, #15
 8011608:	d805      	bhi.n	8011616 <_ZN6NrfSpi12readRegisterENS_12eNrfRegisterE+0x2a>
 801160a:	4b0e      	ldr	r3, [pc, #56]	; (8011644 <_ZN6NrfSpi12readRegisterENS_12eNrfRegisterE+0x58>)
 801160c:	4a0e      	ldr	r2, [pc, #56]	; (8011648 <_ZN6NrfSpi12readRegisterENS_12eNrfRegisterE+0x5c>)
 801160e:	2192      	movs	r1, #146	; 0x92
 8011610:	480e      	ldr	r0, [pc, #56]	; (801164c <_ZN6NrfSpi12readRegisterENS_12eNrfRegisterE+0x60>)
 8011612:	f005 f813 	bl	801663c <__assert_func>
 8011616:	bf00      	nop

	enableCS();
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	f7ff fe0c 	bl	8011236 <_ZNK6NrfSpi8enableCSEv>

	sendByte((R_REGISTER << 5) | reg);
 801161e:	78fb      	ldrb	r3, [r7, #3]
 8011620:	4619      	mov	r1, r3
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	f000 f9da 	bl	80119dc <_ZN6NrfSpi8sendByteEh>
	value = sendByte(NOP);
 8011628:	21ff      	movs	r1, #255	; 0xff
 801162a:	6878      	ldr	r0, [r7, #4]
 801162c:	f000 f9d6 	bl	80119dc <_ZN6NrfSpi8sendByteEh>
 8011630:	4603      	mov	r3, r0
 8011632:	73fb      	strb	r3, [r7, #15]

	disableCS();
 8011634:	6878      	ldr	r0, [r7, #4]
 8011636:	f7ff fe11 	bl	801125c <_ZNK6NrfSpi9disableCSEv>
	return value;
 801163a:	7bfb      	ldrb	r3, [r7, #15]
}
 801163c:	4618      	mov	r0, r3
 801163e:	3710      	adds	r7, #16
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}
 8011644:	0801a3f0 	.word	0x0801a3f0
 8011648:	0801a430 	.word	0x0801a430
 801164c:	0801a2a4 	.word	0x0801a2a4

08011650 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterEh>:
	disableCS();
	return status;
}

NrfSpi::tStatus NrfSpi::writeRegister(eNrfRegister reg, tRegister value)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b084      	sub	sp, #16
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
 8011658:	460b      	mov	r3, r1
 801165a:	70fb      	strb	r3, [r7, #3]
 801165c:	4613      	mov	r3, r2
 801165e:	70bb      	strb	r3, [r7, #2]
	tStatus status = 0x00;
 8011660:	2300      	movs	r3, #0
 8011662:	73fb      	strb	r3, [r7, #15]

	// All but not these registers are allowed
	assert(!(reg == TX_ADDR || (reg >= RX_ADDR_P0 && reg <= RX_ADDR_P5)));
 8011664:	78fb      	ldrb	r3, [r7, #3]
 8011666:	2b10      	cmp	r3, #16
 8011668:	d005      	beq.n	8011676 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterEh+0x26>
 801166a:	78fb      	ldrb	r3, [r7, #3]
 801166c:	2b09      	cmp	r3, #9
 801166e:	d908      	bls.n	8011682 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterEh+0x32>
 8011670:	78fb      	ldrb	r3, [r7, #3]
 8011672:	2b0f      	cmp	r3, #15
 8011674:	d805      	bhi.n	8011682 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterEh+0x32>
 8011676:	4b10      	ldr	r3, [pc, #64]	; (80116b8 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterEh+0x68>)
 8011678:	4a10      	ldr	r2, [pc, #64]	; (80116bc <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterEh+0x6c>)
 801167a:	21b5      	movs	r1, #181	; 0xb5
 801167c:	4810      	ldr	r0, [pc, #64]	; (80116c0 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterEh+0x70>)
 801167e:	f004 ffdd 	bl	801663c <__assert_func>
 8011682:	bf00      	nop

	enableCS();
 8011684:	6878      	ldr	r0, [r7, #4]
 8011686:	f7ff fdd6 	bl	8011236 <_ZNK6NrfSpi8enableCSEv>

	status = sendByte((W_REGISTER << 5) | reg);
 801168a:	78fb      	ldrb	r3, [r7, #3]
 801168c:	f043 0320 	orr.w	r3, r3, #32
 8011690:	b2db      	uxtb	r3, r3
 8011692:	4619      	mov	r1, r3
 8011694:	6878      	ldr	r0, [r7, #4]
 8011696:	f000 f9a1 	bl	80119dc <_ZN6NrfSpi8sendByteEh>
 801169a:	4603      	mov	r3, r0
 801169c:	73fb      	strb	r3, [r7, #15]
	sendByte(value);
 801169e:	78bb      	ldrb	r3, [r7, #2]
 80116a0:	4619      	mov	r1, r3
 80116a2:	6878      	ldr	r0, [r7, #4]
 80116a4:	f000 f99a 	bl	80119dc <_ZN6NrfSpi8sendByteEh>

	disableCS();
 80116a8:	6878      	ldr	r0, [r7, #4]
 80116aa:	f7ff fdd7 	bl	801125c <_ZNK6NrfSpi9disableCSEv>
	return status;
 80116ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	3710      	adds	r7, #16
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}
 80116b8:	0801a3f0 	.word	0x0801a3f0
 80116bc:	0801a4fc 	.word	0x0801a4fc
 80116c0:	0801a2a4 	.word	0x0801a2a4

080116c4 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterERKN3phy7AddressILj4EEE>:

NrfSpi::tStatus NrfSpi::writeRegister(eNrfRegister reg, const tAddress & address)
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b086      	sub	sp, #24
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	60f8      	str	r0, [r7, #12]
 80116cc:	460b      	mov	r3, r1
 80116ce:	607a      	str	r2, [r7, #4]
 80116d0:	72fb      	strb	r3, [r7, #11]
	tStatus status = 0x00;
 80116d2:	2300      	movs	r3, #0
 80116d4:	74fb      	strb	r3, [r7, #19]

	// Only these registers are allowed
	assert(reg == TX_ADDR || (reg >= RX_ADDR_P0 && reg <= RX_ADDR_P5));
 80116d6:	7afb      	ldrb	r3, [r7, #11]
 80116d8:	2b10      	cmp	r3, #16
 80116da:	d00b      	beq.n	80116f4 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterERKN3phy7AddressILj4EEE+0x30>
 80116dc:	7afb      	ldrb	r3, [r7, #11]
 80116de:	2b09      	cmp	r3, #9
 80116e0:	d902      	bls.n	80116e8 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterERKN3phy7AddressILj4EEE+0x24>
 80116e2:	7afb      	ldrb	r3, [r7, #11]
 80116e4:	2b0f      	cmp	r3, #15
 80116e6:	d905      	bls.n	80116f4 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterERKN3phy7AddressILj4EEE+0x30>
 80116e8:	4b1a      	ldr	r3, [pc, #104]	; (8011754 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterERKN3phy7AddressILj4EEE+0x90>)
 80116ea:	4a1b      	ldr	r2, [pc, #108]	; (8011758 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterERKN3phy7AddressILj4EEE+0x94>)
 80116ec:	21c5      	movs	r1, #197	; 0xc5
 80116ee:	481b      	ldr	r0, [pc, #108]	; (801175c <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterERKN3phy7AddressILj4EEE+0x98>)
 80116f0:	f004 ffa4 	bl	801663c <__assert_func>

	enableCS();
 80116f4:	68f8      	ldr	r0, [r7, #12]
 80116f6:	f7ff fd9e 	bl	8011236 <_ZNK6NrfSpi8enableCSEv>

	status = sendByte((W_REGISTER << 5) | reg);
 80116fa:	7afb      	ldrb	r3, [r7, #11]
 80116fc:	f043 0320 	orr.w	r3, r3, #32
 8011700:	b2db      	uxtb	r3, r3
 8011702:	4619      	mov	r1, r3
 8011704:	68f8      	ldr	r0, [r7, #12]
 8011706:	f000 f969 	bl	80119dc <_ZN6NrfSpi8sendByteEh>
 801170a:	4603      	mov	r3, r0
 801170c:	74fb      	strb	r3, [r7, #19]
	for (size_t i = 0; i < address.addressSize(); i++)
 801170e:	2300      	movs	r3, #0
 8011710:	617b      	str	r3, [r7, #20]
 8011712:	f7f8 fa8f 	bl	8009c34 <_ZN3phy7AddressILj4EE11addressSizeEv>
 8011716:	4602      	mov	r2, r0
 8011718:	697b      	ldr	r3, [r7, #20]
 801171a:	4293      	cmp	r3, r2
 801171c:	bf34      	ite	cc
 801171e:	2301      	movcc	r3, #1
 8011720:	2300      	movcs	r3, #0
 8011722:	b2db      	uxtb	r3, r3
 8011724:	2b00      	cmp	r3, #0
 8011726:	d00d      	beq.n	8011744 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterERKN3phy7AddressILj4EEE+0x80>
	{
		sendByte(address[i]);
 8011728:	6979      	ldr	r1, [r7, #20]
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	f000 f96a 	bl	8011a04 <_ZNK3phy7AddressILj4EEixEj>
 8011730:	4603      	mov	r3, r0
 8011732:	781b      	ldrb	r3, [r3, #0]
 8011734:	4619      	mov	r1, r3
 8011736:	68f8      	ldr	r0, [r7, #12]
 8011738:	f000 f950 	bl	80119dc <_ZN6NrfSpi8sendByteEh>
	for (size_t i = 0; i < address.addressSize(); i++)
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	3301      	adds	r3, #1
 8011740:	617b      	str	r3, [r7, #20]
 8011742:	e7e6      	b.n	8011712 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterERKN3phy7AddressILj4EEE+0x4e>
	}

	disableCS();
 8011744:	68f8      	ldr	r0, [r7, #12]
 8011746:	f7ff fd89 	bl	801125c <_ZNK6NrfSpi9disableCSEv>
	return status;
 801174a:	7cfb      	ldrb	r3, [r7, #19]
}
 801174c:	4618      	mov	r0, r3
 801174e:	3718      	adds	r7, #24
 8011750:	46bd      	mov	sp, r7
 8011752:	bd80      	pop	{r7, pc}
 8011754:	0801a470 	.word	0x0801a470
 8011758:	0801a54c 	.word	0x0801a54c
 801175c:	0801a2a4 	.word	0x0801a2a4

08011760 <_ZN6NrfSpi16activateFeaturesEb>:

bool NrfSpi::activateFeatures(bool enable)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b082      	sub	sp, #8
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
 8011768:	460b      	mov	r3, r1
 801176a:	70fb      	strb	r3, [r7, #3]
	// Check if not already in this state
	if (_bNrfFeaturesEnabled != enable)
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	7b1b      	ldrb	r3, [r3, #12]
 8011770:	78fa      	ldrb	r2, [r7, #3]
 8011772:	429a      	cmp	r2, r3
 8011774:	d008      	beq.n	8011788 <_ZN6NrfSpi16activateFeaturesEb+0x28>
	{
		sendCmd(NrfSpi::ACTIVATE);
 8011776:	2150      	movs	r1, #80	; 0x50
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f7ff fdf1 	bl	8011360 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE>
		_bNrfFeaturesEnabled = enable;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	78fa      	ldrb	r2, [r7, #3]
 8011782:	731a      	strb	r2, [r3, #12]
		return true;
 8011784:	2301      	movs	r3, #1
 8011786:	e000      	b.n	801178a <_ZN6NrfSpi16activateFeaturesEb+0x2a>
	}
	return false;
 8011788:	2300      	movs	r3, #0
}
 801178a:	4618      	mov	r0, r3
 801178c:	3708      	adds	r7, #8
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}
	...

08011794 <_ZN6NrfSpi20getRXFramePipeNumberEv>:

unsigned char NrfSpi::getRXFramePipeNumber()
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b084      	sub	sp, #16
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
	unsigned char pipeNumber;
	tStatus status = NrfSpi::status();
 801179c:	6878      	ldr	r0, [r7, #4]
 801179e:	f7ff fdd1 	bl	8011344 <_ZN6NrfSpi6statusEv>
 80117a2:	4603      	mov	r3, r0
 80117a4:	73fb      	strb	r3, [r7, #15]

	// Extract RX_P_NO field
	pipeNumber = ((status >> 1) & 0x07);
 80117a6:	7bfb      	ldrb	r3, [r7, #15]
 80117a8:	105b      	asrs	r3, r3, #1
 80117aa:	b2db      	uxtb	r3, r3
 80117ac:	f003 0307 	and.w	r3, r3, #7
 80117b0:	73bb      	strb	r3, [r7, #14]

	if (!(pipeNumber == 0x07 || pipeNumber == 0x06))
 80117b2:	7bbb      	ldrb	r3, [r7, #14]
 80117b4:	2b07      	cmp	r3, #7
 80117b6:	d004      	beq.n	80117c2 <_ZN6NrfSpi20getRXFramePipeNumberEv+0x2e>
 80117b8:	7bbb      	ldrb	r3, [r7, #14]
 80117ba:	2b06      	cmp	r3, #6
 80117bc:	d001      	beq.n	80117c2 <_ZN6NrfSpi20getRXFramePipeNumberEv+0x2e>
	{
		return pipeNumber;
 80117be:	7bbb      	ldrb	r3, [r7, #14]
 80117c0:	e005      	b.n	80117ce <_ZN6NrfSpi20getRXFramePipeNumberEv+0x3a>
	}
	assert(false);	// Call this method only when you are sure there is a packet available
 80117c2:	4b05      	ldr	r3, [pc, #20]	; (80117d8 <_ZN6NrfSpi20getRXFramePipeNumberEv+0x44>)
 80117c4:	4a05      	ldr	r2, [pc, #20]	; (80117dc <_ZN6NrfSpi20getRXFramePipeNumberEv+0x48>)
 80117c6:	21eb      	movs	r1, #235	; 0xeb
 80117c8:	4805      	ldr	r0, [pc, #20]	; (80117e0 <_ZN6NrfSpi20getRXFramePipeNumberEv+0x4c>)
 80117ca:	f004 ff37 	bl	801663c <__assert_func>
	return 0xFF;
}
 80117ce:	4618      	mov	r0, r3
 80117d0:	3710      	adds	r7, #16
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bd80      	pop	{r7, pc}
 80117d6:	bf00      	nop
 80117d8:	0801a59c 	.word	0x0801a59c
 80117dc:	0801a5a4 	.word	0x0801a5a4
 80117e0:	0801a2a4 	.word	0x0801a2a4

080117e4 <_ZN6NrfSpi22getRXFramePaylpoadSizeEh>:

size_t NrfSpi::getRXFramePaylpoadSize(uint8_t pipeNumber)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b082      	sub	sp, #8
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
 80117ec:	460b      	mov	r3, r1
 80117ee:	70fb      	strb	r3, [r7, #3]
	assert(pipeNumber < 6);
 80117f0:	78fb      	ldrb	r3, [r7, #3]
 80117f2:	2b05      	cmp	r3, #5
 80117f4:	d905      	bls.n	8011802 <_ZN6NrfSpi22getRXFramePaylpoadSizeEh+0x1e>
 80117f6:	4b10      	ldr	r3, [pc, #64]	; (8011838 <_ZN6NrfSpi22getRXFramePaylpoadSizeEh+0x54>)
 80117f8:	4a10      	ldr	r2, [pc, #64]	; (801183c <_ZN6NrfSpi22getRXFramePaylpoadSizeEh+0x58>)
 80117fa:	21f1      	movs	r1, #241	; 0xf1
 80117fc:	4810      	ldr	r0, [pc, #64]	; (8011840 <_ZN6NrfSpi22getRXFramePaylpoadSizeEh+0x5c>)
 80117fe:	f004 ff1d 	bl	801663c <__assert_func>

	if (!featuresEnabled())
 8011802:	6878      	ldr	r0, [r7, #4]
 8011804:	f7ff fcf4 	bl	80111f0 <_ZNK6NrfSpi15featuresEnabledEv>
 8011808:	4603      	mov	r3, r0
 801180a:	f083 0301 	eor.w	r3, r3, #1
 801180e:	b2db      	uxtb	r3, r3
 8011810:	2b00      	cmp	r3, #0
 8011812:	d008      	beq.n	8011826 <_ZN6NrfSpi22getRXFramePaylpoadSizeEh+0x42>
	{
		return readRegister((NrfSpi::eNrfRegister)(RX_PW_P0 + pipeNumber));
 8011814:	78fb      	ldrb	r3, [r7, #3]
 8011816:	3311      	adds	r3, #17
 8011818:	b2db      	uxtb	r3, r3
 801181a:	4619      	mov	r1, r3
 801181c:	6878      	ldr	r0, [r7, #4]
 801181e:	f7ff fee5 	bl	80115ec <_ZN6NrfSpi12readRegisterENS_12eNrfRegisterE>
 8011822:	4603      	mov	r3, r0
 8011824:	e004      	b.n	8011830 <_ZN6NrfSpi22getRXFramePaylpoadSizeEh+0x4c>
	}
	else
	{
		// DPL. Read value of next frame in RX FIFO by reading the R_RX_PL_WID register
		return sendCmd(R_RX_PL_WID);
 8011826:	2160      	movs	r1, #96	; 0x60
 8011828:	6878      	ldr	r0, [r7, #4]
 801182a:	f7ff fd99 	bl	8011360 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE>
 801182e:	4603      	mov	r3, r0
	}
}
 8011830:	4618      	mov	r0, r3
 8011832:	3708      	adds	r7, #8
 8011834:	46bd      	mov	sp, r7
 8011836:	bd80      	pop	{r7, pc}
 8011838:	0801a5d4 	.word	0x0801a5d4
 801183c:	0801a5e4 	.word	0x0801a5e4
 8011840:	0801a2a4 	.word	0x0801a2a4

08011844 <_ZN6NrfSpi14enableDataPipeEhb>:

/**
 * Upon startup pipes 0 and 1 are activated by default.
 */
void NrfSpi::enableDataPipe(uint8_t pipeMask, bool enable)
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b084      	sub	sp, #16
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
 801184c:	460b      	mov	r3, r1
 801184e:	70fb      	strb	r3, [r7, #3]
 8011850:	4613      	mov	r3, r2
 8011852:	70bb      	strb	r3, [r7, #2]
	tRegister registerValue = readRegister(EN_RXADDR);
 8011854:	2102      	movs	r1, #2
 8011856:	6878      	ldr	r0, [r7, #4]
 8011858:	f7ff fec8 	bl	80115ec <_ZN6NrfSpi12readRegisterENS_12eNrfRegisterE>
 801185c:	4603      	mov	r3, r0
 801185e:	73fb      	strb	r3, [r7, #15]

	assert((pipeMask & 0x3F) == pipeMask);		// Bits 6 and 7 shouldn't be touched
 8011860:	78fb      	ldrb	r3, [r7, #3]
 8011862:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011866:	78fb      	ldrb	r3, [r7, #3]
 8011868:	429a      	cmp	r2, r3
 801186a:	d006      	beq.n	801187a <_ZN6NrfSpi14enableDataPipeEhb+0x36>
 801186c:	4b10      	ldr	r3, [pc, #64]	; (80118b0 <_ZN6NrfSpi14enableDataPipeEhb+0x6c>)
 801186e:	4a11      	ldr	r2, [pc, #68]	; (80118b4 <_ZN6NrfSpi14enableDataPipeEhb+0x70>)
 8011870:	f240 1105 	movw	r1, #261	; 0x105
 8011874:	4810      	ldr	r0, [pc, #64]	; (80118b8 <_ZN6NrfSpi14enableDataPipeEhb+0x74>)
 8011876:	f004 fee1 	bl	801663c <__assert_func>

	if (enable)
 801187a:	78bb      	ldrb	r3, [r7, #2]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d004      	beq.n	801188a <_ZN6NrfSpi14enableDataPipeEhb+0x46>
	{
		registerValue |= pipeMask;
 8011880:	7bfa      	ldrb	r2, [r7, #15]
 8011882:	78fb      	ldrb	r3, [r7, #3]
 8011884:	4313      	orrs	r3, r2
 8011886:	73fb      	strb	r3, [r7, #15]
 8011888:	e008      	b.n	801189c <_ZN6NrfSpi14enableDataPipeEhb+0x58>
	}
	else
	{
		registerValue &= ~pipeMask;
 801188a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801188e:	43db      	mvns	r3, r3
 8011890:	b25a      	sxtb	r2, r3
 8011892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011896:	4013      	ands	r3, r2
 8011898:	b25b      	sxtb	r3, r3
 801189a:	73fb      	strb	r3, [r7, #15]
	}

	writeRegister(EN_RXADDR, registerValue);
 801189c:	7bfb      	ldrb	r3, [r7, #15]
 801189e:	461a      	mov	r2, r3
 80118a0:	2102      	movs	r1, #2
 80118a2:	6878      	ldr	r0, [r7, #4]
 80118a4:	f7ff fed4 	bl	8011650 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterEh>
}
 80118a8:	bf00      	nop
 80118aa:	3710      	adds	r7, #16
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}
 80118b0:	0801a614 	.word	0x0801a614
 80118b4:	0801a634 	.word	0x0801a634
 80118b8:	0801a2a4 	.word	0x0801a2a4

080118bc <_ZN6NrfSpi32enableAutoAcknowledgementForPipeEhb>:
/**
 * Upon startup auto-acknowledgment for pipe 0 and pipe 1 are enabled by
 * default.
 */
void NrfSpi::enableAutoAcknowledgementForPipe(uint8_t pipeMask, bool enable)
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b084      	sub	sp, #16
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
 80118c4:	460b      	mov	r3, r1
 80118c6:	70fb      	strb	r3, [r7, #3]
 80118c8:	4613      	mov	r3, r2
 80118ca:	70bb      	strb	r3, [r7, #2]
	tRegister registerValue = readRegister(EN_AA);
 80118cc:	2101      	movs	r1, #1
 80118ce:	6878      	ldr	r0, [r7, #4]
 80118d0:	f7ff fe8c 	bl	80115ec <_ZN6NrfSpi12readRegisterENS_12eNrfRegisterE>
 80118d4:	4603      	mov	r3, r0
 80118d6:	73fb      	strb	r3, [r7, #15]

	assert((pipeMask & 0x3F) == pipeMask);		// Bits 6 and 7 shouldn't be touched
 80118d8:	78fb      	ldrb	r3, [r7, #3]
 80118da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80118de:	78fb      	ldrb	r3, [r7, #3]
 80118e0:	429a      	cmp	r2, r3
 80118e2:	d006      	beq.n	80118f2 <_ZN6NrfSpi32enableAutoAcknowledgementForPipeEhb+0x36>
 80118e4:	4b10      	ldr	r3, [pc, #64]	; (8011928 <_ZN6NrfSpi32enableAutoAcknowledgementForPipeEhb+0x6c>)
 80118e6:	4a11      	ldr	r2, [pc, #68]	; (801192c <_ZN6NrfSpi32enableAutoAcknowledgementForPipeEhb+0x70>)
 80118e8:	f240 111b 	movw	r1, #283	; 0x11b
 80118ec:	4810      	ldr	r0, [pc, #64]	; (8011930 <_ZN6NrfSpi32enableAutoAcknowledgementForPipeEhb+0x74>)
 80118ee:	f004 fea5 	bl	801663c <__assert_func>

	if (enable)
 80118f2:	78bb      	ldrb	r3, [r7, #2]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d004      	beq.n	8011902 <_ZN6NrfSpi32enableAutoAcknowledgementForPipeEhb+0x46>
	{
		registerValue |= pipeMask;
 80118f8:	7bfa      	ldrb	r2, [r7, #15]
 80118fa:	78fb      	ldrb	r3, [r7, #3]
 80118fc:	4313      	orrs	r3, r2
 80118fe:	73fb      	strb	r3, [r7, #15]
 8011900:	e008      	b.n	8011914 <_ZN6NrfSpi32enableAutoAcknowledgementForPipeEhb+0x58>
	}
	else
	{
		registerValue &= ~pipeMask;
 8011902:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011906:	43db      	mvns	r3, r3
 8011908:	b25a      	sxtb	r2, r3
 801190a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801190e:	4013      	ands	r3, r2
 8011910:	b25b      	sxtb	r3, r3
 8011912:	73fb      	strb	r3, [r7, #15]
	}

	writeRegister(EN_AA, registerValue);
 8011914:	7bfb      	ldrb	r3, [r7, #15]
 8011916:	461a      	mov	r2, r3
 8011918:	2101      	movs	r1, #1
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f7ff fe98 	bl	8011650 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterEh>
}
 8011920:	bf00      	nop
 8011922:	3710      	adds	r7, #16
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}
 8011928:	0801a614 	.word	0x0801a614
 801192c:	0801a660 	.word	0x0801a660
 8011930:	0801a2a4 	.word	0x0801a2a4

08011934 <_ZN6NrfSpi29enableDynamicTxAcknowledgmentEb>:
 * Enables feature that gives ability to transmit frames without receiving an acknowledgment.
 * After setting this feature you can send frames over the W_TX_PAYLOAD_NOACK register. This
 * will automatically set the NO_ACK bit in the frame being send.
 */
void NrfSpi::enableDynamicTxAcknowledgment(bool enable)
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b084      	sub	sp, #16
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
 801193c:	460b      	mov	r3, r1
 801193e:	70fb      	strb	r3, [r7, #3]
	NrfSpi::tRegister reg;

	if (!featuresEnabled())
 8011940:	6878      	ldr	r0, [r7, #4]
 8011942:	f7ff fc55 	bl	80111f0 <_ZNK6NrfSpi15featuresEnabledEv>
 8011946:	4603      	mov	r3, r0
 8011948:	f083 0301 	eor.w	r3, r3, #1
 801194c:	b2db      	uxtb	r3, r3
 801194e:	2b00      	cmp	r3, #0
 8011950:	d003      	beq.n	801195a <_ZN6NrfSpi29enableDynamicTxAcknowledgmentEb+0x26>
	{
		activateFeatures(true);
 8011952:	2101      	movs	r1, #1
 8011954:	6878      	ldr	r0, [r7, #4]
 8011956:	f7ff ff03 	bl	8011760 <_ZN6NrfSpi16activateFeaturesEb>
	}

	reg = readRegister(NrfSpi::FEATURE);
 801195a:	211d      	movs	r1, #29
 801195c:	6878      	ldr	r0, [r7, #4]
 801195e:	f7ff fe45 	bl	80115ec <_ZN6NrfSpi12readRegisterENS_12eNrfRegisterE>
 8011962:	4603      	mov	r3, r0
 8011964:	73fb      	strb	r3, [r7, #15]

	if (enable)
 8011966:	78fb      	ldrb	r3, [r7, #3]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d004      	beq.n	8011976 <_ZN6NrfSpi29enableDynamicTxAcknowledgmentEb+0x42>
	{
		reg |= FEATURE_REG_EN_DYN_ACK;
 801196c:	7bfb      	ldrb	r3, [r7, #15]
 801196e:	f043 0301 	orr.w	r3, r3, #1
 8011972:	73fb      	strb	r3, [r7, #15]
 8011974:	e003      	b.n	801197e <_ZN6NrfSpi29enableDynamicTxAcknowledgmentEb+0x4a>
	}
	else
	{
		reg &= ~FEATURE_REG_EN_DYN_ACK;
 8011976:	7bfb      	ldrb	r3, [r7, #15]
 8011978:	f023 0301 	bic.w	r3, r3, #1
 801197c:	73fb      	strb	r3, [r7, #15]
	}

	writeRegister(NrfSpi::FEATURE, reg);
 801197e:	7bfb      	ldrb	r3, [r7, #15]
 8011980:	461a      	mov	r2, r3
 8011982:	211d      	movs	r1, #29
 8011984:	6878      	ldr	r0, [r7, #4]
 8011986:	f7ff fe63 	bl	8011650 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterEh>
}
 801198a:	bf00      	nop
 801198c:	3710      	adds	r7, #16
 801198e:	46bd      	mov	sp, r7
 8011990:	bd80      	pop	{r7, pc}

08011992 <_ZN6NrfSpi11rxFifoEmptyEv>:

bool NrfSpi::rxFifoEmpty()
{
 8011992:	b580      	push	{r7, lr}
 8011994:	b084      	sub	sp, #16
 8011996:	af00      	add	r7, sp, #0
 8011998:	6078      	str	r0, [r7, #4]
	const NrfSpi::tRegister reg = readRegister(NrfSpi::FIFO_STATUS);
 801199a:	2117      	movs	r1, #23
 801199c:	6878      	ldr	r0, [r7, #4]
 801199e:	f7ff fe25 	bl	80115ec <_ZN6NrfSpi12readRegisterENS_12eNrfRegisterE>
 80119a2:	4603      	mov	r3, r0
 80119a4:	73fb      	strb	r3, [r7, #15]

	return ((reg & FIFO_STATUS_RX_EMPTY) == FIFO_STATUS_RX_EMPTY) ? true : false;
 80119a6:	7bfb      	ldrb	r3, [r7, #15]
 80119a8:	f003 0301 	and.w	r3, r3, #1
 80119ac:	b2db      	uxtb	r3, r3
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	3710      	adds	r7, #16
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}

080119b6 <_ZN6NrfSpi10rxFifoFullEv>:

	return ((reg & FIFO_STATUS_TX_EMPTY) == FIFO_STATUS_TX_EMPTY) ? true : false;
}

bool NrfSpi::rxFifoFull()
{
 80119b6:	b580      	push	{r7, lr}
 80119b8:	b084      	sub	sp, #16
 80119ba:	af00      	add	r7, sp, #0
 80119bc:	6078      	str	r0, [r7, #4]
	const NrfSpi::tRegister reg = readRegister(NrfSpi::FIFO_STATUS);
 80119be:	2117      	movs	r1, #23
 80119c0:	6878      	ldr	r0, [r7, #4]
 80119c2:	f7ff fe13 	bl	80115ec <_ZN6NrfSpi12readRegisterENS_12eNrfRegisterE>
 80119c6:	4603      	mov	r3, r0
 80119c8:	73fb      	strb	r3, [r7, #15]

	return ((reg & FIFO_STATUS_RX_FULL) == FIFO_STATUS_RX_FULL) ? true : false;
 80119ca:	7bfb      	ldrb	r3, [r7, #15]
 80119cc:	105b      	asrs	r3, r3, #1
 80119ce:	f003 0301 	and.w	r3, r3, #1
 80119d2:	b2db      	uxtb	r3, r3
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	3710      	adds	r7, #16
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}

080119dc <_ZN6NrfSpi8sendByteEh>:
{
	return readRegister(NrfSpi::RPD);
}

NrfSpi::tStatus NrfSpi::sendByte(unsigned char data)
{
 80119dc:	b580      	push	{r7, lr}
 80119de:	b082      	sub	sp, #8
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
 80119e4:	460b      	mov	r3, r1
 80119e6:	70fb      	strb	r3, [r7, #3]
	return spi().sendByte(data);
 80119e8:	6878      	ldr	r0, [r7, #4]
 80119ea:	f7ff fc46 	bl	801127a <_ZN6NrfSpi3spiEv>
 80119ee:	4602      	mov	r2, r0
 80119f0:	78fb      	ldrb	r3, [r7, #3]
 80119f2:	4619      	mov	r1, r3
 80119f4:	4610      	mov	r0, r2
 80119f6:	f002 f865 	bl	8013ac4 <_ZN3Spi8sendByteEh>
 80119fa:	4603      	mov	r3, r0
}
 80119fc:	4618      	mov	r0, r3
 80119fe:	3708      	adds	r7, #8
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bd80      	pop	{r7, pc}

08011a04 <_ZNK3phy7AddressILj4EEixEj>:
	const uint8_t & operator[]( size_t index ) const
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b084      	sub	sp, #16
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
 8011a0c:	6039      	str	r1, [r7, #0]
		assert( index < size );
 8011a0e:	683b      	ldr	r3, [r7, #0]
 8011a10:	2b03      	cmp	r3, #3
 8011a12:	d905      	bls.n	8011a20 <_ZNK3phy7AddressILj4EEixEj+0x1c>
 8011a14:	4b0b      	ldr	r3, [pc, #44]	; (8011a44 <_ZNK3phy7AddressILj4EEixEj+0x40>)
 8011a16:	4a0c      	ldr	r2, [pc, #48]	; (8011a48 <_ZNK3phy7AddressILj4EEixEj+0x44>)
 8011a18:	2168      	movs	r1, #104	; 0x68
 8011a1a:	480c      	ldr	r0, [pc, #48]	; (8011a4c <_ZNK3phy7AddressILj4EEixEj+0x48>)
 8011a1c:	f004 fe0e 	bl	801663c <__assert_func>
		return _address[std::min( index , size - 1 )];
 8011a20:	2303      	movs	r3, #3
 8011a22:	60fb      	str	r3, [r7, #12]
 8011a24:	f107 020c 	add.w	r2, r7, #12
 8011a28:	463b      	mov	r3, r7
 8011a2a:	4611      	mov	r1, r2
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f7f9 f85e 	bl	800aaee <_ZSt3minIjERKT_S2_S2_>
 8011a32:	4603      	mov	r3, r0
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	687a      	ldr	r2, [r7, #4]
 8011a38:	4413      	add	r3, r2
 8011a3a:	3304      	adds	r3, #4
	}
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	3710      	adds	r7, #16
 8011a40:	46bd      	mov	sp, r7
 8011a42:	bd80      	pop	{r7, pc}
 8011a44:	0801a78c 	.word	0x0801a78c
 8011a48:	0801a81c 	.word	0x0801a81c
 8011a4c:	0801a714 	.word	0x0801a714

08011a50 <_Z41__static_initialization_and_destruction_0ii>:
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b088      	sub	sp, #32
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
 8011a58:	6039      	str	r1, [r7, #0]
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2b01      	cmp	r3, #1
 8011a5e:	d122      	bne.n	8011aa6 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a66:	4293      	cmp	r3, r2
 8011a68:	d11d      	bne.n	8011aa6 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8011a6a:	4b18      	ldr	r3, [pc, #96]	; (8011acc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	613b      	str	r3, [r7, #16]
 8011a70:	f107 0310 	add.w	r3, r7, #16
 8011a74:	60bb      	str	r3, [r7, #8]
 8011a76:	2304      	movs	r3, #4
 8011a78:	60fb      	str	r3, [r7, #12]
 8011a7a:	f107 0308 	add.w	r3, r7, #8
 8011a7e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8011a82:	4813      	ldr	r0, [pc, #76]	; (8011ad0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8011a84:	f7f5 f91e 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
  static const desenet::Address SENSOR_ADDRESS({0xC7, 0xC7, 0xC7, 0xC7});	///< @brief Sensor's reception address.
 8011a88:	4b12      	ldr	r3, [pc, #72]	; (8011ad4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	61fb      	str	r3, [r7, #28]
 8011a8e:	f107 031c 	add.w	r3, r7, #28
 8011a92:	617b      	str	r3, [r7, #20]
 8011a94:	2304      	movs	r3, #4
 8011a96:	61bb      	str	r3, [r7, #24]
 8011a98:	f107 0314 	add.w	r3, r7, #20
 8011a9c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8011aa0:	480d      	ldr	r0, [pc, #52]	; (8011ad8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8011aa2:	f7f5 f90f 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d10a      	bne.n	8011ac2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ab2:	4293      	cmp	r3, r2
 8011ab4:	d105      	bne.n	8011ac2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8011ab6:	4808      	ldr	r0, [pc, #32]	; (8011ad8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8011ab8:	f7f5 fa40 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 8011abc:	4804      	ldr	r0, [pc, #16]	; (8011ad0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8011abe:	f7f5 fa3d 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
 8011ac2:	bf00      	nop
 8011ac4:	3720      	adds	r7, #32
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	bd80      	pop	{r7, pc}
 8011aca:	bf00      	nop
 8011acc:	0801a8a8 	.word	0x0801a8a8
 8011ad0:	200019ac 	.word	0x200019ac
 8011ad4:	0801a8ac 	.word	0x0801a8ac
 8011ad8:	200019b4 	.word	0x200019b4

08011adc <_GLOBAL__sub_I__ZN6NrfSpiC2ER3Spi>:
 8011adc:	b580      	push	{r7, lr}
 8011ade:	af00      	add	r7, sp, #0
 8011ae0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011ae4:	2001      	movs	r0, #1
 8011ae6:	f7ff ffb3 	bl	8011a50 <_Z41__static_initialization_and_destruction_0ii>
 8011aea:	bd80      	pop	{r7, pc}

08011aec <_GLOBAL__sub_D__ZN6NrfSpiC2ER3Spi>:
 8011aec:	b580      	push	{r7, lr}
 8011aee:	af00      	add	r7, sp, #0
 8011af0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011af4:	2000      	movs	r0, #0
 8011af6:	f7ff ffab 	bl	8011a50 <_Z41__static_initialization_and_destruction_0ii>
 8011afa:	bd80      	pop	{r7, pc}

08011afc <_ZN15IPhyTransceiverC1Ev>:
 */
class IPhyTransceiver
{
protected:
	// It is just an interface, so constructor and destructor should nor be public.
	IPhyTransceiver() {}
 8011afc:	b480      	push	{r7}
 8011afe:	b083      	sub	sp, #12
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
 8011b04:	4a04      	ldr	r2, [pc, #16]	; (8011b18 <_ZN15IPhyTransceiverC1Ev+0x1c>)
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	601a      	str	r2, [r3, #0]
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	370c      	adds	r7, #12
 8011b10:	46bd      	mov	sp, r7
 8011b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b16:	4770      	bx	lr
 8011b18:	0801dfc8 	.word	0x0801dfc8

08011b1c <_ZN15IPhyTransceiverD1Ev>:
	virtual ~IPhyTransceiver() {}
 8011b1c:	b480      	push	{r7}
 8011b1e:	b083      	sub	sp, #12
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
 8011b24:	4a04      	ldr	r2, [pc, #16]	; (8011b38 <_ZN15IPhyTransceiverD1Ev+0x1c>)
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	601a      	str	r2, [r3, #0]
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	370c      	adds	r7, #12
 8011b30:	46bd      	mov	sp, r7
 8011b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b36:	4770      	bx	lr
 8011b38:	0801dfc8 	.word	0x0801dfc8

08011b3c <_ZN15IPhyTransceiverD0Ev>:
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b082      	sub	sp, #8
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f7ff ffe9 	bl	8011b1c <_ZN15IPhyTransceiverD1Ev>
 8011b4a:	2104      	movs	r1, #4
 8011b4c:	6878      	ldr	r0, [r7, #4]
 8011b4e:	f004 fc87 	bl	8016460 <_ZdlPvj>
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	4618      	mov	r0, r3
 8011b56:	3708      	adds	r7, #8
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	bd80      	pop	{r7, pc}

08011b5c <_ZNK6NrfSpi8enableCEEv>:
	inline void enableCE() const { HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET); sDelay(CE_HIGH_TIME); }
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b082      	sub	sp, #8
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
 8011b64:	2201      	movs	r2, #1
 8011b66:	2104      	movs	r1, #4
 8011b68:	4805      	ldr	r0, [pc, #20]	; (8011b80 <_ZNK6NrfSpi8enableCEEv+0x24>)
 8011b6a:	f7f0 f851 	bl	8001c10 <HAL_GPIO_WritePin>
 8011b6e:	f242 7110 	movw	r1, #10000	; 0x2710
 8011b72:	6878      	ldr	r0, [r7, #4]
 8011b74:	f7ff fb48 	bl	8011208 <_ZNK6NrfSpi6sDelayEm>
 8011b78:	bf00      	nop
 8011b7a:	3708      	adds	r7, #8
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd80      	pop	{r7, pc}
 8011b80:	48000c00 	.word	0x48000c00

08011b84 <_ZNK6NrfSpi9disableCEEv>:
	inline void disableCE() const { HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET); }
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b082      	sub	sp, #8
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	2104      	movs	r1, #4
 8011b90:	4803      	ldr	r0, [pc, #12]	; (8011ba0 <_ZNK6NrfSpi9disableCEEv+0x1c>)
 8011b92:	f7f0 f83d 	bl	8001c10 <HAL_GPIO_WritePin>
 8011b96:	bf00      	nop
 8011b98:	3708      	adds	r7, #8
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd80      	pop	{r7, pc}
 8011b9e:	bf00      	nop
 8011ba0:	48000c00 	.word	0x48000c00

08011ba4 <_ZN5board14NrfTransceiver11flushTxFifoEv>:
	void setDestinationAddress(tAddress address);
	void setReceptionAddress(uint8_t pipeIndex, const tAddress & rxAddress);
	void setAddressWidth(unsigned char widthInByte);
	bool activateFeatures(bool enable);
	void enableDPL(bool enable, unsigned char pipeMask = 0x00);
	inline void flushTxFifo() { NrfSpi::sendCmd(NrfSpi::FLUSH_TX); }
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b082      	sub	sp, #8
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	3304      	adds	r3, #4
 8011bb0:	21e1      	movs	r1, #225	; 0xe1
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f7ff fbd4 	bl	8011360 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE>
 8011bb8:	bf00      	nop
 8011bba:	3708      	adds	r7, #8
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	bd80      	pop	{r7, pc}

08011bc0 <_ZN5board14NrfTransceiver11flushRxFifoEv>:
	inline void flushRxFifo() { NrfSpi::sendCmd(NrfSpi::FLUSH_RX); }
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b082      	sub	sp, #8
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	3304      	adds	r3, #4
 8011bcc:	21e2      	movs	r1, #226	; 0xe2
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f7ff fbc6 	bl	8011360 <_ZN6NrfSpi7sendCmdENS_10eNrfSpiCmdE>
 8011bd4:	bf00      	nop
 8011bd6:	3708      	adds	r7, #8
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	bd80      	pop	{r7, pc}

08011bdc <_ZN5board14NrfTransceiver8observerEv>:

	inline IPhyObserver & observer() { return *_pObserver; }
 8011bdc:	b480      	push	{r7}
 8011bde:	b083      	sub	sp, #12
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011be8:	4618      	mov	r0, r3
 8011bea:	370c      	adds	r7, #12
 8011bec:	46bd      	mov	sp, r7
 8011bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf2:	4770      	bx	lr

08011bf4 <_ZN5board14NrfTransceiverC1Ev>:
using board::NrfTransceiver;

static const size_t MaximalPayloadSize = 32;
NrfTransceiver * NrfTransceiver::_pInstance(nullptr);

NrfTransceiver::NrfTransceiver()
 8011bf4:	b5b0      	push	{r4, r5, r7, lr}
 8011bf6:	b082      	sub	sp, #8
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
 : NrfSpi(Spi::instance(2 /* SPI3 */)),
   _bInitialized(false),
   _channel(2),			// Reset value given by register reset value (RF_CH register)
   _pObserver(NULL),
   _bEnabled(false),
   _autoAck(true)		// Per default enabled by the NrfTransceiver hardware
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	4618      	mov	r0, r3
 8011c00:	f7ff ff7c 	bl	8011afc <_ZN15IPhyTransceiverC1Ev>
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	1d1c      	adds	r4, r3, #4
 8011c08:	2002      	movs	r0, #2
 8011c0a:	f001 fe99 	bl	8013940 <_ZN3Spi8instanceEh>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	4619      	mov	r1, r3
 8011c12:	4620      	mov	r0, r4
 8011c14:	f7ff fb3e 	bl	8011294 <_ZN6NrfSpiC1ER3Spi>
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	3314      	adds	r3, #20
 8011c1c:	2100      	movs	r1, #0
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f002 fc24 	bl	801446c <_ZN10XFReactiveC1EP8XFThread>
 8011c24:	4a1c      	ldr	r2, [pc, #112]	; (8011c98 <_ZN5board14NrfTransceiverC1Ev+0xa4>)
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	601a      	str	r2, [r3, #0]
 8011c2a:	4a1c      	ldr	r2, [pc, #112]	; (8011c9c <_ZN5board14NrfTransceiverC1Ev+0xa8>)
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	605a      	str	r2, [r3, #4]
 8011c30:	4a1b      	ldr	r2, [pc, #108]	; (8011ca0 <_ZN5board14NrfTransceiverC1Ev+0xac>)
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	615a      	str	r2, [r3, #20]
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	2200      	movs	r2, #0
 8011c3a:	f883 2020 	strb.w	r2, [r3, #32]
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	2202      	movs	r2, #2
 8011c42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	2200      	movs	r2, #0
 8011c4a:	625a      	str	r2, [r3, #36]	; 0x24
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	2200      	movs	r2, #0
 8011c50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	2201      	movs	r2, #1
 8011c58:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	332c      	adds	r3, #44	; 0x2c
 8011c60:	2405      	movs	r4, #5
 8011c62:	461d      	mov	r5, r3
 8011c64:	2c00      	cmp	r4, #0
 8011c66:	db05      	blt.n	8011c74 <_ZN5board14NrfTransceiverC1Ev+0x80>
 8011c68:	4628      	mov	r0, r5
 8011c6a:	f7f7 ffad 	bl	8009bc8 <_ZN3phy7AddressILj4EEC1Ev>
 8011c6e:	3508      	adds	r5, #8
 8011c70:	3c01      	subs	r4, #1
 8011c72:	e7f7      	b.n	8011c64 <_ZN5board14NrfTransceiverC1Ev+0x70>
{
	assert(!_pInstance);		// Only one instance allowed
 8011c74:	4b0b      	ldr	r3, [pc, #44]	; (8011ca4 <_ZN5board14NrfTransceiverC1Ev+0xb0>)
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d005      	beq.n	8011c88 <_ZN5board14NrfTransceiverC1Ev+0x94>
 8011c7c:	4b0a      	ldr	r3, [pc, #40]	; (8011ca8 <_ZN5board14NrfTransceiverC1Ev+0xb4>)
 8011c7e:	4a0b      	ldr	r2, [pc, #44]	; (8011cac <_ZN5board14NrfTransceiverC1Ev+0xb8>)
 8011c80:	211e      	movs	r1, #30
 8011c82:	480b      	ldr	r0, [pc, #44]	; (8011cb0 <_ZN5board14NrfTransceiverC1Ev+0xbc>)
 8011c84:	f004 fcda 	bl	801663c <__assert_func>
	_pInstance = this;
 8011c88:	4a06      	ldr	r2, [pc, #24]	; (8011ca4 <_ZN5board14NrfTransceiverC1Ev+0xb0>)
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	6013      	str	r3, [r2, #0]
}
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	4618      	mov	r0, r3
 8011c92:	3708      	adds	r7, #8
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bdb0      	pop	{r4, r5, r7, pc}
 8011c98:	0801df60 	.word	0x0801df60
 8011c9c:	0801df94 	.word	0x0801df94
 8011ca0:	0801dfa4 	.word	0x0801dfa4
 8011ca4:	200019cc 	.word	0x200019cc
 8011ca8:	0801a8b0 	.word	0x0801a8b0
 8011cac:	0801a8bc 	.word	0x0801a8bc
 8011cb0:	0801a8e4 	.word	0x0801a8e4

08011cb4 <_ZN5board14NrfTransceiverD1Ev>:

NrfTransceiver::~NrfTransceiver()
 8011cb4:	b590      	push	{r4, r7, lr}
 8011cb6:	b083      	sub	sp, #12
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
 8011cbc:	4a16      	ldr	r2, [pc, #88]	; (8011d18 <_ZN5board14NrfTransceiverD1Ev+0x64>)
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	601a      	str	r2, [r3, #0]
 8011cc2:	4a16      	ldr	r2, [pc, #88]	; (8011d1c <_ZN5board14NrfTransceiverD1Ev+0x68>)
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	605a      	str	r2, [r3, #4]
 8011cc8:	4a15      	ldr	r2, [pc, #84]	; (8011d20 <_ZN5board14NrfTransceiverD1Ev+0x6c>)
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	615a      	str	r2, [r3, #20]
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	332c      	adds	r3, #44	; 0x2c
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d00d      	beq.n	8011cf2 <_ZN5board14NrfTransceiverD1Ev+0x3e>
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	332c      	adds	r3, #44	; 0x2c
 8011cda:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	332c      	adds	r3, #44	; 0x2c
 8011ce2:	429c      	cmp	r4, r3
 8011ce4:	d005      	beq.n	8011cf2 <_ZN5board14NrfTransceiverD1Ev+0x3e>
 8011ce6:	3c08      	subs	r4, #8
 8011ce8:	6823      	ldr	r3, [r4, #0]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	4620      	mov	r0, r4
 8011cee:	4798      	blx	r3
 8011cf0:	e7f5      	b.n	8011cde <_ZN5board14NrfTransceiverD1Ev+0x2a>
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	3314      	adds	r3, #20
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f002 fbda 	bl	80144b0 <_ZN10XFReactiveD1Ev>
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	3304      	adds	r3, #4
 8011d00:	4618      	mov	r0, r3
 8011d02:	f7ff fae1 	bl	80112c8 <_ZN6NrfSpiD1Ev>
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f7ff ff07 	bl	8011b1c <_ZN15IPhyTransceiverD1Ev>
{

}
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	4618      	mov	r0, r3
 8011d12:	370c      	adds	r7, #12
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd90      	pop	{r4, r7, pc}
 8011d18:	0801df60 	.word	0x0801df60
 8011d1c:	0801df94 	.word	0x0801df94
 8011d20:	0801dfa4 	.word	0x0801dfa4

08011d24 <_ZThn4_N5board14NrfTransceiverD1Ev>:
	virtual ~NrfTransceiver();
 8011d24:	f1a0 0004 	sub.w	r0, r0, #4
 8011d28:	f7ff bfc4 	b.w	8011cb4 <_ZN5board14NrfTransceiverD1Ev>

08011d2c <_ZThn20_N5board14NrfTransceiverD1Ev>:
 8011d2c:	f1a0 0014 	sub.w	r0, r0, #20
 8011d30:	f7ff bfc0 	b.w	8011cb4 <_ZN5board14NrfTransceiverD1Ev>

08011d34 <_ZN5board14NrfTransceiverD0Ev>:
NrfTransceiver::~NrfTransceiver()
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b082      	sub	sp, #8
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
}
 8011d3c:	6878      	ldr	r0, [r7, #4]
 8011d3e:	f7ff ffb9 	bl	8011cb4 <_ZN5board14NrfTransceiverD1Ev>
 8011d42:	215c      	movs	r1, #92	; 0x5c
 8011d44:	6878      	ldr	r0, [r7, #4]
 8011d46:	f004 fb8b 	bl	8016460 <_ZdlPvj>
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	3708      	adds	r7, #8
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd80      	pop	{r7, pc}

08011d54 <_ZThn20_N5board14NrfTransceiverD0Ev>:
 8011d54:	f1a0 0014 	sub.w	r0, r0, #20
 8011d58:	f7ff bfec 	b.w	8011d34 <_ZN5board14NrfTransceiverD0Ev>

08011d5c <_ZThn4_N5board14NrfTransceiverD0Ev>:
 8011d5c:	f1a0 0004 	sub.w	r0, r0, #4
 8011d60:	f7ff bfe8 	b.w	8011d34 <_ZN5board14NrfTransceiverD0Ev>

08011d64 <_ZN5board14NrfTransceiver10initializeEv>:

bool NrfTransceiver::initialize()
{
 8011d64:	b590      	push	{r4, r7, lr}
 8011d66:	b083      	sub	sp, #12
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
	if (!_bInitialized)
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011d72:	f083 0301 	eor.w	r3, r3, #1
 8011d76:	b2db      	uxtb	r3, r3
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d079      	beq.n	8011e70 <_ZN5board14NrfTransceiver10initializeEv+0x10c>
	{
		_bInitialized = true;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	2201      	movs	r2, #1
 8011d80:	f883 2020 	strb.w	r2, [r3, #32]
#if !(NRFTRANSCEIVER_TRACE_VERBOSE != 0)
		Trace::outln("Nrf: Verbose Trace disabled");
#endif

		// Initialize SPI used for NrfTransceiver
		NrfSpi::initialize();
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	3304      	adds	r3, #4
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f7ff fabd 	bl	8011308 <_ZN6NrfSpi10initializeEv>

		//
		// Now the nRF transceiver can be accessed correctly
		//

		NrfSpi::disableCS();		// Release transceiver
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	3304      	adds	r3, #4
 8011d92:	4618      	mov	r0, r3
 8011d94:	f7ff fa62 	bl	801125c <_ZNK6NrfSpi9disableCSEv>
		NrfSpi::disableCE();		// Discard transmission
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	3304      	adds	r3, #4
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f7ff fef1 	bl	8011b84 <_ZNK6NrfSpi9disableCEEv>

		// Reset FIFOs
		flushTxFifo();
 8011da2:	6878      	ldr	r0, [r7, #4]
 8011da4:	f7ff fefe 	bl	8011ba4 <_ZN5board14NrfTransceiver11flushTxFifoEv>
		flushRxFifo();
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	f7ff ff09 	bl	8011bc0 <_ZN5board14NrfTransceiver11flushRxFifoEv>

		// Reset NRF IRQ status bits
		NrfSpi::writeRegister(NrfSpi::STATUS, (NrfSpi::STATUS_REG_RX_DR | NrfSpi::STATUS_REG_TX_DS | NrfSpi::STATUS_REG_MAX_RT));
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	3304      	adds	r3, #4
 8011db2:	2270      	movs	r2, #112	; 0x70
 8011db4:	2107      	movs	r1, #7
 8011db6:	4618      	mov	r0, r3
 8011db8:	f7ff fc4a 	bl	8011650 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterEh>

		// Set address width used
		setAddressWidth(tAddress::addressSize());
 8011dbc:	f7f7 ff3a 	bl	8009c34 <_ZN3phy7AddressILj4EE11addressSizeEv>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	b2db      	uxtb	r3, r3
 8011dc4:	4619      	mov	r1, r3
 8011dc6:	6878      	ldr	r0, [r7, #4]
 8011dc8:	f000 faa2 	bl	8012310 <_ZN5board14NrfTransceiver15setAddressWidthEh>
		assert((size_t)(NrfSpi::readRegister(NrfSpi::SETUP_AW) + 2) == tAddress::addressSize());
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	3304      	adds	r3, #4
 8011dd0:	2103      	movs	r1, #3
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	f7ff fc0a 	bl	80115ec <_ZN6NrfSpi12readRegisterENS_12eNrfRegisterE>
 8011dd8:	4603      	mov	r3, r0
 8011dda:	3302      	adds	r3, #2
 8011ddc:	461c      	mov	r4, r3
 8011dde:	f7f7 ff29 	bl	8009c34 <_ZN3phy7AddressILj4EE11addressSizeEv>
 8011de2:	4603      	mov	r3, r0
 8011de4:	429c      	cmp	r4, r3
 8011de6:	d005      	beq.n	8011df4 <_ZN5board14NrfTransceiver10initializeEv+0x90>
 8011de8:	4b24      	ldr	r3, [pc, #144]	; (8011e7c <_ZN5board14NrfTransceiver10initializeEv+0x118>)
 8011dea:	4a25      	ldr	r2, [pc, #148]	; (8011e80 <_ZN5board14NrfTransceiver10initializeEv+0x11c>)
 8011dec:	2144      	movs	r1, #68	; 0x44
 8011dee:	4825      	ldr	r0, [pc, #148]	; (8011e84 <_ZN5board14NrfTransceiver10initializeEv+0x120>)
 8011df0:	f004 fc24 	bl	801663c <__assert_func>

		activateFeatures(true);
 8011df4:	2101      	movs	r1, #1
 8011df6:	6878      	ldr	r0, [r7, #4]
 8011df8:	f000 fab4 	bl	8012364 <_ZN5board14NrfTransceiver16activateFeaturesEb>
		enableDPL(true, 0x03);		// Enable dynamic payload size for pipe 0 and 1
 8011dfc:	2203      	movs	r2, #3
 8011dfe:	2101      	movs	r1, #1
 8011e00:	6878      	ldr	r0, [r7, #4]
 8011e02:	f000 fac1 	bl	8012388 <_ZN5board14NrfTransceiver9enableDPLEbh>
		assert((NrfSpi::readRegister(NrfSpi::FEATURE) & NrfSpi::FEATURE_REG_EN_DPL) == FEATURE_REG_EN_DPL);
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	3304      	adds	r3, #4
 8011e0a:	211d      	movs	r1, #29
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f7ff fbed 	bl	80115ec <_ZN6NrfSpi12readRegisterENS_12eNrfRegisterE>
 8011e12:	4603      	mov	r3, r0
 8011e14:	f003 0304 	and.w	r3, r3, #4
 8011e18:	2b04      	cmp	r3, #4
 8011e1a:	d005      	beq.n	8011e28 <_ZN5board14NrfTransceiver10initializeEv+0xc4>
 8011e1c:	4b1a      	ldr	r3, [pc, #104]	; (8011e88 <_ZN5board14NrfTransceiver10initializeEv+0x124>)
 8011e1e:	4a18      	ldr	r2, [pc, #96]	; (8011e80 <_ZN5board14NrfTransceiver10initializeEv+0x11c>)
 8011e20:	2148      	movs	r1, #72	; 0x48
 8011e22:	4818      	ldr	r0, [pc, #96]	; (8011e84 <_ZN5board14NrfTransceiver10initializeEv+0x120>)
 8011e24:	f004 fc0a 	bl	801663c <__assert_func>

		// Enable feature that gives ability to transmit frames without receiving an acknowledgment
		NrfSpi::enableDynamicTxAcknowledgment(true);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	3304      	adds	r3, #4
 8011e2c:	2101      	movs	r1, #1
 8011e2e:	4618      	mov	r0, r3
 8011e30:	f7ff fd80 	bl	8011934 <_ZN6NrfSpi29enableDynamicTxAcknowledgmentEb>

		// Basic configuration for CONFIG register: Enable CRC
		NrfSpi::writeRegister(NrfSpi::CONFIG, NrfSpi::CONFIG_REG_EN_CRC);
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	3304      	adds	r3, #4
 8011e38:	2208      	movs	r2, #8
 8011e3a:	2100      	movs	r1, #0
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f7ff fc07 	bl	8011650 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterEh>

		// Initialized pipes according application needs
		_initializePipes();
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	3324      	adds	r3, #36	; 0x24
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	6878      	ldr	r0, [r7, #4]
 8011e4c:	4798      	blx	r3

		// Initialize and enable IRQ for the NRF_IRQ line (GPIO RC9)
		_initNrfTransceiverIrq();
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	f000 f81c 	bl	8011e8c <_ZNK5board14NrfTransceiver22_initNrfTransceiverIrqEv>

		// Set (again) hardware default values of the Nrf chip
		setRadioChannel(2);
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	3318      	adds	r3, #24
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	2102      	movs	r1, #2
 8011e5e:	6878      	ldr	r0, [r7, #4]
 8011e60:	4798      	blx	r3

		// Enable transceiver (and enter RX mode)
		setMode(Active);
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	3310      	adds	r3, #16
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	2102      	movs	r1, #2
 8011e6c:	6878      	ldr	r0, [r7, #4]
 8011e6e:	4798      	blx	r3
	}

	return true;
 8011e70:	2301      	movs	r3, #1
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	370c      	adds	r7, #12
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd90      	pop	{r4, r7, pc}
 8011e7a:	bf00      	nop
 8011e7c:	0801a984 	.word	0x0801a984
 8011e80:	0801a9d4 	.word	0x0801a9d4
 8011e84:	0801a8e4 	.word	0x0801a8e4
 8011e88:	0801aa08 	.word	0x0801aa08

08011e8c <_ZNK5board14NrfTransceiver22_initNrfTransceiverIrqEv>:

void NrfTransceiver::_initNrfTransceiverIrq() const
{
 8011e8c:	b480      	push	{r7}
 8011e8e:	b083      	sub	sp, #12
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]

}
 8011e94:	bf00      	nop
 8011e96:	370c      	adds	r7, #12
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9e:	4770      	bx	lr

08011ea0 <_ZN5board14NrfTransceiver16_initializePipesEv>:

void NrfTransceiver::_initializePipes()
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b084      	sub	sp, #16
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
	setDestinationAddress(SENSOR_ADDRESS);

#else // DESENET_SENSOR_NODE
	// Configure pipe 0
	// Used to receive sensor data
	NrfSpi::enableDataPipe(0x01, true);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	3304      	adds	r3, #4
 8011eac:	2201      	movs	r2, #1
 8011eae:	2101      	movs	r1, #1
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	f7ff fcc7 	bl	8011844 <_ZN6NrfSpi14enableDataPipeEhb>
	// Set reception address to listen on
	setReceptionAddress(0, SENSOR_ADDRESS);
 8011eb6:	4a1b      	ldr	r2, [pc, #108]	; (8011f24 <_ZN5board14NrfTransceiver16_initializePipesEv+0x84>)
 8011eb8:	2100      	movs	r1, #0
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	f000 fa06 	bl	80122cc <_ZN5board14NrfTransceiver19setReceptionAddressEhRKN3phy7AddressILj4EEE>
	// Disable auto-ack for pipe 0. Sensor does only listen on this
	// pipe for beacons, but does not acknowledge them.
	NrfSpi::enableAutoAcknowledgementForPipe(0x01, false);
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	3304      	adds	r3, #4
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	2101      	movs	r1, #1
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f7ff fcf7 	bl	80118bc <_ZN6NrfSpi32enableAutoAcknowledgementForPipeEhb>

	// Configure pipe 1
	// Enable pipe 1
	NrfSpi::enableDataPipe(0x02, false);
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	3304      	adds	r3, #4
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	2102      	movs	r1, #2
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f7ff fcb4 	bl	8011844 <_ZN6NrfSpi14enableDataPipeEhb>
	// Set reception address to listen on
	setReceptionAddress(1, GATEWAY_ADDRESS);
 8011edc:	4a12      	ldr	r2, [pc, #72]	; (8011f28 <_ZN5board14NrfTransceiver16_initializePipesEv+0x88>)
 8011ede:	2101      	movs	r1, #1
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f000 f9f3 	bl	80122cc <_ZN5board14NrfTransceiver19setReceptionAddressEhRKN3phy7AddressILj4EEE>
	// Disable auto-ack for pipe 1. Sensor does only listen on this
	// pipe for sensor data from other sensor.
	NrfSpi::enableAutoAcknowledgementForPipe(0x02, false);
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	3304      	adds	r3, #4
 8011eea:	2200      	movs	r2, #0
 8011eec:	2102      	movs	r1, #2
 8011eee:	4618      	mov	r0, r3
 8011ef0:	f7ff fce4 	bl	80118bc <_ZN6NrfSpi32enableAutoAcknowledgementForPipeEhb>

	// Set TX address used when sending sensor data frames
	setDestinationAddress(GATEWAY_ADDRESS);
 8011ef4:	f107 0308 	add.w	r3, r7, #8
 8011ef8:	490b      	ldr	r1, [pc, #44]	; (8011f28 <_ZN5board14NrfTransceiver16_initializePipesEv+0x88>)
 8011efa:	4618      	mov	r0, r3
 8011efc:	f7ff f938 	bl	8011170 <_ZN3phy7AddressILj4EEC1ERKS1_>
 8011f00:	f107 0308 	add.w	r3, r7, #8
 8011f04:	4619      	mov	r1, r3
 8011f06:	6878      	ldr	r0, [r7, #4]
 8011f08:	f000 f9d0 	bl	80122ac <_ZN5board14NrfTransceiver21setDestinationAddressEN3phy7AddressILj4EEE>
 8011f0c:	f107 0308 	add.w	r3, r7, #8
 8011f10:	4618      	mov	r0, r3
 8011f12:	f7f5 f813 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>

	enterRXMode();	// Start listening
 8011f16:	6878      	ldr	r0, [r7, #4]
 8011f18:	f000 fb48 	bl	80125ac <_ZN5board14NrfTransceiver11enterRXModeEv>
#endif
}
 8011f1c:	bf00      	nop
 8011f1e:	3710      	adds	r7, #16
 8011f20:	46bd      	mov	sp, r7
 8011f22:	bd80      	pop	{r7, pc}
 8011f24:	200019c4 	.word	0x200019c4
 8011f28:	200019bc 	.word	0x200019bc

08011f2c <__tcf_0>:
 * nRF24L01 chip is lowering the NRF_IRQ line.
 * The code insight this method is executed in an ISR!
 */
void NrfTransceiver::onIrq()
{
	static XFStaticEvent irqEvent( 0 , this );
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	af00      	add	r7, sp, #0
 8011f30:	4801      	ldr	r0, [pc, #4]	; (8011f38 <__tcf_0+0xc>)
 8011f32:	f002 fbe3 	bl	80146fc <_ZN13XFStaticEventD1Ev>
 8011f36:	bd80      	pop	{r7, pc}
 8011f38:	200019d0 	.word	0x200019d0

08011f3c <_ZN5board14NrfTransceiver5onIrqEv>:
{
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b082      	sub	sp, #8
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
	static XFStaticEvent irqEvent( 0 , this );
 8011f44:	4b1c      	ldr	r3, [pc, #112]	; (8011fb8 <_ZN5board14NrfTransceiver5onIrqEv+0x7c>)
 8011f46:	781b      	ldrb	r3, [r3, #0]
 8011f48:	f3bf 8f5b 	dmb	ish
 8011f4c:	b2db      	uxtb	r3, r3
 8011f4e:	f003 0301 	and.w	r3, r3, #1
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	bf0c      	ite	eq
 8011f56:	2301      	moveq	r3, #1
 8011f58:	2300      	movne	r3, #0
 8011f5a:	b2db      	uxtb	r3, r3
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d017      	beq.n	8011f90 <_ZN5board14NrfTransceiver5onIrqEv+0x54>
 8011f60:	4815      	ldr	r0, [pc, #84]	; (8011fb8 <_ZN5board14NrfTransceiver5onIrqEv+0x7c>)
 8011f62:	f004 fa81 	bl	8016468 <__cxa_guard_acquire>
 8011f66:	4603      	mov	r3, r0
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	bf14      	ite	ne
 8011f6c:	2301      	movne	r3, #1
 8011f6e:	2300      	moveq	r3, #0
 8011f70:	b2db      	uxtb	r3, r3
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d00c      	beq.n	8011f90 <_ZN5board14NrfTransceiver5onIrqEv+0x54>
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	3314      	adds	r3, #20
 8011f7a:	461a      	mov	r2, r3
 8011f7c:	2100      	movs	r1, #0
 8011f7e:	480f      	ldr	r0, [pc, #60]	; (8011fbc <_ZN5board14NrfTransceiver5onIrqEv+0x80>)
 8011f80:	f002 fba0 	bl	80146c4 <_ZN13XFStaticEventC1EiP11IXFReactive>
 8011f84:	480c      	ldr	r0, [pc, #48]	; (8011fb8 <_ZN5board14NrfTransceiver5onIrqEv+0x7c>)
 8011f86:	f004 fa7b 	bl	8016480 <__cxa_guard_release>
 8011f8a:	480d      	ldr	r0, [pc, #52]	; (8011fc0 <_ZN5board14NrfTransceiver5onIrqEv+0x84>)
 8011f8c:	f004 fb74 	bl	8016678 <atexit>

	enterISR();
 8011f90:	4b0c      	ldr	r3, [pc, #48]	; (8011fc4 <_ZN5board14NrfTransceiver5onIrqEv+0x88>)
 8011f92:	2201      	movs	r2, #1
 8011f94:	701a      	strb	r2, [r3, #0]
	pushEvent( &irqEvent );
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	f103 0214 	add.w	r2, r3, #20
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	695b      	ldr	r3, [r3, #20]
 8011fa0:	330c      	adds	r3, #12
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	4905      	ldr	r1, [pc, #20]	; (8011fbc <_ZN5board14NrfTransceiver5onIrqEv+0x80>)
 8011fa6:	4610      	mov	r0, r2
 8011fa8:	4798      	blx	r3
	exitISR();
 8011faa:	4b06      	ldr	r3, [pc, #24]	; (8011fc4 <_ZN5board14NrfTransceiver5onIrqEv+0x88>)
 8011fac:	2200      	movs	r2, #0
 8011fae:	701a      	strb	r2, [r3, #0]
}
 8011fb0:	bf00      	nop
 8011fb2:	3708      	adds	r7, #8
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	bd80      	pop	{r7, pc}
 8011fb8:	200019e4 	.word	0x200019e4
 8011fbc:	200019d0 	.word	0x200019d0
 8011fc0:	08011f2d 	.word	0x08011f2d
 8011fc4:	20001b8c 	.word	0x20001b8c

08011fc8 <_ZN5board14NrfTransceiver12processEventEv>:

EventStatus NrfTransceiver::processEvent()
{
 8011fc8:	b590      	push	{r4, r7, lr}
 8011fca:	b08b      	sub	sp, #44	; 0x2c
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
	unsigned char status = NrfSpi::status();
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	3304      	adds	r3, #4
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	f7ff f9b5 	bl	8011344 <_ZN6NrfSpi6statusEv>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (!NrfSpi::isInitialized())
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	3304      	adds	r3, #4
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f7ff f8f7 	bl	80111d8 <_ZNK6NrfSpi13isInitializedEv>
 8011fea:	4603      	mov	r3, r0
 8011fec:	f083 0301 	eor.w	r3, r3, #1
 8011ff0:	b2db      	uxtb	r3, r3
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d007      	beq.n	8012006 <_ZN5board14NrfTransceiver12processEventEv+0x3e>
	{
		return EventStatus::NotConsumed;
 8011ff6:	f107 0318 	add.w	r3, r7, #24
 8011ffa:	2102      	movs	r1, #2
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	f7f4 fcb1 	bl	8006964 <_ZN11EventStatusC1ENS_12eEventStatusE>
 8012002:	7e3b      	ldrb	r3, [r7, #24]
 8012004:	e13f      	b.n	8012286 <_ZN5board14NrfTransceiver12processEventEv+0x2be>
	}

	while (!rxFifoEmpty())
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	3304      	adds	r3, #4
 801200a:	4618      	mov	r0, r3
 801200c:	f7ff fcc1 	bl	8011992 <_ZN6NrfSpi11rxFifoEmptyEv>
 8012010:	4603      	mov	r3, r0
 8012012:	f083 0301 	eor.w	r3, r3, #1
 8012016:	b2db      	uxtb	r3, r3
 8012018:	2b00      	cmp	r3, #0
 801201a:	f000 80a4 	beq.w	8012166 <_ZN5board14NrfTransceiver12processEventEv+0x19e>
	{
		const uint8_t pipe = NrfSpi::getRXFramePipeNumber();
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	3304      	adds	r3, #4
 8012022:	4618      	mov	r0, r3
 8012024:	f7ff fbb6 	bl	8011794 <_ZN6NrfSpi20getRXFramePipeNumberEv>
 8012028:	4603      	mov	r3, r0
 801202a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		// Only continue if a pipe is valid
		if (pipe <= 5)
 801202e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012032:	2b05      	cmp	r3, #5
 8012034:	d879      	bhi.n	801212a <_ZN5board14NrfTransceiver12processEventEv+0x162>
		{
			size_t size = NrfSpi::getRXFramePaylpoadSize(pipe);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	3304      	adds	r3, #4
 801203a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801203e:	4611      	mov	r1, r2
 8012040:	4618      	mov	r0, r3
 8012042:	f7ff fbcf 	bl	80117e4 <_ZN6NrfSpi22getRXFramePaylpoadSizeEh>
 8012046:	6238      	str	r0, [r7, #32]

			if (size > MaximalPayloadSize)
 8012048:	6a3b      	ldr	r3, [r7, #32]
 801204a:	2b20      	cmp	r3, #32
 801204c:	d903      	bls.n	8012056 <_ZN5board14NrfTransceiver12processEventEv+0x8e>
			{
				// Check size. It must not exceed 32 bytes.

				// As explained in the R_RX_PL_WID section. Flush
				// the RX FIFO if this happen.
				flushRxFifo();
 801204e:	6878      	ldr	r0, [r7, #4]
 8012050:	f7ff fdb6 	bl	8011bc0 <_ZN5board14NrfTransceiver11flushRxFifoEv>
 8012054:	e069      	b.n	801212a <_ZN5board14NrfTransceiver12processEventEv+0x162>
			}
			else if (size == 0)
 8012056:	6a3b      	ldr	r3, [r7, #32]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d103      	bne.n	8012064 <_ZN5board14NrfTransceiver12processEventEv+0x9c>
			{
				flushRxFifo();
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f7ff fdaf 	bl	8011bc0 <_ZN5board14NrfTransceiver11flushRxFifoEv>
 8012062:	e062      	b.n	801212a <_ZN5board14NrfTransceiver12processEventEv+0x162>
			}
			else
			{
				Frame frame(Frame::HEADER_SIZE + size);
 8012064:	6a3b      	ldr	r3, [r7, #32]
 8012066:	1d5a      	adds	r2, r3, #5
 8012068:	f107 0308 	add.w	r3, r7, #8
 801206c:	4611      	mov	r1, r2
 801206e:	4618      	mov	r0, r3
 8012070:	f7f7 fba8 	bl	80097c4 <_ZN7desenet5FrameC1Ej>

				if (frame.isValid())
 8012074:	f107 0308 	add.w	r3, r7, #8
 8012078:	4618      	mov	r0, r3
 801207a:	f7f7 fc12 	bl	80098a2 <_ZNK7desenet5Frame7isValidEv>
 801207e:	4603      	mov	r3, r0
 8012080:	2b00      	cmp	r3, #0
 8012082:	d04a      	beq.n	801211a <_ZN5board14NrfTransceiver12processEventEv+0x152>
				{
					// Add RX address to frame
					_rxAddress[pipe].copyTo(frame.buffer());
 8012084:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012088:	3305      	adds	r3, #5
 801208a:	00db      	lsls	r3, r3, #3
 801208c:	687a      	ldr	r2, [r7, #4]
 801208e:	4413      	add	r3, r2
 8012090:	1d1c      	adds	r4, r3, #4
 8012092:	f107 0308 	add.w	r3, r7, #8
 8012096:	4618      	mov	r0, r3
 8012098:	f7f6 fd78 	bl	8008b8c <_ZN7desenet5Frame6bufferEv>
 801209c:	4603      	mov	r3, r0
 801209e:	4619      	mov	r1, r3
 80120a0:	4620      	mov	r0, r4
 80120a2:	f000 fbdb 	bl	801285c <_ZNK3phy7AddressILj4EE6copyToEPh>
					// Add payload size to frame (right after RX address)
					frame[Address::addressSize()] = size;
 80120a6:	f7f7 fdc5 	bl	8009c34 <_ZN3phy7AddressILj4EE11addressSizeEv>
 80120aa:	4602      	mov	r2, r0
 80120ac:	f107 0308 	add.w	r3, r7, #8
 80120b0:	4611      	mov	r1, r2
 80120b2:	4618      	mov	r0, r3
 80120b4:	f7ff f881 	bl	80111ba <_ZN7desenet5FrameixEj>
 80120b8:	4603      	mov	r3, r0
 80120ba:	6a3a      	ldr	r2, [r7, #32]
 80120bc:	b2d2      	uxtb	r2, r2
 80120be:	701a      	strb	r2, [r3, #0]

					// Read payload data
					NrfSpi::readFrame(frame);
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	3304      	adds	r3, #4
 80120c4:	f107 0208 	add.w	r2, r7, #8
 80120c8:	4611      	mov	r1, r2
 80120ca:	4618      	mov	r0, r3
 80120cc:	f7ff fa44 	bl	8011558 <_ZN6NrfSpi9readFrameERN7desenet5FrameE>

#if (NRFTRANSCEIVER_TRACE_VERBOSE != 0)	// Not even vall frame.toString()
					traceOut("Nrf: RX Frame (size %d): %s", frame.length(), frame.toString());
 80120d0:	f107 0308 	add.w	r3, r7, #8
 80120d4:	4618      	mov	r0, r3
 80120d6:	f7f6 fd4d 	bl	8008b74 <_ZNK7desenet5Frame6lengthEv>
 80120da:	4604      	mov	r4, r0
 80120dc:	f107 0308 	add.w	r3, r7, #8
 80120e0:	4618      	mov	r0, r3
 80120e2:	f7f7 fcd7 	bl	8009a94 <_ZNK7desenet5Frame8toStringEv>
 80120e6:	4603      	mov	r3, r0
 80120e8:	461a      	mov	r2, r3
 80120ea:	4621      	mov	r1, r4
 80120ec:	4868      	ldr	r0, [pc, #416]	; (8012290 <_ZN5board14NrfTransceiver12processEventEv+0x2c8>)
 80120ee:	f000 f999 	bl	8012424 <_ZN5board14NrfTransceiver8traceOutEPKcz>
#endif // #if (NRFTRANSCEIVER_TRACE_VERBOSE != 0)

					if (_pObserver)
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d00b      	beq.n	8012112 <_ZN5board14NrfTransceiver12processEventEv+0x14a>
					{
						observer().onReceive(frame);
 80120fa:	6878      	ldr	r0, [r7, #4]
 80120fc:	f7ff fd6e 	bl	8011bdc <_ZN5board14NrfTransceiver8observerEv>
 8012100:	4603      	mov	r3, r0
 8012102:	681a      	ldr	r2, [r3, #0]
 8012104:	3208      	adds	r2, #8
 8012106:	6812      	ldr	r2, [r2, #0]
 8012108:	f107 0108 	add.w	r1, r7, #8
 801210c:	4618      	mov	r0, r3
 801210e:	4790      	blx	r2
 8012110:	e006      	b.n	8012120 <_ZN5board14NrfTransceiver12processEventEv+0x158>
					}
					else
					{
						traceOut("Nrf Irq: Observer not set");
 8012112:	4860      	ldr	r0, [pc, #384]	; (8012294 <_ZN5board14NrfTransceiver12processEventEv+0x2cc>)
 8012114:	f000 f986 	bl	8012424 <_ZN5board14NrfTransceiver8traceOutEPKcz>
 8012118:	e002      	b.n	8012120 <_ZN5board14NrfTransceiver12processEventEv+0x158>
				else
				{
					// The RX frames needs to be read or removed
					// Otherwise the transceiver will again rise the
					// IRQ line!
					flushRxFifo();
 801211a:	6878      	ldr	r0, [r7, #4]
 801211c:	f7ff fd50 	bl	8011bc0 <_ZN5board14NrfTransceiver11flushRxFifoEv>
				Frame frame(Frame::HEADER_SIZE + size);
 8012120:	f107 0308 	add.w	r3, r7, #8
 8012124:	4618      	mov	r0, r3
 8012126:	f7f9 f927 	bl	800b378 <_ZN7desenet5FrameD1Ev>
				}
			}
		}

		status = NrfSpi::status();
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	3304      	adds	r3, #4
 801212e:	4618      	mov	r0, r3
 8012130:	f7ff f908 	bl	8011344 <_ZN6NrfSpi6statusEv>
 8012134:	4603      	mov	r3, r0
 8012136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if ((status & NrfSpi::STATUS_REG_RX_DR) == NrfSpi::STATUS_REG_RX_DR)
 801213a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801213e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012142:	2b00      	cmp	r3, #0
 8012144:	f43f af5f 	beq.w	8012006 <_ZN5board14NrfTransceiver12processEventEv+0x3e>
		{
			// Clear RX_DR bit in status register
			status = NrfSpi::writeRegister(NrfSpi::STATUS, (status | NrfSpi::STATUS_REG_RX_DR));
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	1d18      	adds	r0, r3, #4
 801214c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012154:	b2db      	uxtb	r3, r3
 8012156:	461a      	mov	r2, r3
 8012158:	2107      	movs	r1, #7
 801215a:	f7ff fa79 	bl	8011650 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterEh>
 801215e:	4603      	mov	r3, r0
 8012160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (!rxFifoEmpty())
 8012164:	e74f      	b.n	8012006 <_ZN5board14NrfTransceiver12processEventEv+0x3e>
		}
	}

	status = NrfSpi::status();
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	3304      	adds	r3, #4
 801216a:	4618      	mov	r0, r3
 801216c:	f7ff f8ea 	bl	8011344 <_ZN6NrfSpi6statusEv>
 8012170:	4603      	mov	r3, r0
 8012172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// There are rare cases where the RX FIFO is empty and the RX_DR status flag still high.
	if ((status & NrfSpi::STATUS_REG_RX_DR) == NrfSpi::STATUS_REG_RX_DR)
 8012176:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801217a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801217e:	2b00      	cmp	r3, #0
 8012180:	d00d      	beq.n	801219e <_ZN5board14NrfTransceiver12processEventEv+0x1d6>
	{
		// Clear RX_DR bit in status register
		status = NrfSpi::writeRegister(NrfSpi::STATUS, (status | NrfSpi::STATUS_REG_RX_DR));
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	1d18      	adds	r0, r3, #4
 8012186:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801218a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801218e:	b2db      	uxtb	r3, r3
 8012190:	461a      	mov	r2, r3
 8012192:	2107      	movs	r1, #7
 8012194:	f7ff fa5c 	bl	8011650 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterEh>
 8012198:	4603      	mov	r3, r0
 801219a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	if ((status & NrfSpi::STATUS_REG_TX_FULL) == NrfSpi::STATUS_REG_TX_FULL)
 801219e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121a2:	f003 0301 	and.w	r3, r3, #1
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d005      	beq.n	80121b6 <_ZN5board14NrfTransceiver12processEventEv+0x1ee>
	{
		// Flush TX FIFO
		flushTxFifo();
 80121aa:	6878      	ldr	r0, [r7, #4]
 80121ac:	f7ff fcfa 	bl	8011ba4 <_ZN5board14NrfTransceiver11flushTxFifoEv>
		traceOut("irq:FLUSH_TX");
 80121b0:	4839      	ldr	r0, [pc, #228]	; (8012298 <_ZN5board14NrfTransceiver12processEventEv+0x2d0>)
 80121b2:	f000 f937 	bl	8012424 <_ZN5board14NrfTransceiver8traceOutEPKcz>
	}

	if ((status & NrfSpi::STATUS_REG_TX_DS) == NrfSpi::STATUS_REG_TX_DS)	// Data send
 80121b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121ba:	f003 0320 	and.w	r3, r3, #32
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d01d      	beq.n	80121fe <_ZN5board14NrfTransceiver12processEventEv+0x236>
	{
		traceOut("irq::TX_DS");
 80121c2:	4836      	ldr	r0, [pc, #216]	; (801229c <_ZN5board14NrfTransceiver12processEventEv+0x2d4>)
 80121c4:	f000 f92e 	bl	8012424 <_ZN5board14NrfTransceiver8traceOutEPKcz>

		// Clear TX_DS bit in status register
		status = NrfSpi::writeRegister(NrfSpi::STATUS, (status | NrfSpi::STATUS_REG_TX_DS));
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	1d18      	adds	r0, r3, #4
 80121cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121d0:	f043 0320 	orr.w	r3, r3, #32
 80121d4:	b2db      	uxtb	r3, r3
 80121d6:	461a      	mov	r2, r3
 80121d8:	2107      	movs	r1, #7
 80121da:	f7ff fa39 	bl	8011650 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterEh>
 80121de:	4603      	mov	r3, r0
 80121e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		observer().onSendStatus(IPhyObserver::Delivered);
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f7ff fcf9 	bl	8011bdc <_ZN5board14NrfTransceiver8observerEv>
 80121ea:	4603      	mov	r3, r0
 80121ec:	681a      	ldr	r2, [r3, #0]
 80121ee:	320c      	adds	r2, #12
 80121f0:	6812      	ldr	r2, [r2, #0]
 80121f2:	2101      	movs	r1, #1
 80121f4:	4618      	mov	r0, r3
 80121f6:	4790      	blx	r2

		// Change from TX to RX mode
		enterRXMode();
 80121f8:	6878      	ldr	r0, [r7, #4]
 80121fa:	f000 f9d7 	bl	80125ac <_ZN5board14NrfTransceiver11enterRXModeEv>
	}

	if ((status & NrfSpi::STATUS_REG_MAX_RT) == NrfSpi::STATUS_REG_MAX_RT)	// Reached maximum retries
 80121fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012202:	f003 0310 	and.w	r3, r3, #16
 8012206:	2b00      	cmp	r3, #0
 8012208:	d020      	beq.n	801224c <_ZN5board14NrfTransceiver12processEventEv+0x284>
	{
		traceOut("irq:MAX_RT");
 801220a:	4825      	ldr	r0, [pc, #148]	; (80122a0 <_ZN5board14NrfTransceiver12processEventEv+0x2d8>)
 801220c:	f000 f90a 	bl	8012424 <_ZN5board14NrfTransceiver8traceOutEPKcz>

		// Discard frame by flushing TX fifo
		// See nRF24L01 datasheet on page 43, last paragraph
		flushTxFifo();
 8012210:	6878      	ldr	r0, [r7, #4]
 8012212:	f7ff fcc7 	bl	8011ba4 <_ZN5board14NrfTransceiver11flushTxFifoEv>

		// Clear max RT
		status = NrfSpi::writeRegister(NrfSpi::STATUS, (status | NrfSpi::STATUS_REG_MAX_RT));
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	1d18      	adds	r0, r3, #4
 801221a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801221e:	f043 0310 	orr.w	r3, r3, #16
 8012222:	b2db      	uxtb	r3, r3
 8012224:	461a      	mov	r2, r3
 8012226:	2107      	movs	r1, #7
 8012228:	f7ff fa12 	bl	8011650 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterEh>
 801222c:	4603      	mov	r3, r0
 801222e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		observer().onSendStatus(IPhyObserver::NotDelivered);
 8012232:	6878      	ldr	r0, [r7, #4]
 8012234:	f7ff fcd2 	bl	8011bdc <_ZN5board14NrfTransceiver8observerEv>
 8012238:	4603      	mov	r3, r0
 801223a:	681a      	ldr	r2, [r3, #0]
 801223c:	320c      	adds	r2, #12
 801223e:	6812      	ldr	r2, [r2, #0]
 8012240:	2103      	movs	r1, #3
 8012242:	4618      	mov	r0, r3
 8012244:	4790      	blx	r2

		// Change from TX to RX mode
		enterRXMode();
 8012246:	6878      	ldr	r0, [r7, #4]
 8012248:	f000 f9b0 	bl	80125ac <_ZN5board14NrfTransceiver11enterRXModeEv>
	}

	if (NrfSpi::rxFifoFull() && ((status & NrfSpi::STATUS_REG_RX_DR) != NrfSpi::STATUS_REG_RX_DR))
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	3304      	adds	r3, #4
 8012250:	4618      	mov	r0, r3
 8012252:	f7ff fbb0 	bl	80119b6 <_ZN6NrfSpi10rxFifoFullEv>
 8012256:	4603      	mov	r3, r0
 8012258:	2b00      	cmp	r3, #0
 801225a:	d007      	beq.n	801226c <_ZN5board14NrfTransceiver12processEventEv+0x2a4>
 801225c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012264:	2b00      	cmp	r3, #0
 8012266:	d101      	bne.n	801226c <_ZN5board14NrfTransceiver12processEventEv+0x2a4>
 8012268:	2301      	movs	r3, #1
 801226a:	e000      	b.n	801226e <_ZN5board14NrfTransceiver12processEventEv+0x2a6>
 801226c:	2300      	movs	r3, #0
 801226e:	2b00      	cmp	r3, #0
 8012270:	d002      	beq.n	8012278 <_ZN5board14NrfTransceiver12processEventEv+0x2b0>
	{
		// Flush RX FIFO
		flushRxFifo();
 8012272:	6878      	ldr	r0, [r7, #4]
 8012274:	f7ff fca4 	bl	8011bc0 <_ZN5board14NrfTransceiver11flushRxFifoEv>
	}

	return EventStatus::Consumed;
 8012278:	f107 031c 	add.w	r3, r7, #28
 801227c:	2101      	movs	r1, #1
 801227e:	4618      	mov	r0, r3
 8012280:	f7f4 fb70 	bl	8006964 <_ZN11EventStatusC1ENS_12eEventStatusE>
 8012284:	7f3b      	ldrb	r3, [r7, #28]
}
 8012286:	4618      	mov	r0, r3
 8012288:	372c      	adds	r7, #44	; 0x2c
 801228a:	46bd      	mov	sp, r7
 801228c:	bd90      	pop	{r4, r7, pc}
 801228e:	bf00      	nop
 8012290:	0801aa64 	.word	0x0801aa64
 8012294:	0801aa80 	.word	0x0801aa80
 8012298:	0801aa9c 	.word	0x0801aa9c
 801229c:	0801aaac 	.word	0x0801aaac
 80122a0:	0801aab8 	.word	0x0801aab8

080122a4 <_ZThn20_N5board14NrfTransceiver12processEventEv>:
	EventStatus processEvent();
 80122a4:	f1a0 0014 	sub.w	r0, r0, #20
 80122a8:	f7ff be8e 	b.w	8011fc8 <_ZN5board14NrfTransceiver12processEventEv>

080122ac <_ZN5board14NrfTransceiver21setDestinationAddressEN3phy7AddressILj4EEE>:

void NrfTransceiver::setDestinationAddress(tAddress address)
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b082      	sub	sp, #8
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
 80122b4:	6039      	str	r1, [r7, #0]
	NrfSpi::writeRegister(NrfSpi::TX_ADDR, address);
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	3304      	adds	r3, #4
 80122ba:	683a      	ldr	r2, [r7, #0]
 80122bc:	2110      	movs	r1, #16
 80122be:	4618      	mov	r0, r3
 80122c0:	f7ff fa00 	bl	80116c4 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterERKN3phy7AddressILj4EEE>
}
 80122c4:	bf00      	nop
 80122c6:	3708      	adds	r7, #8
 80122c8:	46bd      	mov	sp, r7
 80122ca:	bd80      	pop	{r7, pc}

080122cc <_ZN5board14NrfTransceiver19setReceptionAddressEhRKN3phy7AddressILj4EEE>:

void NrfTransceiver::setReceptionAddress(uint8_t pipeIndex, const tAddress & rxAddress)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b084      	sub	sp, #16
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	60f8      	str	r0, [r7, #12]
 80122d4:	460b      	mov	r3, r1
 80122d6:	607a      	str	r2, [r7, #4]
 80122d8:	72fb      	strb	r3, [r7, #11]
	if (pipeIndex <= 6)
 80122da:	7afb      	ldrb	r3, [r7, #11]
 80122dc:	2b06      	cmp	r3, #6
 80122de:	d812      	bhi.n	8012306 <_ZN5board14NrfTransceiver19setReceptionAddressEhRKN3phy7AddressILj4EEE+0x3a>
	{
		NrfSpi::writeRegister(static_cast<NrfSpi::eNrfRegister>(NrfSpi::RX_ADDR_P0 + pipeIndex), rxAddress);
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	1d18      	adds	r0, r3, #4
 80122e4:	7afb      	ldrb	r3, [r7, #11]
 80122e6:	330a      	adds	r3, #10
 80122e8:	b2db      	uxtb	r3, r3
 80122ea:	687a      	ldr	r2, [r7, #4]
 80122ec:	4619      	mov	r1, r3
 80122ee:	f7ff f9e9 	bl	80116c4 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterERKN3phy7AddressILj4EEE>

		_rxAddress[pipeIndex] = rxAddress;
 80122f2:	7afb      	ldrb	r3, [r7, #11]
 80122f4:	3305      	adds	r3, #5
 80122f6:	00db      	lsls	r3, r3, #3
 80122f8:	68fa      	ldr	r2, [r7, #12]
 80122fa:	4413      	add	r3, r2
 80122fc:	3304      	adds	r3, #4
 80122fe:	6879      	ldr	r1, [r7, #4]
 8012300:	4618      	mov	r0, r3
 8012302:	f7fe ff1b 	bl	801113c <_ZN3phy7AddressILj4EEaSERKS1_>
	}
}
 8012306:	bf00      	nop
 8012308:	3710      	adds	r7, #16
 801230a:	46bd      	mov	sp, r7
 801230c:	bd80      	pop	{r7, pc}
	...

08012310 <_ZN5board14NrfTransceiver15setAddressWidthEh>:

void NrfTransceiver::setAddressWidth(unsigned char widthInByte)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b082      	sub	sp, #8
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
 8012318:	460b      	mov	r3, r1
 801231a:	70fb      	strb	r3, [r7, #3]
	assert(widthInByte == 3 || widthInByte == 4 || widthInByte == 5);
 801231c:	78fb      	ldrb	r3, [r7, #3]
 801231e:	2b03      	cmp	r3, #3
 8012320:	d00c      	beq.n	801233c <_ZN5board14NrfTransceiver15setAddressWidthEh+0x2c>
 8012322:	78fb      	ldrb	r3, [r7, #3]
 8012324:	2b04      	cmp	r3, #4
 8012326:	d009      	beq.n	801233c <_ZN5board14NrfTransceiver15setAddressWidthEh+0x2c>
 8012328:	78fb      	ldrb	r3, [r7, #3]
 801232a:	2b05      	cmp	r3, #5
 801232c:	d006      	beq.n	801233c <_ZN5board14NrfTransceiver15setAddressWidthEh+0x2c>
 801232e:	4b0a      	ldr	r3, [pc, #40]	; (8012358 <_ZN5board14NrfTransceiver15setAddressWidthEh+0x48>)
 8012330:	4a0a      	ldr	r2, [pc, #40]	; (801235c <_ZN5board14NrfTransceiver15setAddressWidthEh+0x4c>)
 8012332:	f240 1133 	movw	r1, #307	; 0x133
 8012336:	480a      	ldr	r0, [pc, #40]	; (8012360 <_ZN5board14NrfTransceiver15setAddressWidthEh+0x50>)
 8012338:	f004 f980 	bl	801663c <__assert_func>

	NrfSpi::writeRegister(NrfSpi::SETUP_AW, widthInByte - 2);
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	1d18      	adds	r0, r3, #4
 8012340:	78fb      	ldrb	r3, [r7, #3]
 8012342:	3b02      	subs	r3, #2
 8012344:	b2db      	uxtb	r3, r3
 8012346:	461a      	mov	r2, r3
 8012348:	2103      	movs	r1, #3
 801234a:	f7ff f981 	bl	8011650 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterEh>
}
 801234e:	bf00      	nop
 8012350:	3708      	adds	r7, #8
 8012352:	46bd      	mov	sp, r7
 8012354:	bd80      	pop	{r7, pc}
 8012356:	bf00      	nop
 8012358:	0801aac4 	.word	0x0801aac4
 801235c:	0801ab00 	.word	0x0801ab00
 8012360:	0801a8e4 	.word	0x0801a8e4

08012364 <_ZN5board14NrfTransceiver16activateFeaturesEb>:

bool NrfTransceiver::activateFeatures(bool enable)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b082      	sub	sp, #8
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
 801236c:	460b      	mov	r3, r1
 801236e:	70fb      	strb	r3, [r7, #3]
	return NrfSpi::activateFeatures(enable);
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	3304      	adds	r3, #4
 8012374:	78fa      	ldrb	r2, [r7, #3]
 8012376:	4611      	mov	r1, r2
 8012378:	4618      	mov	r0, r3
 801237a:	f7ff f9f1 	bl	8011760 <_ZN6NrfSpi16activateFeaturesEb>
 801237e:	4603      	mov	r3, r0
}
 8012380:	4618      	mov	r0, r3
 8012382:	3708      	adds	r7, #8
 8012384:	46bd      	mov	sp, r7
 8012386:	bd80      	pop	{r7, pc}

08012388 <_ZN5board14NrfTransceiver9enableDPLEbh>:
 *  - You need to enable first call activateFeatues() in order to use
 *    the DPL feature.
 *  - You also need to enable <em>Enhanced ShockBurst</em>.
 */
void NrfTransceiver::enableDPL(bool enable, unsigned char pipeMask /* = 0x00 */)
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b084      	sub	sp, #16
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
 8012390:	460b      	mov	r3, r1
 8012392:	70fb      	strb	r3, [r7, #3]
 8012394:	4613      	mov	r3, r2
 8012396:	70bb      	strb	r3, [r7, #2]
	NrfSpi::tRegister reg;
	assert(_bNrfFeaturesEnabled);	// Call activateFeatues first
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	7c1b      	ldrb	r3, [r3, #16]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d106      	bne.n	80123ae <_ZN5board14NrfTransceiver9enableDPLEbh+0x26>
 80123a0:	4b1c      	ldr	r3, [pc, #112]	; (8012414 <_ZN5board14NrfTransceiver9enableDPLEbh+0x8c>)
 80123a2:	4a1d      	ldr	r2, [pc, #116]	; (8012418 <_ZN5board14NrfTransceiver9enableDPLEbh+0x90>)
 80123a4:	f240 114b 	movw	r1, #331	; 0x14b
 80123a8:	481c      	ldr	r0, [pc, #112]	; (801241c <_ZN5board14NrfTransceiver9enableDPLEbh+0x94>)
 80123aa:	f004 f947 	bl	801663c <__assert_func>

	reg = NrfSpi::readRegister(FEATURE);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	3304      	adds	r3, #4
 80123b2:	211d      	movs	r1, #29
 80123b4:	4618      	mov	r0, r3
 80123b6:	f7ff f919 	bl	80115ec <_ZN6NrfSpi12readRegisterENS_12eNrfRegisterE>
 80123ba:	4603      	mov	r3, r0
 80123bc:	73fb      	strb	r3, [r7, #15]

	if (enable)
 80123be:	78fb      	ldrb	r3, [r7, #3]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d00e      	beq.n	80123e2 <_ZN5board14NrfTransceiver9enableDPLEbh+0x5a>
	{
		assert(pipeMask);		// Set at least to 0x01 (DPL on pipe0)
 80123c4:	78bb      	ldrb	r3, [r7, #2]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d106      	bne.n	80123d8 <_ZN5board14NrfTransceiver9enableDPLEbh+0x50>
 80123ca:	4b15      	ldr	r3, [pc, #84]	; (8012420 <_ZN5board14NrfTransceiver9enableDPLEbh+0x98>)
 80123cc:	4a12      	ldr	r2, [pc, #72]	; (8012418 <_ZN5board14NrfTransceiver9enableDPLEbh+0x90>)
 80123ce:	f240 1151 	movw	r1, #337	; 0x151
 80123d2:	4812      	ldr	r0, [pc, #72]	; (801241c <_ZN5board14NrfTransceiver9enableDPLEbh+0x94>)
 80123d4:	f004 f932 	bl	801663c <__assert_func>

		reg |= FEATURE_REG_EN_DPL;
 80123d8:	7bfb      	ldrb	r3, [r7, #15]
 80123da:	f043 0304 	orr.w	r3, r3, #4
 80123de:	73fb      	strb	r3, [r7, #15]
 80123e0:	e003      	b.n	80123ea <_ZN5board14NrfTransceiver9enableDPLEbh+0x62>
	}
	else
	{
		reg &= ~FEATURE_REG_EN_DPL;
 80123e2:	7bfb      	ldrb	r3, [r7, #15]
 80123e4:	f023 0304 	bic.w	r3, r3, #4
 80123e8:	73fb      	strb	r3, [r7, #15]
	}

	NrfSpi::writeRegister(FEATURE, reg);
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	3304      	adds	r3, #4
 80123ee:	7bfa      	ldrb	r2, [r7, #15]
 80123f0:	211d      	movs	r1, #29
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7ff f92c 	bl	8011650 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterEh>

	if (enable)
 80123f8:	78fb      	ldrb	r3, [r7, #3]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d006      	beq.n	801240c <_ZN5board14NrfTransceiver9enableDPLEbh+0x84>
	{
		// Enable DPL on corresponding pipes
		NrfSpi::writeRegister(NrfSpi::DYNPD, pipeMask);
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	3304      	adds	r3, #4
 8012402:	78ba      	ldrb	r2, [r7, #2]
 8012404:	211c      	movs	r1, #28
 8012406:	4618      	mov	r0, r3
 8012408:	f7ff f922 	bl	8011650 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterEh>
	}
}
 801240c:	bf00      	nop
 801240e:	3710      	adds	r7, #16
 8012410:	46bd      	mov	sp, r7
 8012412:	bd80      	pop	{r7, pc}
 8012414:	0801ab3c 	.word	0x0801ab3c
 8012418:	0801ab54 	.word	0x0801ab54
 801241c:	0801a8e4 	.word	0x0801a8e4
 8012420:	0801ab90 	.word	0x0801ab90

08012424 <_ZN5board14NrfTransceiver8traceOutEPKcz>:

void NrfTransceiver::traceOut(const char * const format, ...)
{
 8012424:	b40f      	push	{r0, r1, r2, r3}
 8012426:	b580      	push	{r7, lr}
 8012428:	b082      	sub	sp, #8
 801242a:	af00      	add	r7, sp, #0
#if (NRFTRANSCEIVER_TRACE_VERBOSE != 0)
	static char str[256];

	va_list args;

	va_start(args, format);
 801242c:	f107 0314 	add.w	r3, r7, #20
 8012430:	607b      	str	r3, [r7, #4]
	vsiprintf(str, format, args);
 8012432:	687a      	ldr	r2, [r7, #4]
 8012434:	6939      	ldr	r1, [r7, #16]
 8012436:	480d      	ldr	r0, [pc, #52]	; (801246c <_ZN5board14NrfTransceiver8traceOutEPKcz+0x48>)
 8012438:	f004 fe6c 	bl	8017114 <vsiprintf>
	va_end(args);

	assert(strlen(str) < 256);		// Uups! str is too small
 801243c:	480b      	ldr	r0, [pc, #44]	; (801246c <_ZN5board14NrfTransceiver8traceOutEPKcz+0x48>)
 801243e:	f7ed ff17 	bl	8000270 <strlen>
 8012442:	4603      	mov	r3, r0
 8012444:	2bff      	cmp	r3, #255	; 0xff
 8012446:	d906      	bls.n	8012456 <_ZN5board14NrfTransceiver8traceOutEPKcz+0x32>
 8012448:	4b09      	ldr	r3, [pc, #36]	; (8012470 <_ZN5board14NrfTransceiver8traceOutEPKcz+0x4c>)
 801244a:	4a0a      	ldr	r2, [pc, #40]	; (8012474 <_ZN5board14NrfTransceiver8traceOutEPKcz+0x50>)
 801244c:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8012450:	4809      	ldr	r0, [pc, #36]	; (8012478 <_ZN5board14NrfTransceiver8traceOutEPKcz+0x54>)
 8012452:	f004 f8f3 	bl	801663c <__assert_func>

	Trace::outln(str);
 8012456:	4805      	ldr	r0, [pc, #20]	; (801246c <_ZN5board14NrfTransceiver8traceOutEPKcz+0x48>)
 8012458:	f7fd fb80 	bl	800fb5c <_ZN5Trace5outlnEPKcz>
#else
	UNUSED(format);
#endif
}
 801245c:	bf00      	nop
 801245e:	3708      	adds	r7, #8
 8012460:	46bd      	mov	sp, r7
 8012462:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012466:	b004      	add	sp, #16
 8012468:	4770      	bx	lr
 801246a:	bf00      	nop
 801246c:	200019e8 	.word	0x200019e8
 8012470:	0801ab9c 	.word	0x0801ab9c
 8012474:	0801abb0 	.word	0x0801abb0
 8012478:	0801a8e4 	.word	0x0801a8e4

0801247c <_ZNK5board14NrfTransceiver4modeEv>:

IPhyTransceiver::Mode NrfTransceiver::mode() const
{
 801247c:	b480      	push	{r7}
 801247e:	b083      	sub	sp, #12
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
	return (_bEnabled) ? Active : Inactive;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801248a:	2b00      	cmp	r3, #0
 801248c:	d001      	beq.n	8012492 <_ZNK5board14NrfTransceiver4modeEv+0x16>
 801248e:	2302      	movs	r3, #2
 8012490:	e000      	b.n	8012494 <_ZNK5board14NrfTransceiver4modeEv+0x18>
 8012492:	2301      	movs	r3, #1
}
 8012494:	4618      	mov	r0, r3
 8012496:	370c      	adds	r7, #12
 8012498:	46bd      	mov	sp, r7
 801249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249e:	4770      	bx	lr

080124a0 <_ZN5board14NrfTransceiver7setModeEN15IPhyTransceiver4ModeE>:

bool NrfTransceiver::setMode(Mode mode)
{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b082      	sub	sp, #8
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
 80124a8:	460b      	mov	r3, r1
 80124aa:	70fb      	strb	r3, [r7, #3]
	assert(NrfSpi::isInitialized());	// Call initialize() first!
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	3304      	adds	r3, #4
 80124b0:	4618      	mov	r0, r3
 80124b2:	f7fe fe91 	bl	80111d8 <_ZNK6NrfSpi13isInitializedEv>
 80124b6:	4603      	mov	r3, r0
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d106      	bne.n	80124ca <_ZN5board14NrfTransceiver7setModeEN15IPhyTransceiver4ModeE+0x2a>
 80124bc:	4b0a      	ldr	r3, [pc, #40]	; (80124e8 <_ZN5board14NrfTransceiver7setModeEN15IPhyTransceiver4ModeE+0x48>)
 80124be:	4a0b      	ldr	r2, [pc, #44]	; (80124ec <_ZN5board14NrfTransceiver7setModeEN15IPhyTransceiver4ModeE+0x4c>)
 80124c0:	f240 117d 	movw	r1, #381	; 0x17d
 80124c4:	480a      	ldr	r0, [pc, #40]	; (80124f0 <_ZN5board14NrfTransceiver7setModeEN15IPhyTransceiver4ModeE+0x50>)
 80124c6:	f004 f8b9 	bl	801663c <__assert_func>

	return enableTransceiver((mode == Active) ? true : false);
 80124ca:	78fb      	ldrb	r3, [r7, #3]
 80124cc:	2b02      	cmp	r3, #2
 80124ce:	bf0c      	ite	eq
 80124d0:	2301      	moveq	r3, #1
 80124d2:	2300      	movne	r3, #0
 80124d4:	b2db      	uxtb	r3, r3
 80124d6:	4619      	mov	r1, r3
 80124d8:	6878      	ldr	r0, [r7, #4]
 80124da:	f000 f80b 	bl	80124f4 <_ZN5board14NrfTransceiver17enableTransceiverEb>
 80124de:	4603      	mov	r3, r0
}
 80124e0:	4618      	mov	r0, r3
 80124e2:	3708      	adds	r7, #8
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}
 80124e8:	0801abf0 	.word	0x0801abf0
 80124ec:	0801ac08 	.word	0x0801ac08
 80124f0:	0801a8e4 	.word	0x0801a8e4

080124f4 <_ZN5board14NrfTransceiver17enableTransceiverEb>:

bool NrfTransceiver::enableTransceiver(bool bEnable)
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b084      	sub	sp, #16
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
 80124fc:	460b      	mov	r3, r1
 80124fe:	70fb      	strb	r3, [r7, #3]
	if (_bEnabled != bEnable)
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012506:	78fa      	ldrb	r2, [r7, #3]
 8012508:	429a      	cmp	r2, r3
 801250a:	d02f      	beq.n	801256c <_ZN5board14NrfTransceiver17enableTransceiverEb+0x78>
	{
		unsigned char config;

		_bEnabled = bEnable;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	78fa      	ldrb	r2, [r7, #3]
 8012510:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		config = NrfSpi::readRegister(NrfSpi::CONFIG);
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	3304      	adds	r3, #4
 8012518:	2100      	movs	r1, #0
 801251a:	4618      	mov	r0, r3
 801251c:	f7ff f866 	bl	80115ec <_ZN6NrfSpi12readRegisterENS_12eNrfRegisterE>
 8012520:	4603      	mov	r3, r0
 8012522:	73fb      	strb	r3, [r7, #15]

		if (bEnable)
 8012524:	78fb      	ldrb	r3, [r7, #3]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d010      	beq.n	801254c <_ZN5board14NrfTransceiver17enableTransceiverEb+0x58>
		{
			// power-up, RX
			config |= NrfSpi::CONFIG_REG_PWR_UP |
 801252a:	7bfb      	ldrb	r3, [r7, #15]
 801252c:	f043 0303 	orr.w	r3, r3, #3
 8012530:	73fb      	strb	r3, [r7, #15]
					  NrfSpi::CONFIG_REG_PRIM_RX;
			NrfSpi::writeRegister(NrfSpi::CONFIG, config);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	3304      	adds	r3, #4
 8012536:	7bfa      	ldrb	r2, [r7, #15]
 8012538:	2100      	movs	r1, #0
 801253a:	4618      	mov	r0, r3
 801253c:	f7ff f888 	bl	8011650 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterEh>

			// Enable transceiver
			NrfSpi::enableCE();
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	3304      	adds	r3, #4
 8012544:	4618      	mov	r0, r3
 8012546:	f7ff fb09 	bl	8011b5c <_ZNK6NrfSpi8enableCEEv>
 801254a:	e00f      	b.n	801256c <_ZN5board14NrfTransceiver17enableTransceiverEb+0x78>
		}
		else
		{
			// Power down the chip
			config &= ~NrfSpi::CONFIG_REG_PWR_UP;
 801254c:	7bfb      	ldrb	r3, [r7, #15]
 801254e:	f023 0302 	bic.w	r3, r3, #2
 8012552:	73fb      	strb	r3, [r7, #15]
			NrfSpi::writeRegister(NrfSpi::CONFIG, config);
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	3304      	adds	r3, #4
 8012558:	7bfa      	ldrb	r2, [r7, #15]
 801255a:	2100      	movs	r1, #0
 801255c:	4618      	mov	r0, r3
 801255e:	f7ff f877 	bl	8011650 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterEh>

			// Disable transceiver
			NrfSpi::disableCE();
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	3304      	adds	r3, #4
 8012566:	4618      	mov	r0, r3
 8012568:	f7ff fb0c 	bl	8011b84 <_ZNK6NrfSpi9disableCEEv>
		}

		// read
		//config = NrfSpi::readRegister(NrfSpi::CONFIG);
	}
	return true;
 801256c:	2301      	movs	r3, #1
}
 801256e:	4618      	mov	r0, r3
 8012570:	3710      	adds	r7, #16
 8012572:	46bd      	mov	sp, r7
 8012574:	bd80      	pop	{r7, pc}

08012576 <_ZN5board14NrfTransceiver11enterTXModeEv>:

void NrfTransceiver::enterTXMode()
{
 8012576:	b580      	push	{r7, lr}
 8012578:	b084      	sub	sp, #16
 801257a:	af00      	add	r7, sp, #0
 801257c:	6078      	str	r0, [r7, #4]
	unsigned char config;

	// Enter TX mode
	config = NrfSpi::readRegister(NrfSpi::CONFIG);
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	3304      	adds	r3, #4
 8012582:	2100      	movs	r1, #0
 8012584:	4618      	mov	r0, r3
 8012586:	f7ff f831 	bl	80115ec <_ZN6NrfSpi12readRegisterENS_12eNrfRegisterE>
 801258a:	4603      	mov	r3, r0
 801258c:	73fb      	strb	r3, [r7, #15]
	config &= ~NrfSpi::CONFIG_REG_PRIM_RX;		// Clear PRIM_RX_BIT to enter TX mode
 801258e:	7bfb      	ldrb	r3, [r7, #15]
 8012590:	f023 0301 	bic.w	r3, r3, #1
 8012594:	73fb      	strb	r3, [r7, #15]
	// Write new value to config register
    NrfSpi::writeRegister(NrfSpi::CONFIG, config);
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	3304      	adds	r3, #4
 801259a:	7bfa      	ldrb	r2, [r7, #15]
 801259c:	2100      	movs	r1, #0
 801259e:	4618      	mov	r0, r3
 80125a0:	f7ff f856 	bl	8011650 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterEh>
}
 80125a4:	bf00      	nop
 80125a6:	3710      	adds	r7, #16
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bd80      	pop	{r7, pc}

080125ac <_ZN5board14NrfTransceiver11enterRXModeEv>:

void NrfTransceiver::enterRXMode()
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b084      	sub	sp, #16
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
	unsigned char config;

	// Enter RX mode
	config = NrfSpi::readRegister(NrfSpi::CONFIG);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	3304      	adds	r3, #4
 80125b8:	2100      	movs	r1, #0
 80125ba:	4618      	mov	r0, r3
 80125bc:	f7ff f816 	bl	80115ec <_ZN6NrfSpi12readRegisterENS_12eNrfRegisterE>
 80125c0:	4603      	mov	r3, r0
 80125c2:	73fb      	strb	r3, [r7, #15]
	config |= NrfSpi::CONFIG_REG_PRIM_RX;		// Set PRIM_RX_BIT to enter RX mode
 80125c4:	7bfb      	ldrb	r3, [r7, #15]
 80125c6:	f043 0301 	orr.w	r3, r3, #1
 80125ca:	73fb      	strb	r3, [r7, #15]
	// Write new value to config register
    NrfSpi::writeRegister(NrfSpi::CONFIG, config);
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	3304      	adds	r3, #4
 80125d0:	7bfa      	ldrb	r2, [r7, #15]
 80125d2:	2100      	movs	r1, #0
 80125d4:	4618      	mov	r0, r3
 80125d6:	f7ff f83b 	bl	8011650 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterEh>
}
 80125da:	bf00      	nop
 80125dc:	3710      	adds	r7, #16
 80125de:	46bd      	mov	sp, r7
 80125e0:	bd80      	pop	{r7, pc}

080125e2 <_ZNK5board14NrfTransceiver12radioChannelEv>:

IPhyTransceiver::RadioChannel NrfTransceiver::radioChannel() const
{
 80125e2:	b480      	push	{r7}
 80125e4:	b083      	sub	sp, #12
 80125e6:	af00      	add	r7, sp, #0
 80125e8:	6078      	str	r0, [r7, #4]
	return _channel;
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80125f0:	4618      	mov	r0, r3
 80125f2:	370c      	adds	r7, #12
 80125f4:	46bd      	mov	sp, r7
 80125f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fa:	4770      	bx	lr

080125fc <_ZN5board14NrfTransceiver15setRadioChannelEh>:

bool NrfTransceiver::setRadioChannel(RadioChannel channel)
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b082      	sub	sp, #8
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
 8012604:	460b      	mov	r3, r1
 8012606:	70fb      	strb	r3, [r7, #3]
	assert(NrfSpi::isInitialized());	// Call initialize() first!
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	3304      	adds	r3, #4
 801260c:	4618      	mov	r0, r3
 801260e:	f7fe fde3 	bl	80111d8 <_ZNK6NrfSpi13isInitializedEv>
 8012612:	4603      	mov	r3, r0
 8012614:	2b00      	cmp	r3, #0
 8012616:	d106      	bne.n	8012626 <_ZN5board14NrfTransceiver15setRadioChannelEh+0x2a>
 8012618:	4b14      	ldr	r3, [pc, #80]	; (801266c <_ZN5board14NrfTransceiver15setRadioChannelEh+0x70>)
 801261a:	4a15      	ldr	r2, [pc, #84]	; (8012670 <_ZN5board14NrfTransceiver15setRadioChannelEh+0x74>)
 801261c:	f240 11c3 	movw	r1, #451	; 0x1c3
 8012620:	4814      	ldr	r0, [pc, #80]	; (8012674 <_ZN5board14NrfTransceiver15setRadioChannelEh+0x78>)
 8012622:	f004 f80b 	bl	801663c <__assert_func>

	// Only values from 0 to 125 are allowed
	if (channel < 126)
 8012626:	78fb      	ldrb	r3, [r7, #3]
 8012628:	2b7d      	cmp	r3, #125	; 0x7d
 801262a:	d819      	bhi.n	8012660 <_ZN5board14NrfTransceiver15setRadioChannelEh+0x64>
	{
		if (_channel != channel)
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012632:	78fa      	ldrb	r2, [r7, #3]
 8012634:	429a      	cmp	r2, r3
 8012636:	d011      	beq.n	801265c <_ZN5board14NrfTransceiver15setRadioChannelEh+0x60>
		{
			_channel = channel;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	78fa      	ldrb	r2, [r7, #3]
 801263c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

			traceOut("Nrf: Changed radio channel: %d", _channel);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012646:	4619      	mov	r1, r3
 8012648:	480b      	ldr	r0, [pc, #44]	; (8012678 <_ZN5board14NrfTransceiver15setRadioChannelEh+0x7c>)
 801264a:	f7ff feeb 	bl	8012424 <_ZN5board14NrfTransceiver8traceOutEPKcz>

			NrfSpi::writeRegister(NrfSpi::RF_CH, channel);
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	3304      	adds	r3, #4
 8012652:	78fa      	ldrb	r2, [r7, #3]
 8012654:	2105      	movs	r1, #5
 8012656:	4618      	mov	r0, r3
 8012658:	f7fe fffa 	bl	8011650 <_ZN6NrfSpi13writeRegisterENS_12eNrfRegisterEh>
		}
		return true;
 801265c:	2301      	movs	r3, #1
 801265e:	e000      	b.n	8012662 <_ZN5board14NrfTransceiver15setRadioChannelEh+0x66>
	}
	return false;
 8012660:	2300      	movs	r3, #0
}
 8012662:	4618      	mov	r0, r3
 8012664:	3708      	adds	r7, #8
 8012666:	46bd      	mov	sp, r7
 8012668:	bd80      	pop	{r7, pc}
 801266a:	bf00      	nop
 801266c:	0801abf0 	.word	0x0801abf0
 8012670:	0801ac4c 	.word	0x0801ac4c
 8012674:	0801a8e4 	.word	0x0801a8e4
 8012678:	0801aca0 	.word	0x0801aca0

0801267c <_ZN5board14NrfTransceiver11setObserverERK12IPhyObserver>:

bool NrfTransceiver::setObserver(const IPhyObserver & observer)
{
 801267c:	b580      	push	{r7, lr}
 801267e:	b082      	sub	sp, #8
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
 8012684:	6039      	str	r1, [r7, #0]
	if (!_pObserver)
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801268a:	2b00      	cmp	r3, #0
 801268c:	d10f      	bne.n	80126ae <_ZN5board14NrfTransceiver11setObserverERK12IPhyObserver+0x32>
	{
		_pObserver = const_cast<IPhyObserver*>(&observer);
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	683a      	ldr	r2, [r7, #0]
 8012692:	625a      	str	r2, [r3, #36]	; 0x24
		assert(_pObserver);
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012698:	2b00      	cmp	r3, #0
 801269a:	d106      	bne.n	80126aa <_ZN5board14NrfTransceiver11setObserverERK12IPhyObserver+0x2e>
 801269c:	4b06      	ldr	r3, [pc, #24]	; (80126b8 <_ZN5board14NrfTransceiver11setObserverERK12IPhyObserver+0x3c>)
 801269e:	4a07      	ldr	r2, [pc, #28]	; (80126bc <_ZN5board14NrfTransceiver11setObserverERK12IPhyObserver+0x40>)
 80126a0:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80126a4:	4806      	ldr	r0, [pc, #24]	; (80126c0 <_ZN5board14NrfTransceiver11setObserverERK12IPhyObserver+0x44>)
 80126a6:	f003 ffc9 	bl	801663c <__assert_func>
		return true;
 80126aa:	2301      	movs	r3, #1
 80126ac:	e000      	b.n	80126b0 <_ZN5board14NrfTransceiver11setObserverERK12IPhyObserver+0x34>
	}
	return false;
 80126ae:	2300      	movs	r3, #0
}
 80126b0:	4618      	mov	r0, r3
 80126b2:	3708      	adds	r7, #8
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd80      	pop	{r7, pc}
 80126b8:	0801acc0 	.word	0x0801acc0
 80126bc:	0801accc 	.word	0x0801accc
 80126c0:	0801a8e4 	.word	0x0801a8e4

080126c4 <_ZN5board14NrfTransceiver4sendERKN7desenet5FrameE>:

bool NrfTransceiver::send(const Frame & frame)
{
 80126c4:	b590      	push	{r4, r7, lr}
 80126c6:	b087      	sub	sp, #28
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
 80126cc:	6039      	str	r1, [r7, #0]
	unsigned char status;

	UNUSED(status);

	assert(NrfSpi::isInitialized());	// Call initialize() first!
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	3304      	adds	r3, #4
 80126d2:	4618      	mov	r0, r3
 80126d4:	f7fe fd80 	bl	80111d8 <_ZNK6NrfSpi13isInitializedEv>
 80126d8:	4603      	mov	r3, r0
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d106      	bne.n	80126ec <_ZN5board14NrfTransceiver4sendERKN7desenet5FrameE+0x28>
 80126de:	4b28      	ldr	r3, [pc, #160]	; (8012780 <_ZN5board14NrfTransceiver4sendERKN7desenet5FrameE+0xbc>)
 80126e0:	4a28      	ldr	r2, [pc, #160]	; (8012784 <_ZN5board14NrfTransceiver4sendERKN7desenet5FrameE+0xc0>)
 80126e2:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 80126e6:	4828      	ldr	r0, [pc, #160]	; (8012788 <_ZN5board14NrfTransceiver4sendERKN7desenet5FrameE+0xc4>)
 80126e8:	f003 ffa8 	bl	801663c <__assert_func>

	if (!frame.length())
 80126ec:	6838      	ldr	r0, [r7, #0]
 80126ee:	f7f6 fa41 	bl	8008b74 <_ZNK7desenet5Frame6lengthEv>
 80126f2:	4603      	mov	r3, r0
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	bf0c      	ite	eq
 80126f8:	2301      	moveq	r3, #1
 80126fa:	2300      	movne	r3, #0
 80126fc:	b2db      	uxtb	r3, r3
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d006      	beq.n	8012710 <_ZN5board14NrfTransceiver4sendERKN7desenet5FrameE+0x4c>
	{
		assert(false);	// Really wont to send frame with zero length?!
 8012702:	4b22      	ldr	r3, [pc, #136]	; (801278c <_ZN5board14NrfTransceiver4sendERKN7desenet5FrameE+0xc8>)
 8012704:	4a1f      	ldr	r2, [pc, #124]	; (8012784 <_ZN5board14NrfTransceiver4sendERKN7desenet5FrameE+0xc0>)
 8012706:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 801270a:	481f      	ldr	r0, [pc, #124]	; (8012788 <_ZN5board14NrfTransceiver4sendERKN7desenet5FrameE+0xc4>)
 801270c:	f003 ff96 	bl	801663c <__assert_func>
		return false;
	}

	// Set destination address
	setDestinationAddress(frame.destination());
 8012710:	f107 030c 	add.w	r3, r7, #12
 8012714:	6839      	ldr	r1, [r7, #0]
 8012716:	4618      	mov	r0, r3
 8012718:	f7f7 f910 	bl	800993c <_ZNK7desenet5Frame11destinationEv>
 801271c:	f107 030c 	add.w	r3, r7, #12
 8012720:	4619      	mov	r1, r3
 8012722:	6878      	ldr	r0, [r7, #4]
 8012724:	f7ff fdc2 	bl	80122ac <_ZN5board14NrfTransceiver21setDestinationAddressEN3phy7AddressILj4EEE>
 8012728:	f107 030c 	add.w	r3, r7, #12
 801272c:	4618      	mov	r0, r3
 801272e:	f7f4 fc05 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>

	traceOut("Nrf: TX Frame (size %d): %s", frame.length(), frame.toString());
 8012732:	6838      	ldr	r0, [r7, #0]
 8012734:	f7f6 fa1e 	bl	8008b74 <_ZNK7desenet5Frame6lengthEv>
 8012738:	4604      	mov	r4, r0
 801273a:	6838      	ldr	r0, [r7, #0]
 801273c:	f7f7 f9aa 	bl	8009a94 <_ZNK7desenet5Frame8toStringEv>
 8012740:	4603      	mov	r3, r0
 8012742:	461a      	mov	r2, r3
 8012744:	4621      	mov	r1, r4
 8012746:	4812      	ldr	r0, [pc, #72]	; (8012790 <_ZN5board14NrfTransceiver4sendERKN7desenet5FrameE+0xcc>)
 8012748:	f7ff fe6c 	bl	8012424 <_ZN5board14NrfTransceiver8traceOutEPKcz>

	NrfSpi::disableCE();
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	3304      	adds	r3, #4
 8012750:	4618      	mov	r0, r3
 8012752:	f7ff fa17 	bl	8011b84 <_ZNK6NrfSpi9disableCEEv>

	// Send payload - send any data
	status = NrfSpi::sendFrame(frame);
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	3304      	adds	r3, #4
 801275a:	6839      	ldr	r1, [r7, #0]
 801275c:	4618      	mov	r0, r3
 801275e:	f7fe fe9b 	bl	8011498 <_ZN6NrfSpi9sendFrameERKN7desenet5FrameE>
 8012762:	4603      	mov	r3, r0
 8012764:	75fb      	strb	r3, [r7, #23]

    enterTXMode();
 8012766:	6878      	ldr	r0, [r7, #4]
 8012768:	f7ff ff05 	bl	8012576 <_ZN5board14NrfTransceiver11enterTXModeEv>

	// Enable CE -> Starts the transmission
    NrfSpi::enableCE();
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	3304      	adds	r3, #4
 8012770:	4618      	mov	r0, r3
 8012772:	f7ff f9f3 	bl	8011b5c <_ZNK6NrfSpi8enableCEEv>

	return true;
 8012776:	2301      	movs	r3, #1
}
 8012778:	4618      	mov	r0, r3
 801277a:	371c      	adds	r7, #28
 801277c:	46bd      	mov	sp, r7
 801277e:	bd90      	pop	{r4, r7, pc}
 8012780:	0801abf0 	.word	0x0801abf0
 8012784:	0801ad14 	.word	0x0801ad14
 8012788:	0801a8e4 	.word	0x0801a8e4
 801278c:	0801ad54 	.word	0x0801ad54
 8012790:	0801ad5c 	.word	0x0801ad5c

08012794 <_ZN5board14NrfTransceiver8transmitERKN3phy7AddressILj4EEEPKhRKj>:

bool NrfTransceiver::transmit(const tAddress & destinationAddress, const uint8_t * const buffer, const std::size_t & length)
{
 8012794:	b590      	push	{r4, r7, lr}
 8012796:	b089      	sub	sp, #36	; 0x24
 8012798:	af00      	add	r7, sp, #0
 801279a:	60f8      	str	r0, [r7, #12]
 801279c:	60b9      	str	r1, [r7, #8]
 801279e:	607a      	str	r2, [r7, #4]
 80127a0:	603b      	str	r3, [r7, #0]
	unsigned char status;
	UNUSED(status);		// Make compiler happy

	assert(NrfSpi::isInitialized());	// Call initialize() first!
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	3304      	adds	r3, #4
 80127a6:	4618      	mov	r0, r3
 80127a8:	f7fe fd16 	bl	80111d8 <_ZNK6NrfSpi13isInitializedEv>
 80127ac:	4603      	mov	r3, r0
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d106      	bne.n	80127c0 <_ZN5board14NrfTransceiver8transmitERKN3phy7AddressILj4EEEPKhRKj+0x2c>
 80127b2:	4b25      	ldr	r3, [pc, #148]	; (8012848 <_ZN5board14NrfTransceiver8transmitERKN3phy7AddressILj4EEEPKhRKj+0xb4>)
 80127b4:	4a25      	ldr	r2, [pc, #148]	; (801284c <_ZN5board14NrfTransceiver8transmitERKN3phy7AddressILj4EEEPKhRKj+0xb8>)
 80127b6:	f240 2105 	movw	r1, #517	; 0x205
 80127ba:	4825      	ldr	r0, [pc, #148]	; (8012850 <_ZN5board14NrfTransceiver8transmitERKN3phy7AddressILj4EEEPKhRKj+0xbc>)
 80127bc:	f003 ff3e 	bl	801663c <__assert_func>

	if (!length)
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d106      	bne.n	80127d6 <_ZN5board14NrfTransceiver8transmitERKN3phy7AddressILj4EEEPKhRKj+0x42>
	{
		assert(false);	// Really wont to send frame with zero length?!
 80127c8:	4b22      	ldr	r3, [pc, #136]	; (8012854 <_ZN5board14NrfTransceiver8transmitERKN3phy7AddressILj4EEEPKhRKj+0xc0>)
 80127ca:	4a20      	ldr	r2, [pc, #128]	; (801284c <_ZN5board14NrfTransceiver8transmitERKN3phy7AddressILj4EEEPKhRKj+0xb8>)
 80127cc:	f240 2109 	movw	r1, #521	; 0x209
 80127d0:	481f      	ldr	r0, [pc, #124]	; (8012850 <_ZN5board14NrfTransceiver8transmitERKN3phy7AddressILj4EEEPKhRKj+0xbc>)
 80127d2:	f003 ff33 	bl	801663c <__assert_func>
		return false;
	}

	// Set destination address
	setDestinationAddress(destinationAddress);
 80127d6:	f107 0314 	add.w	r3, r7, #20
 80127da:	68b9      	ldr	r1, [r7, #8]
 80127dc:	4618      	mov	r0, r3
 80127de:	f7fe fcc7 	bl	8011170 <_ZN3phy7AddressILj4EEC1ERKS1_>
 80127e2:	f107 0314 	add.w	r3, r7, #20
 80127e6:	4619      	mov	r1, r3
 80127e8:	68f8      	ldr	r0, [r7, #12]
 80127ea:	f7ff fd5f 	bl	80122ac <_ZN5board14NrfTransceiver21setDestinationAddressEN3phy7AddressILj4EEE>
 80127ee:	f107 0314 	add.w	r3, r7, #20
 80127f2:	4618      	mov	r0, r3
 80127f4:	f7f4 fba2 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>

	traceOut("Nrf: TX Frame (size %d): %s", length, Frame::toString(buffer, length));
 80127f8:	683b      	ldr	r3, [r7, #0]
 80127fa:	681c      	ldr	r4, [r3, #0]
 80127fc:	6839      	ldr	r1, [r7, #0]
 80127fe:	6878      	ldr	r0, [r7, #4]
 8012800:	f7f7 f962 	bl	8009ac8 <_ZN7desenet5Frame8toStringEPKhRKj>
 8012804:	4603      	mov	r3, r0
 8012806:	461a      	mov	r2, r3
 8012808:	4621      	mov	r1, r4
 801280a:	4813      	ldr	r0, [pc, #76]	; (8012858 <_ZN5board14NrfTransceiver8transmitERKN3phy7AddressILj4EEEPKhRKj+0xc4>)
 801280c:	f7ff fe0a 	bl	8012424 <_ZN5board14NrfTransceiver8traceOutEPKcz>

	NrfSpi::disableCE();
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	3304      	adds	r3, #4
 8012814:	4618      	mov	r0, r3
 8012816:	f7ff f9b5 	bl	8011b84 <_ZNK6NrfSpi9disableCEEv>

	// Send payload - send any data
	status = NrfSpi::transmit(buffer, length);
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	3304      	adds	r3, #4
 801281e:	683a      	ldr	r2, [r7, #0]
 8012820:	6879      	ldr	r1, [r7, #4]
 8012822:	4618      	mov	r0, r3
 8012824:	f7fe fe6c 	bl	8011500 <_ZN6NrfSpi8transmitEPKhRKj>
 8012828:	4603      	mov	r3, r0
 801282a:	77fb      	strb	r3, [r7, #31]

    enterTXMode();		// Start transmission
 801282c:	68f8      	ldr	r0, [r7, #12]
 801282e:	f7ff fea2 	bl	8012576 <_ZN5board14NrfTransceiver11enterTXModeEv>

	// Enable CE -> Starts the transmission
    NrfSpi::enableCE();
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	3304      	adds	r3, #4
 8012836:	4618      	mov	r0, r3
 8012838:	f7ff f990 	bl	8011b5c <_ZNK6NrfSpi8enableCEEv>

	return true;
 801283c:	2301      	movs	r3, #1
}
 801283e:	4618      	mov	r0, r3
 8012840:	3724      	adds	r7, #36	; 0x24
 8012842:	46bd      	mov	sp, r7
 8012844:	bd90      	pop	{r4, r7, pc}
 8012846:	bf00      	nop
 8012848:	0801abf0 	.word	0x0801abf0
 801284c:	0801ad78 	.word	0x0801ad78
 8012850:	0801a8e4 	.word	0x0801a8e4
 8012854:	0801ad54 	.word	0x0801ad54
 8012858:	0801ad5c 	.word	0x0801ad5c

0801285c <_ZNK3phy7AddressILj4EE6copyToEPh>:
	void copyTo( uint8_t * const to ) const
 801285c:	b580      	push	{r7, lr}
 801285e:	b082      	sub	sp, #8
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
 8012864:	6039      	str	r1, [r7, #0]
		assert( to );
 8012866:	683b      	ldr	r3, [r7, #0]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d105      	bne.n	8012878 <_ZNK3phy7AddressILj4EE6copyToEPh+0x1c>
 801286c:	4b09      	ldr	r3, [pc, #36]	; (8012894 <_ZNK3phy7AddressILj4EE6copyToEPh+0x38>)
 801286e:	4a0a      	ldr	r2, [pc, #40]	; (8012898 <_ZNK3phy7AddressILj4EE6copyToEPh+0x3c>)
 8012870:	2183      	movs	r1, #131	; 0x83
 8012872:	480a      	ldr	r0, [pc, #40]	; (801289c <_ZNK3phy7AddressILj4EE6copyToEPh+0x40>)
 8012874:	f003 fee2 	bl	801663c <__assert_func>
		if ( to )
 8012878:	683b      	ldr	r3, [r7, #0]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d005      	beq.n	801288a <_ZNK3phy7AddressILj4EE6copyToEPh+0x2e>
					reinterpret_cast<const void *>( _address ) , size );
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	3304      	adds	r3, #4
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	461a      	mov	r2, r3
			memcpy( reinterpret_cast<void *>( to ) ,
 8012886:	683b      	ldr	r3, [r7, #0]
 8012888:	601a      	str	r2, [r3, #0]
	}
 801288a:	bf00      	nop
 801288c:	3708      	adds	r7, #8
 801288e:	46bd      	mov	sp, r7
 8012890:	bd80      	pop	{r7, pc}
 8012892:	bf00      	nop
 8012894:	0801aebc 	.word	0x0801aebc
 8012898:	0801aec0 	.word	0x0801aec0
 801289c:	0801ae44 	.word	0x0801ae44

080128a0 <_Z41__static_initialization_and_destruction_0ii>:
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b088      	sub	sp, #32
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
 80128a8:	6039      	str	r1, [r7, #0]
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	2b01      	cmp	r3, #1
 80128ae:	d122      	bne.n	80128f6 <_Z41__static_initialization_and_destruction_0ii+0x56>
 80128b0:	683b      	ldr	r3, [r7, #0]
 80128b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80128b6:	4293      	cmp	r3, r2
 80128b8:	d11d      	bne.n	80128f6 <_Z41__static_initialization_and_destruction_0ii+0x56>
 80128ba:	4b18      	ldr	r3, [pc, #96]	; (801291c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	613b      	str	r3, [r7, #16]
 80128c0:	f107 0310 	add.w	r3, r7, #16
 80128c4:	60bb      	str	r3, [r7, #8]
 80128c6:	2304      	movs	r3, #4
 80128c8:	60fb      	str	r3, [r7, #12]
 80128ca:	f107 0308 	add.w	r3, r7, #8
 80128ce:	e893 0006 	ldmia.w	r3, {r1, r2}
 80128d2:	4813      	ldr	r0, [pc, #76]	; (8012920 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80128d4:	f7f4 f9f6 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
  static const desenet::Address SENSOR_ADDRESS({0xC7, 0xC7, 0xC7, 0xC7});	///< @brief Sensor's reception address.
 80128d8:	4b12      	ldr	r3, [pc, #72]	; (8012924 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	61fb      	str	r3, [r7, #28]
 80128de:	f107 031c 	add.w	r3, r7, #28
 80128e2:	617b      	str	r3, [r7, #20]
 80128e4:	2304      	movs	r3, #4
 80128e6:	61bb      	str	r3, [r7, #24]
 80128e8:	f107 0314 	add.w	r3, r7, #20
 80128ec:	e893 0006 	ldmia.w	r3, {r1, r2}
 80128f0:	480d      	ldr	r0, [pc, #52]	; (8012928 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80128f2:	f7f4 f9e7 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d10a      	bne.n	8012912 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80128fc:	683b      	ldr	r3, [r7, #0]
 80128fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012902:	4293      	cmp	r3, r2
 8012904:	d105      	bne.n	8012912 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8012906:	4808      	ldr	r0, [pc, #32]	; (8012928 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8012908:	f7f4 fb18 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 801290c:	4804      	ldr	r0, [pc, #16]	; (8012920 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801290e:	f7f4 fb15 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
 8012912:	bf00      	nop
 8012914:	3720      	adds	r7, #32
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}
 801291a:	bf00      	nop
 801291c:	0801af28 	.word	0x0801af28
 8012920:	200019bc 	.word	0x200019bc
 8012924:	0801af2c 	.word	0x0801af2c
 8012928:	200019c4 	.word	0x200019c4

0801292c <_GLOBAL__sub_I__ZN5board14NrfTransceiver10_pInstanceE>:
 801292c:	b580      	push	{r7, lr}
 801292e:	af00      	add	r7, sp, #0
 8012930:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012934:	2001      	movs	r0, #1
 8012936:	f7ff ffb3 	bl	80128a0 <_Z41__static_initialization_and_destruction_0ii>
 801293a:	bd80      	pop	{r7, pc}

0801293c <_GLOBAL__sub_D__ZN5board14NrfTransceiver10_pInstanceE>:
 801293c:	b580      	push	{r7, lr}
 801293e:	af00      	add	r7, sp, #0
 8012940:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012944:	2000      	movs	r0, #0
 8012946:	f7ff ffab 	bl	80128a0 <_Z41__static_initialization_and_destruction_0ii>
 801294a:	bd80      	pop	{r7, pc}

0801294c <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 801294c:	b480      	push	{r7}
 801294e:	b083      	sub	sp, #12
 8012950:	af00      	add	r7, sp, #0
 8012952:	6078      	str	r0, [r7, #4]
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	689b      	ldr	r3, [r3, #8]
 8012958:	2b00      	cmp	r3, #0
 801295a:	bf0c      	ite	eq
 801295c:	2301      	moveq	r3, #1
 801295e:	2300      	movne	r3, #0
 8012960:	b2db      	uxtb	r3, r3
 8012962:	4618      	mov	r0, r3
 8012964:	370c      	adds	r7, #12
 8012966:	46bd      	mov	sp, r7
 8012968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296c:	4770      	bx	lr
	...

08012970 <_ZN7desenet22NetworkInterfaceDriverC1Ev>:
         * @return  List of network interface driver descriptors.
         */
        static DescriptorList interfaceDescriptors();

    protected:
        NetworkInterfaceDriver() {}
 8012970:	b480      	push	{r7}
 8012972:	b083      	sub	sp, #12
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
 8012978:	4a04      	ldr	r2, [pc, #16]	; (801298c <_ZN7desenet22NetworkInterfaceDriverC1Ev+0x1c>)
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	601a      	str	r2, [r3, #0]
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	4618      	mov	r0, r3
 8012982:	370c      	adds	r7, #12
 8012984:	46bd      	mov	sp, r7
 8012986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298a:	4770      	bx	lr
 801298c:	0801bed0 	.word	0x0801bed0

08012990 <_ZN12IPhyObserverC1Ev>:
 */
class IPhyObserver
{
protected:
	// It is just an interface, so constructor and destructor should be not public.
	explicit IPhyObserver() {}
 8012990:	b480      	push	{r7}
 8012992:	b083      	sub	sp, #12
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
 8012998:	4a04      	ldr	r2, [pc, #16]	; (80129ac <_ZN12IPhyObserverC1Ev+0x1c>)
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	601a      	str	r2, [r3, #0]
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	4618      	mov	r0, r3
 80129a2:	370c      	adds	r7, #12
 80129a4:	46bd      	mov	sp, r7
 80129a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129aa:	4770      	bx	lr
 80129ac:	0801e060 	.word	0x0801e060

080129b0 <__tcf_0>:
 */
desenet::NetworkInterfaceDriver * instanciateNic(uint32_t address, const std::string & name)
{
	UNUSED(address); UNUSED(name);

	static NrfTransceiverDriver nrfTransceiverDriver;
 80129b0:	b580      	push	{r7, lr}
 80129b2:	af00      	add	r7, sp, #0
 80129b4:	4801      	ldr	r0, [pc, #4]	; (80129bc <__tcf_0+0xc>)
 80129b6:	f000 f869 	bl	8012a8c <_ZN7desenet20NrfTransceiverDriverD1Ev>
 80129ba:	bd80      	pop	{r7, pc}
 80129bc:	20001af8 	.word	0x20001af8

080129c0 <_Z14instanciateNicmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b082      	sub	sp, #8
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
 80129c8:	6039      	str	r1, [r7, #0]
	static NrfTransceiverDriver nrfTransceiverDriver;
 80129ca:	4b13      	ldr	r3, [pc, #76]	; (8012a18 <_Z14instanciateNicmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x58>)
 80129cc:	781b      	ldrb	r3, [r3, #0]
 80129ce:	f3bf 8f5b 	dmb	ish
 80129d2:	b2db      	uxtb	r3, r3
 80129d4:	f003 0301 	and.w	r3, r3, #1
 80129d8:	2b00      	cmp	r3, #0
 80129da:	bf0c      	ite	eq
 80129dc:	2301      	moveq	r3, #1
 80129de:	2300      	movne	r3, #0
 80129e0:	b2db      	uxtb	r3, r3
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d013      	beq.n	8012a0e <_Z14instanciateNicmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e>
 80129e6:	480c      	ldr	r0, [pc, #48]	; (8012a18 <_Z14instanciateNicmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x58>)
 80129e8:	f003 fd3e 	bl	8016468 <__cxa_guard_acquire>
 80129ec:	4603      	mov	r3, r0
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	bf14      	ite	ne
 80129f2:	2301      	movne	r3, #1
 80129f4:	2300      	moveq	r3, #0
 80129f6:	b2db      	uxtb	r3, r3
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d008      	beq.n	8012a0e <_Z14instanciateNicmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e>
 80129fc:	4807      	ldr	r0, [pc, #28]	; (8012a1c <_Z14instanciateNicmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>)
 80129fe:	f000 f811 	bl	8012a24 <_ZN7desenet20NrfTransceiverDriverC1Ev>
 8012a02:	4805      	ldr	r0, [pc, #20]	; (8012a18 <_Z14instanciateNicmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x58>)
 8012a04:	f003 fd3c 	bl	8016480 <__cxa_guard_release>
 8012a08:	4805      	ldr	r0, [pc, #20]	; (8012a20 <_Z14instanciateNicmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x60>)
 8012a0a:	f003 fe35 	bl	8016678 <atexit>

	return &nrfTransceiverDriver;
 8012a0e:	4b03      	ldr	r3, [pc, #12]	; (8012a1c <_Z14instanciateNicmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>)
}
 8012a10:	4618      	mov	r0, r3
 8012a12:	3708      	adds	r7, #8
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bd80      	pop	{r7, pc}
 8012a18:	20001b74 	.word	0x20001b74
 8012a1c:	20001af8 	.word	0x20001af8
 8012a20:	080129b1 	.word	0x080129b1

08012a24 <_ZN7desenet20NrfTransceiverDriverC1Ev>:

NrfTransceiverDriver::NrfTransceiverDriver()
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b082      	sub	sp, #8
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
 : _initialized(false),
   _receiveCallbackHandler(nullptr)
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f7ff ff9e 	bl	8012970 <_ZN7desenet22NetworkInterfaceDriverC1Ev>
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	3304      	adds	r3, #4
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f7f7 fbcf 	bl	800a1dc <_ZN7desenet22NetworkInterfaceDriver10DescriptorC1Ev>
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	3308      	adds	r3, #8
 8012a42:	4618      	mov	r0, r3
 8012a44:	f7ff ffa4 	bl	8012990 <_ZN12IPhyObserverC1Ev>
 8012a48:	4a0d      	ldr	r2, [pc, #52]	; (8012a80 <_ZN7desenet20NrfTransceiverDriverC1Ev+0x5c>)
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	601a      	str	r2, [r3, #0]
 8012a4e:	4a0d      	ldr	r2, [pc, #52]	; (8012a84 <_ZN7desenet20NrfTransceiverDriverC1Ev+0x60>)
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	605a      	str	r2, [r3, #4]
 8012a54:	4a0c      	ldr	r2, [pc, #48]	; (8012a88 <_ZN7desenet20NrfTransceiverDriverC1Ev+0x64>)
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	609a      	str	r2, [r3, #8]
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	731a      	strb	r2, [r3, #12]
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	3310      	adds	r3, #16
 8012a64:	4618      	mov	r0, r3
 8012a66:	f7ff f8c5 	bl	8011bf4 <_ZN5board14NrfTransceiverC1Ev>
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	336c      	adds	r3, #108	; 0x6c
 8012a6e:	2100      	movs	r1, #0
 8012a70:	4618      	mov	r0, r3
 8012a72:	f000 f95f 	bl	8012d34 <_ZNSt8functionIFvRN7desenet22NetworkInterfaceDriverEmPKhjEEC1EDn>
{

}
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	4618      	mov	r0, r3
 8012a7a:	3708      	adds	r7, #8
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}
 8012a80:	0801dff4 	.word	0x0801dff4
 8012a84:	0801e02c 	.word	0x0801e02c
 8012a88:	0801e048 	.word	0x0801e048

08012a8c <_ZN7desenet20NrfTransceiverDriverD1Ev>:

NrfTransceiverDriver::~NrfTransceiverDriver()
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	b082      	sub	sp, #8
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
 8012a94:	4a07      	ldr	r2, [pc, #28]	; (8012ab4 <_ZN7desenet20NrfTransceiverDriverD1Ev+0x28>)
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	601a      	str	r2, [r3, #0]
 8012a9a:	4a07      	ldr	r2, [pc, #28]	; (8012ab8 <_ZN7desenet20NrfTransceiverDriverD1Ev+0x2c>)
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	605a      	str	r2, [r3, #4]
 8012aa0:	4a06      	ldr	r2, [pc, #24]	; (8012abc <_ZN7desenet20NrfTransceiverDriverD1Ev+0x30>)
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	609a      	str	r2, [r3, #8]
{
	assert(false);	// Instance should never be deleted
 8012aa6:	4b06      	ldr	r3, [pc, #24]	; (8012ac0 <_ZN7desenet20NrfTransceiverDriverD1Ev+0x34>)
 8012aa8:	4a06      	ldr	r2, [pc, #24]	; (8012ac4 <_ZN7desenet20NrfTransceiverDriverD1Ev+0x38>)
 8012aaa:	211d      	movs	r1, #29
 8012aac:	4806      	ldr	r0, [pc, #24]	; (8012ac8 <_ZN7desenet20NrfTransceiverDriverD1Ev+0x3c>)
 8012aae:	f003 fdc5 	bl	801663c <__assert_func>
 8012ab2:	bf00      	nop
 8012ab4:	0801dff4 	.word	0x0801dff4
 8012ab8:	0801e02c 	.word	0x0801e02c
 8012abc:	0801e048 	.word	0x0801e048
 8012ac0:	0801af30 	.word	0x0801af30
 8012ac4:	0801af38 	.word	0x0801af38
 8012ac8:	0801af78 	.word	0x0801af78

08012acc <_ZThn4_N7desenet20NrfTransceiverDriverD1Ev>:
							 public NetworkInterfaceDriver::Descriptor,
							 protected IPhyObserver
{
public:
	NrfTransceiverDriver();
	virtual ~NrfTransceiverDriver();
 8012acc:	f1a0 0004 	sub.w	r0, r0, #4
 8012ad0:	f7ff bfdc 	b.w	8012a8c <_ZN7desenet20NrfTransceiverDriverD1Ev>

08012ad4 <_ZThn8_N7desenet20NrfTransceiverDriverD1Ev>:
 8012ad4:	f1a0 0008 	sub.w	r0, r0, #8
 8012ad8:	f7ff bfd8 	b.w	8012a8c <_ZN7desenet20NrfTransceiverDriverD1Ev>

08012adc <_ZN7desenet20NrfTransceiverDriverD0Ev>:
NrfTransceiverDriver::~NrfTransceiverDriver()
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b082      	sub	sp, #8
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
}
 8012ae4:	6878      	ldr	r0, [r7, #4]
 8012ae6:	f7ff ffd1 	bl	8012a8c <_ZN7desenet20NrfTransceiverDriverD1Ev>
 8012aea:	217c      	movs	r1, #124	; 0x7c
 8012aec:	6878      	ldr	r0, [r7, #4]
 8012aee:	f003 fcb7 	bl	8016460 <_ZdlPvj>
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	4618      	mov	r0, r3
 8012af6:	3708      	adds	r7, #8
 8012af8:	46bd      	mov	sp, r7
 8012afa:	bd80      	pop	{r7, pc}

08012afc <_ZThn8_N7desenet20NrfTransceiverDriverD0Ev>:
 8012afc:	f1a0 0008 	sub.w	r0, r0, #8
 8012b00:	f7ff bfec 	b.w	8012adc <_ZN7desenet20NrfTransceiverDriverD0Ev>

08012b04 <_ZThn4_N7desenet20NrfTransceiverDriverD0Ev>:
 8012b04:	f1a0 0004 	sub.w	r0, r0, #4
 8012b08:	f7ff bfe8 	b.w	8012adc <_ZN7desenet20NrfTransceiverDriverD0Ev>

08012b0c <_ZN7desenet20NrfTransceiverDriver10initializeEv>:

bool NrfTransceiverDriver::initialize()
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b082      	sub	sp, #8
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
	if (!_initialized)
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	7b1b      	ldrb	r3, [r3, #12]
 8012b18:	f083 0301 	eor.w	r3, r3, #1
 8012b1c:	b2db      	uxtb	r3, r3
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d010      	beq.n	8012b44 <_ZN7desenet20NrfTransceiverDriver10initializeEv+0x38>
	{
		_transceiver.initialize();
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	3310      	adds	r3, #16
 8012b26:	4618      	mov	r0, r3
 8012b28:	f7ff f91c 	bl	8011d64 <_ZN5board14NrfTransceiver10initializeEv>
		_transceiver.setObserver(*this);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	f103 0210 	add.w	r2, r3, #16
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	3308      	adds	r3, #8
 8012b36:	4619      	mov	r1, r3
 8012b38:	4610      	mov	r0, r2
 8012b3a:	f7ff fd9f 	bl	801267c <_ZN5board14NrfTransceiver11setObserverERK12IPhyObserver>
		_initialized = true;
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	2201      	movs	r2, #1
 8012b42:	731a      	strb	r2, [r3, #12]
	}
	return true;
 8012b44:	2301      	movs	r3, #1
}
 8012b46:	4618      	mov	r0, r3
 8012b48:	3708      	adds	r7, #8
 8012b4a:	46bd      	mov	sp, r7
 8012b4c:	bd80      	pop	{r7, pc}

08012b4e <_ZNK7desenet20NrfTransceiverDriver13isInitializedEv>:

bool NrfTransceiverDriver::isInitialized() const
{
 8012b4e:	b480      	push	{r7}
 8012b50:	b083      	sub	sp, #12
 8012b52:	af00      	add	r7, sp, #0
 8012b54:	6078      	str	r0, [r7, #4]
	return _initialized;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	7b1b      	ldrb	r3, [r3, #12]
}
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	370c      	adds	r7, #12
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b64:	4770      	bx	lr
	...

08012b68 <_ZNK7desenet20NrfTransceiverDriver12localAddressEv>:

std::array<std::uint8_t, 4> NrfTransceiverDriver::localAddress() const
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b084      	sub	sp, #16
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
	std::array<std::uint8_t, 4> address;
#if (DESENET_GATEWAY_NODE != 0)
  GATEWAY_ADDRESS.copyTo(address.data());
#else
  SENSOR_ADDRESS.copyTo(address.data());
 8012b70:	f107 0308 	add.w	r3, r7, #8
 8012b74:	4618      	mov	r0, r3
 8012b76:	f000 f8eb 	bl	8012d50 <_ZNSt5arrayIhLj4EE4dataEv>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	4619      	mov	r1, r3
 8012b7e:	480b      	ldr	r0, [pc, #44]	; (8012bac <_ZNK7desenet20NrfTransceiverDriver12localAddressEv+0x44>)
 8012b80:	f7ff fe6c 	bl	801285c <_ZNK3phy7AddressILj4EE6copyToEPh>
#endif
  return address;
 8012b84:	68bb      	ldr	r3, [r7, #8]
 8012b86:	60fb      	str	r3, [r7, #12]
 8012b88:	2300      	movs	r3, #0
 8012b8a:	7b3a      	ldrb	r2, [r7, #12]
 8012b8c:	f362 0307 	bfi	r3, r2, #0, #8
 8012b90:	7b7a      	ldrb	r2, [r7, #13]
 8012b92:	f362 230f 	bfi	r3, r2, #8, #8
 8012b96:	7bba      	ldrb	r2, [r7, #14]
 8012b98:	f362 4317 	bfi	r3, r2, #16, #8
 8012b9c:	7bfa      	ldrb	r2, [r7, #15]
 8012b9e:	f362 631f 	bfi	r3, r2, #24, #8
}
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	3710      	adds	r7, #16
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	bd80      	pop	{r7, pc}
 8012baa:	bf00      	nop
 8012bac:	20001af0 	.word	0x20001af0

08012bb0 <_ZN7desenet20NrfTransceiverDriver8transmitEPKhj>:

bool NrfTransceiverDriver::transmit(const std::uint8_t * const buffer, const std::size_t length)
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b086      	sub	sp, #24
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	60f8      	str	r0, [r7, #12]
 8012bb8:	60b9      	str	r1, [r7, #8]
 8012bba:	607a      	str	r2, [r7, #4]
	// Cut away the frame header. It is automatically added by the nrf chip
	_transceiver.transmit(GATEWAY_ADDRESS, buffer + Frame::HEADER_SIZE, length - Frame::HEADER_SIZE);
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	f103 0010 	add.w	r0, r3, #16
 8012bc2:	68bb      	ldr	r3, [r7, #8]
 8012bc4:	1d5a      	adds	r2, r3, #5
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	3b05      	subs	r3, #5
 8012bca:	617b      	str	r3, [r7, #20]
 8012bcc:	f107 0314 	add.w	r3, r7, #20
 8012bd0:	4903      	ldr	r1, [pc, #12]	; (8012be0 <_ZN7desenet20NrfTransceiverDriver8transmitEPKhj+0x30>)
 8012bd2:	f7ff fddf 	bl	8012794 <_ZN5board14NrfTransceiver8transmitERKN3phy7AddressILj4EEEPKhRKj>
	return true;
 8012bd6:	2301      	movs	r3, #1
}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	3718      	adds	r7, #24
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}
 8012be0:	20001ae8 	.word	0x20001ae8

08012be4 <_ZN7desenet20NrfTransceiverDriver19setReceptionHandlerESt8functionIFvRNS_22NetworkInterfaceDriverEmPKhjEE>:

void NrfTransceiverDriver::setReceptionHandler(ReceptionCallbackHandler handler /* = nullptr */)
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b082      	sub	sp, #8
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
 8012bec:	6039      	str	r1, [r7, #0]
	_receiveCallbackHandler = handler;
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	336c      	adds	r3, #108	; 0x6c
 8012bf2:	6839      	ldr	r1, [r7, #0]
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	f000 f8b8 	bl	8012d6a <_ZNSt8functionIFvRN7desenet22NetworkInterfaceDriverEmPKhjEEaSERKS6_>
}
 8012bfa:	bf00      	nop
 8012bfc:	3708      	adds	r7, #8
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}
	...

08012c04 <_ZNK7desenet20NrfTransceiverDriver10identifierB5cxx11Ev>:

std::string NrfTransceiverDriver::identifier() const
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b084      	sub	sp, #16
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
 8012c0c:	6039      	str	r1, [r7, #0]
	return "nrf0";
 8012c0e:	f107 030c 	add.w	r3, r7, #12
 8012c12:	4618      	mov	r0, r3
 8012c14:	f003 fc4d 	bl	80164b2 <_ZNSaIcEC1Ev>
 8012c18:	f107 030c 	add.w	r3, r7, #12
 8012c1c:	461a      	mov	r2, r3
 8012c1e:	4906      	ldr	r1, [pc, #24]	; (8012c38 <_ZNK7desenet20NrfTransceiverDriver10identifierB5cxx11Ev+0x34>)
 8012c20:	6878      	ldr	r0, [r7, #4]
 8012c22:	f003 fcd3 	bl	80165cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8012c26:	f107 030c 	add.w	r3, r7, #12
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f003 fc42 	bl	80164b4 <_ZNSaIcED1Ev>
}
 8012c30:	6878      	ldr	r0, [r7, #4]
 8012c32:	3710      	adds	r7, #16
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}
 8012c38:	0801b014 	.word	0x0801b014

08012c3c <_ZThn4_NK7desenet20NrfTransceiverDriver10identifierB5cxx11Ev>:

	// NetworkInterfaceDriver interface implementation
public:
	virtual std::string identifier() const;
 8012c3c:	f1a1 0104 	sub.w	r1, r1, #4
 8012c40:	f7ff bfe0 	b.w	8012c04 <_ZNK7desenet20NrfTransceiverDriver10identifierB5cxx11Ev>

08012c44 <_ZNK7desenet20NrfTransceiverDriver12friendlyNameB5cxx11Ev>:

std::string NrfTransceiverDriver::friendlyName() const
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b084      	sub	sp, #16
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
 8012c4c:	6039      	str	r1, [r7, #0]
	return "nrf0";
 8012c4e:	f107 030c 	add.w	r3, r7, #12
 8012c52:	4618      	mov	r0, r3
 8012c54:	f003 fc2d 	bl	80164b2 <_ZNSaIcEC1Ev>
 8012c58:	f107 030c 	add.w	r3, r7, #12
 8012c5c:	461a      	mov	r2, r3
 8012c5e:	4906      	ldr	r1, [pc, #24]	; (8012c78 <_ZNK7desenet20NrfTransceiverDriver12friendlyNameB5cxx11Ev+0x34>)
 8012c60:	6878      	ldr	r0, [r7, #4]
 8012c62:	f003 fcb3 	bl	80165cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8012c66:	f107 030c 	add.w	r3, r7, #12
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	f003 fc22 	bl	80164b4 <_ZNSaIcED1Ev>
}
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	3710      	adds	r7, #16
 8012c74:	46bd      	mov	sp, r7
 8012c76:	bd80      	pop	{r7, pc}
 8012c78:	0801b014 	.word	0x0801b014

08012c7c <_ZThn4_NK7desenet20NrfTransceiverDriver12friendlyNameB5cxx11Ev>:
	virtual bool transmit(const std::uint8_t *const buffer, const std::size_t length);
	virtual void setReceptionHandler(ReceptionCallbackHandler handler = nullptr);

	// NetworkInterfaceDriver::Descriptor interface implementation
public:
	virtual std::string friendlyName() const;
 8012c7c:	f1a1 0104 	sub.w	r1, r1, #4
 8012c80:	f7ff bfe0 	b.w	8012c44 <_ZNK7desenet20NrfTransceiverDriver12friendlyNameB5cxx11Ev>

08012c84 <_ZNK7desenet20NrfTransceiverDriver11instanciateEv>:

desenet::NetworkInterfaceDriver * NrfTransceiverDriver::instanciate() const
{
 8012c84:	b480      	push	{r7}
 8012c86:	b083      	sub	sp, #12
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
	return const_cast<NrfTransceiverDriver *>(this);
 8012c8c:	687b      	ldr	r3, [r7, #4]
}
 8012c8e:	4618      	mov	r0, r3
 8012c90:	370c      	adds	r7, #12
 8012c92:	46bd      	mov	sp, r7
 8012c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c98:	4770      	bx	lr

08012c9a <_ZThn4_NK7desenet20NrfTransceiverDriver11instanciateEv>:
	virtual desenet::NetworkInterfaceDriver * instanciate() const;
 8012c9a:	f1a0 0004 	sub.w	r0, r0, #4
 8012c9e:	f7ff bff1 	b.w	8012c84 <_ZNK7desenet20NrfTransceiverDriver11instanciateEv>
	...

08012ca4 <_ZN7desenet20NrfTransceiverDriver9onReceiveERKNS_5FrameE>:

void NrfTransceiverDriver::onReceive(const Frame & frame)
{
 8012ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ca6:	b087      	sub	sp, #28
 8012ca8:	af02      	add	r7, sp, #8
 8012caa:	6078      	str	r0, [r7, #4]
 8012cac:	6039      	str	r1, [r7, #0]
	assert(_receiveCallbackHandler);
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	336c      	adds	r3, #108	; 0x6c
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f000 f874 	bl	8012da0 <_ZNKSt8functionIFvRN7desenet22NetworkInterfaceDriverEmPKhjEEcvbEv>
 8012cb8:	4603      	mov	r3, r0
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d105      	bne.n	8012cca <_ZN7desenet20NrfTransceiverDriver9onReceiveERKNS_5FrameE+0x26>
 8012cbe:	4b10      	ldr	r3, [pc, #64]	; (8012d00 <_ZN7desenet20NrfTransceiverDriver9onReceiveERKNS_5FrameE+0x5c>)
 8012cc0:	4a10      	ldr	r2, [pc, #64]	; (8012d04 <_ZN7desenet20NrfTransceiverDriver9onReceiveERKNS_5FrameE+0x60>)
 8012cc2:	2158      	movs	r1, #88	; 0x58
 8012cc4:	4810      	ldr	r0, [pc, #64]	; (8012d08 <_ZN7desenet20NrfTransceiverDriver9onReceiveERKNS_5FrameE+0x64>)
 8012cc6:	f003 fcb9 	bl	801663c <__assert_func>

	const uint32_t receptionTime = NetworkTimeProvider::currentNetworkTime();
 8012cca:	f7f8 f807 	bl	800acdc <_ZN7desenet19NetworkTimeProvider18currentNetworkTimeEv>
 8012cce:	60f8      	str	r0, [r7, #12]

	_receiveCallbackHandler(*this, receptionTime, frame.buffer(), frame.length());
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8012cd6:	687d      	ldr	r5, [r7, #4]
 8012cd8:	6838      	ldr	r0, [r7, #0]
 8012cda:	f7f6 fc2c 	bl	8009536 <_ZNK7desenet5Frame6bufferEv>
 8012cde:	4606      	mov	r6, r0
 8012ce0:	6838      	ldr	r0, [r7, #0]
 8012ce2:	f7f5 ff47 	bl	8008b74 <_ZNK7desenet5Frame6lengthEv>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	9300      	str	r3, [sp, #0]
 8012cea:	4633      	mov	r3, r6
 8012cec:	68fa      	ldr	r2, [r7, #12]
 8012cee:	4629      	mov	r1, r5
 8012cf0:	4620      	mov	r0, r4
 8012cf2:	f000 f865 	bl	8012dc0 <_ZNKSt8functionIFvRN7desenet22NetworkInterfaceDriverEmPKhjEEclES2_mS4_j>
}
 8012cf6:	bf00      	nop
 8012cf8:	3714      	adds	r7, #20
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cfe:	bf00      	nop
 8012d00:	0801b01c 	.word	0x0801b01c
 8012d04:	0801b034 	.word	0x0801b034
 8012d08:	0801af78 	.word	0x0801af78

08012d0c <_ZThn8_N7desenet20NrfTransceiverDriver9onReceiveERKNS_5FrameE>:

	// IPhyObserver interface implementation
protected:
	virtual void onReceive(const Frame & frame);
 8012d0c:	f1a0 0008 	sub.w	r0, r0, #8
 8012d10:	f7ff bfc8 	b.w	8012ca4 <_ZN7desenet20NrfTransceiverDriver9onReceiveERKNS_5FrameE>

08012d14 <_ZN7desenet20NrfTransceiverDriver12onSendStatusEN12IPhyObserver10SendStatusE>:

void NrfTransceiverDriver::onSendStatus(IPhyObserver::SendStatus status)
{
 8012d14:	b480      	push	{r7}
 8012d16:	b083      	sub	sp, #12
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
 8012d1c:	460b      	mov	r3, r1
 8012d1e:	70fb      	strb	r3, [r7, #3]
	UNUSED(status);
}
 8012d20:	bf00      	nop
 8012d22:	370c      	adds	r7, #12
 8012d24:	46bd      	mov	sp, r7
 8012d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2a:	4770      	bx	lr

08012d2c <_ZThn8_N7desenet20NrfTransceiverDriver12onSendStatusEN12IPhyObserver10SendStatusE>:
	virtual void onSendStatus(SendStatus status);
 8012d2c:	f1a0 0008 	sub.w	r0, r0, #8
 8012d30:	f7ff bff0 	b.w	8012d14 <_ZN7desenet20NrfTransceiverDriver12onSendStatusEN12IPhyObserver10SendStatusE>

08012d34 <_ZNSt8functionIFvRN7desenet22NetworkInterfaceDriverEmPKhjEEC1EDn>:
      function(nullptr_t) noexcept
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b082      	sub	sp, #8
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]
 8012d3c:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	4618      	mov	r0, r3
 8012d42:	f7f8 fa39 	bl	800b1b8 <_ZNSt14_Function_baseC1Ev>
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	4618      	mov	r0, r3
 8012d4a:	3708      	adds	r7, #8
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	bd80      	pop	{r7, pc}

08012d50 <_ZNSt5arrayIhLj4EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b082      	sub	sp, #8
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f000 f862 	bl	8012e24 <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>
 8012d60:	4603      	mov	r3, r0
 8012d62:	4618      	mov	r0, r3
 8012d64:	3708      	adds	r7, #8
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bd80      	pop	{r7, pc}

08012d6a <_ZNSt8functionIFvRN7desenet22NetworkInterfaceDriverEmPKhjEEaSERKS6_>:
      operator=(const function& __x)
 8012d6a:	b580      	push	{r7, lr}
 8012d6c:	b086      	sub	sp, #24
 8012d6e:	af00      	add	r7, sp, #0
 8012d70:	6078      	str	r0, [r7, #4]
 8012d72:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8012d74:	f107 0308 	add.w	r3, r7, #8
 8012d78:	6839      	ldr	r1, [r7, #0]
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	f000 f85d 	bl	8012e3a <_ZNSt8functionIFvRN7desenet22NetworkInterfaceDriverEmPKhjEEC1ERKS6_>
 8012d80:	f107 0308 	add.w	r3, r7, #8
 8012d84:	6879      	ldr	r1, [r7, #4]
 8012d86:	4618      	mov	r0, r3
 8012d88:	f000 f879 	bl	8012e7e <_ZNSt8functionIFvRN7desenet22NetworkInterfaceDriverEmPKhjEE4swapERS6_>
 8012d8c:	f107 0308 	add.w	r3, r7, #8
 8012d90:	4618      	mov	r0, r3
 8012d92:	f7f8 fbc1 	bl	800b518 <_ZNSt8functionIFvRN7desenet22NetworkInterfaceDriverEmPKhjEED1Ev>
	return *this;
 8012d96:	687b      	ldr	r3, [r7, #4]
      }
 8012d98:	4618      	mov	r0, r3
 8012d9a:	3718      	adds	r7, #24
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}

08012da0 <_ZNKSt8functionIFvRN7desenet22NetworkInterfaceDriverEmPKhjEEcvbEv>:
      explicit operator bool() const noexcept
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b082      	sub	sp, #8
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	4618      	mov	r0, r3
 8012dac:	f7ff fdce 	bl	801294c <_ZNKSt14_Function_base8_M_emptyEv>
 8012db0:	4603      	mov	r3, r0
 8012db2:	f083 0301 	eor.w	r3, r3, #1
 8012db6:	b2db      	uxtb	r3, r3
 8012db8:	4618      	mov	r0, r3
 8012dba:	3708      	adds	r7, #8
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	bd80      	pop	{r7, pc}

08012dc0 <_ZNKSt8functionIFvRN7desenet22NetworkInterfaceDriverEmPKhjEEclES2_mS4_j>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8012dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012dc4:	b087      	sub	sp, #28
 8012dc6:	af02      	add	r7, sp, #8
 8012dc8:	60f8      	str	r0, [r7, #12]
 8012dca:	60b9      	str	r1, [r7, #8]
 8012dcc:	607a      	str	r2, [r7, #4]
 8012dce:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f7ff fdba 	bl	801294c <_ZNKSt14_Function_base8_M_emptyEv>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d001      	beq.n	8012de2 <_ZNKSt8functionIFvRN7desenet22NetworkInterfaceDriverEmPKhjEEclES2_mS4_j+0x22>
	__throw_bad_function_call();
 8012dde:	f003 fb7f 	bl	80164e0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	68dc      	ldr	r4, [r3, #12]
 8012de6:	68fd      	ldr	r5, [r7, #12]
 8012de8:	68b8      	ldr	r0, [r7, #8]
 8012dea:	f7f9 fc89 	bl	800c700 <_ZSt7forwardIRN7desenet22NetworkInterfaceDriverEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012dee:	4606      	mov	r6, r0
 8012df0:	1d3b      	adds	r3, r7, #4
 8012df2:	4618      	mov	r0, r3
 8012df4:	f7f9 fc8f 	bl	800c716 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8012df8:	4680      	mov	r8, r0
 8012dfa:	463b      	mov	r3, r7
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	f7f9 fc95 	bl	800c72c <_ZSt7forwardIPKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8012e02:	4681      	mov	r9, r0
 8012e04:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8012e08:	f7f9 fc9b 	bl	800c742 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8012e0c:	4603      	mov	r3, r0
 8012e0e:	9300      	str	r3, [sp, #0]
 8012e10:	464b      	mov	r3, r9
 8012e12:	4642      	mov	r2, r8
 8012e14:	4631      	mov	r1, r6
 8012e16:	4628      	mov	r0, r5
 8012e18:	47a0      	blx	r4
 8012e1a:	bf00      	nop
    }
 8012e1c:	3714      	adds	r7, #20
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08012e24 <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8012e24:	b480      	push	{r7}
 8012e26:	b083      	sub	sp, #12
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	4618      	mov	r0, r3
 8012e30:	370c      	adds	r7, #12
 8012e32:	46bd      	mov	sp, r7
 8012e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e38:	4770      	bx	lr

08012e3a <_ZNSt8functionIFvRN7desenet22NetworkInterfaceDriverEmPKhjEEC1ERKS6_>:
    function<_Res(_ArgTypes...)>::
 8012e3a:	b580      	push	{r7, lr}
 8012e3c:	b082      	sub	sp, #8
 8012e3e:	af00      	add	r7, sp, #0
 8012e40:	6078      	str	r0, [r7, #4]
 8012e42:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	4618      	mov	r0, r3
 8012e48:	f7f8 f9b6 	bl	800b1b8 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8012e4c:	6838      	ldr	r0, [r7, #0]
 8012e4e:	f7ff ffa7 	bl	8012da0 <_ZNKSt8functionIFvRN7desenet22NetworkInterfaceDriverEmPKhjEEcvbEv>
 8012e52:	4603      	mov	r3, r0
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d00d      	beq.n	8012e74 <_ZNSt8functionIFvRN7desenet22NetworkInterfaceDriverEmPKhjEEC1ERKS6_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8012e58:	683b      	ldr	r3, [r7, #0]
 8012e5a:	689b      	ldr	r3, [r3, #8]
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	6839      	ldr	r1, [r7, #0]
 8012e60:	2202      	movs	r2, #2
 8012e62:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8012e64:	683b      	ldr	r3, [r7, #0]
 8012e66:	68da      	ldr	r2, [r3, #12]
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	689a      	ldr	r2, [r3, #8]
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	609a      	str	r2, [r3, #8]
    }
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	4618      	mov	r0, r3
 8012e78:	3708      	adds	r7, #8
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd80      	pop	{r7, pc}

08012e7e <_ZNSt8functionIFvRN7desenet22NetworkInterfaceDriverEmPKhjEE4swapERS6_>:
      void swap(function& __x) noexcept
 8012e7e:	b580      	push	{r7, lr}
 8012e80:	b082      	sub	sp, #8
 8012e82:	af00      	add	r7, sp, #0
 8012e84:	6078      	str	r0, [r7, #4]
 8012e86:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	683a      	ldr	r2, [r7, #0]
 8012e8c:	4611      	mov	r1, r2
 8012e8e:	4618      	mov	r0, r3
 8012e90:	f000 f821 	bl	8012ed6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	f103 0208 	add.w	r2, r3, #8
 8012e9a:	683b      	ldr	r3, [r7, #0]
 8012e9c:	3308      	adds	r3, #8
 8012e9e:	4619      	mov	r1, r3
 8012ea0:	4610      	mov	r0, r2
 8012ea2:	f000 f84a 	bl	8012f3a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	f103 020c 	add.w	r2, r3, #12
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	330c      	adds	r3, #12
 8012eb0:	4619      	mov	r1, r3
 8012eb2:	4610      	mov	r0, r2
 8012eb4:	f000 f86b 	bl	8012f8e <_ZSt4swapIPFvRKSt9_Any_dataRN7desenet22NetworkInterfaceDriverEOmOPKhOjEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISH_ESt18is_move_assignableISH_EEE5valueEvE4typeERSH_SR_>
      }
 8012eb8:	bf00      	nop
 8012eba:	3708      	adds	r7, #8
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	bd80      	pop	{r7, pc}

08012ec0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8012ec0:	b480      	push	{r7}
 8012ec2:	b083      	sub	sp, #12
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	4618      	mov	r0, r3
 8012ecc:	370c      	adds	r7, #12
 8012ece:	46bd      	mov	sp, r7
 8012ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed4:	4770      	bx	lr

08012ed6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 8012ed6:	b580      	push	{r7, lr}
 8012ed8:	b084      	sub	sp, #16
 8012eda:	af00      	add	r7, sp, #0
 8012edc:	6078      	str	r0, [r7, #4]
 8012ede:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8012ee0:	6878      	ldr	r0, [r7, #4]
 8012ee2:	f7ff ffed 	bl	8012ec0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8012ee6:	4602      	mov	r2, r0
 8012ee8:	f107 0308 	add.w	r3, r7, #8
 8012eec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012ef0:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8012ef4:	6838      	ldr	r0, [r7, #0]
 8012ef6:	f7ff ffe3 	bl	8012ec0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8012efa:	4602      	mov	r2, r0
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012f02:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8012f06:	f107 0308 	add.w	r3, r7, #8
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7ff ffd8 	bl	8012ec0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8012f10:	4602      	mov	r2, r0
 8012f12:	683b      	ldr	r3, [r7, #0]
 8012f14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012f18:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8012f1c:	bf00      	nop
 8012f1e:	3710      	adds	r7, #16
 8012f20:	46bd      	mov	sp, r7
 8012f22:	bd80      	pop	{r7, pc}

08012f24 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8012f24:	b480      	push	{r7}
 8012f26:	b083      	sub	sp, #12
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	4618      	mov	r0, r3
 8012f30:	370c      	adds	r7, #12
 8012f32:	46bd      	mov	sp, r7
 8012f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f38:	4770      	bx	lr

08012f3a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8012f3a:	b580      	push	{r7, lr}
 8012f3c:	b084      	sub	sp, #16
 8012f3e:	af00      	add	r7, sp, #0
 8012f40:	6078      	str	r0, [r7, #4]
 8012f42:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8012f44:	6878      	ldr	r0, [r7, #4]
 8012f46:	f7ff ffed 	bl	8012f24 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8012f50:	6838      	ldr	r0, [r7, #0]
 8012f52:	f7ff ffe7 	bl	8012f24 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8012f56:	4603      	mov	r3, r0
 8012f58:	681a      	ldr	r2, [r3, #0]
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8012f5e:	f107 030c 	add.w	r3, r7, #12
 8012f62:	4618      	mov	r0, r3
 8012f64:	f7ff ffde 	bl	8012f24 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8012f68:	4603      	mov	r3, r0
 8012f6a:	681a      	ldr	r2, [r3, #0]
 8012f6c:	683b      	ldr	r3, [r7, #0]
 8012f6e:	601a      	str	r2, [r3, #0]
    }
 8012f70:	bf00      	nop
 8012f72:	3710      	adds	r7, #16
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bd80      	pop	{r7, pc}

08012f78 <_ZSt4moveIRPFvRKSt9_Any_dataRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEONSt16remove_referenceIT_E4typeEOSF_>:
    move(_Tp&& __t) noexcept
 8012f78:	b480      	push	{r7}
 8012f7a:	b083      	sub	sp, #12
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	4618      	mov	r0, r3
 8012f84:	370c      	adds	r7, #12
 8012f86:	46bd      	mov	sp, r7
 8012f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8c:	4770      	bx	lr

08012f8e <_ZSt4swapIPFvRKSt9_Any_dataRN7desenet22NetworkInterfaceDriverEOmOPKhOjEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISH_ESt18is_move_assignableISH_EEE5valueEvE4typeERSH_SR_>:
    swap(_Tp& __a, _Tp& __b)
 8012f8e:	b580      	push	{r7, lr}
 8012f90:	b084      	sub	sp, #16
 8012f92:	af00      	add	r7, sp, #0
 8012f94:	6078      	str	r0, [r7, #4]
 8012f96:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8012f98:	6878      	ldr	r0, [r7, #4]
 8012f9a:	f7ff ffed 	bl	8012f78 <_ZSt4moveIRPFvRKSt9_Any_dataRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEONSt16remove_referenceIT_E4typeEOSF_>
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8012fa4:	6838      	ldr	r0, [r7, #0]
 8012fa6:	f7ff ffe7 	bl	8012f78 <_ZSt4moveIRPFvRKSt9_Any_dataRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEONSt16remove_referenceIT_E4typeEOSF_>
 8012faa:	4603      	mov	r3, r0
 8012fac:	681a      	ldr	r2, [r3, #0]
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8012fb2:	f107 030c 	add.w	r3, r7, #12
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f7ff ffde 	bl	8012f78 <_ZSt4moveIRPFvRKSt9_Any_dataRN7desenet22NetworkInterfaceDriverEOmOPKhOjEEONSt16remove_referenceIT_E4typeEOSF_>
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	681a      	ldr	r2, [r3, #0]
 8012fc0:	683b      	ldr	r3, [r7, #0]
 8012fc2:	601a      	str	r2, [r3, #0]
    }
 8012fc4:	bf00      	nop
 8012fc6:	3710      	adds	r7, #16
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	bd80      	pop	{r7, pc}

08012fcc <_Z41__static_initialization_and_destruction_0ii>:
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b088      	sub	sp, #32
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
 8012fd4:	6039      	str	r1, [r7, #0]
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	2b01      	cmp	r3, #1
 8012fda:	d122      	bne.n	8013022 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8012fdc:	683b      	ldr	r3, [r7, #0]
 8012fde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012fe2:	4293      	cmp	r3, r2
 8012fe4:	d11d      	bne.n	8013022 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8012fe6:	4b18      	ldr	r3, [pc, #96]	; (8013048 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	613b      	str	r3, [r7, #16]
 8012fec:	f107 0310 	add.w	r3, r7, #16
 8012ff0:	60bb      	str	r3, [r7, #8]
 8012ff2:	2304      	movs	r3, #4
 8012ff4:	60fb      	str	r3, [r7, #12]
 8012ff6:	f107 0308 	add.w	r3, r7, #8
 8012ffa:	e893 0006 	ldmia.w	r3, {r1, r2}
 8012ffe:	4813      	ldr	r0, [pc, #76]	; (801304c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8013000:	f7f3 fe60 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
  static const desenet::Address SENSOR_ADDRESS({0xC7, 0xC7, 0xC7, 0xC7});	///< @brief Sensor's reception address.
 8013004:	4b12      	ldr	r3, [pc, #72]	; (8013050 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	61fb      	str	r3, [r7, #28]
 801300a:	f107 031c 	add.w	r3, r7, #28
 801300e:	617b      	str	r3, [r7, #20]
 8013010:	2304      	movs	r3, #4
 8013012:	61bb      	str	r3, [r7, #24]
 8013014:	f107 0314 	add.w	r3, r7, #20
 8013018:	e893 0006 	ldmia.w	r3, {r1, r2}
 801301c:	480d      	ldr	r0, [pc, #52]	; (8013054 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801301e:	f7f3 fe51 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d10a      	bne.n	801303e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8013028:	683b      	ldr	r3, [r7, #0]
 801302a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801302e:	4293      	cmp	r3, r2
 8013030:	d105      	bne.n	801303e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8013032:	4808      	ldr	r0, [pc, #32]	; (8013054 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8013034:	f7f3 ff82 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 8013038:	4804      	ldr	r0, [pc, #16]	; (801304c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801303a:	f7f3 ff7f 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
 801303e:	bf00      	nop
 8013040:	3720      	adds	r7, #32
 8013042:	46bd      	mov	sp, r7
 8013044:	bd80      	pop	{r7, pc}
 8013046:	bf00      	nop
 8013048:	0801b1dc 	.word	0x0801b1dc
 801304c:	20001ae8 	.word	0x20001ae8
 8013050:	0801b1e0 	.word	0x0801b1e0
 8013054:	20001af0 	.word	0x20001af0

08013058 <_GLOBAL__sub_I__Z14instanciateNicmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 8013058:	b580      	push	{r7, lr}
 801305a:	af00      	add	r7, sp, #0
 801305c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013060:	2001      	movs	r0, #1
 8013062:	f7ff ffb3 	bl	8012fcc <_Z41__static_initialization_and_destruction_0ii>
 8013066:	bd80      	pop	{r7, pc}

08013068 <_GLOBAL__sub_D__Z14instanciateNicmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 8013068:	b580      	push	{r7, lr}
 801306a:	af00      	add	r7, sp, #0
 801306c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013070:	2000      	movs	r0, #0
 8013072:	f7ff ffab 	bl	8012fcc <_Z41__static_initialization_and_destruction_0ii>
 8013076:	bd80      	pop	{r7, pc}

08013078 <_ZN16ITimeSlotManagerC1Ev>:

	virtual void onBeaconReceived(const desenet::SlotDuration & slotDuration) = 0;	///< Should be called whenever receiving a beacon frame from the gateway (master).

protected:
	// It is just an interface, so constructor and destructor should be not public.
	explicit ITimeSlotManager() {}
 8013078:	b480      	push	{r7}
 801307a:	b083      	sub	sp, #12
 801307c:	af00      	add	r7, sp, #0
 801307e:	6078      	str	r0, [r7, #4]
 8013080:	4a04      	ldr	r2, [pc, #16]	; (8013094 <_ZN16ITimeSlotManagerC1Ev+0x1c>)
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	601a      	str	r2, [r3, #0]
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	4618      	mov	r0, r3
 801308a:	370c      	adds	r7, #12
 801308c:	46bd      	mov	sp, r7
 801308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013092:	4770      	bx	lr
 8013094:	0801e0c4 	.word	0x0801e0c4

08013098 <_ZN16ITimeSlotManagerD1Ev>:
	virtual ~ITimeSlotManager() {}
 8013098:	b480      	push	{r7}
 801309a:	b083      	sub	sp, #12
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
 80130a0:	4a04      	ldr	r2, [pc, #16]	; (80130b4 <_ZN16ITimeSlotManagerD1Ev+0x1c>)
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	601a      	str	r2, [r3, #0]
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	4618      	mov	r0, r3
 80130aa:	370c      	adds	r7, #12
 80130ac:	46bd      	mov	sp, r7
 80130ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b2:	4770      	bx	lr
 80130b4:	0801e0c4 	.word	0x0801e0c4

080130b8 <_ZN16ITimeSlotManagerD0Ev>:
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b082      	sub	sp, #8
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
 80130c0:	6878      	ldr	r0, [r7, #4]
 80130c2:	f7ff ffe9 	bl	8013098 <_ZN16ITimeSlotManagerD1Ev>
 80130c6:	2104      	movs	r1, #4
 80130c8:	6878      	ldr	r0, [r7, #4]
 80130ca:	f003 f9c9 	bl	8016460 <_ZdlPvj>
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	4618      	mov	r0, r3
 80130d2:	3708      	adds	r7, #8
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bd80      	pop	{r7, pc}

080130d8 <_ZN7desenet15TimeSlotManager8instanceEv>:

public:
	TimeSlotManager();
	~TimeSlotManager();

	static TimeSlotManager & instance() { assert(_pInstance); return *_pInstance; }			///< General access to the instance.
 80130d8:	b580      	push	{r7, lr}
 80130da:	af00      	add	r7, sp, #0
 80130dc:	4b06      	ldr	r3, [pc, #24]	; (80130f8 <_ZN7desenet15TimeSlotManager8instanceEv+0x20>)
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d105      	bne.n	80130f0 <_ZN7desenet15TimeSlotManager8instanceEv+0x18>
 80130e4:	4b05      	ldr	r3, [pc, #20]	; (80130fc <_ZN7desenet15TimeSlotManager8instanceEv+0x24>)
 80130e6:	4a06      	ldr	r2, [pc, #24]	; (8013100 <_ZN7desenet15TimeSlotManager8instanceEv+0x28>)
 80130e8:	211c      	movs	r1, #28
 80130ea:	4806      	ldr	r0, [pc, #24]	; (8013104 <_ZN7desenet15TimeSlotManager8instanceEv+0x2c>)
 80130ec:	f003 faa6 	bl	801663c <__assert_func>
 80130f0:	4b01      	ldr	r3, [pc, #4]	; (80130f8 <_ZN7desenet15TimeSlotManager8instanceEv+0x20>)
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	4618      	mov	r0, r3
 80130f6:	bd80      	pop	{r7, pc}
 80130f8:	20001b88 	.word	0x20001b88
 80130fc:	0801b1e4 	.word	0x0801b1e4
 8013100:	0801b1f0 	.word	0x0801b1f0
 8013104:	0801b238 	.word	0x0801b238

08013108 <_ZN7desenet15TimeSlotManagerC1Ev>:

namespace desenet {

TimeSlotManager * TimeSlotManager::_pInstance(nullptr);

TimeSlotManager::TimeSlotManager()
 8013108:	b580      	push	{r7, lr}
 801310a:	b082      	sub	sp, #8
 801310c:	af00      	add	r7, sp, #0
 801310e:	6078      	str	r0, [r7, #4]
 : _pObserver(nullptr),
   _pHardwareTimer(&TIME_SLOT_MANAGER_HARDWARE_TIMER_HANDLE),
   _currentState(STATE_UNKOWN),
   _slotCounter(0),
   _slotNumber(desenet::MAX_SLOT_NUMBER + 1),	// Set to something not valid
   _slotDuration(0)
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	4618      	mov	r0, r3
 8013114:	f7ff ffb0 	bl	8013078 <_ZN16ITimeSlotManagerC1Ev>
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	3304      	adds	r3, #4
 801311c:	2100      	movs	r1, #0
 801311e:	4618      	mov	r0, r3
 8013120:	f001 f9a4 	bl	801446c <_ZN10XFReactiveC1EP8XFThread>
 8013124:	4a19      	ldr	r2, [pc, #100]	; (801318c <_ZN7desenet15TimeSlotManagerC1Ev+0x84>)
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	601a      	str	r2, [r3, #0]
 801312a:	4a19      	ldr	r2, [pc, #100]	; (8013190 <_ZN7desenet15TimeSlotManagerC1Ev+0x88>)
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	605a      	str	r2, [r3, #4]
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	2200      	movs	r2, #0
 8013134:	611a      	str	r2, [r3, #16]
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	4a16      	ldr	r2, [pc, #88]	; (8013194 <_ZN7desenet15TimeSlotManagerC1Ev+0x8c>)
 801313a:	615a      	str	r2, [r3, #20]
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	2200      	movs	r2, #0
 8013140:	761a      	strb	r2, [r3, #24]
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	2200      	movs	r2, #0
 8013146:	765a      	strb	r2, [r3, #25]
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	2220      	movs	r2, #32
 801314c:	769a      	strb	r2, [r3, #26]
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	2200      	movs	r2, #0
 8013152:	839a      	strh	r2, [r3, #28]
{
	assert(!_pInstance);	// Only one instance allowed
 8013154:	4b10      	ldr	r3, [pc, #64]	; (8013198 <_ZN7desenet15TimeSlotManagerC1Ev+0x90>)
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d005      	beq.n	8013168 <_ZN7desenet15TimeSlotManagerC1Ev+0x60>
 801315c:	4b0f      	ldr	r3, [pc, #60]	; (801319c <_ZN7desenet15TimeSlotManagerC1Ev+0x94>)
 801315e:	4a10      	ldr	r2, [pc, #64]	; (80131a0 <_ZN7desenet15TimeSlotManagerC1Ev+0x98>)
 8013160:	211e      	movs	r1, #30
 8013162:	4810      	ldr	r0, [pc, #64]	; (80131a4 <_ZN7desenet15TimeSlotManagerC1Ev+0x9c>)
 8013164:	f003 fa6a 	bl	801663c <__assert_func>
	_pInstance = this;
 8013168:	4a0b      	ldr	r2, [pc, #44]	; (8013198 <_ZN7desenet15TimeSlotManagerC1Ev+0x90>)
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	6013      	str	r3, [r2, #0]

	assert(_pHardwareTimer);    // Must not be nullptr
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	695b      	ldr	r3, [r3, #20]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d105      	bne.n	8013182 <_ZN7desenet15TimeSlotManagerC1Ev+0x7a>
 8013176:	4b0c      	ldr	r3, [pc, #48]	; (80131a8 <_ZN7desenet15TimeSlotManagerC1Ev+0xa0>)
 8013178:	4a09      	ldr	r2, [pc, #36]	; (80131a0 <_ZN7desenet15TimeSlotManagerC1Ev+0x98>)
 801317a:	2121      	movs	r1, #33	; 0x21
 801317c:	4809      	ldr	r0, [pc, #36]	; (80131a4 <_ZN7desenet15TimeSlotManagerC1Ev+0x9c>)
 801317e:	f003 fa5d 	bl	801663c <__assert_func>
}
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	4618      	mov	r0, r3
 8013186:	3708      	adds	r7, #8
 8013188:	46bd      	mov	sp, r7
 801318a:	bd80      	pop	{r7, pc}
 801318c:	0801e078 	.word	0x0801e078
 8013190:	0801e0a0 	.word	0x0801e0a0
 8013194:	20001e4c 	.word	0x20001e4c
 8013198:	20001b88 	.word	0x20001b88
 801319c:	0801b2cc 	.word	0x0801b2cc
 80131a0:	0801b2d8 	.word	0x0801b2d8
 80131a4:	0801b304 	.word	0x0801b304
 80131a8:	0801b39c 	.word	0x0801b39c

080131ac <_ZN7desenet15TimeSlotManagerD1Ev>:

TimeSlotManager::~TimeSlotManager()
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b082      	sub	sp, #8
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
 80131b4:	4a09      	ldr	r2, [pc, #36]	; (80131dc <_ZN7desenet15TimeSlotManagerD1Ev+0x30>)
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	601a      	str	r2, [r3, #0]
 80131ba:	4a09      	ldr	r2, [pc, #36]	; (80131e0 <_ZN7desenet15TimeSlotManagerD1Ev+0x34>)
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	605a      	str	r2, [r3, #4]
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	3304      	adds	r3, #4
 80131c4:	4618      	mov	r0, r3
 80131c6:	f001 f973 	bl	80144b0 <_ZN10XFReactiveD1Ev>
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	4618      	mov	r0, r3
 80131ce:	f7ff ff63 	bl	8013098 <_ZN16ITimeSlotManagerD1Ev>
{

}
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	4618      	mov	r0, r3
 80131d6:	3708      	adds	r7, #8
 80131d8:	46bd      	mov	sp, r7
 80131da:	bd80      	pop	{r7, pc}
 80131dc:	0801e078 	.word	0x0801e078
 80131e0:	0801e0a0 	.word	0x0801e0a0

080131e4 <_ZThn4_N7desenet15TimeSlotManagerD1Ev>:
	~TimeSlotManager();
 80131e4:	f1a0 0004 	sub.w	r0, r0, #4
 80131e8:	f7ff bfe0 	b.w	80131ac <_ZN7desenet15TimeSlotManagerD1Ev>

080131ec <_ZN7desenet15TimeSlotManagerD0Ev>:
TimeSlotManager::~TimeSlotManager()
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b082      	sub	sp, #8
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
}
 80131f4:	6878      	ldr	r0, [r7, #4]
 80131f6:	f7ff ffd9 	bl	80131ac <_ZN7desenet15TimeSlotManagerD1Ev>
 80131fa:	2120      	movs	r1, #32
 80131fc:	6878      	ldr	r0, [r7, #4]
 80131fe:	f003 f92f 	bl	8016460 <_ZdlPvj>
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	4618      	mov	r0, r3
 8013206:	3708      	adds	r7, #8
 8013208:	46bd      	mov	sp, r7
 801320a:	bd80      	pop	{r7, pc}

0801320c <_ZThn4_N7desenet15TimeSlotManagerD0Ev>:
 801320c:	f1a0 0004 	sub.w	r0, r0, #4
 8013210:	f7ff bfec 	b.w	80131ec <_ZN7desenet15TimeSlotManagerD0Ev>

08013214 <_ZN7desenet15TimeSlotManager10initializeERKh>:

void TimeSlotManager::initialize(const desenet::SlotNumber & slotNumber)
{
 8013214:	b580      	push	{r7, lr}
 8013216:	b082      	sub	sp, #8
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
 801321c:	6039      	str	r1, [r7, #0]
	assert(slotNumber <= desenet::MAX_SLOT_NUMBER);		// Slot 0 to 31
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	781b      	ldrb	r3, [r3, #0]
 8013222:	2b1f      	cmp	r3, #31
 8013224:	d905      	bls.n	8013232 <_ZN7desenet15TimeSlotManager10initializeERKh+0x1e>
 8013226:	4b09      	ldr	r3, [pc, #36]	; (801324c <_ZN7desenet15TimeSlotManager10initializeERKh+0x38>)
 8013228:	4a09      	ldr	r2, [pc, #36]	; (8013250 <_ZN7desenet15TimeSlotManager10initializeERKh+0x3c>)
 801322a:	212b      	movs	r1, #43	; 0x2b
 801322c:	4809      	ldr	r0, [pc, #36]	; (8013254 <_ZN7desenet15TimeSlotManager10initializeERKh+0x40>)
 801322e:	f003 fa05 	bl	801663c <__assert_func>

	HAL_TIM_Base_DeInit(_pHardwareTimer);
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	695b      	ldr	r3, [r3, #20]
 8013236:	4618      	mov	r0, r3
 8013238:	f7f1 fb13 	bl	8004862 <HAL_TIM_Base_DeInit>

	_slotNumber = slotNumber;
 801323c:	683b      	ldr	r3, [r7, #0]
 801323e:	781a      	ldrb	r2, [r3, #0]
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	769a      	strb	r2, [r3, #26]
	// Set pins to zero.
	GPIO_WriteBit(GPIOB, GPIO_Pin_12, Bit_RESET);
	GPIO_WriteBit(GPIOB, GPIO_Pin_13, Bit_RESET);

#endif // USE_GPIOS_TO_SIGNAL_TIME_SLOTS
}
 8013244:	bf00      	nop
 8013246:	3708      	adds	r7, #8
 8013248:	46bd      	mov	sp, r7
 801324a:	bd80      	pop	{r7, pc}
 801324c:	0801b3ac 	.word	0x0801b3ac
 8013250:	0801b3d4 	.word	0x0801b3d4
 8013254:	0801b304 	.word	0x0801b304

08013258 <_ZN7desenet15TimeSlotManager19initializeRelationsERKN16ITimeSlotManager8ObserverE>:

void TimeSlotManager::initializeRelations(const Observer & observer)
{
 8013258:	b580      	push	{r7, lr}
 801325a:	b082      	sub	sp, #8
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
 8013260:	6039      	str	r1, [r7, #0]
	setObserver(observer);
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	3308      	adds	r3, #8
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	6839      	ldr	r1, [r7, #0]
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	4798      	blx	r3
}
 8013270:	bf00      	nop
 8013272:	3708      	adds	r7, #8
 8013274:	46bd      	mov	sp, r7
 8013276:	bd80      	pop	{r7, pc}

08013278 <_ZN7desenet15TimeSlotManager11setObserverERKN16ITimeSlotManager8ObserverE>:

bool TimeSlotManager::setObserver(const TimeSlotManager::Observer & observer)
{
 8013278:	b480      	push	{r7}
 801327a:	b083      	sub	sp, #12
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
 8013280:	6039      	str	r1, [r7, #0]
	if (_pObserver == nullptr)
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	691b      	ldr	r3, [r3, #16]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d104      	bne.n	8013294 <_ZN7desenet15TimeSlotManager11setObserverERKN16ITimeSlotManager8ObserverE+0x1c>
	{
		_pObserver = const_cast<Observer*>(&observer);
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	683a      	ldr	r2, [r7, #0]
 801328e:	611a      	str	r2, [r3, #16]
		return true;
 8013290:	2301      	movs	r3, #1
 8013292:	e000      	b.n	8013296 <_ZN7desenet15TimeSlotManager11setObserverERKN16ITimeSlotManager8ObserverE+0x1e>
	}
	return false;
 8013294:	2300      	movs	r3, #0
}
 8013296:	4618      	mov	r0, r3
 8013298:	370c      	adds	r7, #12
 801329a:	46bd      	mov	sp, r7
 801329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a0:	4770      	bx	lr

080132a2 <_ZN7desenet15TimeSlotManager5startEv>:

void TimeSlotManager::start()
{
 80132a2:	b580      	push	{r7, lr}
 80132a4:	b082      	sub	sp, #8
 80132a6:	af00      	add	r7, sp, #0
 80132a8:	6078      	str	r0, [r7, #4]
	startBehavior();
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	1d1a      	adds	r2, r3, #4
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	685b      	ldr	r3, [r3, #4]
 80132b2:	3308      	adds	r3, #8
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	4610      	mov	r0, r2
 80132b8:	4798      	blx	r3
}
 80132ba:	bf00      	nop
 80132bc:	3708      	adds	r7, #8
 80132be:	46bd      	mov	sp, r7
 80132c0:	bd80      	pop	{r7, pc}
	...

080132c4 <_ZN7desenet15TimeSlotManager16onBeaconReceivedERKt>:
 * GPIO_Pin_12:  0    ---+-----+-----+     +-----+     +-----+     +...
 * _slotCounter:         0     0     1     2     3     4     5     6
 */

void TimeSlotManager::onBeaconReceived(const desenet::SlotDuration & slotDuration)
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b084      	sub	sp, #16
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
 80132cc:	6039      	str	r1, [r7, #0]
	assert(_slotNumber <= desenet::MAX_SLOT_NUMBER);		// Slot 0 to 31
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	7e9b      	ldrb	r3, [r3, #26]
 80132d2:	2b1f      	cmp	r3, #31
 80132d4:	d905      	bls.n	80132e2 <_ZN7desenet15TimeSlotManager16onBeaconReceivedERKt+0x1e>
 80132d6:	4b12      	ldr	r3, [pc, #72]	; (8013320 <_ZN7desenet15TimeSlotManager16onBeaconReceivedERKt+0x5c>)
 80132d8:	4a12      	ldr	r2, [pc, #72]	; (8013324 <_ZN7desenet15TimeSlotManager16onBeaconReceivedERKt+0x60>)
 80132da:	2164      	movs	r1, #100	; 0x64
 80132dc:	4812      	ldr	r0, [pc, #72]	; (8013328 <_ZN7desenet15TimeSlotManager16onBeaconReceivedERKt+0x64>)
 80132de:	f003 f9ad 	bl	801663c <__assert_func>

	notify(SIG::CYCLE_START);
 80132e2:	2300      	movs	r3, #0
 80132e4:	73fb      	strb	r3, [r7, #15]
 80132e6:	f107 030f 	add.w	r3, r7, #15
 80132ea:	4619      	mov	r1, r3
 80132ec:	6878      	ldr	r0, [r7, #4]
 80132ee:	f000 f827 	bl	8013340 <_ZN7desenet15TimeSlotManager6notifyERKN16ITimeSlotManager3SIGE>

	_stopTimer();
 80132f2:	6878      	ldr	r0, [r7, #4]
 80132f4:	f000 f972 	bl	80135dc <_ZN7desenet15TimeSlotManager10_stopTimerEv>

	_slotCounter = 0;	// Restart counting of slots
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	2200      	movs	r2, #0
 80132fc:	765a      	strb	r2, [r3, #25]
#if (USE_GPIOS_TO_SIGNAL_TIME_SLOTS != 0)
	GPIO_WriteBit(GPIOB, GPIO_Pin_12, (BitAction)(_slotCounter % 2));	// Indicate start of beacon
#endif

	if (_slotDuration != slotDuration)
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	8b9a      	ldrh	r2, [r3, #28]
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	881b      	ldrh	r3, [r3, #0]
 8013306:	429a      	cmp	r2, r3
 8013308:	d003      	beq.n	8013312 <_ZN7desenet15TimeSlotManager16onBeaconReceivedERKt+0x4e>
	{	// Slot duration has changed
		_setSlotDuration(slotDuration);
 801330a:	6839      	ldr	r1, [r7, #0]
 801330c:	6878      	ldr	r0, [r7, #4]
 801330e:	f000 f867 	bl	80133e0 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt>
	}

	_startTimer();
 8013312:	6878      	ldr	r0, [r7, #4]
 8013314:	f000 f83a 	bl	801338c <_ZN7desenet15TimeSlotManager11_startTimerEv>
}
 8013318:	bf00      	nop
 801331a:	3710      	adds	r7, #16
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}
 8013320:	0801b41c 	.word	0x0801b41c
 8013324:	0801b444 	.word	0x0801b444
 8013328:	0801b304 	.word	0x0801b304

0801332c <_ZN7desenet15TimeSlotManager5onIrqEv>:

//static
void TimeSlotManager::onIrq()
{	// Called within IRQ!
 801332c:	b580      	push	{r7, lr}
 801332e:	af00      	add	r7, sp, #0
	instance()._processIrq();
 8013330:	f7ff fed2 	bl	80130d8 <_ZN7desenet15TimeSlotManager8instanceEv>
 8013334:	4603      	mov	r3, r0
 8013336:	4618      	mov	r0, r3
 8013338:	f000 f95e 	bl	80135f8 <_ZN7desenet15TimeSlotManager11_processIrqEv>
}
 801333c:	bf00      	nop
 801333e:	bd80      	pop	{r7, pc}

08013340 <_ZN7desenet15TimeSlotManager6notifyERKN16ITimeSlotManager3SIGE>:

void TimeSlotManager::notify(const SIG & signal)
{
 8013340:	b580      	push	{r7, lr}
 8013342:	b082      	sub	sp, #8
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
 8013348:	6039      	str	r1, [r7, #0]
	assert(_pObserver);
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	691b      	ldr	r3, [r3, #16]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d105      	bne.n	801335e <_ZN7desenet15TimeSlotManager6notifyERKN16ITimeSlotManager3SIGE+0x1e>
 8013352:	4b0b      	ldr	r3, [pc, #44]	; (8013380 <_ZN7desenet15TimeSlotManager6notifyERKN16ITimeSlotManager3SIGE+0x40>)
 8013354:	4a0b      	ldr	r2, [pc, #44]	; (8013384 <_ZN7desenet15TimeSlotManager6notifyERKN16ITimeSlotManager3SIGE+0x44>)
 8013356:	217f      	movs	r1, #127	; 0x7f
 8013358:	480b      	ldr	r0, [pc, #44]	; (8013388 <_ZN7desenet15TimeSlotManager6notifyERKN16ITimeSlotManager3SIGE+0x48>)
 801335a:	f003 f96f 	bl	801663c <__assert_func>
	if (_pObserver)
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	691b      	ldr	r3, [r3, #16]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d008      	beq.n	8013378 <_ZN7desenet15TimeSlotManager6notifyERKN16ITimeSlotManager3SIGE+0x38>
	{
		_pObserver->onTimeSlotSignal(*this, signal);
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	6918      	ldr	r0, [r3, #16]
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	691b      	ldr	r3, [r3, #16]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	6879      	ldr	r1, [r7, #4]
 8013374:	683a      	ldr	r2, [r7, #0]
 8013376:	4798      	blx	r3
	}
}
 8013378:	bf00      	nop
 801337a:	3708      	adds	r7, #8
 801337c:	46bd      	mov	sp, r7
 801337e:	bd80      	pop	{r7, pc}
 8013380:	0801b494 	.word	0x0801b494
 8013384:	0801b4a0 	.word	0x0801b4a0
 8013388:	0801b304 	.word	0x0801b304

0801338c <_ZN7desenet15TimeSlotManager11_startTimerEv>:

void TimeSlotManager::_startTimer()
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b082      	sub	sp, #8
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
    assert(_slotCounter == 0);                              // Slot counter must be 0
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	7e5b      	ldrb	r3, [r3, #25]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d005      	beq.n	80133a8 <_ZN7desenet15TimeSlotManager11_startTimerEv+0x1c>
 801339c:	4b0d      	ldr	r3, [pc, #52]	; (80133d4 <_ZN7desenet15TimeSlotManager11_startTimerEv+0x48>)
 801339e:	4a0e      	ldr	r2, [pc, #56]	; (80133d8 <_ZN7desenet15TimeSlotManager11_startTimerEv+0x4c>)
 80133a0:	2188      	movs	r1, #136	; 0x88
 80133a2:	480e      	ldr	r0, [pc, #56]	; (80133dc <_ZN7desenet15TimeSlotManager11_startTimerEv+0x50>)
 80133a4:	f003 f94a 	bl	801663c <__assert_func>

    __HAL_TIM_SET_COUNTER(_pHardwareTimer, 0);              // Reset hardware counter to 0
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	695b      	ldr	r3, [r3, #20]
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	2200      	movs	r2, #0
 80133b0:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_CLEAR_IT(_pHardwareTimer, TIM_IT_CC1);        // Clear output compare interrupt
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	695b      	ldr	r3, [r3, #20]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	f06f 0202 	mvn.w	r2, #2
 80133bc:	611a      	str	r2, [r3, #16]

    HAL_TIM_OC_Start_IT(_pHardwareTimer, TIM_CHANNEL_1);    // Start timer and enable interrupts
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	695b      	ldr	r3, [r3, #20]
 80133c2:	2100      	movs	r1, #0
 80133c4:	4618      	mov	r0, r3
 80133c6:	f7f1 fb09 	bl	80049dc <HAL_TIM_OC_Start_IT>
}
 80133ca:	bf00      	nop
 80133cc:	3708      	adds	r7, #8
 80133ce:	46bd      	mov	sp, r7
 80133d0:	bd80      	pop	{r7, pc}
 80133d2:	bf00      	nop
 80133d4:	0801b4e4 	.word	0x0801b4e4
 80133d8:	0801b4f8 	.word	0x0801b4f8
 80133dc:	0801b304 	.word	0x0801b304

080133e0 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt>:

void TimeSlotManager::_setSlotDuration(const desenet::SlotDuration & slotDuration)
{
 80133e0:	b580      	push	{r7, lr}
 80133e2:	b090      	sub	sp, #64	; 0x40
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	6078      	str	r0, [r7, #4]
 80133e8:	6039      	str	r1, [r7, #0]
	uint32_t timClk;
	uint32_t period = 0;
 80133ea:	2300      	movs	r3, #0
 80133ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t prescaler = 0;
 80133ee:	2300      	movs	r3, #0
 80133f0:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_StatusTypeDef status;

	assert(slotDuration > 0);
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	881b      	ldrh	r3, [r3, #0]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d105      	bne.n	8013406 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x26>
 80133fa:	4b71      	ldr	r3, [pc, #452]	; (80135c0 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x1e0>)
 80133fc:	4a71      	ldr	r2, [pc, #452]	; (80135c4 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x1e4>)
 80133fe:	2197      	movs	r1, #151	; 0x97
 8013400:	4871      	ldr	r0, [pc, #452]	; (80135c8 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x1e8>)
 8013402:	f003 f91b 	bl	801663c <__assert_func>

	_slotDuration = slotDuration;
 8013406:	683b      	ldr	r3, [r7, #0]
 8013408:	881a      	ldrh	r2, [r3, #0]
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	839a      	strh	r2, [r3, #28]

	HAL_TIM_Base_DeInit(_pHardwareTimer);
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	695b      	ldr	r3, [r3, #20]
 8013412:	4618      	mov	r0, r3
 8013414:	f7f1 fa25 	bl	8004862 <HAL_TIM_Base_DeInit>
	timClk = HAL_RCC_GetPCLK1Freq();
 8013418:	f7ef fef0 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 801341c:	6378      	str	r0, [r7, #52]	; 0x34
	// The prescaler slows down the clock frequency
	// The period defines how many ticks the timer should count
	// to reach the desired interval (slotDuration).

	// Calculate the prescaler
	period = 0xFFFF;	// Set temporary the period to the highest value
 801341e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013422:	63fb      	str	r3, [r7, #60]	; 0x3c
	prescaler = (timClk / 1000 * slotDuration / period) - 1;
 8013424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013426:	4a69      	ldr	r2, [pc, #420]	; (80135cc <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x1ec>)
 8013428:	fba2 2303 	umull	r2, r3, r2, r3
 801342c:	099b      	lsrs	r3, r3, #6
 801342e:	683a      	ldr	r2, [r7, #0]
 8013430:	8812      	ldrh	r2, [r2, #0]
 8013432:	fb02 f203 	mul.w	r2, r2, r3
 8013436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013438:	fbb2 f3f3 	udiv	r3, r2, r3
 801343c:	3b01      	subs	r3, #1
 801343e:	63bb      	str	r3, [r7, #56]	; 0x38

	if (prescaler <= 0xFFFF)
 8013440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013446:	d223      	bcs.n	8013490 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0xb0>
	{
		period = timClk / 1000 * slotDuration / (prescaler + 1);
 8013448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801344a:	4a60      	ldr	r2, [pc, #384]	; (80135cc <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x1ec>)
 801344c:	fba2 2303 	umull	r2, r3, r2, r3
 8013450:	099b      	lsrs	r3, r3, #6
 8013452:	683a      	ldr	r2, [r7, #0]
 8013454:	8812      	ldrh	r2, [r2, #0]
 8013456:	fb02 f203 	mul.w	r2, r2, r3
 801345a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801345c:	3301      	adds	r3, #1
 801345e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013462:	63fb      	str	r3, [r7, #60]	; 0x3c

		if (period > 0xFFFF)	// Check if calculated period is too high
 8013464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801346a:	d317      	bcc.n	801349c <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0xbc>
		{
			prescaler++;	// Push prescaler to the next value.
 801346c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801346e:	3301      	adds	r3, #1
 8013470:	63bb      	str	r3, [r7, #56]	; 0x38
			period = timClk / 1000 * slotDuration / (prescaler + 1);
 8013472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013474:	4a55      	ldr	r2, [pc, #340]	; (80135cc <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x1ec>)
 8013476:	fba2 2303 	umull	r2, r3, r2, r3
 801347a:	099b      	lsrs	r3, r3, #6
 801347c:	683a      	ldr	r2, [r7, #0]
 801347e:	8812      	ldrh	r2, [r2, #0]
 8013480:	fb02 f203 	mul.w	r2, r2, r3
 8013484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013486:	3301      	adds	r3, #1
 8013488:	fbb2 f3f3 	udiv	r3, r2, r3
 801348c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801348e:	e005      	b.n	801349c <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0xbc>
			// Now the period must to be in the right range
		}
	}
	else
	{
		assert(false); // Slot duration is too high.
 8013490:	4b4f      	ldr	r3, [pc, #316]	; (80135d0 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x1f0>)
 8013492:	4a4c      	ldr	r2, [pc, #304]	; (80135c4 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x1e4>)
 8013494:	21b6      	movs	r1, #182	; 0xb6
 8013496:	484c      	ldr	r0, [pc, #304]	; (80135c8 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x1e8>)
 8013498:	f003 f8d0 	bl	801663c <__assert_func>
	}

	assert(period <= 0xFFFFUL);	// Error: Not able to provide the time slot duration needed
 801349c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801349e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80134a2:	d305      	bcc.n	80134b0 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0xd0>
 80134a4:	4b4b      	ldr	r3, [pc, #300]	; (80135d4 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x1f4>)
 80134a6:	4a47      	ldr	r2, [pc, #284]	; (80135c4 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x1e4>)
 80134a8:	21b9      	movs	r1, #185	; 0xb9
 80134aa:	4847      	ldr	r0, [pc, #284]	; (80135c8 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x1e8>)
 80134ac:	f003 f8c6 	bl	801663c <__assert_func>

    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80134b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80134b4:	2200      	movs	r2, #0
 80134b6:	601a      	str	r2, [r3, #0]
 80134b8:	605a      	str	r2, [r3, #4]
 80134ba:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 80134bc:	f107 0308 	add.w	r3, r7, #8
 80134c0:	2200      	movs	r2, #0
 80134c2:	601a      	str	r2, [r3, #0]
 80134c4:	605a      	str	r2, [r3, #4]
 80134c6:	609a      	str	r2, [r3, #8]
 80134c8:	60da      	str	r2, [r3, #12]
 80134ca:	611a      	str	r2, [r3, #16]
 80134cc:	615a      	str	r2, [r3, #20]
 80134ce:	619a      	str	r2, [r3, #24]

	// Configure hardware timer
    _pHardwareTimer->Instance = TIM2;
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	695b      	ldr	r3, [r3, #20]
 80134d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80134d8:	601a      	str	r2, [r3, #0]
    _pHardwareTimer->Init.Prescaler = prescaler;
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	695b      	ldr	r3, [r3, #20]
 80134de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80134e0:	605a      	str	r2, [r3, #4]
    _pHardwareTimer->Init.CounterMode = TIM_COUNTERMODE_UP;
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	695b      	ldr	r3, [r3, #20]
 80134e6:	2200      	movs	r2, #0
 80134e8:	609a      	str	r2, [r3, #8]
    _pHardwareTimer->Init.Period = period;
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	695b      	ldr	r3, [r3, #20]
 80134ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80134f0:	60da      	str	r2, [r3, #12]
    _pHardwareTimer->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	695b      	ldr	r3, [r3, #20]
 80134f6:	2200      	movs	r2, #0
 80134f8:	611a      	str	r2, [r3, #16]
    _pHardwareTimer->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	695b      	ldr	r3, [r3, #20]
 80134fe:	2200      	movs	r2, #0
 8013500:	619a      	str	r2, [r3, #24]
    status = HAL_TIM_Base_Init(_pHardwareTimer);
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	695b      	ldr	r3, [r3, #20]
 8013506:	4618      	mov	r0, r3
 8013508:	f7f1 f954 	bl	80047b4 <HAL_TIM_Base_Init>
 801350c:	4603      	mov	r3, r0
 801350e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    assert(status == HAL_OK);
 8013512:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013516:	2b00      	cmp	r3, #0
 8013518:	d005      	beq.n	8013526 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x146>
 801351a:	4b2f      	ldr	r3, [pc, #188]	; (80135d8 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x1f8>)
 801351c:	4a29      	ldr	r2, [pc, #164]	; (80135c4 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x1e4>)
 801351e:	21c6      	movs	r1, #198	; 0xc6
 8013520:	4829      	ldr	r0, [pc, #164]	; (80135c8 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x1e8>)
 8013522:	f003 f88b 	bl	801663c <__assert_func>

    status = HAL_TIM_OC_Init(_pHardwareTimer);
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	695b      	ldr	r3, [r3, #20]
 801352a:	4618      	mov	r0, r3
 801352c:	f7f1 f9f5 	bl	800491a <HAL_TIM_OC_Init>
 8013530:	4603      	mov	r3, r0
 8013532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    assert(status == HAL_OK);
 8013536:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801353a:	2b00      	cmp	r3, #0
 801353c:	d005      	beq.n	801354a <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x16a>
 801353e:	4b26      	ldr	r3, [pc, #152]	; (80135d8 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x1f8>)
 8013540:	4a20      	ldr	r2, [pc, #128]	; (80135c4 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x1e4>)
 8013542:	21c9      	movs	r1, #201	; 0xc9
 8013544:	4820      	ldr	r0, [pc, #128]	; (80135c8 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x1e8>)
 8013546:	f003 f879 	bl	801663c <__assert_func>

    // Enable 'output compare 1' interrupt event
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 801354a:	2340      	movs	r3, #64	; 0x40
 801354c:	627b      	str	r3, [r7, #36]	; 0x24
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801354e:	2300      	movs	r3, #0
 8013550:	62fb      	str	r3, [r7, #44]	; 0x2c
    status = HAL_TIMEx_MasterConfigSynchronization(_pHardwareTimer, &sMasterConfig);
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	695b      	ldr	r3, [r3, #20]
 8013556:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801355a:	4611      	mov	r1, r2
 801355c:	4618      	mov	r0, r3
 801355e:	f7f2 fb19 	bl	8005b94 <HAL_TIMEx_MasterConfigSynchronization>
 8013562:	4603      	mov	r3, r0
 8013564:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    assert(status == HAL_OK);
 8013568:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801356c:	2b00      	cmp	r3, #0
 801356e:	d005      	beq.n	801357c <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x19c>
 8013570:	4b19      	ldr	r3, [pc, #100]	; (80135d8 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x1f8>)
 8013572:	4a14      	ldr	r2, [pc, #80]	; (80135c4 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x1e4>)
 8013574:	21cf      	movs	r1, #207	; 0xcf
 8013576:	4814      	ldr	r0, [pc, #80]	; (80135c8 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x1e8>)
 8013578:	f003 f860 	bl	801663c <__assert_func>

    sConfigOC.OCMode = TIM_OCMODE_TIMING;
 801357c:	2300      	movs	r3, #0
 801357e:	60bb      	str	r3, [r7, #8]
    sConfigOC.Pulse = 0;
 8013580:	2300      	movs	r3, #0
 8013582:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8013584:	2300      	movs	r3, #0
 8013586:	613b      	str	r3, [r7, #16]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013588:	2300      	movs	r3, #0
 801358a:	61bb      	str	r3, [r7, #24]
    status = HAL_TIM_OC_ConfigChannel(_pHardwareTimer, &sConfigOC, TIM_CHANNEL_1);
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	695b      	ldr	r3, [r3, #20]
 8013590:	f107 0108 	add.w	r1, r7, #8
 8013594:	2200      	movs	r2, #0
 8013596:	4618      	mov	r0, r3
 8013598:	f7f1 fd68 	bl	800506c <HAL_TIM_OC_ConfigChannel>
 801359c:	4603      	mov	r3, r0
 801359e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    assert(status == HAL_OK);
 80135a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d005      	beq.n	80135b6 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x1d6>
 80135aa:	4b0b      	ldr	r3, [pc, #44]	; (80135d8 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x1f8>)
 80135ac:	4a05      	ldr	r2, [pc, #20]	; (80135c4 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x1e4>)
 80135ae:	21d6      	movs	r1, #214	; 0xd6
 80135b0:	4805      	ldr	r0, [pc, #20]	; (80135c8 <_ZN7desenet15TimeSlotManager16_setSlotDurationERKt+0x1e8>)
 80135b2:	f003 f843 	bl	801663c <__assert_func>
}
 80135b6:	bf00      	nop
 80135b8:	3740      	adds	r7, #64	; 0x40
 80135ba:	46bd      	mov	sp, r7
 80135bc:	bd80      	pop	{r7, pc}
 80135be:	bf00      	nop
 80135c0:	0801b528 	.word	0x0801b528
 80135c4:	0801b53c 	.word	0x0801b53c
 80135c8:	0801b304 	.word	0x0801b304
 80135cc:	10624dd3 	.word	0x10624dd3
 80135d0:	0801b584 	.word	0x0801b584
 80135d4:	0801b58c 	.word	0x0801b58c
 80135d8:	0801b5a0 	.word	0x0801b5a0

080135dc <_ZN7desenet15TimeSlotManager10_stopTimerEv>:

void TimeSlotManager::_stopTimer()
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b082      	sub	sp, #8
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
    HAL_TIM_OC_Stop_IT(_pHardwareTimer, TIM_CHANNEL_1);
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	695b      	ldr	r3, [r3, #20]
 80135e8:	2100      	movs	r1, #0
 80135ea:	4618      	mov	r0, r3
 80135ec:	f7f1 fb42 	bl	8004c74 <HAL_TIM_OC_Stop_IT>
}
 80135f0:	bf00      	nop
 80135f2:	3708      	adds	r7, #8
 80135f4:	46bd      	mov	sp, r7
 80135f6:	bd80      	pop	{r7, pc}

080135f8 <_ZN7desenet15TimeSlotManager11_processIrqEv>:

void TimeSlotManager::_processIrq()
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b084      	sub	sp, #16
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
#if (USE_GPIOS_TO_SIGNAL_TIME_SLOTS != 0)
	GPIO_WriteBit(GPIOB, GPIO_Pin_12, (BitAction)(_slotCounter % 2));	// Toggle pin each time
#endif

	if (_slotCounter == _slotNumber)				// Start of your slot
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	7e5a      	ldrb	r2, [r3, #25]
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	7e9b      	ldrb	r3, [r3, #26]
 8013608:	429a      	cmp	r2, r3
 801360a:	d108      	bne.n	801361e <_ZN7desenet15TimeSlotManager11_processIrqEv+0x26>
	{
#if (USE_GPIOS_TO_SIGNAL_TIME_SLOTS != 0)
	GPIO_WriteBit(GPIOB, GPIO_Pin_13, Bit_SET);
#endif
		notify(SIG::OWN_SLOT_START);
 801360c:	2302      	movs	r3, #2
 801360e:	737b      	strb	r3, [r7, #13]
 8013610:	f107 030d 	add.w	r3, r7, #13
 8013614:	4619      	mov	r1, r3
 8013616:	6878      	ldr	r0, [r7, #4]
 8013618:	f7ff fe92 	bl	8013340 <_ZN7desenet15TimeSlotManager6notifyERKN16ITimeSlotManager3SIGE>
 801361c:	e00f      	b.n	801363e <_ZN7desenet15TimeSlotManager11_processIrqEv+0x46>
	}
	else if (_slotCounter == (_slotNumber + 1))		// End of our slot
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	7e5b      	ldrb	r3, [r3, #25]
 8013622:	461a      	mov	r2, r3
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	7e9b      	ldrb	r3, [r3, #26]
 8013628:	3301      	adds	r3, #1
 801362a:	429a      	cmp	r2, r3
 801362c:	d107      	bne.n	801363e <_ZN7desenet15TimeSlotManager11_processIrqEv+0x46>
	{
#if (USE_GPIOS_TO_SIGNAL_TIME_SLOTS != 0)
	GPIO_WriteBit(GPIOB, GPIO_Pin_13, Bit_RESET);
#endif
		notify(SIG::OWN_SLOT_FINISH);
 801362e:	2303      	movs	r3, #3
 8013630:	73bb      	strb	r3, [r7, #14]
 8013632:	f107 030e 	add.w	r3, r7, #14
 8013636:	4619      	mov	r1, r3
 8013638:	6878      	ldr	r0, [r7, #4]
 801363a:	f7ff fe81 	bl	8013340 <_ZN7desenet15TimeSlotManager6notifyERKN16ITimeSlotManager3SIGE>
	}

	// Stop hardware timer after counting all time slots
	if (_slotCounter >= (desenet::MAX_SLOT_NUMBER + 1))
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	7e5b      	ldrb	r3, [r3, #25]
 8013642:	2b1f      	cmp	r3, #31
 8013644:	d90a      	bls.n	801365c <_ZN7desenet15TimeSlotManager11_processIrqEv+0x64>
	{
		notify(SIG::CYCLE_FINISH);
 8013646:	2301      	movs	r3, #1
 8013648:	73fb      	strb	r3, [r7, #15]
 801364a:	f107 030f 	add.w	r3, r7, #15
 801364e:	4619      	mov	r1, r3
 8013650:	6878      	ldr	r0, [r7, #4]
 8013652:	f7ff fe75 	bl	8013340 <_ZN7desenet15TimeSlotManager6notifyERKN16ITimeSlotManager3SIGE>

		_stopTimer();
 8013656:	6878      	ldr	r0, [r7, #4]
 8013658:	f7ff ffc0 	bl	80135dc <_ZN7desenet15TimeSlotManager10_stopTimerEv>
	}

	_slotCounter++;	// Increment slotCounter for the next slot
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	7e5b      	ldrb	r3, [r3, #25]
 8013660:	3301      	adds	r3, #1
 8013662:	b2da      	uxtb	r2, r3
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	765a      	strb	r2, [r3, #25]
}
 8013668:	bf00      	nop
 801366a:	3710      	adds	r7, #16
 801366c:	46bd      	mov	sp, r7
 801366e:	bd80      	pop	{r7, pc}

08013670 <_ZN7desenet15TimeSlotManager12processEventEv>:

EventStatus TimeSlotManager::processEvent()
{
 8013670:	b580      	push	{r7, lr}
 8013672:	b084      	sub	sp, #16
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
	eMainState newState = _currentState;
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	7e1b      	ldrb	r3, [r3, #24]
 801367c:	73fb      	strb	r3, [r7, #15]

	switch (_currentState)
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	7e1b      	ldrb	r3, [r3, #24]
 8013682:	2b01      	cmp	r3, #1
 8013684:	dc02      	bgt.n	801368c <_ZN7desenet15TimeSlotManager12processEventEv+0x1c>
 8013686:	2b00      	cmp	r3, #0
 8013688:	da03      	bge.n	8013692 <_ZN7desenet15TimeSlotManager12processEventEv+0x22>
 801368a:	e048      	b.n	801371e <_ZN7desenet15TimeSlotManager12processEventEv+0xae>
 801368c:	2b02      	cmp	r3, #2
 801368e:	d023      	beq.n	80136d8 <_ZN7desenet15TimeSlotManager12processEventEv+0x68>
 8013690:	e045      	b.n	801371e <_ZN7desenet15TimeSlotManager12processEventEv+0xae>
	{
	case STATE_UNKOWN:
	case STATE_INITIAL:
		if (getCurrentEvent()->getEventType() == IXFEvent::Initial)
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	3304      	adds	r3, #4
 8013696:	4618      	mov	r0, r3
 8013698:	f000 ffc6 	bl	8014628 <_ZNK10XFReactive15getCurrentEventEv>
 801369c:	4603      	mov	r3, r0
 801369e:	4618      	mov	r0, r3
 80136a0:	f7f3 f947 	bl	8006932 <_ZNK8IXFEvent12getEventTypeEv>
 80136a4:	4603      	mov	r3, r0
 80136a6:	2b01      	cmp	r3, #1
 80136a8:	bf0c      	ite	eq
 80136aa:	2301      	moveq	r3, #1
 80136ac:	2300      	movne	r3, #0
 80136ae:	b2db      	uxtb	r3, r3
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d031      	beq.n	8013718 <_ZN7desenet15TimeSlotManager12processEventEv+0xa8>
		{
			newState = STATE_ROOT;	// Move to state ROOT
 80136b4:	2302      	movs	r3, #2
 80136b6:	73fb      	strb	r3, [r7, #15]

			// Start timeout
			getThread()->scheduleTimeout(Timeout_SIM_BEACON_RECEIVED_id, SIM_BEACON_INTERVAL_IN_MS, this);
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	1d1a      	adds	r2, r3, #4
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	685b      	ldr	r3, [r3, #4]
 80136c0:	3318      	adds	r3, #24
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	4610      	mov	r0, r2
 80136c6:	4798      	blx	r3
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	3304      	adds	r3, #4
 80136cc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80136d0:	2101      	movs	r1, #1
 80136d2:	f001 f964 	bl	801499e <_ZN8XFThread15scheduleTimeoutEiiP11IXFReactive>
		}
		break;
 80136d6:	e01f      	b.n	8013718 <_ZN7desenet15TimeSlotManager12processEventEv+0xa8>
	case STATE_ROOT:
		if (getCurrentEvent()->getEventType() == IXFEvent::Timeout &&
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	3304      	adds	r3, #4
 80136dc:	4618      	mov	r0, r3
 80136de:	f000 ffa3 	bl	8014628 <_ZNK10XFReactive15getCurrentEventEv>
 80136e2:	4603      	mov	r3, r0
 80136e4:	4618      	mov	r0, r3
 80136e6:	f7f3 f924 	bl	8006932 <_ZNK8IXFEvent12getEventTypeEv>
 80136ea:	4603      	mov	r3, r0
 80136ec:	2b04      	cmp	r3, #4
 80136ee:	d10d      	bne.n	801370c <_ZN7desenet15TimeSlotManager12processEventEv+0x9c>
			getCurrentTimeout()->getId() == Timeout_SIM_BEACON_RECEIVED_id)
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	3304      	adds	r3, #4
 80136f4:	4618      	mov	r0, r3
 80136f6:	f000 ffb1 	bl	801465c <_ZN10XFReactive17getCurrentTimeoutEv>
 80136fa:	4603      	mov	r3, r0
 80136fc:	4618      	mov	r0, r3
 80136fe:	f7f3 f925 	bl	800694c <_ZNK8IXFEvent5getIdEv>
 8013702:	4603      	mov	r3, r0
		if (getCurrentEvent()->getEventType() == IXFEvent::Timeout &&
 8013704:	2b01      	cmp	r3, #1
 8013706:	d101      	bne.n	801370c <_ZN7desenet15TimeSlotManager12processEventEv+0x9c>
 8013708:	2301      	movs	r3, #1
 801370a:	e000      	b.n	801370e <_ZN7desenet15TimeSlotManager12processEventEv+0x9e>
 801370c:	2300      	movs	r3, #0
 801370e:	2b00      	cmp	r3, #0
 8013710:	d004      	beq.n	801371c <_ZN7desenet15TimeSlotManager12processEventEv+0xac>
		{
			newState = STATE_ROOT;	// Stay in state
 8013712:	2302      	movs	r3, #2
 8013714:	73fb      	strb	r3, [r7, #15]

			// Simulate we got a beacon
			onBeaconReceived(2000 /*ms*/);
#endif // TIMESLOTMANAGER_SIMULATE_BEACON
		}
		break;
 8013716:	e001      	b.n	801371c <_ZN7desenet15TimeSlotManager12processEventEv+0xac>
		break;
 8013718:	bf00      	nop
 801371a:	e000      	b.n	801371e <_ZN7desenet15TimeSlotManager12processEventEv+0xae>
		break;
 801371c:	bf00      	nop
	}

	_currentState = newState;		// Save new state to actual
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	7bfa      	ldrb	r2, [r7, #15]
 8013722:	761a      	strb	r2, [r3, #24]

	return EventStatus::Consumed;	// We consume all given events/timeouts
 8013724:	f107 030c 	add.w	r3, r7, #12
 8013728:	2101      	movs	r1, #1
 801372a:	4618      	mov	r0, r3
 801372c:	f7f3 f91a 	bl	8006964 <_ZN11EventStatusC1ENS_12eEventStatusE>
 8013730:	7b3b      	ldrb	r3, [r7, #12]
}
 8013732:	4618      	mov	r0, r3
 8013734:	3710      	adds	r7, #16
 8013736:	46bd      	mov	sp, r7
 8013738:	bd80      	pop	{r7, pc}

0801373a <_ZThn4_N7desenet15TimeSlotManager12processEventEv>:

	virtual void onBeaconReceived(const desenet::SlotDuration & slotDuration);

protected:
	// Interface from XFReactive
	virtual EventStatus processEvent();		///< Implements the state machine.
 801373a:	f1a0 0004 	sub.w	r0, r0, #4
 801373e:	f7ff bf97 	b.w	8013670 <_ZN7desenet15TimeSlotManager12processEventEv>
	...

08013744 <_Z41__static_initialization_and_destruction_0ii>:

} // namespace desenet
 8013744:	b580      	push	{r7, lr}
 8013746:	b088      	sub	sp, #32
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
 801374c:	6039      	str	r1, [r7, #0]
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	2b01      	cmp	r3, #1
 8013752:	d122      	bne.n	801379a <_Z41__static_initialization_and_destruction_0ii+0x56>
 8013754:	683b      	ldr	r3, [r7, #0]
 8013756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801375a:	4293      	cmp	r3, r2
 801375c:	d11d      	bne.n	801379a <_Z41__static_initialization_and_destruction_0ii+0x56>
 801375e:	4b18      	ldr	r3, [pc, #96]	; (80137c0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	613b      	str	r3, [r7, #16]
 8013764:	f107 0310 	add.w	r3, r7, #16
 8013768:	60bb      	str	r3, [r7, #8]
 801376a:	2304      	movs	r3, #4
 801376c:	60fb      	str	r3, [r7, #12]
 801376e:	f107 0308 	add.w	r3, r7, #8
 8013772:	e893 0006 	ldmia.w	r3, {r1, r2}
 8013776:	4813      	ldr	r0, [pc, #76]	; (80137c4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8013778:	f7f3 faa4 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
  static const desenet::Address SENSOR_ADDRESS({0xC7, 0xC7, 0xC7, 0xC7});	///< @brief Sensor's reception address.
 801377c:	4b12      	ldr	r3, [pc, #72]	; (80137c8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	61fb      	str	r3, [r7, #28]
 8013782:	f107 031c 	add.w	r3, r7, #28
 8013786:	617b      	str	r3, [r7, #20]
 8013788:	2304      	movs	r3, #4
 801378a:	61bb      	str	r3, [r7, #24]
 801378c:	f107 0314 	add.w	r3, r7, #20
 8013790:	e893 0006 	ldmia.w	r3, {r1, r2}
 8013794:	480d      	ldr	r0, [pc, #52]	; (80137cc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8013796:	f7f3 fa95 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d10a      	bne.n	80137b6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80137a0:	683b      	ldr	r3, [r7, #0]
 80137a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80137a6:	4293      	cmp	r3, r2
 80137a8:	d105      	bne.n	80137b6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80137aa:	4808      	ldr	r0, [pc, #32]	; (80137cc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80137ac:	f7f3 fbc6 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 80137b0:	4804      	ldr	r0, [pc, #16]	; (80137c4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80137b2:	f7f3 fbc3 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
 80137b6:	bf00      	nop
 80137b8:	3720      	adds	r7, #32
 80137ba:	46bd      	mov	sp, r7
 80137bc:	bd80      	pop	{r7, pc}
 80137be:	bf00      	nop
 80137c0:	0801b6a0 	.word	0x0801b6a0
 80137c4:	20001b78 	.word	0x20001b78
 80137c8:	0801b6a4 	.word	0x0801b6a4
 80137cc:	20001b80 	.word	0x20001b80

080137d0 <_GLOBAL__sub_I__ZN7desenet15TimeSlotManager10_pInstanceE>:
 80137d0:	b580      	push	{r7, lr}
 80137d2:	af00      	add	r7, sp, #0
 80137d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80137d8:	2001      	movs	r0, #1
 80137da:	f7ff ffb3 	bl	8013744 <_Z41__static_initialization_and_destruction_0ii>
 80137de:	bd80      	pop	{r7, pc}

080137e0 <_GLOBAL__sub_D__ZN7desenet15TimeSlotManager10_pInstanceE>:
 80137e0:	b580      	push	{r7, lr}
 80137e2:	af00      	add	r7, sp, #0
 80137e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80137e8:	2000      	movs	r0, #0
 80137ea:	f7ff ffab 	bl	8013744 <_Z41__static_initialization_and_destruction_0ii>
 80137ee:	bd80      	pop	{r7, pc}

080137f0 <enterCritical>:
volatile unsigned char bInISR = 0;
volatile unsigned char bEnterCriticalRegionNested = 0;


void enterCritical()
{
 80137f0:	b480      	push	{r7}
 80137f2:	af00      	add	r7, sp, #0
	// Only disable interrupts when not calling from an ISR
	if (!inISR())
 80137f4:	4b0b      	ldr	r3, [pc, #44]	; (8013824 <enterCritical+0x34>)
 80137f6:	781b      	ldrb	r3, [r3, #0]
 80137f8:	b2db      	uxtb	r3, r3
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d10c      	bne.n	8013818 <enterCritical+0x28>
	{
		if (!bEnterCriticalRegionNested)
 80137fe:	4b0a      	ldr	r3, [pc, #40]	; (8013828 <enterCritical+0x38>)
 8013800:	781b      	ldrb	r3, [r3, #0]
 8013802:	b2db      	uxtb	r3, r3
 8013804:	2b00      	cmp	r3, #0
 8013806:	d100      	bne.n	801380a <enterCritical+0x1a>
		{
			// Turn off the priority configurable interrupts
			asm volatile ("cpsid i");
 8013808:	b672      	cpsid	i
		}
		bEnterCriticalRegionNested++;
 801380a:	4b07      	ldr	r3, [pc, #28]	; (8013828 <enterCritical+0x38>)
 801380c:	781b      	ldrb	r3, [r3, #0]
 801380e:	b2db      	uxtb	r3, r3
 8013810:	3301      	adds	r3, #1
 8013812:	b2da      	uxtb	r2, r3
 8013814:	4b04      	ldr	r3, [pc, #16]	; (8013828 <enterCritical+0x38>)
 8013816:	701a      	strb	r2, [r3, #0]
	}

}
 8013818:	bf00      	nop
 801381a:	46bd      	mov	sp, r7
 801381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013820:	4770      	bx	lr
 8013822:	bf00      	nop
 8013824:	20001b8c 	.word	0x20001b8c
 8013828:	20001b8d 	.word	0x20001b8d

0801382c <exitCritical>:

void exitCritical()
{
 801382c:	b480      	push	{r7}
 801382e:	af00      	add	r7, sp, #0
	// Only enable interrupts when not calling from an ISR
	if (!inISR())
 8013830:	4b0b      	ldr	r3, [pc, #44]	; (8013860 <exitCritical+0x34>)
 8013832:	781b      	ldrb	r3, [r3, #0]
 8013834:	b2db      	uxtb	r3, r3
 8013836:	2b00      	cmp	r3, #0
 8013838:	d10c      	bne.n	8013854 <exitCritical+0x28>
	{
		bEnterCriticalRegionNested--;
 801383a:	4b0a      	ldr	r3, [pc, #40]	; (8013864 <exitCritical+0x38>)
 801383c:	781b      	ldrb	r3, [r3, #0]
 801383e:	b2db      	uxtb	r3, r3
 8013840:	3b01      	subs	r3, #1
 8013842:	b2da      	uxtb	r2, r3
 8013844:	4b07      	ldr	r3, [pc, #28]	; (8013864 <exitCritical+0x38>)
 8013846:	701a      	strb	r2, [r3, #0]

		if (!bEnterCriticalRegionNested)
 8013848:	4b06      	ldr	r3, [pc, #24]	; (8013864 <exitCritical+0x38>)
 801384a:	781b      	ldrb	r3, [r3, #0]
 801384c:	b2db      	uxtb	r3, r3
 801384e:	2b00      	cmp	r3, #0
 8013850:	d100      	bne.n	8013854 <exitCritical+0x28>
		{
			// Turn on the interrupts with configurable priority
			asm volatile("cpsie i");
 8013852:	b662      	cpsie	i
		}
	}
}
 8013854:	bf00      	nop
 8013856:	46bd      	mov	sp, r7
 8013858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801385c:	4770      	bx	lr
 801385e:	bf00      	nop
 8013860:	20001b8c 	.word	0x20001b8c
 8013864:	20001b8d 	.word	0x20001b8d

08013868 <_ZN3SpiC1Ei>:
#include "spi.h"

extern "C" SPI_HandleTypeDef hspi2;     // All defined in main.c
extern "C" SPI_HandleTypeDef hspi3;

Spi::Spi(int spiNbr)
 8013868:	b580      	push	{r7, lr}
 801386a:	b082      	sub	sp, #8
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
 8013870:	6039      	str	r1, [r7, #0]
 : _bInitialized(false),
   _pSPI(NULL)
 8013872:	4a11      	ldr	r2, [pc, #68]	; (80138b8 <_ZN3SpiC1Ei+0x50>)
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	601a      	str	r2, [r3, #0]
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	2200      	movs	r2, #0
 801387c:	711a      	strb	r2, [r3, #4]
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	2200      	movs	r2, #0
 8013882:	609a      	str	r2, [r3, #8]
{
	switch (spiNbr)
 8013884:	683b      	ldr	r3, [r7, #0]
 8013886:	2b01      	cmp	r3, #1
 8013888:	d003      	beq.n	8013892 <_ZN3SpiC1Ei+0x2a>
 801388a:	683b      	ldr	r3, [r7, #0]
 801388c:	2b02      	cmp	r3, #2
 801388e:	d004      	beq.n	801389a <_ZN3SpiC1Ei+0x32>
 8013890:	e007      	b.n	80138a2 <_ZN3SpiC1Ei+0x3a>
	{
	case 1:
		_pSPI = &hspi2;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	4a09      	ldr	r2, [pc, #36]	; (80138bc <_ZN3SpiC1Ei+0x54>)
 8013896:	609a      	str	r2, [r3, #8]
		break;
 8013898:	e009      	b.n	80138ae <_ZN3SpiC1Ei+0x46>
	case 2:
		_pSPI = &hspi3;
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	4a08      	ldr	r2, [pc, #32]	; (80138c0 <_ZN3SpiC1Ei+0x58>)
 801389e:	609a      	str	r2, [r3, #8]
		break;
 80138a0:	e005      	b.n	80138ae <_ZN3SpiC1Ei+0x46>
	default:
		assert(false);	// Passed wrong parameter
 80138a2:	4b08      	ldr	r3, [pc, #32]	; (80138c4 <_ZN3SpiC1Ei+0x5c>)
 80138a4:	4a08      	ldr	r2, [pc, #32]	; (80138c8 <_ZN3SpiC1Ei+0x60>)
 80138a6:	2116      	movs	r1, #22
 80138a8:	4808      	ldr	r0, [pc, #32]	; (80138cc <_ZN3SpiC1Ei+0x64>)
 80138aa:	f002 fec7 	bl	801663c <__assert_func>
	}
}
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	4618      	mov	r0, r3
 80138b2:	3708      	adds	r7, #8
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd80      	pop	{r7, pc}
 80138b8:	0801e0e8 	.word	0x0801e0e8
 80138bc:	20001d00 	.word	0x20001d00
 80138c0:	20001de8 	.word	0x20001de8
 80138c4:	0801b6a8 	.word	0x0801b6a8
 80138c8:	0801b6b0 	.word	0x0801b6b0
 80138cc:	0801b6c0 	.word	0x0801b6c0

080138d0 <_ZN3SpiD1Ev>:

Spi::~Spi()
 80138d0:	b480      	push	{r7}
 80138d2:	b083      	sub	sp, #12
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	6078      	str	r0, [r7, #4]
 80138d8:	4a04      	ldr	r2, [pc, #16]	; (80138ec <_ZN3SpiD1Ev+0x1c>)
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	601a      	str	r2, [r3, #0]
{

}
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	4618      	mov	r0, r3
 80138e2:	370c      	adds	r7, #12
 80138e4:	46bd      	mov	sp, r7
 80138e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ea:	4770      	bx	lr
 80138ec:	0801e0e8 	.word	0x0801e0e8

080138f0 <_ZN3SpiD0Ev>:
Spi::~Spi()
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b082      	sub	sp, #8
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	6078      	str	r0, [r7, #4]
}
 80138f8:	6878      	ldr	r0, [r7, #4]
 80138fa:	f7ff ffe9 	bl	80138d0 <_ZN3SpiD1Ev>
 80138fe:	210c      	movs	r1, #12
 8013900:	6878      	ldr	r0, [r7, #4]
 8013902:	f002 fdad 	bl	8016460 <_ZdlPvj>
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	4618      	mov	r0, r3
 801390a:	3708      	adds	r7, #8
 801390c:	46bd      	mov	sp, r7
 801390e:	bd80      	pop	{r7, pc}

08013910 <__tcf_0>:

	switch (spiIndex)
	{
	case 0:
		{
			static Spi spi1(0);
 8013910:	b580      	push	{r7, lr}
 8013912:	af00      	add	r7, sp, #0
 8013914:	4801      	ldr	r0, [pc, #4]	; (801391c <__tcf_0+0xc>)
 8013916:	f7ff ffdb 	bl	80138d0 <_ZN3SpiD1Ev>
 801391a:	bd80      	pop	{r7, pc}
 801391c:	20001b90 	.word	0x20001b90

08013920 <__tcf_1>:
			pSpi = &spi1;
		}
		break;
	case 1:
		{
			static Spi spi2(1);
 8013920:	b580      	push	{r7, lr}
 8013922:	af00      	add	r7, sp, #0
 8013924:	4801      	ldr	r0, [pc, #4]	; (801392c <__tcf_1+0xc>)
 8013926:	f7ff ffd3 	bl	80138d0 <_ZN3SpiD1Ev>
 801392a:	bd80      	pop	{r7, pc}
 801392c:	20001ba0 	.word	0x20001ba0

08013930 <__tcf_2>:
			pSpi = &spi2;
		}
		break;
	case 2:
		{
			static Spi spi3(2);
 8013930:	b580      	push	{r7, lr}
 8013932:	af00      	add	r7, sp, #0
 8013934:	4801      	ldr	r0, [pc, #4]	; (801393c <__tcf_2+0xc>)
 8013936:	f7ff ffcb 	bl	80138d0 <_ZN3SpiD1Ev>
 801393a:	bd80      	pop	{r7, pc}
 801393c:	20001bb0 	.word	0x20001bb0

08013940 <_ZN3Spi8instanceEh>:
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b084      	sub	sp, #16
 8013944:	af00      	add	r7, sp, #0
 8013946:	4603      	mov	r3, r0
 8013948:	71fb      	strb	r3, [r7, #7]
	Spi * pSpi = NULL;
 801394a:	2300      	movs	r3, #0
 801394c:	60fb      	str	r3, [r7, #12]
	switch (spiIndex)
 801394e:	79fb      	ldrb	r3, [r7, #7]
 8013950:	2b02      	cmp	r3, #2
 8013952:	d052      	beq.n	80139fa <_ZN3Spi8instanceEh+0xba>
 8013954:	2b02      	cmp	r3, #2
 8013956:	dc76      	bgt.n	8013a46 <_ZN3Spi8instanceEh+0x106>
 8013958:	2b00      	cmp	r3, #0
 801395a:	d002      	beq.n	8013962 <_ZN3Spi8instanceEh+0x22>
 801395c:	2b01      	cmp	r3, #1
 801395e:	d026      	beq.n	80139ae <_ZN3Spi8instanceEh+0x6e>

			pSpi = &spi3;
		}
		break;
	default:
		break;
 8013960:	e071      	b.n	8013a46 <_ZN3Spi8instanceEh+0x106>
			static Spi spi1(0);
 8013962:	4b40      	ldr	r3, [pc, #256]	; (8013a64 <_ZN3Spi8instanceEh+0x124>)
 8013964:	781b      	ldrb	r3, [r3, #0]
 8013966:	f3bf 8f5b 	dmb	ish
 801396a:	b2db      	uxtb	r3, r3
 801396c:	f003 0301 	and.w	r3, r3, #1
 8013970:	2b00      	cmp	r3, #0
 8013972:	bf0c      	ite	eq
 8013974:	2301      	moveq	r3, #1
 8013976:	2300      	movne	r3, #0
 8013978:	b2db      	uxtb	r3, r3
 801397a:	2b00      	cmp	r3, #0
 801397c:	d014      	beq.n	80139a8 <_ZN3Spi8instanceEh+0x68>
 801397e:	4839      	ldr	r0, [pc, #228]	; (8013a64 <_ZN3Spi8instanceEh+0x124>)
 8013980:	f002 fd72 	bl	8016468 <__cxa_guard_acquire>
 8013984:	4603      	mov	r3, r0
 8013986:	2b00      	cmp	r3, #0
 8013988:	bf14      	ite	ne
 801398a:	2301      	movne	r3, #1
 801398c:	2300      	moveq	r3, #0
 801398e:	b2db      	uxtb	r3, r3
 8013990:	2b00      	cmp	r3, #0
 8013992:	d009      	beq.n	80139a8 <_ZN3Spi8instanceEh+0x68>
 8013994:	2100      	movs	r1, #0
 8013996:	4834      	ldr	r0, [pc, #208]	; (8013a68 <_ZN3Spi8instanceEh+0x128>)
 8013998:	f7ff ff66 	bl	8013868 <_ZN3SpiC1Ei>
 801399c:	4831      	ldr	r0, [pc, #196]	; (8013a64 <_ZN3Spi8instanceEh+0x124>)
 801399e:	f002 fd6f 	bl	8016480 <__cxa_guard_release>
 80139a2:	4832      	ldr	r0, [pc, #200]	; (8013a6c <_ZN3Spi8instanceEh+0x12c>)
 80139a4:	f002 fe68 	bl	8016678 <atexit>
			pSpi = &spi1;
 80139a8:	4b2f      	ldr	r3, [pc, #188]	; (8013a68 <_ZN3Spi8instanceEh+0x128>)
 80139aa:	60fb      	str	r3, [r7, #12]
		break;
 80139ac:	e04c      	b.n	8013a48 <_ZN3Spi8instanceEh+0x108>
			static Spi spi2(1);
 80139ae:	4b30      	ldr	r3, [pc, #192]	; (8013a70 <_ZN3Spi8instanceEh+0x130>)
 80139b0:	781b      	ldrb	r3, [r3, #0]
 80139b2:	f3bf 8f5b 	dmb	ish
 80139b6:	b2db      	uxtb	r3, r3
 80139b8:	f003 0301 	and.w	r3, r3, #1
 80139bc:	2b00      	cmp	r3, #0
 80139be:	bf0c      	ite	eq
 80139c0:	2301      	moveq	r3, #1
 80139c2:	2300      	movne	r3, #0
 80139c4:	b2db      	uxtb	r3, r3
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d014      	beq.n	80139f4 <_ZN3Spi8instanceEh+0xb4>
 80139ca:	4829      	ldr	r0, [pc, #164]	; (8013a70 <_ZN3Spi8instanceEh+0x130>)
 80139cc:	f002 fd4c 	bl	8016468 <__cxa_guard_acquire>
 80139d0:	4603      	mov	r3, r0
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	bf14      	ite	ne
 80139d6:	2301      	movne	r3, #1
 80139d8:	2300      	moveq	r3, #0
 80139da:	b2db      	uxtb	r3, r3
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d009      	beq.n	80139f4 <_ZN3Spi8instanceEh+0xb4>
 80139e0:	2101      	movs	r1, #1
 80139e2:	4824      	ldr	r0, [pc, #144]	; (8013a74 <_ZN3Spi8instanceEh+0x134>)
 80139e4:	f7ff ff40 	bl	8013868 <_ZN3SpiC1Ei>
 80139e8:	4821      	ldr	r0, [pc, #132]	; (8013a70 <_ZN3Spi8instanceEh+0x130>)
 80139ea:	f002 fd49 	bl	8016480 <__cxa_guard_release>
 80139ee:	4822      	ldr	r0, [pc, #136]	; (8013a78 <_ZN3Spi8instanceEh+0x138>)
 80139f0:	f002 fe42 	bl	8016678 <atexit>
			pSpi = &spi2;
 80139f4:	4b1f      	ldr	r3, [pc, #124]	; (8013a74 <_ZN3Spi8instanceEh+0x134>)
 80139f6:	60fb      	str	r3, [r7, #12]
		break;
 80139f8:	e026      	b.n	8013a48 <_ZN3Spi8instanceEh+0x108>
			static Spi spi3(2);
 80139fa:	4b20      	ldr	r3, [pc, #128]	; (8013a7c <_ZN3Spi8instanceEh+0x13c>)
 80139fc:	781b      	ldrb	r3, [r3, #0]
 80139fe:	f3bf 8f5b 	dmb	ish
 8013a02:	b2db      	uxtb	r3, r3
 8013a04:	f003 0301 	and.w	r3, r3, #1
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	bf0c      	ite	eq
 8013a0c:	2301      	moveq	r3, #1
 8013a0e:	2300      	movne	r3, #0
 8013a10:	b2db      	uxtb	r3, r3
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d014      	beq.n	8013a40 <_ZN3Spi8instanceEh+0x100>
 8013a16:	4819      	ldr	r0, [pc, #100]	; (8013a7c <_ZN3Spi8instanceEh+0x13c>)
 8013a18:	f002 fd26 	bl	8016468 <__cxa_guard_acquire>
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	bf14      	ite	ne
 8013a22:	2301      	movne	r3, #1
 8013a24:	2300      	moveq	r3, #0
 8013a26:	b2db      	uxtb	r3, r3
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d009      	beq.n	8013a40 <_ZN3Spi8instanceEh+0x100>
 8013a2c:	2102      	movs	r1, #2
 8013a2e:	4814      	ldr	r0, [pc, #80]	; (8013a80 <_ZN3Spi8instanceEh+0x140>)
 8013a30:	f7ff ff1a 	bl	8013868 <_ZN3SpiC1Ei>
 8013a34:	4811      	ldr	r0, [pc, #68]	; (8013a7c <_ZN3Spi8instanceEh+0x13c>)
 8013a36:	f002 fd23 	bl	8016480 <__cxa_guard_release>
 8013a3a:	4812      	ldr	r0, [pc, #72]	; (8013a84 <_ZN3Spi8instanceEh+0x144>)
 8013a3c:	f002 fe1c 	bl	8016678 <atexit>
			pSpi = &spi3;
 8013a40:	4b0f      	ldr	r3, [pc, #60]	; (8013a80 <_ZN3Spi8instanceEh+0x140>)
 8013a42:	60fb      	str	r3, [r7, #12]
		break;
 8013a44:	e000      	b.n	8013a48 <_ZN3Spi8instanceEh+0x108>
		break;
 8013a46:	bf00      	nop
	}

	if (!pSpi)
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d105      	bne.n	8013a5a <_ZN3Spi8instanceEh+0x11a>
	{
		assert(false);
 8013a4e:	4b0e      	ldr	r3, [pc, #56]	; (8013a88 <_ZN3Spi8instanceEh+0x148>)
 8013a50:	4a0e      	ldr	r2, [pc, #56]	; (8013a8c <_ZN3Spi8instanceEh+0x14c>)
 8013a52:	2145      	movs	r1, #69	; 0x45
 8013a54:	480e      	ldr	r0, [pc, #56]	; (8013a90 <_ZN3Spi8instanceEh+0x150>)
 8013a56:	f002 fdf1 	bl	801663c <__assert_func>
	}

	return *pSpi;
 8013a5a:	68fb      	ldr	r3, [r7, #12]
}
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	3710      	adds	r7, #16
 8013a60:	46bd      	mov	sp, r7
 8013a62:	bd80      	pop	{r7, pc}
 8013a64:	20001b9c 	.word	0x20001b9c
 8013a68:	20001b90 	.word	0x20001b90
 8013a6c:	08013911 	.word	0x08013911
 8013a70:	20001bac 	.word	0x20001bac
 8013a74:	20001ba0 	.word	0x20001ba0
 8013a78:	08013921 	.word	0x08013921
 8013a7c:	20001bbc 	.word	0x20001bbc
 8013a80:	20001bb0 	.word	0x20001bb0
 8013a84:	08013931 	.word	0x08013931
 8013a88:	0801b6a8 	.word	0x0801b6a8
 8013a8c:	0801b74c 	.word	0x0801b74c
 8013a90:	0801b6c0 	.word	0x0801b6c0

08013a94 <_ZN3Spi10initializeEv>:
 * needs to be made in an other place (see in board configuration).
 *
 * After complete initialization the SPI can be enabled using the #enable method.
 */
bool Spi::initialize()
{
 8013a94:	b480      	push	{r7}
 8013a96:	b083      	sub	sp, #12
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
	if (!_bInitialized)
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	791b      	ldrb	r3, [r3, #4]
 8013aa0:	f083 0301 	eor.w	r3, r3, #1
 8013aa4:	b2db      	uxtb	r3, r3
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d004      	beq.n	8013ab4 <_ZN3Spi10initializeEv+0x20>
	{
		_bInitialized = true;
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	2201      	movs	r2, #1
 8013aae:	711a      	strb	r2, [r3, #4]

#ifdef IDE_STM32CUBEIDE
		// HAL initialization is done in the main.c file
		return true;
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	e000      	b.n	8013ab6 <_ZN3Spi10initializeEv+0x22>
#endif // IDE_STM32CUBEIDE

		return true;
	}

	return false;
 8013ab4:	2300      	movs	r3, #0
}
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	370c      	adds	r7, #12
 8013aba:	46bd      	mov	sp, r7
 8013abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac0:	4770      	bx	lr
	...

08013ac4 <_ZN3Spi8sendByteEh>:
//	assert(_pSPI);
//	return SPI_I2S_GetFlagStatus(_pSPI, flagMask);
//}

Spi::tStatus Spi::sendByte(unsigned char data)
{
 8013ac4:	b580      	push	{r7, lr}
 8013ac6:	b086      	sub	sp, #24
 8013ac8:	af02      	add	r7, sp, #8
 8013aca:	6078      	str	r0, [r7, #4]
 8013acc:	460b      	mov	r3, r1
 8013ace:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status = HAL_ERROR;
 8013ad0:	2301      	movs	r3, #1
 8013ad2:	73fb      	strb	r3, [r7, #15]
	uint8_t rxData[1];

	status = HAL_SPI_TransmitReceive(_pSPI, &data, rxData, 1, 50);
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	6898      	ldr	r0, [r3, #8]
 8013ad8:	f107 020c 	add.w	r2, r7, #12
 8013adc:	1cf9      	adds	r1, r7, #3
 8013ade:	2332      	movs	r3, #50	; 0x32
 8013ae0:	9300      	str	r3, [sp, #0]
 8013ae2:	2301      	movs	r3, #1
 8013ae4:	f7f0 faf3 	bl	80040ce <HAL_SPI_TransmitReceive>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	73fb      	strb	r3, [r7, #15]
	assert(status == HAL_OK);
 8013aec:	7bfb      	ldrb	r3, [r7, #15]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d005      	beq.n	8013afe <_ZN3Spi8sendByteEh+0x3a>
 8013af2:	4b05      	ldr	r3, [pc, #20]	; (8013b08 <_ZN3Spi8sendByteEh+0x44>)
 8013af4:	4a05      	ldr	r2, [pc, #20]	; (8013b0c <_ZN3Spi8sendByteEh+0x48>)
 8013af6:	2182      	movs	r1, #130	; 0x82
 8013af8:	4805      	ldr	r0, [pc, #20]	; (8013b10 <_ZN3Spi8sendByteEh+0x4c>)
 8013afa:	f002 fd9f 	bl	801663c <__assert_func>

	// Return the byte read from the SPI bus
	return rxData[0];
 8013afe:	7b3b      	ldrb	r3, [r7, #12]
}
 8013b00:	4618      	mov	r0, r3
 8013b02:	3710      	adds	r7, #16
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd80      	pop	{r7, pc}
 8013b08:	0801b770 	.word	0x0801b770
 8013b0c:	0801b784 	.word	0x0801b784
 8013b10:	0801b6c0 	.word	0x0801b6c0

08013b14 <_ZN4UartC1EhP20__UART_HandleTypeDefb>:
#endif

Uart * Uart::_sUart[Uart::UART_COUNT];				// Comment: Startup script should initialize pointers to zero (.bss section)
bool Uart::_sInitialized[Uart::UART_COUNT];			// Same for other arrays

Uart::Uart(const unsigned char uartNbr, UART_HandleTypeDef * uartHandle, bool bTxDMA /* = false */)
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b084      	sub	sp, #16
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	60f8      	str	r0, [r7, #12]
 8013b1c:	607a      	str	r2, [r7, #4]
 8013b1e:	461a      	mov	r2, r3
 8013b20:	460b      	mov	r3, r1
 8013b22:	72fb      	strb	r3, [r7, #11]
 8013b24:	4613      	mov	r3, r2
 8013b26:	72bb      	strb	r3, [r7, #10]
 : _uartNbr(-1),
   _pUartHandle(NULL),
   _bTxDMA(bTxDMA)
 8013b28:	4a1a      	ldr	r2, [pc, #104]	; (8013b94 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x80>)
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	601a      	str	r2, [r3, #0]
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	22ff      	movs	r2, #255	; 0xff
 8013b32:	711a      	strb	r2, [r3, #4]
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	2200      	movs	r2, #0
 8013b38:	609a      	str	r2, [r3, #8]
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	7aba      	ldrb	r2, [r7, #10]
 8013b3e:	731a      	strb	r2, [r3, #12]
{
	assert(uartNbr < UART_COUNT);
 8013b40:	7afb      	ldrb	r3, [r7, #11]
 8013b42:	2b02      	cmp	r3, #2
 8013b44:	d905      	bls.n	8013b52 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x3e>
 8013b46:	4b14      	ldr	r3, [pc, #80]	; (8013b98 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x84>)
 8013b48:	4a14      	ldr	r2, [pc, #80]	; (8013b9c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x88>)
 8013b4a:	2111      	movs	r1, #17
 8013b4c:	4814      	ldr	r0, [pc, #80]	; (8013ba0 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x8c>)
 8013b4e:	f002 fd75 	bl	801663c <__assert_func>

	if (uartNbr < UART_COUNT)
 8013b52:	7afb      	ldrb	r3, [r7, #11]
 8013b54:	2b02      	cmp	r3, #2
 8013b56:	d817      	bhi.n	8013b88 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x74>
    {
        if (!_sUart[uartNbr])
 8013b58:	7afb      	ldrb	r3, [r7, #11]
 8013b5a:	4a12      	ldr	r2, [pc, #72]	; (8013ba4 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x90>)
 8013b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d10b      	bne.n	8013b7c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x68>
        {
            // Register instance
            _sUart[uartNbr] = this;
 8013b64:	7afb      	ldrb	r3, [r7, #11]
 8013b66:	490f      	ldr	r1, [pc, #60]	; (8013ba4 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x90>)
 8013b68:	68fa      	ldr	r2, [r7, #12]
 8013b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            _uartNbr = uartNbr;
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	7afa      	ldrb	r2, [r7, #11]
 8013b72:	711a      	strb	r2, [r3, #4]

            _pUartHandle = uartHandle;
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	687a      	ldr	r2, [r7, #4]
 8013b78:	609a      	str	r2, [r3, #8]
 8013b7a:	e005      	b.n	8013b88 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x74>
        }
        else
        {
            assert(false);  // Error: Instance for specified UART already exists.
 8013b7c:	4b0a      	ldr	r3, [pc, #40]	; (8013ba8 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x94>)
 8013b7e:	4a07      	ldr	r2, [pc, #28]	; (8013b9c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x88>)
 8013b80:	211f      	movs	r1, #31
 8013b82:	4807      	ldr	r0, [pc, #28]	; (8013ba0 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x8c>)
 8013b84:	f002 fd5a 	bl	801663c <__assert_func>
        }
    }
}
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	3710      	adds	r7, #16
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	bd80      	pop	{r7, pc}
 8013b92:	bf00      	nop
 8013b94:	0801e0f8 	.word	0x0801e0f8
 8013b98:	0801b7b0 	.word	0x0801b7b0
 8013b9c:	0801b7c8 	.word	0x0801b7c8
 8013ba0:	0801b800 	.word	0x0801b800
 8013ba4:	20001bc0 	.word	0x20001bc0
 8013ba8:	0801b88c 	.word	0x0801b88c

08013bac <_ZN4UartD1Ev>:

Uart::~Uart()
 8013bac:	b480      	push	{r7}
 8013bae:	b083      	sub	sp, #12
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
 8013bb4:	4a04      	ldr	r2, [pc, #16]	; (8013bc8 <_ZN4UartD1Ev+0x1c>)
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	601a      	str	r2, [r3, #0]
{

}
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	370c      	adds	r7, #12
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc6:	4770      	bx	lr
 8013bc8:	0801e0f8 	.word	0x0801e0f8

08013bcc <_ZN4UartD0Ev>:
Uart::~Uart()
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b082      	sub	sp, #8
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
}
 8013bd4:	6878      	ldr	r0, [r7, #4]
 8013bd6:	f7ff ffe9 	bl	8013bac <_ZN4UartD1Ev>
 8013bda:	2190      	movs	r1, #144	; 0x90
 8013bdc:	6878      	ldr	r0, [r7, #4]
 8013bde:	f002 fc3f 	bl	8016460 <_ZdlPvj>
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	4618      	mov	r0, r3
 8013be6:	3708      	adds	r7, #8
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bd80      	pop	{r7, pc}

08013bec <_ZN4Uart10initializeEv>:

bool Uart::initialize()
{
 8013bec:	b480      	push	{r7}
 8013bee:	b083      	sub	sp, #12
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]
	return true;
 8013bf4:	2301      	movs	r3, #1
}
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	370c      	adds	r7, #12
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c00:	4770      	bx	lr

08013c02 <_ZN4Uart5writeEPKcj>:
    __HAL_UART_DISABLE(_pUartHandle);
    return true;
}

void Uart::write(const char * str, unsigned int length /* = 0 */)
{
 8013c02:	b580      	push	{r7, lr}
 8013c04:	b084      	sub	sp, #16
 8013c06:	af00      	add	r7, sp, #0
 8013c08:	60f8      	str	r0, [r7, #12]
 8013c0a:	60b9      	str	r1, [r7, #8]
 8013c0c:	607a      	str	r2, [r7, #4]
	if (!length)
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d103      	bne.n	8013c1c <_ZN4Uart5writeEPKcj+0x1a>
	{
		length = strlen(str);
 8013c14:	68b8      	ldr	r0, [r7, #8]
 8013c16:	f7ec fb2b 	bl	8000270 <strlen>
 8013c1a:	6078      	str	r0, [r7, #4]
	}

    if (!_bTxDMA)
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	7b1b      	ldrb	r3, [r3, #12]
 8013c20:	f083 0301 	eor.w	r3, r3, #1
 8013c24:	b2db      	uxtb	r3, r3
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d008      	beq.n	8013c3c <_ZN4Uart5writeEPKcj+0x3a>
    {   // Transmit without DMA
        // Send next character
        HAL_UART_Transmit(_pUartHandle, (uint8_t *)str, length, 50);
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	6898      	ldr	r0, [r3, #8]
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	b29a      	uxth	r2, r3
 8013c32:	2332      	movs	r3, #50	; 0x32
 8013c34:	68b9      	ldr	r1, [r7, #8]
 8013c36:	f7f2 f8a1 	bl	8005d7c <HAL_UART_Transmit>
    }
    else
    {   // TX DMA enabled
        writeUsingDMA((const uint8_t *)str, length);
    }
}
 8013c3a:	e004      	b.n	8013c46 <_ZN4Uart5writeEPKcj+0x44>
        writeUsingDMA((const uint8_t *)str, length);
 8013c3c:	687a      	ldr	r2, [r7, #4]
 8013c3e:	68b9      	ldr	r1, [r7, #8]
 8013c40:	68f8      	ldr	r0, [r7, #12]
 8013c42:	f000 f805 	bl	8013c50 <_ZN4Uart13writeUsingDMAEPKhm>
}
 8013c46:	bf00      	nop
 8013c48:	3710      	adds	r7, #16
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bd80      	pop	{r7, pc}
	...

08013c50 <_ZN4Uart13writeUsingDMAEPKhm>:

void Uart::writeUsingDMA(const uint8_t * str, uint32_t length)
{
 8013c50:	b580      	push	{r7, lr}
 8013c52:	b084      	sub	sp, #16
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	60f8      	str	r0, [r7, #12]
 8013c58:	60b9      	str	r1, [r7, #8]
 8013c5a:	607a      	str	r2, [r7, #4]
    assert(length <= sizeof(_pTxDmaBuffer));
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	2b80      	cmp	r3, #128	; 0x80
 8013c60:	d905      	bls.n	8013c6e <_ZN4Uart13writeUsingDMAEPKhm+0x1e>
 8013c62:	4b13      	ldr	r3, [pc, #76]	; (8013cb0 <_ZN4Uart13writeUsingDMAEPKhm+0x60>)
 8013c64:	4a13      	ldr	r2, [pc, #76]	; (8013cb4 <_ZN4Uart13writeUsingDMAEPKhm+0x64>)
 8013c66:	2150      	movs	r1, #80	; 0x50
 8013c68:	4813      	ldr	r0, [pc, #76]	; (8013cb8 <_ZN4Uart13writeUsingDMAEPKhm+0x68>)
 8013c6a:	f002 fce7 	bl	801663c <__assert_func>

    // Copy data to TX DMA buffer
    ::memcpy(_pTxDmaBuffer, str, length);
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	330d      	adds	r3, #13
 8013c72:	687a      	ldr	r2, [r7, #4]
 8013c74:	68b9      	ldr	r1, [r7, #8]
 8013c76:	4618      	mov	r0, r3
 8013c78:	f002 fd50 	bl	801671c <memcpy>

    // Check that a Tx process is not already ongoing
    // (should never happen, but who knows!)
    while (_pUartHandle->gState != HAL_UART_STATE_READY)
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	689b      	ldr	r3, [r3, #8]
 8013c80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013c82:	2b20      	cmp	r3, #32
 8013c84:	bf14      	ite	ne
 8013c86:	2301      	movne	r3, #1
 8013c88:	2300      	moveq	r3, #0
 8013c8a:	b2db      	uxtb	r3, r3
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d001      	beq.n	8013c94 <_ZN4Uart13writeUsingDMAEPKhm+0x44>
    { continue; }
 8013c90:	bf00      	nop
    while (_pUartHandle->gState != HAL_UART_STATE_READY)
 8013c92:	e7f3      	b.n	8013c7c <_ZN4Uart13writeUsingDMAEPKhm+0x2c>

    // Give data to TX DMA
    HAL_UART_Transmit_DMA(_pUartHandle, _pTxDmaBuffer, length);
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	6898      	ldr	r0, [r3, #8]
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	330d      	adds	r3, #13
 8013c9c:	687a      	ldr	r2, [r7, #4]
 8013c9e:	b292      	uxth	r2, r2
 8013ca0:	4619      	mov	r1, r3
 8013ca2:	f7f2 f8ff 	bl	8005ea4 <HAL_UART_Transmit_DMA>
}
 8013ca6:	bf00      	nop
 8013ca8:	3710      	adds	r7, #16
 8013caa:	46bd      	mov	sp, r7
 8013cac:	bd80      	pop	{r7, pc}
 8013cae:	bf00      	nop
 8013cb0:	0801b894 	.word	0x0801b894
 8013cb4:	0801b8b4 	.word	0x0801b8b4
 8013cb8:	0801b800 	.word	0x0801b800

08013cbc <_ZN10LedFlasher13ledControllerEv>:
	} eMainState;

	eMainState _newState;		///< Attribute indicating currently active state

protected:
	LedController & ledController() { return _ledController; }
 8013cbc:	b480      	push	{r7}
 8013cbe:	b083      	sub	sp, #12
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	691b      	ldr	r3, [r3, #16]
 8013cc8:	4618      	mov	r0, r3
 8013cca:	370c      	adds	r7, #12
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd2:	4770      	bx	lr

08013cd4 <_ZN10LedFlasherC1EtR13LedController>:
#include "xf/xfevent.h"
#include "board/ledcontroller.h"
#include "ledflasher.h"

LedFlasher::LedFlasher(uint16_t ledIndex, LedController & ledController)
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b084      	sub	sp, #16
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	60f8      	str	r0, [r7, #12]
 8013cdc:	460b      	mov	r3, r1
 8013cde:	607a      	str	r2, [r7, #4]
 8013ce0:	817b      	strh	r3, [r7, #10]
 : _newState(STATE_UNKOWN),
   _ledIndex(ledIndex),
   _ledController(ledController),
   _flashTimeInMilliseconds(100)
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	2100      	movs	r1, #0
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	f000 fbc0 	bl	801446c <_ZN10XFReactiveC1EP8XFThread>
 8013cec:	4a09      	ldr	r2, [pc, #36]	; (8013d14 <_ZN10LedFlasherC1EtR13LedController+0x40>)
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	601a      	str	r2, [r3, #0]
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	2200      	movs	r2, #0
 8013cf6:	731a      	strb	r2, [r3, #12]
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	897a      	ldrh	r2, [r7, #10]
 8013cfc:	81da      	strh	r2, [r3, #14]
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	687a      	ldr	r2, [r7, #4]
 8013d02:	611a      	str	r2, [r3, #16]
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	2264      	movs	r2, #100	; 0x64
 8013d08:	615a      	str	r2, [r3, #20]
{
}
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	3710      	adds	r7, #16
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}
 8013d14:	0801e108 	.word	0x0801e108

08013d18 <_ZN10LedFlasher5startEv>:
{
	_flashTimeInMilliseconds = flashTimeInMilliseconds;
}

void LedFlasher::start()
{
 8013d18:	b580      	push	{r7, lr}
 8013d1a:	b082      	sub	sp, #8
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	6078      	str	r0, [r7, #4]
	XFReactive::startBehavior();
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	4618      	mov	r0, r3
 8013d24:	f000 fbe6 	bl	80144f4 <_ZN10XFReactive13startBehaviorEv>
}
 8013d28:	bf00      	nop
 8013d2a:	3708      	adds	r7, #8
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	bd80      	pop	{r7, pc}

08013d30 <_ZN10LedFlasher8flashLedEv>:

void LedFlasher::flashLed()
{
 8013d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d32:	b083      	sub	sp, #12
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	6078      	str	r0, [r7, #4]
	GEN(XFEvent(EV_LED_FLASH_id));
 8013d38:	687d      	ldr	r5, [r7, #4]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	330c      	adds	r3, #12
 8013d40:	681c      	ldr	r4, [r3, #0]
 8013d42:	2014      	movs	r0, #20
 8013d44:	f002 fb9f 	bl	8016486 <_Znwj>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	461e      	mov	r6, r3
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	2101      	movs	r1, #1
 8013d50:	4630      	mov	r0, r6
 8013d52:	f000 fadb 	bl	801430c <_ZN7XFEventC1EiP11IXFReactive>
 8013d56:	4631      	mov	r1, r6
 8013d58:	4628      	mov	r0, r5
 8013d5a:	47a0      	blx	r4
}
 8013d5c:	bf00      	nop
 8013d5e:	370c      	adds	r7, #12
 8013d60:	46bd      	mov	sp, r7
 8013d62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013d64 <_ZN10LedFlasher12processEventEv>:

EventStatus LedFlasher::processEvent()
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b084      	sub	sp, #16
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]
	const eMainState lastState = _newState;
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	7b1b      	ldrb	r3, [r3, #12]
 8013d70:	73fb      	strb	r3, [r7, #15]

	// Action on transition switch
	switch (lastState)
 8013d72:	7bfb      	ldrb	r3, [r7, #15]
 8013d74:	2b03      	cmp	r3, #3
 8013d76:	d03c      	beq.n	8013df2 <_ZN10LedFlasher12processEventEv+0x8e>
 8013d78:	2b03      	cmp	r3, #3
 8013d7a:	dc5e      	bgt.n	8013e3a <_ZN10LedFlasher12processEventEv+0xd6>
 8013d7c:	2b01      	cmp	r3, #1
 8013d7e:	dc02      	bgt.n	8013d86 <_ZN10LedFlasher12processEventEv+0x22>
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	da03      	bge.n	8013d8c <_ZN10LedFlasher12processEventEv+0x28>
 8013d84:	e059      	b.n	8013e3a <_ZN10LedFlasher12processEventEv+0xd6>
 8013d86:	2b02      	cmp	r3, #2
 8013d88:	d014      	beq.n	8013db4 <_ZN10LedFlasher12processEventEv+0x50>
 8013d8a:	e056      	b.n	8013e3a <_ZN10LedFlasher12processEventEv+0xd6>
	{
	case STATE_UNKOWN:
	case STATE_INITIAL:
		if (getCurrentEvent()->getEventType() == IXFEvent::Initial)
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f000 fc4a 	bl	8014628 <_ZNK10XFReactive15getCurrentEventEv>
 8013d94:	4603      	mov	r3, r0
 8013d96:	4618      	mov	r0, r3
 8013d98:	f7f2 fdcb 	bl	8006932 <_ZNK8IXFEvent12getEventTypeEv>
 8013d9c:	4603      	mov	r3, r0
 8013d9e:	2b01      	cmp	r3, #1
 8013da0:	bf0c      	ite	eq
 8013da2:	2301      	moveq	r3, #1
 8013da4:	2300      	movne	r3, #0
 8013da6:	b2db      	uxtb	r3, r3
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d041      	beq.n	8013e30 <_ZN10LedFlasher12processEventEv+0xcc>
		{
			_newState = STATE_WAIT_FLASH;
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	2202      	movs	r2, #2
 8013db0:	731a      	strb	r2, [r3, #12]
		}
		break;
 8013db2:	e03d      	b.n	8013e30 <_ZN10LedFlasher12processEventEv+0xcc>
	case STATE_WAIT_FLASH:
		if (getCurrentEvent()->getEventType() == IXFEvent::Event &&
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	4618      	mov	r0, r3
 8013db8:	f000 fc36 	bl	8014628 <_ZNK10XFReactive15getCurrentEventEv>
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	f7f2 fdb7 	bl	8006932 <_ZNK8IXFEvent12getEventTypeEv>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	2b03      	cmp	r3, #3
 8013dc8:	d10c      	bne.n	8013de4 <_ZN10LedFlasher12processEventEv+0x80>
			getCurrentEvent()->getId() == EV_LED_FLASH_id)
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	4618      	mov	r0, r3
 8013dce:	f000 fc2b 	bl	8014628 <_ZNK10XFReactive15getCurrentEventEv>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	f7f2 fdb9 	bl	800694c <_ZNK8IXFEvent5getIdEv>
 8013dda:	4603      	mov	r3, r0
		if (getCurrentEvent()->getEventType() == IXFEvent::Event &&
 8013ddc:	2b01      	cmp	r3, #1
 8013dde:	d101      	bne.n	8013de4 <_ZN10LedFlasher12processEventEv+0x80>
 8013de0:	2301      	movs	r3, #1
 8013de2:	e000      	b.n	8013de6 <_ZN10LedFlasher12processEventEv+0x82>
 8013de4:	2300      	movs	r3, #0
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d024      	beq.n	8013e34 <_ZN10LedFlasher12processEventEv+0xd0>
		{
			_newState = STATE_LED_FLASH;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	2203      	movs	r2, #3
 8013dee:	731a      	strb	r2, [r3, #12]
		}
		break;
 8013df0:	e020      	b.n	8013e34 <_ZN10LedFlasher12processEventEv+0xd0>
	case STATE_LED_FLASH:
		if (getCurrentEvent()->getEventType() == IXFEvent::Timeout &&
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	4618      	mov	r0, r3
 8013df6:	f000 fc17 	bl	8014628 <_ZNK10XFReactive15getCurrentEventEv>
 8013dfa:	4603      	mov	r3, r0
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	f7f2 fd98 	bl	8006932 <_ZNK8IXFEvent12getEventTypeEv>
 8013e02:	4603      	mov	r3, r0
 8013e04:	2b04      	cmp	r3, #4
 8013e06:	d10c      	bne.n	8013e22 <_ZN10LedFlasher12processEventEv+0xbe>
			getCurrentTimeout()->getId() == TM_LED_FLASH_id)
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	f000 fc26 	bl	801465c <_ZN10XFReactive17getCurrentTimeoutEv>
 8013e10:	4603      	mov	r3, r0
 8013e12:	4618      	mov	r0, r3
 8013e14:	f7f2 fd9a 	bl	800694c <_ZNK8IXFEvent5getIdEv>
 8013e18:	4603      	mov	r3, r0
		if (getCurrentEvent()->getEventType() == IXFEvent::Timeout &&
 8013e1a:	2b01      	cmp	r3, #1
 8013e1c:	d101      	bne.n	8013e22 <_ZN10LedFlasher12processEventEv+0xbe>
 8013e1e:	2301      	movs	r3, #1
 8013e20:	e000      	b.n	8013e24 <_ZN10LedFlasher12processEventEv+0xc0>
 8013e22:	2300      	movs	r3, #0
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d007      	beq.n	8013e38 <_ZN10LedFlasher12processEventEv+0xd4>
		{
			_newState = STATE_WAIT_FLASH;
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	2202      	movs	r2, #2
 8013e2c:	731a      	strb	r2, [r3, #12]
		}
		break;
 8013e2e:	e003      	b.n	8013e38 <_ZN10LedFlasher12processEventEv+0xd4>
		break;
 8013e30:	bf00      	nop
 8013e32:	e002      	b.n	8013e3a <_ZN10LedFlasher12processEventEv+0xd6>
		break;
 8013e34:	bf00      	nop
 8013e36:	e000      	b.n	8013e3a <_ZN10LedFlasher12processEventEv+0xd6>
		break;
 8013e38:	bf00      	nop
	}

	if (lastState != _newState)
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	7b1b      	ldrb	r3, [r3, #12]
 8013e3e:	7bfa      	ldrb	r2, [r7, #15]
 8013e40:	429a      	cmp	r2, r3
 8013e42:	d028      	beq.n	8013e96 <_ZN10LedFlasher12processEventEv+0x132>
	{
		// Action on entry switch
		switch (_newState)
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	7b1b      	ldrb	r3, [r3, #12]
 8013e48:	2b02      	cmp	r3, #2
 8013e4a:	d002      	beq.n	8013e52 <_ZN10LedFlasher12processEventEv+0xee>
 8013e4c:	2b03      	cmp	r3, #3
 8013e4e:	d00a      	beq.n	8013e66 <_ZN10LedFlasher12processEventEv+0x102>

				ledController().setLed(_ledIndex, true);
			}
			break;
		default:
			break;
 8013e50:	e021      	b.n	8013e96 <_ZN10LedFlasher12processEventEv+0x132>
				ledController().setLed(_ledIndex, false);
 8013e52:	6878      	ldr	r0, [r7, #4]
 8013e54:	f7ff ff32 	bl	8013cbc <_ZN10LedFlasher13ledControllerEv>
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	89db      	ldrh	r3, [r3, #14]
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	4619      	mov	r1, r3
 8013e60:	f7fb fd9a 	bl	800f998 <_ZN13LedController6setLedEib>
			break;
 8013e64:	e017      	b.n	8013e96 <_ZN10LedFlasher12processEventEv+0x132>
				getThread()->scheduleTimeout(TM_LED_FLASH_id, _flashTimeInMilliseconds, this);
 8013e66:	687a      	ldr	r2, [r7, #4]
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	3318      	adds	r3, #24
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	4610      	mov	r0, r2
 8013e72:	4798      	blx	r3
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	695b      	ldr	r3, [r3, #20]
 8013e78:	461a      	mov	r2, r3
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	2101      	movs	r1, #1
 8013e7e:	f000 fd8e 	bl	801499e <_ZN8XFThread15scheduleTimeoutEiiP11IXFReactive>
				ledController().setLed(_ledIndex, true);
 8013e82:	6878      	ldr	r0, [r7, #4]
 8013e84:	f7ff ff1a 	bl	8013cbc <_ZN10LedFlasher13ledControllerEv>
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	89db      	ldrh	r3, [r3, #14]
 8013e8c:	2201      	movs	r2, #1
 8013e8e:	4619      	mov	r1, r3
 8013e90:	f7fb fd82 	bl	800f998 <_ZN13LedController6setLedEib>
			break;
 8013e94:	bf00      	nop
		}
	}

	return EventStatus::Consumed;	// We consume all given events/timeouts
 8013e96:	f107 030c 	add.w	r3, r7, #12
 8013e9a:	2101      	movs	r1, #1
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	f7f2 fd61 	bl	8006964 <_ZN11EventStatusC1ENS_12eEventStatusE>
 8013ea2:	7b3b      	ldrb	r3, [r7, #12]
}
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	3710      	adds	r7, #16
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	bd80      	pop	{r7, pc}

08013eac <_ZN5board14NrfTransceiver8instanceEv>:

	static void traceOut(const char * const format, ...);

	inline static NrfTransceiver & instance() { assert(_pInstance); return *_pInstance; }
 8013eac:	b580      	push	{r7, lr}
 8013eae:	af00      	add	r7, sp, #0
 8013eb0:	4b06      	ldr	r3, [pc, #24]	; (8013ecc <_ZN5board14NrfTransceiver8instanceEv+0x20>)
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d105      	bne.n	8013ec4 <_ZN5board14NrfTransceiver8instanceEv+0x18>
 8013eb8:	4b05      	ldr	r3, [pc, #20]	; (8013ed0 <_ZN5board14NrfTransceiver8instanceEv+0x24>)
 8013eba:	4a06      	ldr	r2, [pc, #24]	; (8013ed4 <_ZN5board14NrfTransceiver8instanceEv+0x28>)
 8013ebc:	2157      	movs	r1, #87	; 0x57
 8013ebe:	4806      	ldr	r0, [pc, #24]	; (8013ed8 <_ZN5board14NrfTransceiver8instanceEv+0x2c>)
 8013ec0:	f002 fbbc 	bl	801663c <__assert_func>
 8013ec4:	4b01      	ldr	r3, [pc, #4]	; (8013ecc <_ZN5board14NrfTransceiver8instanceEv+0x20>)
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	4618      	mov	r0, r3
 8013eca:	bd80      	pop	{r7, pc}
 8013ecc:	200019cc 	.word	0x200019cc
 8013ed0:	0801b8e8 	.word	0x0801b8e8
 8013ed4:	0801b8f4 	.word	0x0801b8f4
 8013ed8:	0801b934 	.word	0x0801b934

08013edc <HAL_GPIO_EXTI_Callback>:
#include "board/joystick.h"
#include "board/accel/accelerometer.h"
#include "desenet/timeslotmanager.h"

extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b082      	sub	sp, #8
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin)
 8013ee6:	88fb      	ldrh	r3, [r7, #6]
 8013ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013eec:	d061      	beq.n	8013fb2 <HAL_GPIO_EXTI_Callback+0xd6>
 8013eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013ef2:	dc6c      	bgt.n	8013fce <HAL_GPIO_EXTI_Callback+0xf2>
 8013ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013ef8:	d05b      	beq.n	8013fb2 <HAL_GPIO_EXTI_Callback+0xd6>
 8013efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013efe:	dc66      	bgt.n	8013fce <HAL_GPIO_EXTI_Callback+0xf2>
 8013f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013f04:	d055      	beq.n	8013fb2 <HAL_GPIO_EXTI_Callback+0xd6>
 8013f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013f0a:	dc60      	bgt.n	8013fce <HAL_GPIO_EXTI_Callback+0xf2>
 8013f0c:	2b20      	cmp	r3, #32
 8013f0e:	dc47      	bgt.n	8013fa0 <HAL_GPIO_EXTI_Callback+0xc4>
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	dd5c      	ble.n	8013fce <HAL_GPIO_EXTI_Callback+0xf2>
 8013f14:	3b01      	subs	r3, #1
 8013f16:	2b1f      	cmp	r3, #31
 8013f18:	d859      	bhi.n	8013fce <HAL_GPIO_EXTI_Callback+0xf2>
 8013f1a:	a201      	add	r2, pc, #4	; (adr r2, 8013f20 <HAL_GPIO_EXTI_Callback+0x44>)
 8013f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f20:	08013fc5 	.word	0x08013fc5
 8013f24:	08013fcf 	.word	0x08013fcf
 8013f28:	08013fcf 	.word	0x08013fcf
 8013f2c:	08013fcf 	.word	0x08013fcf
 8013f30:	08013fcf 	.word	0x08013fcf
 8013f34:	08013fcf 	.word	0x08013fcf
 8013f38:	08013fcf 	.word	0x08013fcf
 8013f3c:	08013fc5 	.word	0x08013fc5
 8013f40:	08013fcf 	.word	0x08013fcf
 8013f44:	08013fcf 	.word	0x08013fcf
 8013f48:	08013fcf 	.word	0x08013fcf
 8013f4c:	08013fcf 	.word	0x08013fcf
 8013f50:	08013fcf 	.word	0x08013fcf
 8013f54:	08013fcf 	.word	0x08013fcf
 8013f58:	08013fcf 	.word	0x08013fcf
 8013f5c:	08013fb3 	.word	0x08013fb3
 8013f60:	08013fcf 	.word	0x08013fcf
 8013f64:	08013fcf 	.word	0x08013fcf
 8013f68:	08013fcf 	.word	0x08013fcf
 8013f6c:	08013fcf 	.word	0x08013fcf
 8013f70:	08013fcf 	.word	0x08013fcf
 8013f74:	08013fcf 	.word	0x08013fcf
 8013f78:	08013fcf 	.word	0x08013fcf
 8013f7c:	08013fcf 	.word	0x08013fcf
 8013f80:	08013fcf 	.word	0x08013fcf
 8013f84:	08013fcf 	.word	0x08013fcf
 8013f88:	08013fcf 	.word	0x08013fcf
 8013f8c:	08013fcf 	.word	0x08013fcf
 8013f90:	08013fcf 	.word	0x08013fcf
 8013f94:	08013fcf 	.word	0x08013fcf
 8013f98:	08013fcf 	.word	0x08013fcf
 8013f9c:	08013fb3 	.word	0x08013fb3
 8013fa0:	2b80      	cmp	r3, #128	; 0x80
 8013fa2:	d114      	bne.n	8013fce <HAL_GPIO_EXTI_Callback+0xf2>
    {
    case NRF_IRQ_Pin:   // nRF24L01 IRQ
#if (EXCLUDE_BOARD_NRFTRANSCEIVER == 0)
        // Call transceivers interrupt reception method
        board::NrfTransceiver::instance().onIrq();
 8013fa4:	f7ff ff82 	bl	8013eac <_ZN5board14NrfTransceiver8instanceEv>
 8013fa8:	4603      	mov	r3, r0
 8013faa:	4618      	mov	r0, r3
 8013fac:	f7fd ffc6 	bl	8011f3c <_ZN5board14NrfTransceiver5onIrqEv>
#endif
        break;
 8013fb0:	e00e      	b.n	8013fd0 <HAL_GPIO_EXTI_Callback+0xf4>
    case NAVS_LEFT_Pin:
        //no break;
    case NAVS_RIGHT_Pin:
        //no break;
    case NAVS_CENTER_Pin:
        board::Joystick::instance().onIrq(GPIO_Pin);
 8013fb2:	f7fb f957 	bl	800f264 <_ZN5board8Joystick8instanceEv>
 8013fb6:	4602      	mov	r2, r0
 8013fb8:	88fb      	ldrh	r3, [r7, #6]
 8013fba:	4619      	mov	r1, r3
 8013fbc:	4610      	mov	r0, r2
 8013fbe:	f7fb fb65 	bl	800f68c <_ZN5board8Joystick5onIrqEt>
        break;
 8013fc2:	e005      	b.n	8013fd0 <HAL_GPIO_EXTI_Callback+0xf4>
    case ACCEL_IRQ1_Pin:
        //no break;
    case ACCEL_IRQ2_Pin:
        board::Accelerometer::onIrq(GPIO_Pin);
 8013fc4:	88fb      	ldrh	r3, [r7, #6]
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	f7fa ff47 	bl	800ee5a <_ZN5board13Accelerometer5onIrqEt>
        break;
 8013fcc:	e000      	b.n	8013fd0 <HAL_GPIO_EXTI_Callback+0xf4>
    default:
        break;
 8013fce:	bf00      	nop
    }
}
 8013fd0:	bf00      	nop
 8013fd2:	3708      	adds	r7, #8
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	bd80      	pop	{r7, pc}

08013fd8 <HAL_TIM_OC_DelayElapsedCallback>:

extern "C" void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef * htim)
{
 8013fd8:	b580      	push	{r7, lr}
 8013fda:	b082      	sub	sp, #8
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013fe8:	d101      	bne.n	8013fee <HAL_TIM_OC_DelayElapsedCallback+0x16>
    {
        TimeSlotManager::onIrq();
 8013fea:	f7ff f99f 	bl	801332c <_ZN7desenet15TimeSlotManager5onIrqEv>
    }
}
 8013fee:	bf00      	nop
 8013ff0:	3708      	adds	r7, #8
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	bd80      	pop	{r7, pc}
	...

08013ff8 <_Z41__static_initialization_and_destruction_0ii>:
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b088      	sub	sp, #32
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
 8014000:	6039      	str	r1, [r7, #0]
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	2b01      	cmp	r3, #1
 8014006:	d122      	bne.n	801404e <_Z41__static_initialization_and_destruction_0ii+0x56>
 8014008:	683b      	ldr	r3, [r7, #0]
 801400a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801400e:	4293      	cmp	r3, r2
 8014010:	d11d      	bne.n	801404e <_Z41__static_initialization_and_destruction_0ii+0x56>
#define NRFTRANSCEIVER_TRACE_VERBOSE 	1

#define DESNET_NODE_NAME				"SENSOR"

#ifdef __cplusplus
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 8014012:	4b18      	ldr	r3, [pc, #96]	; (8014074 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	613b      	str	r3, [r7, #16]
 8014018:	f107 0310 	add.w	r3, r7, #16
 801401c:	60bb      	str	r3, [r7, #8]
 801401e:	2304      	movs	r3, #4
 8014020:	60fb      	str	r3, [r7, #12]
 8014022:	f107 0308 	add.w	r3, r7, #8
 8014026:	e893 0006 	ldmia.w	r3, {r1, r2}
 801402a:	4813      	ldr	r0, [pc, #76]	; (8014078 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801402c:	f7f2 fe4a 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
  static const desenet::Address SENSOR_ADDRESS({0xC7, 0xC7, 0xC7, 0xC7});	///< @brief Sensor's reception address.
 8014030:	4b12      	ldr	r3, [pc, #72]	; (801407c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	61fb      	str	r3, [r7, #28]
 8014036:	f107 031c 	add.w	r3, r7, #28
 801403a:	617b      	str	r3, [r7, #20]
 801403c:	2304      	movs	r3, #4
 801403e:	61bb      	str	r3, [r7, #24]
 8014040:	f107 0314 	add.w	r3, r7, #20
 8014044:	e893 0006 	ldmia.w	r3, {r1, r2}
 8014048:	480d      	ldr	r0, [pc, #52]	; (8014080 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801404a:	f7f2 fe3b 	bl	8006cc4 <_ZN3phy7AddressILj4EEC1ESt16initializer_listIhE>
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d10a      	bne.n	801406a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8014054:	683b      	ldr	r3, [r7, #0]
 8014056:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801405a:	4293      	cmp	r3, r2
 801405c:	d105      	bne.n	801406a <_Z41__static_initialization_and_destruction_0ii+0x72>
 801405e:	4808      	ldr	r0, [pc, #32]	; (8014080 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8014060:	f7f2 ff6c 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
  static const desenet::Address GATEWAY_ADDRESS({0xE2, 0xE2, 0xE2, 0xE2});	///< @brief Gateway's reception address.
 8014064:	4804      	ldr	r0, [pc, #16]	; (8014078 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014066:	f7f2 ff69 	bl	8006f3c <_ZN3phy7AddressILj4EED1Ev>
 801406a:	bf00      	nop
 801406c:	3720      	adds	r7, #32
 801406e:	46bd      	mov	sp, r7
 8014070:	bd80      	pop	{r7, pc}
 8014072:	bf00      	nop
 8014074:	0801babc 	.word	0x0801babc
 8014078:	20001bcc 	.word	0x20001bcc
 801407c:	0801bac0 	.word	0x0801bac0
 8014080:	20001bd4 	.word	0x20001bd4

08014084 <_GLOBAL__sub_I_HAL_GPIO_EXTI_Callback>:
 8014084:	b580      	push	{r7, lr}
 8014086:	af00      	add	r7, sp, #0
 8014088:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801408c:	2001      	movs	r0, #1
 801408e:	f7ff ffb3 	bl	8013ff8 <_Z41__static_initialization_and_destruction_0ii>
 8014092:	bd80      	pop	{r7, pc}

08014094 <_GLOBAL__sub_D_HAL_GPIO_EXTI_Callback>:
 8014094:	b580      	push	{r7, lr}
 8014096:	af00      	add	r7, sp, #0
 8014098:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801409c:	2000      	movs	r0, #0
 801409e:	f7ff ffab 	bl	8013ff8 <_Z41__static_initialization_and_destruction_0ii>
 80140a2:	bd80      	pop	{r7, pc}

080140a4 <_ZN8IXFEventC1ENS_10eEventTypeEiP11IXFReactive>:

public :
    /**
     * Default class constructor
     */
    IXFEvent(eEventType eventType, int id, IXFReactive * pBehavior) : _eventType(eventType), _id(id), _pBehavior(pBehavior) { _eventStatus.shouldDelete = true; }
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b084      	sub	sp, #16
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	60f8      	str	r0, [r7, #12]
 80140ac:	607a      	str	r2, [r7, #4]
 80140ae:	603b      	str	r3, [r7, #0]
 80140b0:	460b      	mov	r3, r1
 80140b2:	72fb      	strb	r3, [r7, #11]
 80140b4:	4a0d      	ldr	r2, [pc, #52]	; (80140ec <_ZN8IXFEventC1ENS_10eEventTypeEiP11IXFReactive+0x48>)
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	601a      	str	r2, [r3, #0]
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	7afa      	ldrb	r2, [r7, #11]
 80140be:	711a      	strb	r2, [r3, #4]
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	687a      	ldr	r2, [r7, #4]
 80140c4:	609a      	str	r2, [r3, #8]
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	330c      	adds	r3, #12
 80140ca:	4618      	mov	r0, r3
 80140cc:	f000 f830 	bl	8014130 <_ZN8IXFEvent13_tEventStatusC1Ev>
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	683a      	ldr	r2, [r7, #0]
 80140d4:	611a      	str	r2, [r3, #16]
 80140d6:	68fa      	ldr	r2, [r7, #12]
 80140d8:	7b13      	ldrb	r3, [r2, #12]
 80140da:	f043 0301 	orr.w	r3, r3, #1
 80140de:	7313      	strb	r3, [r2, #12]
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	4618      	mov	r0, r3
 80140e4:	3710      	adds	r7, #16
 80140e6:	46bd      	mov	sp, r7
 80140e8:	bd80      	pop	{r7, pc}
 80140ea:	bf00      	nop
 80140ec:	0801e13c 	.word	0x0801e13c

080140f0 <_ZN8IXFEventD1Ev>:
    virtual ~IXFEvent() {}		///< Class destructor
 80140f0:	b480      	push	{r7}
 80140f2:	b083      	sub	sp, #12
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]
 80140f8:	4a04      	ldr	r2, [pc, #16]	; (801410c <_ZN8IXFEventD1Ev+0x1c>)
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	601a      	str	r2, [r3, #0]
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	4618      	mov	r0, r3
 8014102:	370c      	adds	r7, #12
 8014104:	46bd      	mov	sp, r7
 8014106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801410a:	4770      	bx	lr
 801410c:	0801e13c 	.word	0x0801e13c

08014110 <_ZN8IXFEventD0Ev>:
 8014110:	b580      	push	{r7, lr}
 8014112:	b082      	sub	sp, #8
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
 8014118:	6878      	ldr	r0, [r7, #4]
 801411a:	f7ff ffe9 	bl	80140f0 <_ZN8IXFEventD1Ev>
 801411e:	2114      	movs	r1, #20
 8014120:	6878      	ldr	r0, [r7, #4]
 8014122:	f002 f99d 	bl	8016460 <_ZdlPvj>
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	4618      	mov	r0, r3
 801412a:	3708      	adds	r7, #8
 801412c:	46bd      	mov	sp, r7
 801412e:	bd80      	pop	{r7, pc}

08014130 <_ZN8IXFEvent13_tEventStatusC1Ev>:
protected:
    typedef struct _tEventStatus
    {
        unsigned char shouldDelete : 1;	///< True in case the event should be deleted after consume.

        _tEventStatus()
 8014130:	b480      	push	{r7}
 8014132:	b083      	sub	sp, #12
 8014134:	af00      	add	r7, sp, #0
 8014136:	6078      	str	r0, [r7, #4]
        {
            shouldDelete = true;
 8014138:	687a      	ldr	r2, [r7, #4]
 801413a:	7813      	ldrb	r3, [r2, #0]
 801413c:	f043 0301 	orr.w	r3, r3, #1
 8014140:	7013      	strb	r3, [r2, #0]
        }
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	4618      	mov	r0, r3
 8014146:	370c      	adds	r7, #12
 8014148:	46bd      	mov	sp, r7
 801414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801414e:	4770      	bx	lr

08014150 <_ZN12InitialEventC1Ev>:
#include "xf.h"
#include "initialevent.h"

InitialEvent::InitialEvent()
 8014150:	b580      	push	{r7, lr}
 8014152:	b082      	sub	sp, #8
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
    : IXFEvent(IXFEvent::Initial, 0, NULL)
 8014158:	6878      	ldr	r0, [r7, #4]
 801415a:	2300      	movs	r3, #0
 801415c:	2200      	movs	r2, #0
 801415e:	2101      	movs	r1, #1
 8014160:	f7ff ffa0 	bl	80140a4 <_ZN8IXFEventC1ENS_10eEventTypeEiP11IXFReactive>
 8014164:	4a03      	ldr	r2, [pc, #12]	; (8014174 <_ZN12InitialEventC1Ev+0x24>)
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	601a      	str	r2, [r3, #0]
{
}
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	4618      	mov	r0, r3
 801416e:	3708      	adds	r7, #8
 8014170:	46bd      	mov	sp, r7
 8014172:	bd80      	pop	{r7, pc}
 8014174:	0801e12c 	.word	0x0801e12c

08014178 <_ZN12InitialEventD1Ev>:

InitialEvent::~InitialEvent()
 8014178:	b580      	push	{r7, lr}
 801417a:	b082      	sub	sp, #8
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
 8014180:	4a05      	ldr	r2, [pc, #20]	; (8014198 <_ZN12InitialEventD1Ev+0x20>)
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	601a      	str	r2, [r3, #0]
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	4618      	mov	r0, r3
 801418a:	f7ff ffb1 	bl	80140f0 <_ZN8IXFEventD1Ev>
{

}
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	4618      	mov	r0, r3
 8014192:	3708      	adds	r7, #8
 8014194:	46bd      	mov	sp, r7
 8014196:	bd80      	pop	{r7, pc}
 8014198:	0801e12c 	.word	0x0801e12c

0801419c <_ZN12InitialEventD0Ev>:
InitialEvent::~InitialEvent()
 801419c:	b580      	push	{r7, lr}
 801419e:	b082      	sub	sp, #8
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	6078      	str	r0, [r7, #4]
}
 80141a4:	6878      	ldr	r0, [r7, #4]
 80141a6:	f7ff ffe7 	bl	8014178 <_ZN12InitialEventD1Ev>
 80141aa:	2114      	movs	r1, #20
 80141ac:	6878      	ldr	r0, [r7, #4]
 80141ae:	f002 f957 	bl	8016460 <_ZdlPvj>
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	4618      	mov	r0, r3
 80141b6:	3708      	adds	r7, #8
 80141b8:	46bd      	mov	sp, r7
 80141ba:	bd80      	pop	{r7, pc}

080141bc <_ZN2XF4initEi>:
/**
 * Initializes the eXecution Framework (XF). Call
 * this method prior to initialize the other objects of the system.
 */
void XF::init(int timeInterval)
{
 80141bc:	b580      	push	{r7, lr}
 80141be:	b082      	sub	sp, #8
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	6078      	str	r0, [r7, #4]
    // Create and initialize XFTimeoutManager
    XFTimeoutManager::getInstance()->setTickInterval(timeInterval);
 80141c4:	f001 fbc4 	bl	8015950 <_ZN16XFTimeoutManager11getInstanceEv>
 80141c8:	4603      	mov	r3, r0
 80141ca:	6879      	ldr	r1, [r7, #4]
 80141cc:	4618      	mov	r0, r3
 80141ce:	f001 fbd5 	bl	801597c <_ZN16XFTimeoutManager15setTickIntervalEi>
    // Start it
    XFTimeoutManager::getInstance()->start();
 80141d2:	f001 fbbd 	bl	8015950 <_ZN16XFTimeoutManager11getInstanceEv>
 80141d6:	4603      	mov	r3, r0
 80141d8:	4618      	mov	r0, r3
 80141da:	f001 fbdd 	bl	8015998 <_ZN16XFTimeoutManager5startEv>
}
 80141de:	bf00      	nop
 80141e0:	3708      	adds	r7, #8
 80141e2:	46bd      	mov	sp, r7
 80141e4:	bd80      	pop	{r7, pc}
	...

080141e8 <_ZN2XF5startEv>:


#if defined(TC_STM32) || defined(TC_STM32CUBEIDE) /*******************************************************************/

void XF::start()
{
 80141e8:	b580      	push	{r7, lr}
 80141ea:	af00      	add	r7, sp, #0
    _isRunning = true;     // From here the XF is running
 80141ec:	4b03      	ldr	r3, [pc, #12]	; (80141fc <_ZN2XF5startEv+0x14>)
 80141ee:	2201      	movs	r2, #1
 80141f0:	701a      	strb	r2, [r3, #0]

    _mainThread.start();
 80141f2:	4803      	ldr	r0, [pc, #12]	; (8014200 <_ZN2XF5startEv+0x18>)
 80141f4:	f000 fb7a 	bl	80148ec <_ZN8XFThread5startEv>
}
 80141f8:	bf00      	nop
 80141fa:	bd80      	pop	{r7, pc}
 80141fc:	20001bdc 	.word	0x20001bdc
 8014200:	20001be0 	.word	0x20001be0

08014204 <_ZN2XF13getMainThreadEv>:

#endif /**************************************************************************************************************/


XFThread * XF::getMainThread()
{
 8014204:	b480      	push	{r7}
 8014206:	af00      	add	r7, sp, #0
    return &_mainThread;
 8014208:	4b02      	ldr	r3, [pc, #8]	; (8014214 <_ZN2XF13getMainThreadEv+0x10>)
}
 801420a:	4618      	mov	r0, r3
 801420c:	46bd      	mov	sp, r7
 801420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014212:	4770      	bx	lr
 8014214:	20001be0 	.word	0x20001be0

08014218 <_ZN2XF9isRunningEv>:

bool XF::isRunning()
{
 8014218:	b480      	push	{r7}
 801421a:	af00      	add	r7, sp, #0
    return _isRunning;
 801421c:	4b03      	ldr	r3, [pc, #12]	; (801422c <_ZN2XF9isRunningEv+0x14>)
 801421e:	781b      	ldrb	r3, [r3, #0]
}
 8014220:	4618      	mov	r0, r3
 8014222:	46bd      	mov	sp, r7
 8014224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014228:	4770      	bx	lr
 801422a:	bf00      	nop
 801422c:	20001bdc 	.word	0x20001bdc

08014230 <XF_init>:

void XF_init(int timeInterval)
{
 8014230:	b580      	push	{r7, lr}
 8014232:	b082      	sub	sp, #8
 8014234:	af00      	add	r7, sp, #0
 8014236:	6078      	str	r0, [r7, #4]
    XF::init(timeInterval);
 8014238:	6878      	ldr	r0, [r7, #4]
 801423a:	f7ff ffbf 	bl	80141bc <_ZN2XF4initEi>
}
 801423e:	bf00      	nop
 8014240:	3708      	adds	r7, #8
 8014242:	46bd      	mov	sp, r7
 8014244:	bd80      	pop	{r7, pc}

08014246 <XF_start>:

void XF_start()
{
 8014246:	b580      	push	{r7, lr}
 8014248:	af00      	add	r7, sp, #0
    XF::start();
 801424a:	f7ff ffcd 	bl	80141e8 <_ZN2XF5startEv>
}
 801424e:	bf00      	nop
 8014250:	bd80      	pop	{r7, pc}

08014252 <XF_isRunning>:

bool XF_isRunning()
{
 8014252:	b580      	push	{r7, lr}
 8014254:	af00      	add	r7, sp, #0
    return XF::isRunning();
 8014256:	f7ff ffdf 	bl	8014218 <_ZN2XF9isRunningEv>
 801425a:	4603      	mov	r3, r0
}
 801425c:	4618      	mov	r0, r3
 801425e:	bd80      	pop	{r7, pc}

08014260 <XF_tick>:

void XF_tick()
{
 8014260:	b580      	push	{r7, lr}
 8014262:	af00      	add	r7, sp, #0
    enterISR();                                     // Tell critical section we are in an ISR
 8014264:	4b09      	ldr	r3, [pc, #36]	; (801428c <XF_tick+0x2c>)
 8014266:	2201      	movs	r2, #1
 8014268:	701a      	strb	r2, [r3, #0]
    if (XF::isRunning())                            // Call tick only if XF is running
 801426a:	f7ff ffd5 	bl	8014218 <_ZN2XF9isRunningEv>
 801426e:	4603      	mov	r3, r0
 8014270:	2b00      	cmp	r3, #0
 8014272:	d005      	beq.n	8014280 <XF_tick+0x20>
    {
        XFTimeoutManager::getInstance()->tick();    // Call framework hook tick function
 8014274:	f001 fb6c 	bl	8015950 <_ZN16XFTimeoutManager11getInstanceEv>
 8014278:	4603      	mov	r3, r0
 801427a:	4618      	mov	r0, r3
 801427c:	f001 fbbf 	bl	80159fe <_ZN16XFTimeoutManager4tickEv>
    }
    exitISR();
 8014280:	4b02      	ldr	r3, [pc, #8]	; (801428c <XF_tick+0x2c>)
 8014282:	2200      	movs	r2, #0
 8014284:	701a      	strb	r2, [r3, #0]
}
 8014286:	bf00      	nop
 8014288:	bd80      	pop	{r7, pc}
 801428a:	bf00      	nop
 801428c:	20001b8c 	.word	0x20001b8c

08014290 <XF_tickIntervalInMilliseconds>:

int32_t XF_tickIntervalInMilliseconds()
{
 8014290:	b580      	push	{r7, lr}
 8014292:	af00      	add	r7, sp, #0
    return XFTimeoutManager::getInstance()->tickInterval();
 8014294:	f001 fb5c 	bl	8015950 <_ZN16XFTimeoutManager11getInstanceEv>
 8014298:	4603      	mov	r3, r0
 801429a:	4618      	mov	r0, r3
 801429c:	f7f4 f86d 	bl	800837a <_ZNK16XFTimeoutManager12tickIntervalEv>
 80142a0:	4603      	mov	r3, r0
}
 80142a2:	4618      	mov	r0, r3
 80142a4:	bd80      	pop	{r7, pc}
	...

080142a8 <_Z41__static_initialization_and_destruction_0ii>:
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b082      	sub	sp, #8
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
 80142b0:	6039      	str	r1, [r7, #0]
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	2b01      	cmp	r3, #1
 80142b6:	d107      	bne.n	80142c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80142b8:	683b      	ldr	r3, [r7, #0]
 80142ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80142be:	4293      	cmp	r3, r2
 80142c0:	d102      	bne.n	80142c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
XFThread XF::_mainThread;
 80142c2:	4809      	ldr	r0, [pc, #36]	; (80142e8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80142c4:	f000 fad8 	bl	8014878 <_ZN8XFThreadC1Ev>
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d107      	bne.n	80142de <_Z41__static_initialization_and_destruction_0ii+0x36>
 80142ce:	683b      	ldr	r3, [r7, #0]
 80142d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80142d4:	4293      	cmp	r3, r2
 80142d6:	d102      	bne.n	80142de <_Z41__static_initialization_and_destruction_0ii+0x36>
 80142d8:	4803      	ldr	r0, [pc, #12]	; (80142e8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80142da:	f000 fae3 	bl	80148a4 <_ZN8XFThreadD1Ev>
}
 80142de:	bf00      	nop
 80142e0:	3708      	adds	r7, #8
 80142e2:	46bd      	mov	sp, r7
 80142e4:	bd80      	pop	{r7, pc}
 80142e6:	bf00      	nop
 80142e8:	20001be0 	.word	0x20001be0

080142ec <_GLOBAL__sub_I__ZN2XF13_bInitializedE>:
 80142ec:	b580      	push	{r7, lr}
 80142ee:	af00      	add	r7, sp, #0
 80142f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80142f4:	2001      	movs	r0, #1
 80142f6:	f7ff ffd7 	bl	80142a8 <_Z41__static_initialization_and_destruction_0ii>
 80142fa:	bd80      	pop	{r7, pc}

080142fc <_GLOBAL__sub_D__ZN2XF13_bInitializedE>:
 80142fc:	b580      	push	{r7, lr}
 80142fe:	af00      	add	r7, sp, #0
 8014300:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014304:	2000      	movs	r0, #0
 8014306:	f7ff ffcf 	bl	80142a8 <_Z41__static_initialization_and_destruction_0ii>
 801430a:	bd80      	pop	{r7, pc}

0801430c <_ZN7XFEventC1EiP11IXFReactive>:
 * Constructor for the class
 *
 * \param id Identifier uniquely identifying the event in the context of the behavior
 * \param pBehavior The Behavior for which the event was constructed (will consume the event)
 **/
XFEvent::XFEvent(int id, IXFReactive * pBehavior)
 801430c:	b580      	push	{r7, lr}
 801430e:	b084      	sub	sp, #16
 8014310:	af00      	add	r7, sp, #0
 8014312:	60f8      	str	r0, [r7, #12]
 8014314:	60b9      	str	r1, [r7, #8]
 8014316:	607a      	str	r2, [r7, #4]
    : IXFEvent(IXFEvent::Event, id, pBehavior)
 8014318:	68f8      	ldr	r0, [r7, #12]
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	68ba      	ldr	r2, [r7, #8]
 801431e:	2103      	movs	r1, #3
 8014320:	f7ff fec0 	bl	80140a4 <_ZN8IXFEventC1ENS_10eEventTypeEiP11IXFReactive>
 8014324:	4a03      	ldr	r2, [pc, #12]	; (8014334 <_ZN7XFEventC1EiP11IXFReactive+0x28>)
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	601a      	str	r2, [r3, #0]
{

}
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	4618      	mov	r0, r3
 801432e:	3710      	adds	r7, #16
 8014330:	46bd      	mov	sp, r7
 8014332:	bd80      	pop	{r7, pc}
 8014334:	0801e14c 	.word	0x0801e14c

08014338 <_ZN7XFEventD1Ev>:

XFEvent::~XFEvent()
 8014338:	b580      	push	{r7, lr}
 801433a:	b082      	sub	sp, #8
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
 8014340:	4a05      	ldr	r2, [pc, #20]	; (8014358 <_ZN7XFEventD1Ev+0x20>)
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	601a      	str	r2, [r3, #0]
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	4618      	mov	r0, r3
 801434a:	f7ff fed1 	bl	80140f0 <_ZN8IXFEventD1Ev>
{

}
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	4618      	mov	r0, r3
 8014352:	3708      	adds	r7, #8
 8014354:	46bd      	mov	sp, r7
 8014356:	bd80      	pop	{r7, pc}
 8014358:	0801e14c 	.word	0x0801e14c

0801435c <_ZN7XFEventD0Ev>:
XFEvent::~XFEvent()
 801435c:	b580      	push	{r7, lr}
 801435e:	b082      	sub	sp, #8
 8014360:	af00      	add	r7, sp, #0
 8014362:	6078      	str	r0, [r7, #4]
}
 8014364:	6878      	ldr	r0, [r7, #4]
 8014366:	f7ff ffe7 	bl	8014338 <_ZN7XFEventD1Ev>
 801436a:	2114      	movs	r1, #20
 801436c:	6878      	ldr	r0, [r7, #4]
 801436e:	f002 f877 	bl	8016460 <_ZdlPvj>
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	4618      	mov	r0, r3
 8014376:	3708      	adds	r7, #8
 8014378:	46bd      	mov	sp, r7
 801437a:	bd80      	pop	{r7, pc}

0801437c <_ZN16XFNullTransitionC1EiP11IXFReactive>:
 * Constuctor
 *
 * @param id		ID of the null transition.
 * \param pBehavior Behavior in which the null transition will be executed.
 */
XFNullTransition::XFNullTransition( int id , IXFReactive * pBehavior)
 801437c:	b580      	push	{r7, lr}
 801437e:	b084      	sub	sp, #16
 8014380:	af00      	add	r7, sp, #0
 8014382:	60f8      	str	r0, [r7, #12]
 8014384:	60b9      	str	r1, [r7, #8]
 8014386:	607a      	str	r2, [r7, #4]
 : IXFEvent(IXFEvent::NullTransition, id , pBehavior)
 8014388:	68f8      	ldr	r0, [r7, #12]
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	68ba      	ldr	r2, [r7, #8]
 801438e:	2102      	movs	r1, #2
 8014390:	f7ff fe88 	bl	80140a4 <_ZN8IXFEventC1ENS_10eEventTypeEiP11IXFReactive>
 8014394:	4a03      	ldr	r2, [pc, #12]	; (80143a4 <_ZN16XFNullTransitionC1EiP11IXFReactive+0x28>)
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	601a      	str	r2, [r3, #0]
{
}
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	4618      	mov	r0, r3
 801439e:	3710      	adds	r7, #16
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd80      	pop	{r7, pc}
 80143a4:	0801e15c 	.word	0x0801e15c

080143a8 <_ZN16XFNullTransitionD1Ev>:

XFNullTransition::~XFNullTransition()
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b082      	sub	sp, #8
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	6078      	str	r0, [r7, #4]
 80143b0:	4a05      	ldr	r2, [pc, #20]	; (80143c8 <_ZN16XFNullTransitionD1Ev+0x20>)
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	601a      	str	r2, [r3, #0]
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	4618      	mov	r0, r3
 80143ba:	f7ff fe99 	bl	80140f0 <_ZN8IXFEventD1Ev>
{

}
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	4618      	mov	r0, r3
 80143c2:	3708      	adds	r7, #8
 80143c4:	46bd      	mov	sp, r7
 80143c6:	bd80      	pop	{r7, pc}
 80143c8:	0801e15c 	.word	0x0801e15c

080143cc <_ZN16XFNullTransitionD0Ev>:
XFNullTransition::~XFNullTransition()
 80143cc:	b580      	push	{r7, lr}
 80143ce:	b082      	sub	sp, #8
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
}
 80143d4:	6878      	ldr	r0, [r7, #4]
 80143d6:	f7ff ffe7 	bl	80143a8 <_ZN16XFNullTransitionD1Ev>
 80143da:	2114      	movs	r1, #20
 80143dc:	6878      	ldr	r0, [r7, #4]
 80143de:	f002 f83f 	bl	8016460 <_ZdlPvj>
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	4618      	mov	r0, r3
 80143e6:	3708      	adds	r7, #8
 80143e8:	46bd      	mov	sp, r7
 80143ea:	bd80      	pop	{r7, pc}

080143ec <_ZN8IXFEvent11setBehaviorEP11IXFReactive>:
    inline void setBehavior(IXFReactive * pBehavior) { _pBehavior = pBehavior; }
 80143ec:	b480      	push	{r7}
 80143ee:	b083      	sub	sp, #12
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	6078      	str	r0, [r7, #4]
 80143f4:	6039      	str	r1, [r7, #0]
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	683a      	ldr	r2, [r7, #0]
 80143fa:	611a      	str	r2, [r3, #16]
 80143fc:	bf00      	nop
 80143fe:	370c      	adds	r7, #12
 8014400:	46bd      	mov	sp, r7
 8014402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014406:	4770      	bx	lr

08014408 <_ZN11IXFReactiveC1EP9IXFThread>:
    /**
     * Constructor
     *
     * \param pThread Reference to thread executing the behavior of this class.
     */
    IXFReactive(IXFThread * pThread = NULL) { (void)pThread; }
 8014408:	b480      	push	{r7}
 801440a:	b083      	sub	sp, #12
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
 8014410:	6039      	str	r1, [r7, #0]
 8014412:	4a05      	ldr	r2, [pc, #20]	; (8014428 <_ZN11IXFReactiveC1EP9IXFThread+0x20>)
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	601a      	str	r2, [r3, #0]
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	4618      	mov	r0, r3
 801441c:	370c      	adds	r7, #12
 801441e:	46bd      	mov	sp, r7
 8014420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014424:	4770      	bx	lr
 8014426:	bf00      	nop
 8014428:	0801e190 	.word	0x0801e190

0801442c <_ZN11IXFReactiveD1Ev>:
    virtual ~IXFReactive() {}
 801442c:	b480      	push	{r7}
 801442e:	b083      	sub	sp, #12
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
 8014434:	4a04      	ldr	r2, [pc, #16]	; (8014448 <_ZN11IXFReactiveD1Ev+0x1c>)
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	601a      	str	r2, [r3, #0]
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	4618      	mov	r0, r3
 801443e:	370c      	adds	r7, #12
 8014440:	46bd      	mov	sp, r7
 8014442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014446:	4770      	bx	lr
 8014448:	0801e190 	.word	0x0801e190

0801444c <_ZN11IXFReactiveD0Ev>:
 801444c:	b580      	push	{r7, lr}
 801444e:	b082      	sub	sp, #8
 8014450:	af00      	add	r7, sp, #0
 8014452:	6078      	str	r0, [r7, #4]
 8014454:	6878      	ldr	r0, [r7, #4]
 8014456:	f7ff ffe9 	bl	801442c <_ZN11IXFReactiveD1Ev>
 801445a:	2104      	movs	r1, #4
 801445c:	6878      	ldr	r0, [r7, #4]
 801445e:	f001 ffff 	bl	8016460 <_ZdlPvj>
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	4618      	mov	r0, r3
 8014466:	3708      	adds	r7, #8
 8014468:	46bd      	mov	sp, r7
 801446a:	bd80      	pop	{r7, pc}

0801446c <_ZN10XFReactiveC1EP8XFThread>:
/**
 * Constructor
 *
 * \param pThread Reference to thread who will process the behavioral part of this reactive class.
 */
XFReactive::XFReactive(XFThread * pThread)
 801446c:	b580      	push	{r7, lr}
 801446e:	b082      	sub	sp, #8
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]
 8014474:	6039      	str	r1, [r7, #0]
 : _pThread((pThread) ? pThread : XF::getMainThread()),
   _pCurrentEvent(nullptr)
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	2100      	movs	r1, #0
 801447a:	4618      	mov	r0, r3
 801447c:	f7ff ffc4 	bl	8014408 <_ZN11IXFReactiveC1EP9IXFThread>
 8014480:	4a0a      	ldr	r2, [pc, #40]	; (80144ac <_ZN10XFReactiveC1EP8XFThread+0x40>)
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	601a      	str	r2, [r3, #0]
 : _pThread((pThread) ? pThread : XF::getMainThread()),
 8014486:	683b      	ldr	r3, [r7, #0]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d103      	bne.n	8014494 <_ZN10XFReactiveC1EP8XFThread+0x28>
 801448c:	f7ff feba 	bl	8014204 <_ZN2XF13getMainThreadEv>
 8014490:	4603      	mov	r3, r0
 8014492:	e000      	b.n	8014496 <_ZN10XFReactiveC1EP8XFThread+0x2a>
 8014494:	683b      	ldr	r3, [r7, #0]
   _pCurrentEvent(nullptr)
 8014496:	687a      	ldr	r2, [r7, #4]
 8014498:	6053      	str	r3, [r2, #4]
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	2200      	movs	r2, #0
 801449e:	609a      	str	r2, [r3, #8]
{
}
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	4618      	mov	r0, r3
 80144a4:	3708      	adds	r7, #8
 80144a6:	46bd      	mov	sp, r7
 80144a8:	bd80      	pop	{r7, pc}
 80144aa:	bf00      	nop
 80144ac:	0801e16c 	.word	0x0801e16c

080144b0 <_ZN10XFReactiveD1Ev>:

XFReactive::~XFReactive()
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b082      	sub	sp, #8
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	6078      	str	r0, [r7, #4]
 80144b8:	4a05      	ldr	r2, [pc, #20]	; (80144d0 <_ZN10XFReactiveD1Ev+0x20>)
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	601a      	str	r2, [r3, #0]
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	4618      	mov	r0, r3
 80144c2:	f7ff ffb3 	bl	801442c <_ZN11IXFReactiveD1Ev>
{

}
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	4618      	mov	r0, r3
 80144ca:	3708      	adds	r7, #8
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd80      	pop	{r7, pc}
 80144d0:	0801e16c 	.word	0x0801e16c

080144d4 <_ZN10XFReactiveD0Ev>:
XFReactive::~XFReactive()
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b082      	sub	sp, #8
 80144d8:	af00      	add	r7, sp, #0
 80144da:	6078      	str	r0, [r7, #4]
}
 80144dc:	6878      	ldr	r0, [r7, #4]
 80144de:	f7ff ffe7 	bl	80144b0 <_ZN10XFReactiveD1Ev>
 80144e2:	210c      	movs	r1, #12
 80144e4:	6878      	ldr	r0, [r7, #4]
 80144e6:	f001 ffbb 	bl	8016460 <_ZdlPvj>
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	4618      	mov	r0, r3
 80144ee:	3708      	adds	r7, #8
 80144f0:	46bd      	mov	sp, r7
 80144f2:	bd80      	pop	{r7, pc}

080144f4 <_ZN10XFReactive13startBehaviorEv>:

void XFReactive::startBehavior()
{
 80144f4:	b5b0      	push	{r4, r5, r7, lr}
 80144f6:	b082      	sub	sp, #8
 80144f8:	af00      	add	r7, sp, #0
 80144fa:	6078      	str	r0, [r7, #4]
    GEN(InitialEvent());
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	330c      	adds	r3, #12
 8014502:	681c      	ldr	r4, [r3, #0]
 8014504:	2014      	movs	r0, #20
 8014506:	f001 ffbe 	bl	8016486 <_Znwj>
 801450a:	4603      	mov	r3, r0
 801450c:	461d      	mov	r5, r3
 801450e:	4628      	mov	r0, r5
 8014510:	f7ff fe1e 	bl	8014150 <_ZN12InitialEventC1Ev>
 8014514:	4629      	mov	r1, r5
 8014516:	6878      	ldr	r0, [r7, #4]
 8014518:	47a0      	blx	r4
}
 801451a:	bf00      	nop
 801451c:	3708      	adds	r7, #8
 801451e:	46bd      	mov	sp, r7
 8014520:	bdb0      	pop	{r4, r5, r7, pc}
	...

08014524 <_ZN10XFReactive9pushEventEP8IXFEvent>:


void XFReactive::pushEvent(IXFEvent * pEvent)
{
 8014524:	b580      	push	{r7, lr}
 8014526:	b082      	sub	sp, #8
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
 801452c:	6039      	str	r1, [r7, #0]
    assert(pEvent);
 801452e:	683b      	ldr	r3, [r7, #0]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d105      	bne.n	8014540 <_ZN10XFReactive9pushEventEP8IXFEvent+0x1c>
 8014534:	4b0c      	ldr	r3, [pc, #48]	; (8014568 <_ZN10XFReactive9pushEventEP8IXFEvent+0x44>)
 8014536:	4a0d      	ldr	r2, [pc, #52]	; (801456c <_ZN10XFReactive9pushEventEP8IXFEvent+0x48>)
 8014538:	2120      	movs	r1, #32
 801453a:	480d      	ldr	r0, [pc, #52]	; (8014570 <_ZN10XFReactive9pushEventEP8IXFEvent+0x4c>)
 801453c:	f002 f87e 	bl	801663c <__assert_func>

    // Set owner
    pEvent->setBehavior(this);
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	4619      	mov	r1, r3
 8014544:	6838      	ldr	r0, [r7, #0]
 8014546:	f7ff ff51 	bl	80143ec <_ZN8IXFEvent11setBehaviorEP11IXFReactive>
    // Push to threads event queue
    getThread()->pushEvent(pEvent);
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	3318      	adds	r3, #24
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	6878      	ldr	r0, [r7, #4]
 8014554:	4798      	blx	r3
 8014556:	4603      	mov	r3, r0
 8014558:	6839      	ldr	r1, [r7, #0]
 801455a:	4618      	mov	r0, r3
 801455c:	f000 fa0f 	bl	801497e <_ZN8XFThread9pushEventEP8IXFEvent>
}
 8014560:	bf00      	nop
 8014562:	3708      	adds	r7, #8
 8014564:	46bd      	mov	sp, r7
 8014566:	bd80      	pop	{r7, pc}
 8014568:	0801bac4 	.word	0x0801bac4
 801456c:	0801bacc 	.word	0x0801bacc
 8014570:	0801bafc 	.word	0x0801bafc

08014574 <_ZN10XFReactive7processEP8IXFEvent>:
 * Must only be called by the associated thread (see #_pThread).
 *
 * \param pEvent The event to process.
 */
EventStatus XFReactive::process(IXFEvent * pEvent)
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b084      	sub	sp, #16
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
 801457c:	6039      	str	r1, [r7, #0]
    EventStatus eventStatus;
 801457e:	f107 030c 	add.w	r3, r7, #12
 8014582:	2100      	movs	r1, #0
 8014584:	4618      	mov	r0, r3
 8014586:	f7f2 f9ed 	bl	8006964 <_ZN11EventStatusC1ENS_12eEventStatusE>

    assert(pEvent);
 801458a:	683b      	ldr	r3, [r7, #0]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d105      	bne.n	801459c <_ZN10XFReactive7processEP8IXFEvent+0x28>
 8014590:	4b0d      	ldr	r3, [pc, #52]	; (80145c8 <_ZN10XFReactive7processEP8IXFEvent+0x54>)
 8014592:	4a0e      	ldr	r2, [pc, #56]	; (80145cc <_ZN10XFReactive7processEP8IXFEvent+0x58>)
 8014594:	2136      	movs	r1, #54	; 0x36
 8014596:	480e      	ldr	r0, [pc, #56]	; (80145d0 <_ZN10XFReactive7processEP8IXFEvent+0x5c>)
 8014598:	f002 f850 	bl	801663c <__assert_func>

    setCurrentEvent(pEvent);
 801459c:	6839      	ldr	r1, [r7, #0]
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	f000 f833 	bl	801460a <_ZN10XFReactive15setCurrentEventEP8IXFEvent>

    eventStatus = processEvent();
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	3314      	adds	r3, #20
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	6878      	ldr	r0, [r7, #4]
 80145ae:	4798      	blx	r3
 80145b0:	4603      	mov	r3, r0
 80145b2:	733b      	strb	r3, [r7, #12]

    setCurrentEvent(NULL);
 80145b4:	2100      	movs	r1, #0
 80145b6:	6878      	ldr	r0, [r7, #4]
 80145b8:	f000 f827 	bl	801460a <_ZN10XFReactive15setCurrentEventEP8IXFEvent>

    return eventStatus;
 80145bc:	7b3b      	ldrb	r3, [r7, #12]
}
 80145be:	4618      	mov	r0, r3
 80145c0:	3710      	adds	r7, #16
 80145c2:	46bd      	mov	sp, r7
 80145c4:	bd80      	pop	{r7, pc}
 80145c6:	bf00      	nop
 80145c8:	0801bac4 	.word	0x0801bac4
 80145cc:	0801bb64 	.word	0x0801bb64
 80145d0:	0801bafc 	.word	0x0801bafc

080145d4 <_ZN10XFReactive12processEventEv>:
/**
 * Executes the current event in its implemented behavior.
 * This method needs to be overridden to implement the behavior needed.
 */
EventStatus XFReactive::processEvent()
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b084      	sub	sp, #16
 80145d8:	af00      	add	r7, sp, #0
 80145da:	6078      	str	r0, [r7, #4]
    // You should really implement this function in
    // the derived class!

    return EventStatus::Unknown;
 80145dc:	f107 030c 	add.w	r3, r7, #12
 80145e0:	2100      	movs	r1, #0
 80145e2:	4618      	mov	r0, r3
 80145e4:	f7f2 f9be 	bl	8006964 <_ZN11EventStatusC1ENS_12eEventStatusE>
 80145e8:	7b3b      	ldrb	r3, [r7, #12]
}
 80145ea:	4618      	mov	r0, r3
 80145ec:	3710      	adds	r7, #16
 80145ee:	46bd      	mov	sp, r7
 80145f0:	bd80      	pop	{r7, pc}

080145f2 <_ZN10XFReactive9getThreadEv>:


XFThread * XFReactive::getThread()
{
 80145f2:	b480      	push	{r7}
 80145f4:	b083      	sub	sp, #12
 80145f6:	af00      	add	r7, sp, #0
 80145f8:	6078      	str	r0, [r7, #4]
    return _pThread;
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	685b      	ldr	r3, [r3, #4]
}
 80145fe:	4618      	mov	r0, r3
 8014600:	370c      	adds	r7, #12
 8014602:	46bd      	mov	sp, r7
 8014604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014608:	4770      	bx	lr

0801460a <_ZN10XFReactive15setCurrentEventEP8IXFEvent>:

void XFReactive::setCurrentEvent(IXFEvent * pEvent)
{
 801460a:	b480      	push	{r7}
 801460c:	b083      	sub	sp, #12
 801460e:	af00      	add	r7, sp, #0
 8014610:	6078      	str	r0, [r7, #4]
 8014612:	6039      	str	r1, [r7, #0]
    _pCurrentEvent = pEvent;
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	683a      	ldr	r2, [r7, #0]
 8014618:	609a      	str	r2, [r3, #8]
}
 801461a:	bf00      	nop
 801461c:	370c      	adds	r7, #12
 801461e:	46bd      	mov	sp, r7
 8014620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014624:	4770      	bx	lr
	...

08014628 <_ZNK10XFReactive15getCurrentEventEv>:

IXFEvent * XFReactive::getCurrentEvent() const
{
 8014628:	b580      	push	{r7, lr}
 801462a:	b082      	sub	sp, #8
 801462c:	af00      	add	r7, sp, #0
 801462e:	6078      	str	r0, [r7, #4]
    assert(_pCurrentEvent);
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	689b      	ldr	r3, [r3, #8]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d105      	bne.n	8014644 <_ZNK10XFReactive15getCurrentEventEv+0x1c>
 8014638:	4b05      	ldr	r3, [pc, #20]	; (8014650 <_ZNK10XFReactive15getCurrentEventEv+0x28>)
 801463a:	4a06      	ldr	r2, [pc, #24]	; (8014654 <_ZNK10XFReactive15getCurrentEventEv+0x2c>)
 801463c:	215a      	movs	r1, #90	; 0x5a
 801463e:	4806      	ldr	r0, [pc, #24]	; (8014658 <_ZNK10XFReactive15getCurrentEventEv+0x30>)
 8014640:	f001 fffc 	bl	801663c <__assert_func>
    return _pCurrentEvent;
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	689b      	ldr	r3, [r3, #8]
}
 8014648:	4618      	mov	r0, r3
 801464a:	3708      	adds	r7, #8
 801464c:	46bd      	mov	sp, r7
 801464e:	bd80      	pop	{r7, pc}
 8014650:	0801bb98 	.word	0x0801bb98
 8014654:	0801bba8 	.word	0x0801bba8
 8014658:	0801bafc 	.word	0x0801bafc

0801465c <_ZN10XFReactive17getCurrentTimeoutEv>:
/** \brief Returns a reference to the actually processed timeout.
 *
 * Will work only if the current event is of type IXFEvent::Timeout.
 */
XFTimeout * XFReactive::getCurrentTimeout()
{
 801465c:	b580      	push	{r7, lr}
 801465e:	b082      	sub	sp, #8
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
    assert(getCurrentEvent()->getEventType() == IXFEvent::Timeout);
 8014664:	6878      	ldr	r0, [r7, #4]
 8014666:	f7ff ffdf 	bl	8014628 <_ZNK10XFReactive15getCurrentEventEv>
 801466a:	4603      	mov	r3, r0
 801466c:	4618      	mov	r0, r3
 801466e:	f7f2 f960 	bl	8006932 <_ZNK8IXFEvent12getEventTypeEv>
 8014672:	4603      	mov	r3, r0
 8014674:	2b04      	cmp	r3, #4
 8014676:	d005      	beq.n	8014684 <_ZN10XFReactive17getCurrentTimeoutEv+0x28>
 8014678:	4b06      	ldr	r3, [pc, #24]	; (8014694 <_ZN10XFReactive17getCurrentTimeoutEv+0x38>)
 801467a:	4a07      	ldr	r2, [pc, #28]	; (8014698 <_ZN10XFReactive17getCurrentTimeoutEv+0x3c>)
 801467c:	2164      	movs	r1, #100	; 0x64
 801467e:	4807      	ldr	r0, [pc, #28]	; (801469c <_ZN10XFReactive17getCurrentTimeoutEv+0x40>)
 8014680:	f001 ffdc 	bl	801663c <__assert_func>

    return (XFTimeout *)getCurrentEvent();
 8014684:	6878      	ldr	r0, [r7, #4]
 8014686:	f7ff ffcf 	bl	8014628 <_ZNK10XFReactive15getCurrentEventEv>
 801468a:	4603      	mov	r3, r0
}
 801468c:	4618      	mov	r0, r3
 801468e:	3708      	adds	r7, #8
 8014690:	46bd      	mov	sp, r7
 8014692:	bd80      	pop	{r7, pc}
 8014694:	0801bbd8 	.word	0x0801bbd8
 8014698:	0801bc10 	.word	0x0801bc10
 801469c:	0801bafc 	.word	0x0801bafc

080146a0 <_ZN8IXFEvent15setShouldDeleteEb>:
    inline void setShouldDelete(bool bShouldDelete = true) { _eventStatus.shouldDelete = bShouldDelete; }
 80146a0:	b480      	push	{r7}
 80146a2:	b083      	sub	sp, #12
 80146a4:	af00      	add	r7, sp, #0
 80146a6:	6078      	str	r0, [r7, #4]
 80146a8:	460b      	mov	r3, r1
 80146aa:	70fb      	strb	r3, [r7, #3]
 80146ac:	687a      	ldr	r2, [r7, #4]
 80146ae:	7b13      	ldrb	r3, [r2, #12]
 80146b0:	78f9      	ldrb	r1, [r7, #3]
 80146b2:	f361 0300 	bfi	r3, r1, #0, #1
 80146b6:	7313      	strb	r3, [r2, #12]
 80146b8:	bf00      	nop
 80146ba:	370c      	adds	r7, #12
 80146bc:	46bd      	mov	sp, r7
 80146be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c2:	4770      	bx	lr

080146c4 <_ZN13XFStaticEventC1EiP11IXFReactive>:
#include "xfstaticevent.h"


XFStaticEvent::XFStaticEvent(int id, IXFReactive * pBehavior)
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b084      	sub	sp, #16
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	60f8      	str	r0, [r7, #12]
 80146cc:	60b9      	str	r1, [r7, #8]
 80146ce:	607a      	str	r2, [r7, #4]
: IXFEvent(IXFEvent::Event, id, pBehavior)
 80146d0:	68f8      	ldr	r0, [r7, #12]
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	68ba      	ldr	r2, [r7, #8]
 80146d6:	2103      	movs	r1, #3
 80146d8:	f7ff fce4 	bl	80140a4 <_ZN8IXFEventC1ENS_10eEventTypeEiP11IXFReactive>
 80146dc:	4a06      	ldr	r2, [pc, #24]	; (80146f8 <_ZN13XFStaticEventC1EiP11IXFReactive+0x34>)
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	601a      	str	r2, [r3, #0]
{
	// Clear the shouldDelete flag in the _eventStatus attribute.
	setShouldDelete(false);
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	2100      	movs	r1, #0
 80146e6:	4618      	mov	r0, r3
 80146e8:	f7ff ffda 	bl	80146a0 <_ZN8IXFEvent15setShouldDeleteEb>
}
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	4618      	mov	r0, r3
 80146f0:	3710      	adds	r7, #16
 80146f2:	46bd      	mov	sp, r7
 80146f4:	bd80      	pop	{r7, pc}
 80146f6:	bf00      	nop
 80146f8:	0801e1ac 	.word	0x0801e1ac

080146fc <_ZN13XFStaticEventD1Ev>:

XFStaticEvent::~XFStaticEvent()
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b082      	sub	sp, #8
 8014700:	af00      	add	r7, sp, #0
 8014702:	6078      	str	r0, [r7, #4]
 8014704:	4a05      	ldr	r2, [pc, #20]	; (801471c <_ZN13XFStaticEventD1Ev+0x20>)
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	601a      	str	r2, [r3, #0]
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	4618      	mov	r0, r3
 801470e:	f7ff fcef 	bl	80140f0 <_ZN8IXFEventD1Ev>
{

}
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	4618      	mov	r0, r3
 8014716:	3708      	adds	r7, #8
 8014718:	46bd      	mov	sp, r7
 801471a:	bd80      	pop	{r7, pc}
 801471c:	0801e1ac 	.word	0x0801e1ac

08014720 <_ZN13XFStaticEventD0Ev>:
XFStaticEvent::~XFStaticEvent()
 8014720:	b580      	push	{r7, lr}
 8014722:	b082      	sub	sp, #8
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
}
 8014728:	6878      	ldr	r0, [r7, #4]
 801472a:	f7ff ffe7 	bl	80146fc <_ZN13XFStaticEventD1Ev>
 801472e:	2114      	movs	r1, #20
 8014730:	6878      	ldr	r0, [r7, #4]
 8014732:	f001 fe95 	bl	8016460 <_ZdlPvj>
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	4618      	mov	r0, r3
 801473a:	3708      	adds	r7, #8
 801473c:	46bd      	mov	sp, r7
 801473e:	bd80      	pop	{r7, pc}

08014740 <_ZNK8IXFEvent11getBehaviorEv>:
    inline IXFReactive * getBehavior() const { return _pBehavior; }
 8014740:	b480      	push	{r7}
 8014742:	b083      	sub	sp, #12
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	691b      	ldr	r3, [r3, #16]
 801474c:	4618      	mov	r0, r3
 801474e:	370c      	adds	r7, #12
 8014750:	46bd      	mov	sp, r7
 8014752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014756:	4770      	bx	lr

08014758 <_ZNK8IXFEvent12shouldDeleteEv>:
    inline bool shouldDelete() const { return _eventStatus.shouldDelete; }
 8014758:	b480      	push	{r7}
 801475a:	b083      	sub	sp, #12
 801475c:	af00      	add	r7, sp, #0
 801475e:	6078      	str	r0, [r7, #4]
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	7b1b      	ldrb	r3, [r3, #12]
 8014764:	f003 0301 	and.w	r3, r3, #1
 8014768:	b2db      	uxtb	r3, r3
 801476a:	2b00      	cmp	r3, #0
 801476c:	bf14      	ite	ne
 801476e:	2301      	movne	r3, #1
 8014770:	2300      	moveq	r3, #0
 8014772:	b2db      	uxtb	r3, r3
 8014774:	4618      	mov	r0, r3
 8014776:	370c      	adds	r7, #12
 8014778:	46bd      	mov	sp, r7
 801477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477e:	4770      	bx	lr

08014780 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8014780:	b480      	push	{r7}
 8014782:	b083      	sub	sp, #12
 8014784:	af00      	add	r7, sp, #0
 8014786:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801478e:	d205      	bcs.n	801479c <_ZSt16__deque_buf_sizej+0x1c>
 8014790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	fbb2 f3f3 	udiv	r3, r2, r3
 801479a:	e000      	b.n	801479e <_ZSt16__deque_buf_sizej+0x1e>
 801479c:	2301      	movs	r3, #1
 801479e:	4618      	mov	r0, r3
 80147a0:	370c      	adds	r7, #12
 80147a2:	46bd      	mov	sp, r7
 80147a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a8:	4770      	bx	lr

080147aa <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 80147aa:	b580      	push	{r7, lr}
 80147ac:	b082      	sub	sp, #8
 80147ae:	af00      	add	r7, sp, #0
 80147b0:	6078      	str	r0, [r7, #4]
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	4618      	mov	r0, r3
 80147b6:	f000 f95a 	bl	8014a6e <_ZNSt5dequeIP8IXFEventSaIS1_EED1Ev>
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	4618      	mov	r0, r3
 80147be:	3708      	adds	r7, #8
 80147c0:	46bd      	mov	sp, r7
 80147c2:	bd80      	pop	{r7, pc}

080147c4 <_ZN12XFEventQueueC1Ev>:
 * Queue for pending events.
 */
class XFEventQueue : public std::queue<IXFEvent *>
{
public:
	XFEventQueue() {}
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b082      	sub	sp, #8
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	3304      	adds	r3, #4
 80147d0:	4618      	mov	r0, r3
 80147d2:	f000 f93f 	bl	8014a54 <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEEC1IS4_vEEv>
 80147d6:	4a04      	ldr	r2, [pc, #16]	; (80147e8 <_ZN12XFEventQueueC1Ev+0x24>)
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	601a      	str	r2, [r3, #0]
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	4618      	mov	r0, r3
 80147e0:	3708      	adds	r7, #8
 80147e2:	46bd      	mov	sp, r7
 80147e4:	bd80      	pop	{r7, pc}
 80147e6:	bf00      	nop
 80147e8:	0801e1cc 	.word	0x0801e1cc

080147ec <_ZN12XFEventQueueD1Ev>:
	virtual ~XFEventQueue() {}
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b082      	sub	sp, #8
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	6078      	str	r0, [r7, #4]
 80147f4:	4a06      	ldr	r2, [pc, #24]	; (8014810 <_ZN12XFEventQueueD1Ev+0x24>)
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	601a      	str	r2, [r3, #0]
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	3304      	adds	r3, #4
 80147fe:	4618      	mov	r0, r3
 8014800:	f7ff ffd3 	bl	80147aa <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEED1Ev>
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	4618      	mov	r0, r3
 8014808:	3708      	adds	r7, #8
 801480a:	46bd      	mov	sp, r7
 801480c:	bd80      	pop	{r7, pc}
 801480e:	bf00      	nop
 8014810:	0801e1cc 	.word	0x0801e1cc

08014814 <_ZN12XFEventQueueD0Ev>:
 8014814:	b580      	push	{r7, lr}
 8014816:	b082      	sub	sp, #8
 8014818:	af00      	add	r7, sp, #0
 801481a:	6078      	str	r0, [r7, #4]
 801481c:	6878      	ldr	r0, [r7, #4]
 801481e:	f7ff ffe5 	bl	80147ec <_ZN12XFEventQueueD1Ev>
 8014822:	212c      	movs	r1, #44	; 0x2c
 8014824:	6878      	ldr	r0, [r7, #4]
 8014826:	f001 fe1b 	bl	8016460 <_ZdlPvj>
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	4618      	mov	r0, r3
 801482e:	3708      	adds	r7, #8
 8014830:	46bd      	mov	sp, r7
 8014832:	bd80      	pop	{r7, pc}

08014834 <_ZN12XFEventQueue5emptyEv>:

	typedef std::queue<IXFEvent *> BaseClass;

	bool empty() __attribute__ ((noinline)) { return BaseClass::empty(); }	// Prevent gcc from optimizing this operation
 8014834:	b580      	push	{r7, lr}
 8014836:	b082      	sub	sp, #8
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	3304      	adds	r3, #4
 8014840:	4618      	mov	r0, r3
 8014842:	f000 f939 	bl	8014ab8 <_ZNKSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEE5emptyEv>
 8014846:	4603      	mov	r3, r0
 8014848:	4618      	mov	r0, r3
 801484a:	3708      	adds	r7, #8
 801484c:	46bd      	mov	sp, r7
 801484e:	bd80      	pop	{r7, pc}

08014850 <_ZNK11EventStatuseqERKNS_12eEventStatusE>:
    EventStatus(eEventStatus eventStatus = Unknown) : _status(eventStatus) {}

    /**
     * Check if both variables contain the same event status
     */
    bool operator == (const EventStatus::eEventStatus & eventStatus) const
 8014850:	b480      	push	{r7}
 8014852:	b083      	sub	sp, #12
 8014854:	af00      	add	r7, sp, #0
 8014856:	6078      	str	r0, [r7, #4]
 8014858:	6039      	str	r1, [r7, #0]
    {
        return (this->_status == eventStatus);
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	781a      	ldrb	r2, [r3, #0]
 801485e:	683b      	ldr	r3, [r7, #0]
 8014860:	781b      	ldrb	r3, [r3, #0]
 8014862:	429a      	cmp	r2, r3
 8014864:	bf0c      	ite	eq
 8014866:	2301      	moveq	r3, #1
 8014868:	2300      	movne	r3, #0
 801486a:	b2db      	uxtb	r3, r3
    }
 801486c:	4618      	mov	r0, r3
 801486e:	370c      	adds	r7, #12
 8014870:	46bd      	mov	sp, r7
 8014872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014876:	4770      	bx	lr

08014878 <_ZN8XFThreadC1Ev>:
#ifdef TC_STM32
  #include "mcu/mcu.h"
#endif


XFThread::XFThread()
 8014878:	b580      	push	{r7, lr}
 801487a:	b082      	sub	sp, #8
 801487c:	af00      	add	r7, sp, #0
 801487e:	6078      	str	r0, [r7, #4]
 : _bExecuting(true)
 8014880:	4a07      	ldr	r2, [pc, #28]	; (80148a0 <_ZN8XFThreadC1Ev+0x28>)
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	601a      	str	r2, [r3, #0]
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	2201      	movs	r2, #1
 801488a:	711a      	strb	r2, [r3, #4]
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	3308      	adds	r3, #8
 8014890:	4618      	mov	r0, r3
 8014892:	f7ff ff97 	bl	80147c4 <_ZN12XFEventQueueC1Ev>

#endif /**************************************************************************************************************/


{
}
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	4618      	mov	r0, r3
 801489a:	3708      	adds	r7, #8
 801489c:	46bd      	mov	sp, r7
 801489e:	bd80      	pop	{r7, pc}
 80148a0:	0801e1bc 	.word	0x0801e1bc

080148a4 <_ZN8XFThreadD1Ev>:

XFThread::~XFThread()
 80148a4:	b580      	push	{r7, lr}
 80148a6:	b082      	sub	sp, #8
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	6078      	str	r0, [r7, #4]
 80148ac:	4a06      	ldr	r2, [pc, #24]	; (80148c8 <_ZN8XFThreadD1Ev+0x24>)
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	601a      	str	r2, [r3, #0]
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	3308      	adds	r3, #8
 80148b6:	4618      	mov	r0, r3
 80148b8:	f7ff ff98 	bl	80147ec <_ZN12XFEventQueueD1Ev>
{
}
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	4618      	mov	r0, r3
 80148c0:	3708      	adds	r7, #8
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bd80      	pop	{r7, pc}
 80148c6:	bf00      	nop
 80148c8:	0801e1bc 	.word	0x0801e1bc

080148cc <_ZN8XFThreadD0Ev>:
XFThread::~XFThread()
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b082      	sub	sp, #8
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	6078      	str	r0, [r7, #4]
}
 80148d4:	6878      	ldr	r0, [r7, #4]
 80148d6:	f7ff ffe5 	bl	80148a4 <_ZN8XFThreadD1Ev>
 80148da:	2134      	movs	r1, #52	; 0x34
 80148dc:	6878      	ldr	r0, [r7, #4]
 80148de:	f001 fdbf 	bl	8016460 <_ZdlPvj>
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	4618      	mov	r0, r3
 80148e6:	3708      	adds	r7, #8
 80148e8:	46bd      	mov	sp, r7
 80148ea:	bd80      	pop	{r7, pc}

080148ec <_ZN8XFThread5startEv>:

void XFThread::start()
{
 80148ec:	b580      	push	{r7, lr}
 80148ee:	b082      	sub	sp, #8
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	6078      	str	r0, [r7, #4]
    execute();
 80148f4:	6878      	ldr	r0, [r7, #4]
 80148f6:	f000 f865 	bl	80149c4 <_ZN8XFThread7executeEv>
}
 80148fa:	bf00      	nop
 80148fc:	3708      	adds	r7, #8
 80148fe:	46bd      	mov	sp, r7
 8014900:	bd80      	pop	{r7, pc}

08014902 <_ZNK8XFThread17getTimeoutManagerEv>:

XFTimeoutManager * XFThread::getTimeoutManager() const
{
 8014902:	b580      	push	{r7, lr}
 8014904:	b082      	sub	sp, #8
 8014906:	af00      	add	r7, sp, #0
 8014908:	6078      	str	r0, [r7, #4]
    return XFTimeoutManager::getInstance();
 801490a:	f001 f821 	bl	8015950 <_ZN16XFTimeoutManager11getInstanceEv>
 801490e:	4603      	mov	r3, r0
}
 8014910:	4618      	mov	r0, r3
 8014912:	3708      	adds	r7, #8
 8014914:	46bd      	mov	sp, r7
 8014916:	bd80      	pop	{r7, pc}

08014918 <_ZNK8XFThread13dispatchEventEP8IXFEvent>:
 * Dispatchs the event to the corresponding behavioral part. For example
 * the state machine which sould process the event.
 * \param pEvent The event to dispatch
 */
void XFThread::dispatchEvent(IXFEvent * pEvent) const
{
 8014918:	b580      	push	{r7, lr}
 801491a:	b084      	sub	sp, #16
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]
 8014920:	6039      	str	r1, [r7, #0]
    EventStatus eventStatus;
 8014922:	f107 030c 	add.w	r3, r7, #12
 8014926:	2100      	movs	r1, #0
 8014928:	4618      	mov	r0, r3
 801492a:	f7f2 f81b 	bl	8006964 <_ZN11EventStatusC1ENS_12eEventStatusE>

    eventStatus = pEvent->getBehavior()->process(pEvent);
 801492e:	6838      	ldr	r0, [r7, #0]
 8014930:	f7ff ff06 	bl	8014740 <_ZNK8IXFEvent11getBehaviorEv>
 8014934:	4603      	mov	r3, r0
 8014936:	681a      	ldr	r2, [r3, #0]
 8014938:	3210      	adds	r2, #16
 801493a:	6812      	ldr	r2, [r2, #0]
 801493c:	6839      	ldr	r1, [r7, #0]
 801493e:	4618      	mov	r0, r3
 8014940:	4790      	blx	r2
 8014942:	4603      	mov	r3, r0
 8014944:	733b      	strb	r3, [r7, #12]

    // Check if behavior should be deleted
    if (eventStatus == EventStatus::Terminate)
 8014946:	2304      	movs	r3, #4
 8014948:	73fb      	strb	r3, [r7, #15]
 801494a:	f107 020f 	add.w	r2, r7, #15
 801494e:	f107 030c 	add.w	r3, r7, #12
 8014952:	4611      	mov	r1, r2
 8014954:	4618      	mov	r0, r3
 8014956:	f7ff ff7b 	bl	8014850 <_ZNK11EventStatuseqERKNS_12eEventStatusE>
 801495a:	4603      	mov	r3, r0
 801495c:	2b00      	cmp	r3, #0
 801495e:	d00a      	beq.n	8014976 <_ZNK8XFThread13dispatchEventEP8IXFEvent+0x5e>
    {
        delete pEvent->getBehavior();
 8014960:	6838      	ldr	r0, [r7, #0]
 8014962:	f7ff feed 	bl	8014740 <_ZNK8IXFEvent11getBehaviorEv>
 8014966:	4603      	mov	r3, r0
 8014968:	2b00      	cmp	r3, #0
 801496a:	d004      	beq.n	8014976 <_ZNK8XFThread13dispatchEventEP8IXFEvent+0x5e>
 801496c:	681a      	ldr	r2, [r3, #0]
 801496e:	3204      	adds	r2, #4
 8014970:	6812      	ldr	r2, [r2, #0]
 8014972:	4618      	mov	r0, r3
 8014974:	4790      	blx	r2
    }
}
 8014976:	bf00      	nop
 8014978:	3710      	adds	r7, #16
 801497a:	46bd      	mov	sp, r7
 801497c:	bd80      	pop	{r7, pc}

0801497e <_ZN8XFThread9pushEventEP8IXFEvent>:

void XFThread::pushEvent(IXFEvent * pEvent)
{
 801497e:	b580      	push	{r7, lr}
 8014980:	b082      	sub	sp, #8
 8014982:	af00      	add	r7, sp, #0
 8014984:	6078      	str	r0, [r7, #4]
 8014986:	6039      	str	r1, [r7, #0]
    _events.push(pEvent);
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	330c      	adds	r3, #12
 801498c:	463a      	mov	r2, r7
 801498e:	4611      	mov	r1, r2
 8014990:	4618      	mov	r0, r3
 8014992:	f000 f89e 	bl	8014ad2 <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEE4pushERKS1_>
    }

#endif /**************************************************************************************************************/


}
 8014996:	bf00      	nop
 8014998:	3708      	adds	r7, #8
 801499a:	46bd      	mov	sp, r7
 801499c:	bd80      	pop	{r7, pc}

0801499e <_ZN8XFThread15scheduleTimeoutEiiP11IXFReactive>:
/**
 * Adds a new timeout to be handled. The XFThread will forward the timeout
 * information to the timeout manager which is responsible to handle all timeouts.
 */
void XFThread::scheduleTimeout(int timeoutId, int interval, IXFReactive * pReactive)
{
 801499e:	b580      	push	{r7, lr}
 80149a0:	b084      	sub	sp, #16
 80149a2:	af00      	add	r7, sp, #0
 80149a4:	60f8      	str	r0, [r7, #12]
 80149a6:	60b9      	str	r1, [r7, #8]
 80149a8:	607a      	str	r2, [r7, #4]
 80149aa:	603b      	str	r3, [r7, #0]
    // Forward timeout to the timeout manager
    getTimeoutManager()->scheduleTimeout(timeoutId, interval, pReactive);
 80149ac:	68f8      	ldr	r0, [r7, #12]
 80149ae:	f7ff ffa8 	bl	8014902 <_ZNK8XFThread17getTimeoutManagerEv>
 80149b2:	683b      	ldr	r3, [r7, #0]
 80149b4:	687a      	ldr	r2, [r7, #4]
 80149b6:	68b9      	ldr	r1, [r7, #8]
 80149b8:	f001 f803 	bl	80159c2 <_ZN16XFTimeoutManager15scheduleTimeoutEiiP11IXFReactive>
}
 80149bc:	bf00      	nop
 80149be:	3710      	adds	r7, #16
 80149c0:	46bd      	mov	sp, r7
 80149c2:	bd80      	pop	{r7, pc}

080149c4 <_ZN8XFThread7executeEv>:

/**
 * Main loop of the thread. Implements event loop processing.
 */
void XFThread::execute()
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b084      	sub	sp, #16
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	6078      	str	r0, [r7, #4]
    while(_bExecuting)
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	791b      	ldrb	r3, [r3, #4]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d03b      	beq.n	8014a4c <_ZN8XFThread7executeEv+0x88>
    {
        IXFEvent * pEvent;

        while (_events.empty())
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	3308      	adds	r3, #8
 80149d8:	4618      	mov	r0, r3
 80149da:	f7ff ff2b 	bl	8014834 <_ZN12XFEventQueue5emptyEv>
 80149de:	4603      	mov	r3, r0
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d001      	beq.n	80149e8 <_ZN8XFThread7executeEv+0x24>
            killTimer( _tid );
            _tid = -1;
            return;

#endif /**************************************************************************************************************/
            __asm__("NOP");    // Prevent compiler from optimising this loop away
 80149e4:	bf00      	nop
        while (_events.empty())
 80149e6:	e7f5      	b.n	80149d4 <_ZN8XFThread7executeEv+0x10>
        }

        // Deque next event from queue
        pEvent = _events.front(); _events.pop();
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	330c      	adds	r3, #12
 80149ec:	4618      	mov	r0, r3
 80149ee:	f000 f87e 	bl	8014aee <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEE5frontEv>
 80149f2:	4603      	mov	r3, r0
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	60fb      	str	r3, [r7, #12]
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	330c      	adds	r3, #12
 80149fc:	4618      	mov	r0, r3
 80149fe:	f000 f883 	bl	8014b08 <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEE3popEv>

        if (pEvent)
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d003      	beq.n	8014a10 <_ZN8XFThread7executeEv+0x4c>
        {
            // Forward the event to the behavioral class
            dispatchEvent(pEvent);
 8014a08:	68f9      	ldr	r1, [r7, #12]
 8014a0a:	6878      	ldr	r0, [r7, #4]
 8014a0c:	f7ff ff84 	bl	8014918 <_ZNK8XFThread13dispatchEventEP8IXFEvent>
        }

        if (pEvent->getEventType() == IXFEvent::Terminate)
 8014a10:	68f8      	ldr	r0, [r7, #12]
 8014a12:	f7f1 ff8e 	bl	8006932 <_ZNK8IXFEvent12getEventTypeEv>
 8014a16:	4603      	mov	r3, r0
 8014a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014a1c:	bf0c      	ite	eq
 8014a1e:	2301      	moveq	r3, #1
 8014a20:	2300      	movne	r3, #0
 8014a22:	b2db      	uxtb	r3, r3
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d002      	beq.n	8014a2e <_ZN8XFThread7executeEv+0x6a>
        {
            // Exit the event loop
            _bExecuting = false;
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	2200      	movs	r2, #0
 8014a2c:	711a      	strb	r2, [r3, #4]
        }

        if (pEvent->shouldDelete())
 8014a2e:	68f8      	ldr	r0, [r7, #12]
 8014a30:	f7ff fe92 	bl	8014758 <_ZNK8IXFEvent12shouldDeleteEv>
 8014a34:	4603      	mov	r3, r0
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d0c8      	beq.n	80149cc <_ZN8XFThread7executeEv+0x8>
        {
            // Delete consumed event
            delete pEvent;
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d0c5      	beq.n	80149cc <_ZN8XFThread7executeEv+0x8>
 8014a40:	681a      	ldr	r2, [r3, #0]
 8014a42:	3204      	adds	r2, #4
 8014a44:	6812      	ldr	r2, [r2, #0]
 8014a46:	4618      	mov	r0, r3
 8014a48:	4790      	blx	r2
    while(_bExecuting)
 8014a4a:	e7bf      	b.n	80149cc <_ZN8XFThread7executeEv+0x8>
        }
    }
}
 8014a4c:	bf00      	nop
 8014a4e:	3710      	adds	r7, #16
 8014a50:	46bd      	mov	sp, r7
 8014a52:	bd80      	pop	{r7, pc}

08014a54 <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEEC1IS4_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b082      	sub	sp, #8
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
	: c() { }
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	4618      	mov	r0, r3
 8014a60:	f000 f85e 	bl	8014b20 <_ZNSt5dequeIP8IXFEventSaIS1_EEC1Ev>
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	4618      	mov	r0, r3
 8014a68:	3708      	adds	r7, #8
 8014a6a:	46bd      	mov	sp, r7
 8014a6c:	bd80      	pop	{r7, pc}

08014a6e <_ZNSt5dequeIP8IXFEventSaIS1_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8014a6e:	b580      	push	{r7, lr}
 8014a70:	b08a      	sub	sp, #40	; 0x28
 8014a72:	af00      	add	r7, sp, #0
 8014a74:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8014a76:	f107 0308 	add.w	r3, r7, #8
 8014a7a:	6879      	ldr	r1, [r7, #4]
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	f000 f88a 	bl	8014b96 <_ZNSt5dequeIP8IXFEventSaIS1_EE5beginEv>
 8014a82:	f107 0318 	add.w	r3, r7, #24
 8014a86:	6879      	ldr	r1, [r7, #4]
 8014a88:	4618      	mov	r0, r3
 8014a8a:	f000 f893 	bl	8014bb4 <_ZNSt5dequeIP8IXFEventSaIS1_EE3endEv>
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	4618      	mov	r0, r3
 8014a92:	f000 f89e 	bl	8014bd2 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE19_M_get_Tp_allocatorEv>
 8014a96:	4603      	mov	r3, r0
 8014a98:	f107 0218 	add.w	r2, r7, #24
 8014a9c:	f107 0108 	add.w	r1, r7, #8
 8014aa0:	6878      	ldr	r0, [r7, #4]
 8014aa2:	f000 f8bd 	bl	8014c20 <_ZNSt5dequeIP8IXFEventSaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	f000 f852 	bl	8014b52 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EED1Ev>
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	3728      	adds	r7, #40	; 0x28
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	bd80      	pop	{r7, pc}

08014ab8 <_ZNKSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEE5emptyEv>:

      /**
       *  Returns true if the %queue is empty.
       */
      _GLIBCXX_NODISCARD bool
      empty() const
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b082      	sub	sp, #8
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	f000 f8b9 	bl	8014c3a <_ZNKSt5dequeIP8IXFEventSaIS1_EE5emptyEv>
 8014ac8:	4603      	mov	r3, r0
 8014aca:	4618      	mov	r0, r3
 8014acc:	3708      	adds	r7, #8
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	bd80      	pop	{r7, pc}

08014ad2 <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEE4pushERKS1_>:
       *  element at the end of the %queue and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 8014ad2:	b580      	push	{r7, lr}
 8014ad4:	b082      	sub	sp, #8
 8014ad6:	af00      	add	r7, sp, #0
 8014ad8:	6078      	str	r0, [r7, #4]
 8014ada:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	6839      	ldr	r1, [r7, #0]
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	f000 f8bc 	bl	8014c5e <_ZNSt5dequeIP8IXFEventSaIS1_EE9push_backERKS1_>
 8014ae6:	bf00      	nop
 8014ae8:	3708      	adds	r7, #8
 8014aea:	46bd      	mov	sp, r7
 8014aec:	bd80      	pop	{r7, pc}

08014aee <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEE5frontEv>:
      front()
 8014aee:	b580      	push	{r7, lr}
 8014af0:	b082      	sub	sp, #8
 8014af2:	af00      	add	r7, sp, #0
 8014af4:	6078      	str	r0, [r7, #4]
	return c.front();
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	4618      	mov	r0, r3
 8014afa:	f000 f8d1 	bl	8014ca0 <_ZNSt5dequeIP8IXFEventSaIS1_EE5frontEv>
 8014afe:	4603      	mov	r3, r0
      }
 8014b00:	4618      	mov	r0, r3
 8014b02:	3708      	adds	r7, #8
 8014b04:	46bd      	mov	sp, r7
 8014b06:	bd80      	pop	{r7, pc}

08014b08 <_ZNSt5queueIP8IXFEventSt5dequeIS1_SaIS1_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b082      	sub	sp, #8
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	4618      	mov	r0, r3
 8014b14:	f000 f8d8 	bl	8014cc8 <_ZNSt5dequeIP8IXFEventSaIS1_EE9pop_frontEv>
      }
 8014b18:	bf00      	nop
 8014b1a:	3708      	adds	r7, #8
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	bd80      	pop	{r7, pc}

08014b20 <_ZNSt5dequeIP8IXFEventSaIS1_EEC1Ev>:
      deque() : _Base() { }
 8014b20:	b580      	push	{r7, lr}
 8014b22:	b082      	sub	sp, #8
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	6078      	str	r0, [r7, #4]
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	f000 f8eb 	bl	8014d06 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EEC1Ev>
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	4618      	mov	r0, r3
 8014b34:	3708      	adds	r7, #8
 8014b36:	46bd      	mov	sp, r7
 8014b38:	bd80      	pop	{r7, pc}

08014b3a <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8014b3a:	b580      	push	{r7, lr}
 8014b3c:	b082      	sub	sp, #8
 8014b3e:	af00      	add	r7, sp, #0
 8014b40:	6078      	str	r0, [r7, #4]
 8014b42:	6878      	ldr	r0, [r7, #4]
 8014b44:	f000 f8f0 	bl	8014d28 <_ZNSaIP8IXFEventED1Ev>
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	3708      	adds	r7, #8
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bd80      	pop	{r7, pc}

08014b52 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8014b52:	b580      	push	{r7, lr}
 8014b54:	b082      	sub	sp, #8
 8014b56:	af00      	add	r7, sp, #0
 8014b58:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d010      	beq.n	8014b84 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8014b6a:	3304      	adds	r3, #4
 8014b6c:	461a      	mov	r2, r3
 8014b6e:	6878      	ldr	r0, [r7, #4]
 8014b70:	f000 f8e6 	bl	8014d40 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	6819      	ldr	r1, [r3, #0]
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	685b      	ldr	r3, [r3, #4]
 8014b7c:	461a      	mov	r2, r3
 8014b7e:	6878      	ldr	r0, [r7, #4]
 8014b80:	f000 f8f8 	bl	8014d74 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	4618      	mov	r0, r3
 8014b88:	f7ff ffd7 	bl	8014b3a <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE11_Deque_implD1Ev>
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	4618      	mov	r0, r3
 8014b90:	3708      	adds	r7, #8
 8014b92:	46bd      	mov	sp, r7
 8014b94:	bd80      	pop	{r7, pc}

08014b96 <_ZNSt5dequeIP8IXFEventSaIS1_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8014b96:	b580      	push	{r7, lr}
 8014b98:	b082      	sub	sp, #8
 8014b9a:	af00      	add	r7, sp, #0
 8014b9c:	6078      	str	r0, [r7, #4]
 8014b9e:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8014ba0:	683b      	ldr	r3, [r7, #0]
 8014ba2:	3308      	adds	r3, #8
 8014ba4:	4619      	mov	r1, r3
 8014ba6:	6878      	ldr	r0, [r7, #4]
 8014ba8:	f000 f81e 	bl	8014be8 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_EC1ERKS4_>
 8014bac:	6878      	ldr	r0, [r7, #4]
 8014bae:	3708      	adds	r7, #8
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	bd80      	pop	{r7, pc}

08014bb4 <_ZNSt5dequeIP8IXFEventSaIS1_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	b082      	sub	sp, #8
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
 8014bbc:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8014bbe:	683b      	ldr	r3, [r7, #0]
 8014bc0:	3318      	adds	r3, #24
 8014bc2:	4619      	mov	r1, r3
 8014bc4:	6878      	ldr	r0, [r7, #4]
 8014bc6:	f000 f80f 	bl	8014be8 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_EC1ERKS4_>
 8014bca:	6878      	ldr	r0, [r7, #4]
 8014bcc:	3708      	adds	r7, #8
 8014bce:	46bd      	mov	sp, r7
 8014bd0:	bd80      	pop	{r7, pc}

08014bd2 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8014bd2:	b480      	push	{r7}
 8014bd4:	b083      	sub	sp, #12
 8014bd6:	af00      	add	r7, sp, #0
 8014bd8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	4618      	mov	r0, r3
 8014bde:	370c      	adds	r7, #12
 8014be0:	46bd      	mov	sp, r7
 8014be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be6:	4770      	bx	lr

08014be8 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8014be8:	b480      	push	{r7}
 8014bea:	b083      	sub	sp, #12
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
 8014bf0:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8014bf2:	683b      	ldr	r3, [r7, #0]
 8014bf4:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8014bfa:	683b      	ldr	r3, [r7, #0]
 8014bfc:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	605a      	str	r2, [r3, #4]
 8014c02:	683b      	ldr	r3, [r7, #0]
 8014c04:	689a      	ldr	r2, [r3, #8]
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	609a      	str	r2, [r3, #8]
 8014c0a:	683b      	ldr	r3, [r7, #0]
 8014c0c:	68da      	ldr	r2, [r3, #12]
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	60da      	str	r2, [r3, #12]
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	4618      	mov	r0, r3
 8014c16:	370c      	adds	r7, #12
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c1e:	4770      	bx	lr

08014c20 <_ZNSt5dequeIP8IXFEventSaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8014c20:	b480      	push	{r7}
 8014c22:	b08d      	sub	sp, #52	; 0x34
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	60f8      	str	r0, [r7, #12]
 8014c28:	60b9      	str	r1, [r7, #8]
 8014c2a:	607a      	str	r2, [r7, #4]
 8014c2c:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8014c2e:	bf00      	nop
 8014c30:	3734      	adds	r7, #52	; 0x34
 8014c32:	46bd      	mov	sp, r7
 8014c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c38:	4770      	bx	lr

08014c3a <_ZNKSt5dequeIP8IXFEventSaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8014c3a:	b580      	push	{r7, lr}
 8014c3c:	b082      	sub	sp, #8
 8014c3e:	af00      	add	r7, sp, #0
 8014c40:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	f103 0218 	add.w	r2, r3, #24
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	3308      	adds	r3, #8
 8014c4c:	4619      	mov	r1, r3
 8014c4e:	4610      	mov	r0, r2
 8014c50:	f000 f8ac 	bl	8014dac <_ZSteqIP8IXFEventRS1_PS1_EbRKSt15_Deque_iteratorIT_T0_T1_ESA_>
 8014c54:	4603      	mov	r3, r0
 8014c56:	4618      	mov	r0, r3
 8014c58:	3708      	adds	r7, #8
 8014c5a:	46bd      	mov	sp, r7
 8014c5c:	bd80      	pop	{r7, pc}

08014c5e <_ZNSt5dequeIP8IXFEventSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8014c5e:	b580      	push	{r7, lr}
 8014c60:	b082      	sub	sp, #8
 8014c62:	af00      	add	r7, sp, #0
 8014c64:	6078      	str	r0, [r7, #4]
 8014c66:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	6a1b      	ldr	r3, [r3, #32]
 8014c70:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 8014c72:	429a      	cmp	r2, r3
 8014c74:	d00c      	beq.n	8014c90 <_ZNSt5dequeIP8IXFEventSaIS1_EE9push_backERKS1_+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 8014c76:	6878      	ldr	r0, [r7, #4]
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	699b      	ldr	r3, [r3, #24]
 8014c7c:	683a      	ldr	r2, [r7, #0]
 8014c7e:	4619      	mov	r1, r3
 8014c80:	f000 f8a8 	bl	8014dd4 <_ZNSt16allocator_traitsISaIP8IXFEventEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	699b      	ldr	r3, [r3, #24]
 8014c88:	1d1a      	adds	r2, r3, #4
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	619a      	str	r2, [r3, #24]
      }
 8014c8e:	e003      	b.n	8014c98 <_ZNSt5dequeIP8IXFEventSaIS1_EE9push_backERKS1_+0x3a>
	  _M_push_back_aux(__x);
 8014c90:	6839      	ldr	r1, [r7, #0]
 8014c92:	6878      	ldr	r0, [r7, #4]
 8014c94:	f000 f8b2 	bl	8014dfc <_ZNSt5dequeIP8IXFEventSaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_>
      }
 8014c98:	bf00      	nop
 8014c9a:	3708      	adds	r7, #8
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	bd80      	pop	{r7, pc}

08014ca0 <_ZNSt5dequeIP8IXFEventSaIS1_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b086      	sub	sp, #24
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	6078      	str	r0, [r7, #4]
	return *begin();
 8014ca8:	f107 0308 	add.w	r3, r7, #8
 8014cac:	6879      	ldr	r1, [r7, #4]
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f7ff ff71 	bl	8014b96 <_ZNSt5dequeIP8IXFEventSaIS1_EE5beginEv>
 8014cb4:	f107 0308 	add.w	r3, r7, #8
 8014cb8:	4618      	mov	r0, r3
 8014cba:	f000 f8e3 	bl	8014e84 <_ZNKSt15_Deque_iteratorIP8IXFEventRS1_PS1_EdeEv>
 8014cbe:	4603      	mov	r3, r0
      }
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	3718      	adds	r7, #24
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	bd80      	pop	{r7, pc}

08014cc8 <_ZNSt5dequeIP8IXFEventSaIS1_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b082      	sub	sp, #8
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	691b      	ldr	r3, [r3, #16]
 8014cd8:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 8014cda:	429a      	cmp	r2, r3
 8014cdc:	d00c      	beq.n	8014cf8 <_ZNSt5dequeIP8IXFEventSaIS1_EE9pop_frontEv+0x30>
	    _Alloc_traits::destroy(this->_M_impl,
 8014cde:	687a      	ldr	r2, [r7, #4]
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	689b      	ldr	r3, [r3, #8]
 8014ce4:	4619      	mov	r1, r3
 8014ce6:	4610      	mov	r0, r2
 8014ce8:	f000 f8d8 	bl	8014e9c <_ZNSt16allocator_traitsISaIP8IXFEventEE7destroyIS1_EEvRS2_PT_>
	    ++this->_M_impl._M_start._M_cur;
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	689b      	ldr	r3, [r3, #8]
 8014cf0:	1d1a      	adds	r2, r3, #4
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	609a      	str	r2, [r3, #8]
      }
 8014cf6:	e002      	b.n	8014cfe <_ZNSt5dequeIP8IXFEventSaIS1_EE9pop_frontEv+0x36>
	  _M_pop_front_aux();
 8014cf8:	6878      	ldr	r0, [r7, #4]
 8014cfa:	f000 f8dc 	bl	8014eb6 <_ZNSt5dequeIP8IXFEventSaIS1_EE16_M_pop_front_auxEv>
      }
 8014cfe:	bf00      	nop
 8014d00:	3708      	adds	r7, #8
 8014d02:	46bd      	mov	sp, r7
 8014d04:	bd80      	pop	{r7, pc}

08014d06 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EEC1Ev>:
      _Deque_base()
 8014d06:	b580      	push	{r7, lr}
 8014d08:	b082      	sub	sp, #8
 8014d0a:	af00      	add	r7, sp, #0
 8014d0c:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	4618      	mov	r0, r3
 8014d12:	f000 f8f8 	bl	8014f06 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8014d16:	2100      	movs	r1, #0
 8014d18:	6878      	ldr	r0, [r7, #4]
 8014d1a:	f000 f910 	bl	8014f3e <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE17_M_initialize_mapEj>
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	4618      	mov	r0, r3
 8014d22:	3708      	adds	r7, #8
 8014d24:	46bd      	mov	sp, r7
 8014d26:	bd80      	pop	{r7, pc}

08014d28 <_ZNSaIP8IXFEventED1Ev>:
 8014d28:	b580      	push	{r7, lr}
 8014d2a:	b082      	sub	sp, #8
 8014d2c:	af00      	add	r7, sp, #0
 8014d2e:	6078      	str	r0, [r7, #4]
 8014d30:	6878      	ldr	r0, [r7, #4]
 8014d32:	f000 f967 	bl	8015004 <_ZN9__gnu_cxx13new_allocatorIP8IXFEventED1Ev>
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	4618      	mov	r0, r3
 8014d3a:	3708      	adds	r7, #8
 8014d3c:	46bd      	mov	sp, r7
 8014d3e:	bd80      	pop	{r7, pc}

08014d40 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8014d40:	b580      	push	{r7, lr}
 8014d42:	b086      	sub	sp, #24
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	60f8      	str	r0, [r7, #12]
 8014d48:	60b9      	str	r1, [r7, #8]
 8014d4a:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8014d4c:	68bb      	ldr	r3, [r7, #8]
 8014d4e:	617b      	str	r3, [r7, #20]
 8014d50:	697a      	ldr	r2, [r7, #20]
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	429a      	cmp	r2, r3
 8014d56:	d209      	bcs.n	8014d6c <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2c>
	_M_deallocate_node(*__n);
 8014d58:	697b      	ldr	r3, [r7, #20]
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	4619      	mov	r1, r3
 8014d5e:	68f8      	ldr	r0, [r7, #12]
 8014d60:	f000 f95b 	bl	801501a <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8014d64:	697b      	ldr	r3, [r7, #20]
 8014d66:	3304      	adds	r3, #4
 8014d68:	617b      	str	r3, [r7, #20]
 8014d6a:	e7f1      	b.n	8014d50 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 8014d6c:	bf00      	nop
 8014d6e:	3718      	adds	r7, #24
 8014d70:	46bd      	mov	sp, r7
 8014d72:	bd80      	pop	{r7, pc}

08014d74 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b086      	sub	sp, #24
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	60f8      	str	r0, [r7, #12]
 8014d7c:	60b9      	str	r1, [r7, #8]
 8014d7e:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8014d80:	f107 0314 	add.w	r3, r7, #20
 8014d84:	68f9      	ldr	r1, [r7, #12]
 8014d86:	4618      	mov	r0, r3
 8014d88:	f000 f95a 	bl	8015040 <_ZNKSt11_Deque_baseIP8IXFEventSaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8014d8c:	f107 0314 	add.w	r3, r7, #20
 8014d90:	687a      	ldr	r2, [r7, #4]
 8014d92:	68b9      	ldr	r1, [r7, #8]
 8014d94:	4618      	mov	r0, r3
 8014d96:	f000 f970 	bl	801507a <_ZNSt16allocator_traitsISaIPP8IXFEventEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8014d9a:	f107 0314 	add.w	r3, r7, #20
 8014d9e:	4618      	mov	r0, r3
 8014da0:	f000 f95f 	bl	8015062 <_ZNSaIPP8IXFEventED1Ev>
      }
 8014da4:	bf00      	nop
 8014da6:	3718      	adds	r7, #24
 8014da8:	46bd      	mov	sp, r7
 8014daa:	bd80      	pop	{r7, pc}

08014dac <_ZSteqIP8IXFEventRS1_PS1_EbRKSt15_Deque_iteratorIT_T0_T1_ESA_>:
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 8014dac:	b480      	push	{r7}
 8014dae:	b083      	sub	sp, #12
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	6078      	str	r0, [r7, #4]
 8014db4:	6039      	str	r1, [r7, #0]
    { return __x._M_cur == __y._M_cur; }
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	681a      	ldr	r2, [r3, #0]
 8014dba:	683b      	ldr	r3, [r7, #0]
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	429a      	cmp	r2, r3
 8014dc0:	bf0c      	ite	eq
 8014dc2:	2301      	moveq	r3, #1
 8014dc4:	2300      	movne	r3, #0
 8014dc6:	b2db      	uxtb	r3, r3
 8014dc8:	4618      	mov	r0, r3
 8014dca:	370c      	adds	r7, #12
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd2:	4770      	bx	lr

08014dd4 <_ZNSt16allocator_traitsISaIP8IXFEventEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b084      	sub	sp, #16
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	60f8      	str	r0, [r7, #12]
 8014ddc:	60b9      	str	r1, [r7, #8]
 8014dde:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8014de0:	6878      	ldr	r0, [r7, #4]
 8014de2:	f000 f959 	bl	8015098 <_ZSt7forwardIRKP8IXFEventEOT_RNSt16remove_referenceIS4_E4typeE>
 8014de6:	4603      	mov	r3, r0
 8014de8:	461a      	mov	r2, r3
 8014dea:	68b9      	ldr	r1, [r7, #8]
 8014dec:	68f8      	ldr	r0, [r7, #12]
 8014dee:	f000 f95e 	bl	80150ae <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 8014df2:	bf00      	nop
 8014df4:	3710      	adds	r7, #16
 8014df6:	46bd      	mov	sp, r7
 8014df8:	bd80      	pop	{r7, pc}
	...

08014dfc <_ZNSt5dequeIP8IXFEventSaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8014dfc:	b5b0      	push	{r4, r5, r7, lr}
 8014dfe:	b082      	sub	sp, #8
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	6078      	str	r0, [r7, #4]
 8014e04:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8014e06:	6878      	ldr	r0, [r7, #4]
 8014e08:	f000 f967 	bl	80150da <_ZNKSt5dequeIP8IXFEventSaIS1_EE4sizeEv>
 8014e0c:	4604      	mov	r4, r0
 8014e0e:	6878      	ldr	r0, [r7, #4]
 8014e10:	f000 f975 	bl	80150fe <_ZNKSt5dequeIP8IXFEventSaIS1_EE8max_sizeEv>
 8014e14:	4603      	mov	r3, r0
 8014e16:	429c      	cmp	r4, r3
 8014e18:	bf0c      	ite	eq
 8014e1a:	2301      	moveq	r3, #1
 8014e1c:	2300      	movne	r3, #0
 8014e1e:	b2db      	uxtb	r3, r3
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d002      	beq.n	8014e2a <_ZNSt5dequeIP8IXFEventSaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8014e24:	4816      	ldr	r0, [pc, #88]	; (8014e80 <_ZNSt5dequeIP8IXFEventSaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_+0x84>)
 8014e26:	f001 fb58 	bl	80164da <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 8014e2a:	2101      	movs	r1, #1
 8014e2c:	6878      	ldr	r0, [r7, #4]
 8014e2e:	f000 f977 	bl	8015120 <_ZNSt5dequeIP8IXFEventSaIS1_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8014e32:	687a      	ldr	r2, [r7, #4]
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e38:	1d1c      	adds	r4, r3, #4
 8014e3a:	4610      	mov	r0, r2
 8014e3c:	f000 f98b 	bl	8015156 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE16_M_allocate_nodeEv>
 8014e40:	4603      	mov	r3, r0
 8014e42:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8014e44:	687c      	ldr	r4, [r7, #4]
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	699d      	ldr	r5, [r3, #24]
 8014e4a:	6838      	ldr	r0, [r7, #0]
 8014e4c:	f000 f924 	bl	8015098 <_ZSt7forwardIRKP8IXFEventEOT_RNSt16remove_referenceIS4_E4typeE>
 8014e50:	4603      	mov	r3, r0
 8014e52:	461a      	mov	r2, r3
 8014e54:	4629      	mov	r1, r5
 8014e56:	4620      	mov	r0, r4
 8014e58:	f7ff ffbc 	bl	8014dd4 <_ZNSt16allocator_traitsISaIP8IXFEventEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	                             this->_M_impl._M_finish._M_cur,
			             std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	f103 0218 	add.w	r2, r3, #24
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e66:	3304      	adds	r3, #4
 8014e68:	4619      	mov	r1, r3
 8014e6a:	4610      	mov	r0, r2
 8014e6c:	f000 f985 	bl	801517a <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E11_M_set_nodeEPS3_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	69da      	ldr	r2, [r3, #28]
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 8014e78:	bf00      	nop
 8014e7a:	3708      	adds	r7, #8
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	bdb0      	pop	{r4, r5, r7, pc}
 8014e80:	0801bc3c 	.word	0x0801bc3c

08014e84 <_ZNKSt15_Deque_iteratorIP8IXFEventRS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8014e84:	b480      	push	{r7}
 8014e86:	b083      	sub	sp, #12
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	4618      	mov	r0, r3
 8014e92:	370c      	adds	r7, #12
 8014e94:	46bd      	mov	sp, r7
 8014e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9a:	4770      	bx	lr

08014e9c <_ZNSt16allocator_traitsISaIP8IXFEventEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	b082      	sub	sp, #8
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	6078      	str	r0, [r7, #4]
 8014ea4:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8014ea6:	6839      	ldr	r1, [r7, #0]
 8014ea8:	6878      	ldr	r0, [r7, #4]
 8014eaa:	f000 f97f 	bl	80151ac <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE7destroyIS2_EEvPT_>
 8014eae:	bf00      	nop
 8014eb0:	3708      	adds	r7, #8
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	bd80      	pop	{r7, pc}

08014eb6 <_ZNSt5dequeIP8IXFEventSaIS1_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8014eb6:	b580      	push	{r7, lr}
 8014eb8:	b082      	sub	sp, #8
 8014eba:	af00      	add	r7, sp, #0
 8014ebc:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	f7ff fe86 	bl	8014bd2 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE19_M_get_Tp_allocatorEv>
 8014ec6:	4602      	mov	r2, r0
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	689b      	ldr	r3, [r3, #8]
 8014ecc:	4619      	mov	r1, r3
 8014ece:	4610      	mov	r0, r2
 8014ed0:	f7ff ffe4 	bl	8014e9c <_ZNSt16allocator_traitsISaIP8IXFEventEE7destroyIS1_EEvRS2_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8014ed4:	687a      	ldr	r2, [r7, #4]
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	68db      	ldr	r3, [r3, #12]
 8014eda:	4619      	mov	r1, r3
 8014edc:	4610      	mov	r0, r2
 8014ede:	f000 f89c 	bl	801501a <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	f103 0208 	add.w	r2, r3, #8
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	695b      	ldr	r3, [r3, #20]
 8014eec:	3304      	adds	r3, #4
 8014eee:	4619      	mov	r1, r3
 8014ef0:	4610      	mov	r0, r2
 8014ef2:	f000 f942 	bl	801517a <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	68da      	ldr	r2, [r3, #12]
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	609a      	str	r2, [r3, #8]
    }
 8014efe:	bf00      	nop
 8014f00:	3708      	adds	r7, #8
 8014f02:	46bd      	mov	sp, r7
 8014f04:	bd80      	pop	{r7, pc}

08014f06 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl()
 8014f06:	b580      	push	{r7, lr}
 8014f08:	b082      	sub	sp, #8
 8014f0a:	af00      	add	r7, sp, #0
 8014f0c:	6078      	str	r0, [r7, #4]
	  _M_start(), _M_finish()
 8014f0e:	6878      	ldr	r0, [r7, #4]
 8014f10:	f000 f957 	bl	80151c2 <_ZNSaIP8IXFEventEC1Ev>
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	2200      	movs	r2, #0
 8014f18:	601a      	str	r2, [r3, #0]
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	2200      	movs	r2, #0
 8014f1e:	605a      	str	r2, [r3, #4]
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	3308      	adds	r3, #8
 8014f24:	4618      	mov	r0, r3
 8014f26:	f000 f958 	bl	80151da <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_EC1Ev>
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	3318      	adds	r3, #24
 8014f2e:	4618      	mov	r0, r3
 8014f30:	f000 f953 	bl	80151da <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_EC1Ev>
	{ }
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	4618      	mov	r0, r3
 8014f38:	3708      	adds	r7, #8
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	bd80      	pop	{r7, pc}

08014f3e <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8014f3e:	b590      	push	{r4, r7, lr}
 8014f40:	b089      	sub	sp, #36	; 0x24
 8014f42:	af00      	add	r7, sp, #0
 8014f44:	6078      	str	r0, [r7, #4]
 8014f46:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 8014f48:	2004      	movs	r0, #4
 8014f4a:	f7ff fc19 	bl	8014780 <_ZSt16__deque_buf_sizej>
 8014f4e:	4602      	mov	r2, r0
 8014f50:	683b      	ldr	r3, [r7, #0]
 8014f52:	fbb3 f3f2 	udiv	r3, r3, r2
 8014f56:	3301      	adds	r3, #1
 8014f58:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8014f5a:	2308      	movs	r3, #8
 8014f5c:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8014f5e:	69fb      	ldr	r3, [r7, #28]
 8014f60:	3302      	adds	r3, #2
 8014f62:	613b      	str	r3, [r7, #16]
 8014f64:	f107 0210 	add.w	r2, r7, #16
 8014f68:	f107 030c 	add.w	r3, r7, #12
 8014f6c:	4611      	mov	r1, r2
 8014f6e:	4618      	mov	r0, r3
 8014f70:	f7f5 fce6 	bl	800a940 <_ZSt3maxIjERKT_S2_S2_>
 8014f74:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8014f76:	681a      	ldr	r2, [r3, #0]
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	685b      	ldr	r3, [r3, #4]
 8014f80:	4619      	mov	r1, r3
 8014f82:	6878      	ldr	r0, [r7, #4]
 8014f84:	f000 f940 	bl	8015208 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE15_M_allocate_mapEj>
 8014f88:	4602      	mov	r2, r0
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	6859      	ldr	r1, [r3, #4]
 8014f96:	69fb      	ldr	r3, [r7, #28]
 8014f98:	1acb      	subs	r3, r1, r3
 8014f9a:	085b      	lsrs	r3, r3, #1
 8014f9c:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8014f9e:	4413      	add	r3, r2
 8014fa0:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8014fa2:	69fb      	ldr	r3, [r7, #28]
 8014fa4:	009b      	lsls	r3, r3, #2
 8014fa6:	69ba      	ldr	r2, [r7, #24]
 8014fa8:	4413      	add	r3, r2
 8014faa:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8014fac:	697a      	ldr	r2, [r7, #20]
 8014fae:	69b9      	ldr	r1, [r7, #24]
 8014fb0:	6878      	ldr	r0, [r7, #4]
 8014fb2:	f000 f946 	bl	8015242 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	3308      	adds	r3, #8
 8014fba:	69b9      	ldr	r1, [r7, #24]
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	f000 f8dc 	bl	801517a <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	f103 0218 	add.w	r2, r3, #24
 8014fc8:	697b      	ldr	r3, [r7, #20]
 8014fca:	3b04      	subs	r3, #4
 8014fcc:	4619      	mov	r1, r3
 8014fce:	4610      	mov	r0, r2
 8014fd0:	f000 f8d3 	bl	801517a <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	68da      	ldr	r2, [r3, #12]
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8014fe0:	2004      	movs	r0, #4
 8014fe2:	f7ff fbcd 	bl	8014780 <_ZSt16__deque_buf_sizej>
 8014fe6:	4602      	mov	r2, r0
 8014fe8:	683b      	ldr	r3, [r7, #0]
 8014fea:	fbb3 f1f2 	udiv	r1, r3, r2
 8014fee:	fb02 f201 	mul.w	r2, r2, r1
 8014ff2:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8014ff4:	009b      	lsls	r3, r3, #2
 8014ff6:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	619a      	str	r2, [r3, #24]
    }
 8014ffc:	bf00      	nop
 8014ffe:	3724      	adds	r7, #36	; 0x24
 8015000:	46bd      	mov	sp, r7
 8015002:	bd90      	pop	{r4, r7, pc}

08015004 <_ZN9__gnu_cxx13new_allocatorIP8IXFEventED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8015004:	b480      	push	{r7}
 8015006:	b083      	sub	sp, #12
 8015008:	af00      	add	r7, sp, #0
 801500a:	6078      	str	r0, [r7, #4]
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	4618      	mov	r0, r3
 8015010:	370c      	adds	r7, #12
 8015012:	46bd      	mov	sp, r7
 8015014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015018:	4770      	bx	lr

0801501a <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 801501a:	b590      	push	{r4, r7, lr}
 801501c:	b083      	sub	sp, #12
 801501e:	af00      	add	r7, sp, #0
 8015020:	6078      	str	r0, [r7, #4]
 8015022:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8015024:	687c      	ldr	r4, [r7, #4]
 8015026:	2004      	movs	r0, #4
 8015028:	f7ff fbaa 	bl	8014780 <_ZSt16__deque_buf_sizej>
 801502c:	4603      	mov	r3, r0
 801502e:	461a      	mov	r2, r3
 8015030:	6839      	ldr	r1, [r7, #0]
 8015032:	4620      	mov	r0, r4
 8015034:	f000 f91f 	bl	8015276 <_ZNSt16allocator_traitsISaIP8IXFEventEE10deallocateERS2_PS1_j>
      }
 8015038:	bf00      	nop
 801503a:	370c      	adds	r7, #12
 801503c:	46bd      	mov	sp, r7
 801503e:	bd90      	pop	{r4, r7, pc}

08015040 <_ZNKSt11_Deque_baseIP8IXFEventSaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8015040:	b580      	push	{r7, lr}
 8015042:	b082      	sub	sp, #8
 8015044:	af00      	add	r7, sp, #0
 8015046:	6078      	str	r0, [r7, #4]
 8015048:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 801504a:	6838      	ldr	r0, [r7, #0]
 801504c:	f000 f922 	bl	8015294 <_ZNKSt11_Deque_baseIP8IXFEventSaIS1_EE19_M_get_Tp_allocatorEv>
 8015050:	4603      	mov	r3, r0
 8015052:	4619      	mov	r1, r3
 8015054:	6878      	ldr	r0, [r7, #4]
 8015056:	f000 f928 	bl	80152aa <_ZNSaIPP8IXFEventEC1IS0_EERKSaIT_E>
 801505a:	6878      	ldr	r0, [r7, #4]
 801505c:	3708      	adds	r7, #8
 801505e:	46bd      	mov	sp, r7
 8015060:	bd80      	pop	{r7, pc}

08015062 <_ZNSaIPP8IXFEventED1Ev>:
 8015062:	b580      	push	{r7, lr}
 8015064:	b082      	sub	sp, #8
 8015066:	af00      	add	r7, sp, #0
 8015068:	6078      	str	r0, [r7, #4]
 801506a:	6878      	ldr	r0, [r7, #4]
 801506c:	f000 f92a 	bl	80152c4 <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventED1Ev>
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	4618      	mov	r0, r3
 8015074:	3708      	adds	r7, #8
 8015076:	46bd      	mov	sp, r7
 8015078:	bd80      	pop	{r7, pc}

0801507a <_ZNSt16allocator_traitsISaIPP8IXFEventEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801507a:	b580      	push	{r7, lr}
 801507c:	b084      	sub	sp, #16
 801507e:	af00      	add	r7, sp, #0
 8015080:	60f8      	str	r0, [r7, #12]
 8015082:	60b9      	str	r1, [r7, #8]
 8015084:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8015086:	687a      	ldr	r2, [r7, #4]
 8015088:	68b9      	ldr	r1, [r7, #8]
 801508a:	68f8      	ldr	r0, [r7, #12]
 801508c:	f000 f925 	bl	80152da <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventE10deallocateEPS3_j>
 8015090:	bf00      	nop
 8015092:	3710      	adds	r7, #16
 8015094:	46bd      	mov	sp, r7
 8015096:	bd80      	pop	{r7, pc}

08015098 <_ZSt7forwardIRKP8IXFEventEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015098:	b480      	push	{r7}
 801509a:	b083      	sub	sp, #12
 801509c:	af00      	add	r7, sp, #0
 801509e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	4618      	mov	r0, r3
 80150a4:	370c      	adds	r7, #12
 80150a6:	46bd      	mov	sp, r7
 80150a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ac:	4770      	bx	lr

080150ae <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80150ae:	b590      	push	{r4, r7, lr}
 80150b0:	b085      	sub	sp, #20
 80150b2:	af00      	add	r7, sp, #0
 80150b4:	60f8      	str	r0, [r7, #12]
 80150b6:	60b9      	str	r1, [r7, #8]
 80150b8:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80150ba:	6878      	ldr	r0, [r7, #4]
 80150bc:	f7ff ffec 	bl	8015098 <_ZSt7forwardIRKP8IXFEventEOT_RNSt16remove_referenceIS4_E4typeE>
 80150c0:	4603      	mov	r3, r0
 80150c2:	681c      	ldr	r4, [r3, #0]
 80150c4:	68bb      	ldr	r3, [r7, #8]
 80150c6:	4619      	mov	r1, r3
 80150c8:	2004      	movs	r0, #4
 80150ca:	f7f2 fad5 	bl	8007678 <_ZnwjPv>
 80150ce:	4603      	mov	r3, r0
 80150d0:	601c      	str	r4, [r3, #0]
 80150d2:	bf00      	nop
 80150d4:	3714      	adds	r7, #20
 80150d6:	46bd      	mov	sp, r7
 80150d8:	bd90      	pop	{r4, r7, pc}

080150da <_ZNKSt5dequeIP8IXFEventSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80150da:	b580      	push	{r7, lr}
 80150dc:	b082      	sub	sp, #8
 80150de:	af00      	add	r7, sp, #0
 80150e0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	f103 0218 	add.w	r2, r3, #24
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	3308      	adds	r3, #8
 80150ec:	4619      	mov	r1, r3
 80150ee:	4610      	mov	r0, r2
 80150f0:	f000 f900 	bl	80152f4 <_ZStmiIP8IXFEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
 80150f4:	4603      	mov	r3, r0
 80150f6:	4618      	mov	r0, r3
 80150f8:	3708      	adds	r7, #8
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bd80      	pop	{r7, pc}

080150fe <_ZNKSt5dequeIP8IXFEventSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80150fe:	b580      	push	{r7, lr}
 8015100:	b082      	sub	sp, #8
 8015102:	af00      	add	r7, sp, #0
 8015104:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	4618      	mov	r0, r3
 801510a:	f000 f8c3 	bl	8015294 <_ZNKSt11_Deque_baseIP8IXFEventSaIS1_EE19_M_get_Tp_allocatorEv>
 801510e:	4603      	mov	r3, r0
 8015110:	4618      	mov	r0, r3
 8015112:	f000 f913 	bl	801533c <_ZNSt5dequeIP8IXFEventSaIS1_EE11_S_max_sizeERKS2_>
 8015116:	4603      	mov	r3, r0
 8015118:	4618      	mov	r0, r3
 801511a:	3708      	adds	r7, #8
 801511c:	46bd      	mov	sp, r7
 801511e:	bd80      	pop	{r7, pc}

08015120 <_ZNSt5dequeIP8IXFEventSaIS1_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8015120:	b580      	push	{r7, lr}
 8015122:	b082      	sub	sp, #8
 8015124:	af00      	add	r7, sp, #0
 8015126:	6078      	str	r0, [r7, #4]
 8015128:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 801512a:	683b      	ldr	r3, [r7, #0]
 801512c:	1c5a      	adds	r2, r3, #1
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8015132:	6879      	ldr	r1, [r7, #4]
 8015134:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8015136:	6879      	ldr	r1, [r7, #4]
 8015138:	6809      	ldr	r1, [r1, #0]
 801513a:	1a41      	subs	r1, r0, r1
 801513c:	1089      	asrs	r1, r1, #2
 801513e:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8015140:	429a      	cmp	r2, r3
 8015142:	d904      	bls.n	801514e <_ZNSt5dequeIP8IXFEventSaIS1_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8015144:	2200      	movs	r2, #0
 8015146:	6839      	ldr	r1, [r7, #0]
 8015148:	6878      	ldr	r0, [r7, #4]
 801514a:	f000 f911 	bl	8015370 <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb>
      }
 801514e:	bf00      	nop
 8015150:	3708      	adds	r7, #8
 8015152:	46bd      	mov	sp, r7
 8015154:	bd80      	pop	{r7, pc}

08015156 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8015156:	b590      	push	{r4, r7, lr}
 8015158:	b083      	sub	sp, #12
 801515a:	af00      	add	r7, sp, #0
 801515c:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 801515e:	687c      	ldr	r4, [r7, #4]
 8015160:	2004      	movs	r0, #4
 8015162:	f7ff fb0d 	bl	8014780 <_ZSt16__deque_buf_sizej>
 8015166:	4603      	mov	r3, r0
 8015168:	4619      	mov	r1, r3
 801516a:	4620      	mov	r0, r4
 801516c:	f000 f99a 	bl	80154a4 <_ZNSt16allocator_traitsISaIP8IXFEventEE8allocateERS2_j>
 8015170:	4603      	mov	r3, r0
      }
 8015172:	4618      	mov	r0, r3
 8015174:	370c      	adds	r7, #12
 8015176:	46bd      	mov	sp, r7
 8015178:	bd90      	pop	{r4, r7, pc}

0801517a <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 801517a:	b590      	push	{r4, r7, lr}
 801517c:	b083      	sub	sp, #12
 801517e:	af00      	add	r7, sp, #0
 8015180:	6078      	str	r0, [r7, #4]
 8015182:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	683a      	ldr	r2, [r7, #0]
 8015188:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 801518a:	683b      	ldr	r3, [r7, #0]
 801518c:	681a      	ldr	r2, [r3, #0]
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	685c      	ldr	r4, [r3, #4]
 8015196:	f000 f994 	bl	80154c2 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E14_S_buffer_sizeEv>
 801519a:	4603      	mov	r3, r0
 801519c:	009b      	lsls	r3, r3, #2
 801519e:	18e2      	adds	r2, r4, r3
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	609a      	str	r2, [r3, #8]
      }
 80151a4:	bf00      	nop
 80151a6:	370c      	adds	r7, #12
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd90      	pop	{r4, r7, pc}

080151ac <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE7destroyIS2_EEvPT_>:
	destroy(_Up* __p)
 80151ac:	b480      	push	{r7}
 80151ae:	b083      	sub	sp, #12
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	6078      	str	r0, [r7, #4]
 80151b4:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 80151b6:	bf00      	nop
 80151b8:	370c      	adds	r7, #12
 80151ba:	46bd      	mov	sp, r7
 80151bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c0:	4770      	bx	lr

080151c2 <_ZNSaIP8IXFEventEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80151c2:	b580      	push	{r7, lr}
 80151c4:	b082      	sub	sp, #8
 80151c6:	af00      	add	r7, sp, #0
 80151c8:	6078      	str	r0, [r7, #4]
 80151ca:	6878      	ldr	r0, [r7, #4]
 80151cc:	f000 f981 	bl	80154d2 <_ZN9__gnu_cxx13new_allocatorIP8IXFEventEC1Ev>
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	4618      	mov	r0, r3
 80151d4:	3708      	adds	r7, #8
 80151d6:	46bd      	mov	sp, r7
 80151d8:	bd80      	pop	{r7, pc}

080151da <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80151da:	b480      	push	{r7}
 80151dc:	b083      	sub	sp, #12
 80151de:	af00      	add	r7, sp, #0
 80151e0:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	2200      	movs	r2, #0
 80151e6:	601a      	str	r2, [r3, #0]
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	2200      	movs	r2, #0
 80151ec:	605a      	str	r2, [r3, #4]
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	2200      	movs	r2, #0
 80151f2:	609a      	str	r2, [r3, #8]
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	2200      	movs	r2, #0
 80151f8:	60da      	str	r2, [r3, #12]
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	4618      	mov	r0, r3
 80151fe:	370c      	adds	r7, #12
 8015200:	46bd      	mov	sp, r7
 8015202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015206:	4770      	bx	lr

08015208 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8015208:	b590      	push	{r4, r7, lr}
 801520a:	b085      	sub	sp, #20
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
 8015210:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8015212:	f107 030c 	add.w	r3, r7, #12
 8015216:	6879      	ldr	r1, [r7, #4]
 8015218:	4618      	mov	r0, r3
 801521a:	f7ff ff11 	bl	8015040 <_ZNKSt11_Deque_baseIP8IXFEventSaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 801521e:	f107 030c 	add.w	r3, r7, #12
 8015222:	6839      	ldr	r1, [r7, #0]
 8015224:	4618      	mov	r0, r3
 8015226:	f000 f95f 	bl	80154e8 <_ZNSt16allocator_traitsISaIPP8IXFEventEE8allocateERS3_j>
 801522a:	4604      	mov	r4, r0
 801522c:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 801522e:	f107 030c 	add.w	r3, r7, #12
 8015232:	4618      	mov	r0, r3
 8015234:	f7ff ff15 	bl	8015062 <_ZNSaIPP8IXFEventED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8015238:	4623      	mov	r3, r4
      }
 801523a:	4618      	mov	r0, r3
 801523c:	3714      	adds	r7, #20
 801523e:	46bd      	mov	sp, r7
 8015240:	bd90      	pop	{r4, r7, pc}

08015242 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8015242:	b580      	push	{r7, lr}
 8015244:	b086      	sub	sp, #24
 8015246:	af00      	add	r7, sp, #0
 8015248:	60f8      	str	r0, [r7, #12]
 801524a:	60b9      	str	r1, [r7, #8]
 801524c:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 801524e:	68bb      	ldr	r3, [r7, #8]
 8015250:	617b      	str	r3, [r7, #20]
 8015252:	697a      	ldr	r2, [r7, #20]
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	429a      	cmp	r2, r3
 8015258:	d209      	bcs.n	801526e <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE15_M_create_nodesEPPS1_S5_+0x2c>
	    *__cur = this->_M_allocate_node();
 801525a:	68f8      	ldr	r0, [r7, #12]
 801525c:	f7ff ff7b 	bl	8015156 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE16_M_allocate_nodeEv>
 8015260:	4602      	mov	r2, r0
 8015262:	697b      	ldr	r3, [r7, #20]
 8015264:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8015266:	697b      	ldr	r3, [r7, #20]
 8015268:	3304      	adds	r3, #4
 801526a:	617b      	str	r3, [r7, #20]
 801526c:	e7f1      	b.n	8015252 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 801526e:	bf00      	nop
 8015270:	3718      	adds	r7, #24
 8015272:	46bd      	mov	sp, r7
 8015274:	bd80      	pop	{r7, pc}

08015276 <_ZNSt16allocator_traitsISaIP8IXFEventEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8015276:	b580      	push	{r7, lr}
 8015278:	b084      	sub	sp, #16
 801527a:	af00      	add	r7, sp, #0
 801527c:	60f8      	str	r0, [r7, #12]
 801527e:	60b9      	str	r1, [r7, #8]
 8015280:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8015282:	687a      	ldr	r2, [r7, #4]
 8015284:	68b9      	ldr	r1, [r7, #8]
 8015286:	68f8      	ldr	r0, [r7, #12]
 8015288:	f000 f93d 	bl	8015506 <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE10deallocateEPS2_j>
 801528c:	bf00      	nop
 801528e:	3710      	adds	r7, #16
 8015290:	46bd      	mov	sp, r7
 8015292:	bd80      	pop	{r7, pc}

08015294 <_ZNKSt11_Deque_baseIP8IXFEventSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8015294:	b480      	push	{r7}
 8015296:	b083      	sub	sp, #12
 8015298:	af00      	add	r7, sp, #0
 801529a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	4618      	mov	r0, r3
 80152a0:	370c      	adds	r7, #12
 80152a2:	46bd      	mov	sp, r7
 80152a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a8:	4770      	bx	lr

080152aa <_ZNSaIPP8IXFEventEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80152aa:	b580      	push	{r7, lr}
 80152ac:	b082      	sub	sp, #8
 80152ae:	af00      	add	r7, sp, #0
 80152b0:	6078      	str	r0, [r7, #4]
 80152b2:	6039      	str	r1, [r7, #0]
 80152b4:	6878      	ldr	r0, [r7, #4]
 80152b6:	f000 f933 	bl	8015520 <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventEC1Ev>
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	4618      	mov	r0, r3
 80152be:	3708      	adds	r7, #8
 80152c0:	46bd      	mov	sp, r7
 80152c2:	bd80      	pop	{r7, pc}

080152c4 <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80152c4:	b480      	push	{r7}
 80152c6:	b083      	sub	sp, #12
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	6078      	str	r0, [r7, #4]
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	4618      	mov	r0, r3
 80152d0:	370c      	adds	r7, #12
 80152d2:	46bd      	mov	sp, r7
 80152d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d8:	4770      	bx	lr

080152da <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventE10deallocateEPS3_j>:
      deallocate(pointer __p, size_type)
 80152da:	b580      	push	{r7, lr}
 80152dc:	b084      	sub	sp, #16
 80152de:	af00      	add	r7, sp, #0
 80152e0:	60f8      	str	r0, [r7, #12]
 80152e2:	60b9      	str	r1, [r7, #8]
 80152e4:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80152e6:	68b8      	ldr	r0, [r7, #8]
 80152e8:	f001 f8b8 	bl	801645c <_ZdlPv>
      }
 80152ec:	bf00      	nop
 80152ee:	3710      	adds	r7, #16
 80152f0:	46bd      	mov	sp, r7
 80152f2:	bd80      	pop	{r7, pc}

080152f4 <_ZStmiIP8IXFEventRS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>:
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b082      	sub	sp, #8
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
 80152fc:	6039      	str	r1, [r7, #0]
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
 80152fe:	f000 f8e0 	bl	80154c2 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E14_S_buffer_sizeEv>
 8015302:	4603      	mov	r3, r0
 8015304:	4619      	mov	r1, r3
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	68da      	ldr	r2, [r3, #12]
 801530a:	683b      	ldr	r3, [r7, #0]
 801530c:	68db      	ldr	r3, [r3, #12]
 801530e:	1ad3      	subs	r3, r2, r3
 8015310:	109b      	asrs	r3, r3, #2
 8015312:	3b01      	subs	r3, #1
 8015314:	fb03 f301 	mul.w	r3, r3, r1
 8015318:	687a      	ldr	r2, [r7, #4]
 801531a:	6811      	ldr	r1, [r2, #0]
 801531c:	687a      	ldr	r2, [r7, #4]
 801531e:	6852      	ldr	r2, [r2, #4]
 8015320:	1a8a      	subs	r2, r1, r2
 8015322:	1092      	asrs	r2, r2, #2
 8015324:	4413      	add	r3, r2
	+ (__y._M_last - __y._M_cur);
 8015326:	683a      	ldr	r2, [r7, #0]
 8015328:	6891      	ldr	r1, [r2, #8]
 801532a:	683a      	ldr	r2, [r7, #0]
 801532c:	6812      	ldr	r2, [r2, #0]
 801532e:	1a8a      	subs	r2, r1, r2
 8015330:	1092      	asrs	r2, r2, #2
 8015332:	4413      	add	r3, r2
    }
 8015334:	4618      	mov	r0, r3
 8015336:	3708      	adds	r7, #8
 8015338:	46bd      	mov	sp, r7
 801533a:	bd80      	pop	{r7, pc}

0801533c <_ZNSt5dequeIP8IXFEventSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 801533c:	b580      	push	{r7, lr}
 801533e:	b084      	sub	sp, #16
 8015340:	af00      	add	r7, sp, #0
 8015342:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8015344:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015348:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 801534a:	6878      	ldr	r0, [r7, #4]
 801534c:	f000 f8f3 	bl	8015536 <_ZNSt16allocator_traitsISaIP8IXFEventEE8max_sizeERKS2_>
 8015350:	4603      	mov	r3, r0
 8015352:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8015354:	f107 0208 	add.w	r2, r7, #8
 8015358:	f107 030c 	add.w	r3, r7, #12
 801535c:	4611      	mov	r1, r2
 801535e:	4618      	mov	r0, r3
 8015360:	f7f5 fbc5 	bl	800aaee <_ZSt3minIjERKT_S2_S2_>
 8015364:	4603      	mov	r3, r0
 8015366:	681b      	ldr	r3, [r3, #0]
      }
 8015368:	4618      	mov	r0, r3
 801536a:	3710      	adds	r7, #16
 801536c:	46bd      	mov	sp, r7
 801536e:	bd80      	pop	{r7, pc}

08015370 <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8015370:	b590      	push	{r4, r7, lr}
 8015372:	b08b      	sub	sp, #44	; 0x2c
 8015374:	af00      	add	r7, sp, #0
 8015376:	60f8      	str	r0, [r7, #12]
 8015378:	60b9      	str	r1, [r7, #8]
 801537a:	4613      	mov	r3, r2
 801537c:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	695b      	ldr	r3, [r3, #20]
 8015386:	1ad3      	subs	r3, r2, r3
 8015388:	109b      	asrs	r3, r3, #2
 801538a:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 801538c:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 801538e:	68bb      	ldr	r3, [r7, #8]
 8015390:	6a3a      	ldr	r2, [r7, #32]
 8015392:	4413      	add	r3, r2
 8015394:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	685a      	ldr	r2, [r3, #4]
 801539a:	69fb      	ldr	r3, [r7, #28]
 801539c:	005b      	lsls	r3, r3, #1
 801539e:	429a      	cmp	r2, r3
 80153a0:	d92d      	bls.n	80153fe <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	681a      	ldr	r2, [r3, #0]
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 80153aa:	69fb      	ldr	r3, [r7, #28]
 80153ac:	1acb      	subs	r3, r1, r3
 80153ae:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80153b0:	0099      	lsls	r1, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 80153b2:	79fb      	ldrb	r3, [r7, #7]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d002      	beq.n	80153be <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb+0x4e>
 80153b8:	68bb      	ldr	r3, [r7, #8]
 80153ba:	009b      	lsls	r3, r3, #2
 80153bc:	e000      	b.n	80153c0 <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb+0x50>
 80153be:	2300      	movs	r3, #0
 80153c0:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80153c2:	4413      	add	r3, r2
 80153c4:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	695b      	ldr	r3, [r3, #20]
 80153ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80153cc:	429a      	cmp	r2, r3
 80153ce:	d209      	bcs.n	80153e4 <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 80153d8:	3304      	adds	r3, #4
 80153da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80153dc:	4619      	mov	r1, r3
 80153de:	f000 f8b6 	bl	801554e <_ZSt4copyIPPP8IXFEventS3_ET0_T_S5_S4_>
 80153e2:	e048      	b.n	8015476 <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80153ec:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 80153ee:	6a3b      	ldr	r3, [r7, #32]
 80153f0:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80153f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80153f4:	4413      	add	r3, r2
 80153f6:	461a      	mov	r2, r3
 80153f8:	f000 f8c1 	bl	801557e <_ZSt13copy_backwardIPPP8IXFEventS3_ET0_T_S5_S4_>
 80153fc:	e03b      	b.n	8015476 <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	685c      	ldr	r4, [r3, #4]
	                             + std::max(this->_M_impl._M_map_size,
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	3304      	adds	r3, #4
 8015406:	f107 0208 	add.w	r2, r7, #8
 801540a:	4611      	mov	r1, r2
 801540c:	4618      	mov	r0, r3
 801540e:	f7f5 fa97 	bl	800a940 <_ZSt3maxIjERKT_S2_S2_>
 8015412:	4603      	mov	r3, r0
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8015418:	3302      	adds	r3, #2
 801541a:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	69b9      	ldr	r1, [r7, #24]
 8015420:	4618      	mov	r0, r3
 8015422:	f7ff fef1 	bl	8015208 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE15_M_allocate_mapEj>
 8015426:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8015428:	69ba      	ldr	r2, [r7, #24]
 801542a:	69fb      	ldr	r3, [r7, #28]
 801542c:	1ad3      	subs	r3, r2, r3
 801542e:	085b      	lsrs	r3, r3, #1
 8015430:	009a      	lsls	r2, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8015432:	79fb      	ldrb	r3, [r7, #7]
 8015434:	2b00      	cmp	r3, #0
 8015436:	d002      	beq.n	801543e <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb+0xce>
 8015438:	68bb      	ldr	r3, [r7, #8]
 801543a:	009b      	lsls	r3, r3, #2
 801543c:	e000      	b.n	8015440 <_ZNSt5dequeIP8IXFEventSaIS1_EE17_M_reallocate_mapEjb+0xd0>
 801543e:	2300      	movs	r3, #0
 8015440:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8015442:	697a      	ldr	r2, [r7, #20]
 8015444:	4413      	add	r3, r2
 8015446:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8015450:	3304      	adds	r3, #4
 8015452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015454:	4619      	mov	r1, r3
 8015456:	f000 f87a 	bl	801554e <_ZSt4copyIPPP8IXFEventS3_ET0_T_S5_S4_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 801545a:	68f8      	ldr	r0, [r7, #12]
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	6819      	ldr	r1, [r3, #0]
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	685b      	ldr	r3, [r3, #4]
 8015464:	461a      	mov	r2, r3
 8015466:	f7ff fc85 	bl	8014d74 <_ZNSt11_Deque_baseIP8IXFEventSaIS1_EE17_M_deallocate_mapEPPS1_j>

	  this->_M_impl._M_map = __new_map;
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	697a      	ldr	r2, [r7, #20]
 801546e:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	69ba      	ldr	r2, [r7, #24]
 8015474:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	3308      	adds	r3, #8
 801547a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801547c:	4618      	mov	r0, r3
 801547e:	f7ff fe7c 	bl	801517a <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	f103 0018 	add.w	r0, r3, #24
 8015488:	6a3b      	ldr	r3, [r7, #32]
 801548a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801548e:	3b01      	subs	r3, #1
 8015490:	009b      	lsls	r3, r3, #2
 8015492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015494:	4413      	add	r3, r2
 8015496:	4619      	mov	r1, r3
 8015498:	f7ff fe6f 	bl	801517a <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E11_M_set_nodeEPS3_>
    }
 801549c:	bf00      	nop
 801549e:	372c      	adds	r7, #44	; 0x2c
 80154a0:	46bd      	mov	sp, r7
 80154a2:	bd90      	pop	{r4, r7, pc}

080154a4 <_ZNSt16allocator_traitsISaIP8IXFEventEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b082      	sub	sp, #8
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	6078      	str	r0, [r7, #4]
 80154ac:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80154ae:	2200      	movs	r2, #0
 80154b0:	6839      	ldr	r1, [r7, #0]
 80154b2:	6878      	ldr	r0, [r7, #4]
 80154b4:	f000 f87b 	bl	80155ae <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE8allocateEjPKv>
 80154b8:	4603      	mov	r3, r0
 80154ba:	4618      	mov	r0, r3
 80154bc:	3708      	adds	r7, #8
 80154be:	46bd      	mov	sp, r7
 80154c0:	bd80      	pop	{r7, pc}

080154c2 <_ZNSt15_Deque_iteratorIP8IXFEventRS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80154c2:	b580      	push	{r7, lr}
 80154c4:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80154c6:	2004      	movs	r0, #4
 80154c8:	f7ff f95a 	bl	8014780 <_ZSt16__deque_buf_sizej>
 80154cc:	4603      	mov	r3, r0
 80154ce:	4618      	mov	r0, r3
 80154d0:	bd80      	pop	{r7, pc}

080154d2 <_ZN9__gnu_cxx13new_allocatorIP8IXFEventEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80154d2:	b480      	push	{r7}
 80154d4:	b083      	sub	sp, #12
 80154d6:	af00      	add	r7, sp, #0
 80154d8:	6078      	str	r0, [r7, #4]
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	4618      	mov	r0, r3
 80154de:	370c      	adds	r7, #12
 80154e0:	46bd      	mov	sp, r7
 80154e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e6:	4770      	bx	lr

080154e8 <_ZNSt16allocator_traitsISaIPP8IXFEventEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b082      	sub	sp, #8
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	6078      	str	r0, [r7, #4]
 80154f0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80154f2:	2200      	movs	r2, #0
 80154f4:	6839      	ldr	r1, [r7, #0]
 80154f6:	6878      	ldr	r0, [r7, #4]
 80154f8:	f000 f877 	bl	80155ea <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventE8allocateEjPKv>
 80154fc:	4603      	mov	r3, r0
 80154fe:	4618      	mov	r0, r3
 8015500:	3708      	adds	r7, #8
 8015502:	46bd      	mov	sp, r7
 8015504:	bd80      	pop	{r7, pc}

08015506 <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8015506:	b580      	push	{r7, lr}
 8015508:	b084      	sub	sp, #16
 801550a:	af00      	add	r7, sp, #0
 801550c:	60f8      	str	r0, [r7, #12]
 801550e:	60b9      	str	r1, [r7, #8]
 8015510:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8015512:	68b8      	ldr	r0, [r7, #8]
 8015514:	f000 ffa2 	bl	801645c <_ZdlPv>
      }
 8015518:	bf00      	nop
 801551a:	3710      	adds	r7, #16
 801551c:	46bd      	mov	sp, r7
 801551e:	bd80      	pop	{r7, pc}

08015520 <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8015520:	b480      	push	{r7}
 8015522:	b083      	sub	sp, #12
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	4618      	mov	r0, r3
 801552c:	370c      	adds	r7, #12
 801552e:	46bd      	mov	sp, r7
 8015530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015534:	4770      	bx	lr

08015536 <_ZNSt16allocator_traitsISaIP8IXFEventEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8015536:	b580      	push	{r7, lr}
 8015538:	b082      	sub	sp, #8
 801553a:	af00      	add	r7, sp, #0
 801553c:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 801553e:	6878      	ldr	r0, [r7, #4]
 8015540:	f000 f871 	bl	8015626 <_ZNK9__gnu_cxx13new_allocatorIP8IXFEventE8max_sizeEv>
 8015544:	4603      	mov	r3, r0
 8015546:	4618      	mov	r0, r3
 8015548:	3708      	adds	r7, #8
 801554a:	46bd      	mov	sp, r7
 801554c:	bd80      	pop	{r7, pc}

0801554e <_ZSt4copyIPPP8IXFEventS3_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 801554e:	b590      	push	{r4, r7, lr}
 8015550:	b085      	sub	sp, #20
 8015552:	af00      	add	r7, sp, #0
 8015554:	60f8      	str	r0, [r7, #12]
 8015556:	60b9      	str	r1, [r7, #8]
 8015558:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 801555a:	68f8      	ldr	r0, [r7, #12]
 801555c:	f000 f86f 	bl	801563e <_ZSt12__miter_baseIPPP8IXFEventET_S4_>
 8015560:	4604      	mov	r4, r0
 8015562:	68b8      	ldr	r0, [r7, #8]
 8015564:	f000 f86b 	bl	801563e <_ZSt12__miter_baseIPPP8IXFEventET_S4_>
 8015568:	4603      	mov	r3, r0
 801556a:	687a      	ldr	r2, [r7, #4]
 801556c:	4619      	mov	r1, r3
 801556e:	4620      	mov	r0, r4
 8015570:	f000 f870 	bl	8015654 <_ZSt14__copy_move_a2ILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>
 8015574:	4603      	mov	r3, r0
    }
 8015576:	4618      	mov	r0, r3
 8015578:	3714      	adds	r7, #20
 801557a:	46bd      	mov	sp, r7
 801557c:	bd90      	pop	{r4, r7, pc}

0801557e <_ZSt13copy_backwardIPPP8IXFEventS3_ET0_T_S5_S4_>:
   *  Result may not be in the range (first,last].  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 801557e:	b590      	push	{r4, r7, lr}
 8015580:	b085      	sub	sp, #20
 8015582:	af00      	add	r7, sp, #0
 8015584:	60f8      	str	r0, [r7, #12]
 8015586:	60b9      	str	r1, [r7, #8]
 8015588:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 801558a:	68f8      	ldr	r0, [r7, #12]
 801558c:	f000 f857 	bl	801563e <_ZSt12__miter_baseIPPP8IXFEventET_S4_>
 8015590:	4604      	mov	r4, r0
 8015592:	68b8      	ldr	r0, [r7, #8]
 8015594:	f000 f853 	bl	801563e <_ZSt12__miter_baseIPPP8IXFEventET_S4_>
 8015598:	4603      	mov	r3, r0
 801559a:	687a      	ldr	r2, [r7, #4]
 801559c:	4619      	mov	r1, r3
 801559e:	4620      	mov	r0, r4
 80155a0:	f000 f87b 	bl	801569a <_ZSt23__copy_move_backward_a2ILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>
 80155a4:	4603      	mov	r3, r0
    }
 80155a6:	4618      	mov	r0, r3
 80155a8:	3714      	adds	r7, #20
 80155aa:	46bd      	mov	sp, r7
 80155ac:	bd90      	pop	{r4, r7, pc}

080155ae <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80155ae:	b580      	push	{r7, lr}
 80155b0:	b084      	sub	sp, #16
 80155b2:	af00      	add	r7, sp, #0
 80155b4:	60f8      	str	r0, [r7, #12]
 80155b6:	60b9      	str	r1, [r7, #8]
 80155b8:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80155ba:	68f8      	ldr	r0, [r7, #12]
 80155bc:	f000 f833 	bl	8015626 <_ZNK9__gnu_cxx13new_allocatorIP8IXFEventE8max_sizeEv>
 80155c0:	4602      	mov	r2, r0
 80155c2:	68bb      	ldr	r3, [r7, #8]
 80155c4:	4293      	cmp	r3, r2
 80155c6:	bf8c      	ite	hi
 80155c8:	2301      	movhi	r3, #1
 80155ca:	2300      	movls	r3, #0
 80155cc:	b2db      	uxtb	r3, r3
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d001      	beq.n	80155d6 <_ZN9__gnu_cxx13new_allocatorIP8IXFEventE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80155d2:	f000 ff7c 	bl	80164ce <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80155d6:	68bb      	ldr	r3, [r7, #8]
 80155d8:	009b      	lsls	r3, r3, #2
 80155da:	4618      	mov	r0, r3
 80155dc:	f000 ff53 	bl	8016486 <_Znwj>
 80155e0:	4603      	mov	r3, r0
      }
 80155e2:	4618      	mov	r0, r3
 80155e4:	3710      	adds	r7, #16
 80155e6:	46bd      	mov	sp, r7
 80155e8:	bd80      	pop	{r7, pc}

080155ea <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80155ea:	b580      	push	{r7, lr}
 80155ec:	b084      	sub	sp, #16
 80155ee:	af00      	add	r7, sp, #0
 80155f0:	60f8      	str	r0, [r7, #12]
 80155f2:	60b9      	str	r1, [r7, #8]
 80155f4:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80155f6:	68f8      	ldr	r0, [r7, #12]
 80155f8:	f000 f872 	bl	80156e0 <_ZNK9__gnu_cxx13new_allocatorIPP8IXFEventE8max_sizeEv>
 80155fc:	4602      	mov	r2, r0
 80155fe:	68bb      	ldr	r3, [r7, #8]
 8015600:	4293      	cmp	r3, r2
 8015602:	bf8c      	ite	hi
 8015604:	2301      	movhi	r3, #1
 8015606:	2300      	movls	r3, #0
 8015608:	b2db      	uxtb	r3, r3
 801560a:	2b00      	cmp	r3, #0
 801560c:	d001      	beq.n	8015612 <_ZN9__gnu_cxx13new_allocatorIPP8IXFEventE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801560e:	f000 ff5e 	bl	80164ce <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015612:	68bb      	ldr	r3, [r7, #8]
 8015614:	009b      	lsls	r3, r3, #2
 8015616:	4618      	mov	r0, r3
 8015618:	f000 ff35 	bl	8016486 <_Znwj>
 801561c:	4603      	mov	r3, r0
      }
 801561e:	4618      	mov	r0, r3
 8015620:	3710      	adds	r7, #16
 8015622:	46bd      	mov	sp, r7
 8015624:	bd80      	pop	{r7, pc}

08015626 <_ZNK9__gnu_cxx13new_allocatorIP8IXFEventE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8015626:	b480      	push	{r7}
 8015628:	b083      	sub	sp, #12
 801562a:	af00      	add	r7, sp, #0
 801562c:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801562e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8015632:	4618      	mov	r0, r3
 8015634:	370c      	adds	r7, #12
 8015636:	46bd      	mov	sp, r7
 8015638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801563c:	4770      	bx	lr

0801563e <_ZSt12__miter_baseIPPP8IXFEventET_S4_>:
    __miter_base(_Iterator __it)
 801563e:	b480      	push	{r7}
 8015640:	b083      	sub	sp, #12
 8015642:	af00      	add	r7, sp, #0
 8015644:	6078      	str	r0, [r7, #4]
    { return __it; }
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	4618      	mov	r0, r3
 801564a:	370c      	adds	r7, #12
 801564c:	46bd      	mov	sp, r7
 801564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015652:	4770      	bx	lr

08015654 <_ZSt14__copy_move_a2ILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8015654:	b5b0      	push	{r4, r5, r7, lr}
 8015656:	b084      	sub	sp, #16
 8015658:	af00      	add	r7, sp, #0
 801565a:	60f8      	str	r0, [r7, #12]
 801565c:	60b9      	str	r1, [r7, #8]
 801565e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8015660:	68f8      	ldr	r0, [r7, #12]
 8015662:	f000 f849 	bl	80156f8 <_ZSt12__niter_baseIPPP8IXFEventET_S4_>
 8015666:	4604      	mov	r4, r0
 8015668:	68b8      	ldr	r0, [r7, #8]
 801566a:	f000 f845 	bl	80156f8 <_ZSt12__niter_baseIPPP8IXFEventET_S4_>
 801566e:	4605      	mov	r5, r0
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	4618      	mov	r0, r3
 8015674:	f000 f840 	bl	80156f8 <_ZSt12__niter_baseIPPP8IXFEventET_S4_>
 8015678:	4603      	mov	r3, r0
 801567a:	461a      	mov	r2, r3
 801567c:	4629      	mov	r1, r5
 801567e:	4620      	mov	r0, r4
 8015680:	f000 f845 	bl	801570e <_ZSt13__copy_move_aILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>
 8015684:	4602      	mov	r2, r0
 8015686:	1d3b      	adds	r3, r7, #4
 8015688:	4611      	mov	r1, r2
 801568a:	4618      	mov	r0, r3
 801568c:	f000 f851 	bl	8015732 <_ZSt12__niter_wrapIPPP8IXFEventET_RKS4_S4_>
 8015690:	4603      	mov	r3, r0
    }
 8015692:	4618      	mov	r0, r3
 8015694:	3710      	adds	r7, #16
 8015696:	46bd      	mov	sp, r7
 8015698:	bdb0      	pop	{r4, r5, r7, pc}

0801569a <_ZSt23__copy_move_backward_a2ILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 801569a:	b5b0      	push	{r4, r5, r7, lr}
 801569c:	b084      	sub	sp, #16
 801569e:	af00      	add	r7, sp, #0
 80156a0:	60f8      	str	r0, [r7, #12]
 80156a2:	60b9      	str	r1, [r7, #8]
 80156a4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80156a6:	68f8      	ldr	r0, [r7, #12]
 80156a8:	f000 f826 	bl	80156f8 <_ZSt12__niter_baseIPPP8IXFEventET_S4_>
 80156ac:	4604      	mov	r4, r0
 80156ae:	68b8      	ldr	r0, [r7, #8]
 80156b0:	f000 f822 	bl	80156f8 <_ZSt12__niter_baseIPPP8IXFEventET_S4_>
 80156b4:	4605      	mov	r5, r0
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	4618      	mov	r0, r3
 80156ba:	f000 f81d 	bl	80156f8 <_ZSt12__niter_baseIPPP8IXFEventET_S4_>
 80156be:	4603      	mov	r3, r0
 80156c0:	461a      	mov	r2, r3
 80156c2:	4629      	mov	r1, r5
 80156c4:	4620      	mov	r0, r4
 80156c6:	f000 f840 	bl	801574a <_ZSt22__copy_move_backward_aILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>
 80156ca:	4602      	mov	r2, r0
 80156cc:	1d3b      	adds	r3, r7, #4
 80156ce:	4611      	mov	r1, r2
 80156d0:	4618      	mov	r0, r3
 80156d2:	f000 f82e 	bl	8015732 <_ZSt12__niter_wrapIPPP8IXFEventET_RKS4_S4_>
 80156d6:	4603      	mov	r3, r0
    }
 80156d8:	4618      	mov	r0, r3
 80156da:	3710      	adds	r7, #16
 80156dc:	46bd      	mov	sp, r7
 80156de:	bdb0      	pop	{r4, r5, r7, pc}

080156e0 <_ZNK9__gnu_cxx13new_allocatorIPP8IXFEventE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80156e0:	b480      	push	{r7}
 80156e2:	b083      	sub	sp, #12
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80156e8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80156ec:	4618      	mov	r0, r3
 80156ee:	370c      	adds	r7, #12
 80156f0:	46bd      	mov	sp, r7
 80156f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f6:	4770      	bx	lr

080156f8 <_ZSt12__niter_baseIPPP8IXFEventET_S4_>:
    __niter_base(_Iterator __it)
 80156f8:	b480      	push	{r7}
 80156fa:	b083      	sub	sp, #12
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
    { return __it; }
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	4618      	mov	r0, r3
 8015704:	370c      	adds	r7, #12
 8015706:	46bd      	mov	sp, r7
 8015708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801570c:	4770      	bx	lr

0801570e <_ZSt13__copy_move_aILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 801570e:	b580      	push	{r7, lr}
 8015710:	b086      	sub	sp, #24
 8015712:	af00      	add	r7, sp, #0
 8015714:	60f8      	str	r0, [r7, #12]
 8015716:	60b9      	str	r1, [r7, #8]
 8015718:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 801571a:	2301      	movs	r3, #1
 801571c:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 801571e:	687a      	ldr	r2, [r7, #4]
 8015720:	68b9      	ldr	r1, [r7, #8]
 8015722:	68f8      	ldr	r0, [r7, #12]
 8015724:	f000 f823 	bl	801576e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPP8IXFEventEEPT_PKS6_S9_S7_>
 8015728:	4603      	mov	r3, r0
    }
 801572a:	4618      	mov	r0, r3
 801572c:	3718      	adds	r7, #24
 801572e:	46bd      	mov	sp, r7
 8015730:	bd80      	pop	{r7, pc}

08015732 <_ZSt12__niter_wrapIPPP8IXFEventET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8015732:	b480      	push	{r7}
 8015734:	b083      	sub	sp, #12
 8015736:	af00      	add	r7, sp, #0
 8015738:	6078      	str	r0, [r7, #4]
 801573a:	6039      	str	r1, [r7, #0]
    { return __res; }
 801573c:	683b      	ldr	r3, [r7, #0]
 801573e:	4618      	mov	r0, r3
 8015740:	370c      	adds	r7, #12
 8015742:	46bd      	mov	sp, r7
 8015744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015748:	4770      	bx	lr

0801574a <_ZSt22__copy_move_backward_aILb0EPPP8IXFEventS3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 801574a:	b580      	push	{r7, lr}
 801574c:	b086      	sub	sp, #24
 801574e:	af00      	add	r7, sp, #0
 8015750:	60f8      	str	r0, [r7, #12]
 8015752:	60b9      	str	r1, [r7, #8]
 8015754:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueType1)
 8015756:	2301      	movs	r3, #1
 8015758:	75fb      	strb	r3, [r7, #23]
				       _Category>::__copy_move_b(__first,
 801575a:	687a      	ldr	r2, [r7, #4]
 801575c:	68b9      	ldr	r1, [r7, #8]
 801575e:	68f8      	ldr	r0, [r7, #12]
 8015760:	f000 f822 	bl	80157a8 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPP8IXFEventEEPT_PKS6_S9_S7_>
 8015764:	4603      	mov	r3, r0
    }
 8015766:	4618      	mov	r0, r3
 8015768:	3718      	adds	r7, #24
 801576a:	46bd      	mov	sp, r7
 801576c:	bd80      	pop	{r7, pc}

0801576e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPP8IXFEventEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 801576e:	b580      	push	{r7, lr}
 8015770:	b086      	sub	sp, #24
 8015772:	af00      	add	r7, sp, #0
 8015774:	60f8      	str	r0, [r7, #12]
 8015776:	60b9      	str	r1, [r7, #8]
 8015778:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 801577a:	68ba      	ldr	r2, [r7, #8]
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	1ad3      	subs	r3, r2, r3
 8015780:	109b      	asrs	r3, r3, #2
 8015782:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8015784:	697b      	ldr	r3, [r7, #20]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d006      	beq.n	8015798 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPP8IXFEventEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801578a:	697b      	ldr	r3, [r7, #20]
 801578c:	009b      	lsls	r3, r3, #2
 801578e:	461a      	mov	r2, r3
 8015790:	68f9      	ldr	r1, [r7, #12]
 8015792:	6878      	ldr	r0, [r7, #4]
 8015794:	f000 ffd0 	bl	8016738 <memmove>
	  return __result + _Num;
 8015798:	697b      	ldr	r3, [r7, #20]
 801579a:	009b      	lsls	r3, r3, #2
 801579c:	687a      	ldr	r2, [r7, #4]
 801579e:	4413      	add	r3, r2
	}
 80157a0:	4618      	mov	r0, r3
 80157a2:	3718      	adds	r7, #24
 80157a4:	46bd      	mov	sp, r7
 80157a6:	bd80      	pop	{r7, pc}

080157a8 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPP8IXFEventEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b086      	sub	sp, #24
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	60f8      	str	r0, [r7, #12]
 80157b0:	60b9      	str	r1, [r7, #8]
 80157b2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80157b4:	68ba      	ldr	r2, [r7, #8]
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	1ad3      	subs	r3, r2, r3
 80157ba:	109b      	asrs	r3, r3, #2
 80157bc:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80157be:	697b      	ldr	r3, [r7, #20]
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d00a      	beq.n	80157da <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPP8IXFEventEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80157c4:	697b      	ldr	r3, [r7, #20]
 80157c6:	009b      	lsls	r3, r3, #2
 80157c8:	425b      	negs	r3, r3
 80157ca:	687a      	ldr	r2, [r7, #4]
 80157cc:	18d0      	adds	r0, r2, r3
 80157ce:	697b      	ldr	r3, [r7, #20]
 80157d0:	009b      	lsls	r3, r3, #2
 80157d2:	461a      	mov	r2, r3
 80157d4:	68f9      	ldr	r1, [r7, #12]
 80157d6:	f000 ffaf 	bl	8016738 <memmove>
	  return __result - _Num;
 80157da:	697b      	ldr	r3, [r7, #20]
 80157dc:	009b      	lsls	r3, r3, #2
 80157de:	425b      	negs	r3, r3
 80157e0:	687a      	ldr	r2, [r7, #4]
 80157e2:	4413      	add	r3, r2
	}
 80157e4:	4618      	mov	r0, r3
 80157e6:	3718      	adds	r7, #24
 80157e8:	46bd      	mov	sp, r7
 80157ea:	bd80      	pop	{r7, pc}

080157ec <_ZN9XFTimeoutC1EiiP11IXFReactive>:
 * Constructor of the class.
 * \param id The id given by the behavioral class to uniquely identifing the timeout
 * \param interval The interval in milliseconds the timeout expires
 * \param pBehavior Pointer to behavioral class to which the timeout belongs.
 */
XFTimeout::XFTimeout(int id, int interval, IXFReactive * pBehavior)
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b084      	sub	sp, #16
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	60f8      	str	r0, [r7, #12]
 80157f4:	60b9      	str	r1, [r7, #8]
 80157f6:	607a      	str	r2, [r7, #4]
 80157f8:	603b      	str	r3, [r7, #0]
 : IXFEvent(IXFEvent::Timeout, id, pBehavior),
   _interval(interval),
   _relTicks(interval)
 80157fa:	68f8      	ldr	r0, [r7, #12]
 80157fc:	683b      	ldr	r3, [r7, #0]
 80157fe:	68ba      	ldr	r2, [r7, #8]
 8015800:	2104      	movs	r1, #4
 8015802:	f7fe fc4f 	bl	80140a4 <_ZN8IXFEventC1ENS_10eEventTypeEiP11IXFReactive>
 8015806:	4a07      	ldr	r2, [pc, #28]	; (8015824 <_ZN9XFTimeoutC1EiiP11IXFReactive+0x38>)
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	601a      	str	r2, [r3, #0]
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	687a      	ldr	r2, [r7, #4]
 8015810:	615a      	str	r2, [r3, #20]
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	687a      	ldr	r2, [r7, #4]
 8015816:	619a      	str	r2, [r3, #24]
{
}
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	4618      	mov	r0, r3
 801581c:	3710      	adds	r7, #16
 801581e:	46bd      	mov	sp, r7
 8015820:	bd80      	pop	{r7, pc}
 8015822:	bf00      	nop
 8015824:	0801e1dc 	.word	0x0801e1dc

08015828 <_ZN9XFTimeoutD1Ev>:

XFTimeout::~XFTimeout()
 8015828:	b580      	push	{r7, lr}
 801582a:	b082      	sub	sp, #8
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
 8015830:	4a05      	ldr	r2, [pc, #20]	; (8015848 <_ZN9XFTimeoutD1Ev+0x20>)
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	601a      	str	r2, [r3, #0]
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	4618      	mov	r0, r3
 801583a:	f7fe fc59 	bl	80140f0 <_ZN8IXFEventD1Ev>
{

}
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	4618      	mov	r0, r3
 8015842:	3708      	adds	r7, #8
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}
 8015848:	0801e1dc 	.word	0x0801e1dc

0801584c <_ZN9XFTimeoutD0Ev>:
XFTimeout::~XFTimeout()
 801584c:	b580      	push	{r7, lr}
 801584e:	b082      	sub	sp, #8
 8015850:	af00      	add	r7, sp, #0
 8015852:	6078      	str	r0, [r7, #4]
}
 8015854:	6878      	ldr	r0, [r7, #4]
 8015856:	f7ff ffe7 	bl	8015828 <_ZN9XFTimeoutD1Ev>
 801585a:	211c      	movs	r1, #28
 801585c:	6878      	ldr	r0, [r7, #4]
 801585e:	f000 fdff 	bl	8016460 <_ZdlPvj>
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	4618      	mov	r0, r3
 8015866:	3708      	adds	r7, #8
 8015868:	46bd      	mov	sp, r7
 801586a:	bd80      	pop	{r7, pc}

0801586c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implD1Ev>:
      struct _List_impl
 801586c:	b580      	push	{r7, lr}
 801586e:	b082      	sub	sp, #8
 8015870:	af00      	add	r7, sp, #0
 8015872:	6078      	str	r0, [r7, #4]
 8015874:	6878      	ldr	r0, [r7, #4]
 8015876:	f000 fa8a 	bl	8015d8e <_ZNSaISt10_List_nodeIP9XFTimeoutEED1Ev>
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	4618      	mov	r0, r3
 801587e:	3708      	adds	r7, #8
 8015880:	46bd      	mov	sp, r7
 8015882:	bd80      	pop	{r7, pc}

08015884 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EEC1Ev>:
      _List_base() = default;
 8015884:	b580      	push	{r7, lr}
 8015886:	b082      	sub	sp, #8
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	4618      	mov	r0, r3
 8015890:	f000 fa6d 	bl	8015d6e <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implC1Ev>
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	4618      	mov	r0, r3
 8015898:	3708      	adds	r7, #8
 801589a:	46bd      	mov	sp, r7
 801589c:	bd80      	pop	{r7, pc}

0801589e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EEC1Ev>:
      list() = default;
 801589e:	b580      	push	{r7, lr}
 80158a0:	b082      	sub	sp, #8
 80158a2:	af00      	add	r7, sp, #0
 80158a4:	6078      	str	r0, [r7, #4]
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	4618      	mov	r0, r3
 80158aa:	f7ff ffeb 	bl	8015884 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EEC1Ev>
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	4618      	mov	r0, r3
 80158b2:	3708      	adds	r7, #8
 80158b4:	46bd      	mov	sp, r7
 80158b6:	bd80      	pop	{r7, pc}

080158b8 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EED1Ev>:
      ~list() = default;
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b082      	sub	sp, #8
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	4618      	mov	r0, r3
 80158c4:	f000 fa6f 	bl	8015da6 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EED1Ev>
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	4618      	mov	r0, r3
 80158cc:	3708      	adds	r7, #8
 80158ce:	46bd      	mov	sp, r7
 80158d0:	bd80      	pop	{r7, pc}
	...

080158d4 <_ZN16XFTimeoutManagerC1Ev>:

// Initialization of static class attributes
XFTimeoutManager * XFTimeoutManager::_pInstance = NULL;


XFTimeoutManager::XFTimeoutManager()
 80158d4:	b580      	push	{r7, lr}
 80158d6:	b082      	sub	sp, #8
 80158d8:	af00      	add	r7, sp, #0
 80158da:	6078      	str	r0, [r7, #4]
 : _tickInterval(0),
   _sysTicksInMs(0)
 80158dc:	4a09      	ldr	r2, [pc, #36]	; (8015904 <_ZN16XFTimeoutManagerC1Ev+0x30>)
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	601a      	str	r2, [r3, #0]
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	2200      	movs	r2, #0
 80158e6:	605a      	str	r2, [r3, #4]
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	3308      	adds	r3, #8
 80158ec:	4618      	mov	r0, r3
 80158ee:	f7ff ffd6 	bl	801589e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EEC1Ev>
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	2200      	movs	r2, #0
 80158f6:	615a      	str	r2, [r3, #20]
{
}
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	4618      	mov	r0, r3
 80158fc:	3708      	adds	r7, #8
 80158fe:	46bd      	mov	sp, r7
 8015900:	bd80      	pop	{r7, pc}
 8015902:	bf00      	nop
 8015904:	0801e1ec 	.word	0x0801e1ec

08015908 <_ZN16XFTimeoutManagerD1Ev>:

XFTimeoutManager::~XFTimeoutManager()
 8015908:	b580      	push	{r7, lr}
 801590a:	b082      	sub	sp, #8
 801590c:	af00      	add	r7, sp, #0
 801590e:	6078      	str	r0, [r7, #4]
 8015910:	4a06      	ldr	r2, [pc, #24]	; (801592c <_ZN16XFTimeoutManagerD1Ev+0x24>)
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	601a      	str	r2, [r3, #0]
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	3308      	adds	r3, #8
 801591a:	4618      	mov	r0, r3
 801591c:	f7ff ffcc 	bl	80158b8 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EED1Ev>
{
}
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	4618      	mov	r0, r3
 8015924:	3708      	adds	r7, #8
 8015926:	46bd      	mov	sp, r7
 8015928:	bd80      	pop	{r7, pc}
 801592a:	bf00      	nop
 801592c:	0801e1ec 	.word	0x0801e1ec

08015930 <_ZN16XFTimeoutManagerD0Ev>:
XFTimeoutManager::~XFTimeoutManager()
 8015930:	b580      	push	{r7, lr}
 8015932:	b082      	sub	sp, #8
 8015934:	af00      	add	r7, sp, #0
 8015936:	6078      	str	r0, [r7, #4]
}
 8015938:	6878      	ldr	r0, [r7, #4]
 801593a:	f7ff ffe5 	bl	8015908 <_ZN16XFTimeoutManagerD1Ev>
 801593e:	2118      	movs	r1, #24
 8015940:	6878      	ldr	r0, [r7, #4]
 8015942:	f000 fd8d 	bl	8016460 <_ZdlPvj>
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	4618      	mov	r0, r3
 801594a:	3708      	adds	r7, #8
 801594c:	46bd      	mov	sp, r7
 801594e:	bd80      	pop	{r7, pc}

08015950 <_ZN16XFTimeoutManager11getInstanceEv>:

XFTimeoutManager * XFTimeoutManager::getInstance()
{
 8015950:	b598      	push	{r3, r4, r7, lr}
 8015952:	af00      	add	r7, sp, #0
    if (!_pInstance)
 8015954:	4b08      	ldr	r3, [pc, #32]	; (8015978 <_ZN16XFTimeoutManager11getInstanceEv+0x28>)
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	2b00      	cmp	r3, #0
 801595a:	d109      	bne.n	8015970 <_ZN16XFTimeoutManager11getInstanceEv+0x20>
    {
        _pInstance = new XFTimeoutManager;
 801595c:	2018      	movs	r0, #24
 801595e:	f000 fd92 	bl	8016486 <_Znwj>
 8015962:	4603      	mov	r3, r0
 8015964:	461c      	mov	r4, r3
 8015966:	4620      	mov	r0, r4
 8015968:	f7ff ffb4 	bl	80158d4 <_ZN16XFTimeoutManagerC1Ev>
 801596c:	4b02      	ldr	r3, [pc, #8]	; (8015978 <_ZN16XFTimeoutManager11getInstanceEv+0x28>)
 801596e:	601c      	str	r4, [r3, #0]
    }

    return _pInstance;
 8015970:	4b01      	ldr	r3, [pc, #4]	; (8015978 <_ZN16XFTimeoutManager11getInstanceEv+0x28>)
 8015972:	681b      	ldr	r3, [r3, #0]
}
 8015974:	4618      	mov	r0, r3
 8015976:	bd98      	pop	{r3, r4, r7, pc}
 8015978:	20001c14 	.word	0x20001c14

0801597c <_ZN16XFTimeoutManager15setTickIntervalEi>:
/**
 * Sets the time interval in milliseconds in which the timeout manager
 * should handle the timeouts.
 */
void XFTimeoutManager::setTickInterval(int tickInterval)
{
 801597c:	b480      	push	{r7}
 801597e:	b083      	sub	sp, #12
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
 8015984:	6039      	str	r1, [r7, #0]
    _tickInterval = tickInterval;
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	683a      	ldr	r2, [r7, #0]
 801598a:	605a      	str	r2, [r3, #4]
}
 801598c:	bf00      	nop
 801598e:	370c      	adds	r7, #12
 8015990:	46bd      	mov	sp, r7
 8015992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015996:	4770      	bx	lr

08015998 <_ZN16XFTimeoutManager5startEv>:

/**
 * Starts the timeout manager.
 */
void XFTimeoutManager::start()
{
 8015998:	b580      	push	{r7, lr}
 801599a:	b082      	sub	sp, #8
 801599c:	af00      	add	r7, sp, #0
 801599e:	6078      	str	r0, [r7, #4]
    // Check tickInterval. Set default value if not set
    if (_tickInterval == 0)
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	685b      	ldr	r3, [r3, #4]
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d102      	bne.n	80159ae <_ZN16XFTimeoutManager5startEv+0x16>
    {
        _tickInterval = 10;
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	220a      	movs	r2, #10
 80159ac:	605a      	str	r2, [r3, #4]
    }

    startHardwareTimer(_tickInterval);
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	685b      	ldr	r3, [r3, #4]
 80159b2:	4619      	mov	r1, r3
 80159b4:	6878      	ldr	r0, [r7, #4]
 80159b6:	f000 f9cf 	bl	8015d58 <_ZN16XFTimeoutManager18startHardwareTimerEi>
}
 80159ba:	bf00      	nop
 80159bc:	3708      	adds	r7, #8
 80159be:	46bd      	mov	sp, r7
 80159c0:	bd80      	pop	{r7, pc}

080159c2 <_ZN16XFTimeoutManager15scheduleTimeoutEiiP11IXFReactive>:
 * \param timeoutId The timeout id known by the reactive parameter. Is needed by the reactive part to uniquely identify the timeout.
 * \param interval The time in milliseconds to wait until the timeout expires.
 * \param pReactive The reactive instance where to inject the timeout when it timeouts.
 */
void XFTimeoutManager::scheduleTimeout(int timeoutId, int interval, IXFReactive * pReactive)
{
 80159c2:	b590      	push	{r4, r7, lr}
 80159c4:	b087      	sub	sp, #28
 80159c6:	af00      	add	r7, sp, #0
 80159c8:	60f8      	str	r0, [r7, #12]
 80159ca:	60b9      	str	r1, [r7, #8]
 80159cc:	607a      	str	r2, [r7, #4]
 80159ce:	603b      	str	r3, [r7, #0]
    XFTimeout * pTimeout = new XFTimeout(timeoutId, interval, pReactive);
 80159d0:	201c      	movs	r0, #28
 80159d2:	f000 fd58 	bl	8016486 <_Znwj>
 80159d6:	4603      	mov	r3, r0
 80159d8:	461c      	mov	r4, r3
 80159da:	683b      	ldr	r3, [r7, #0]
 80159dc:	687a      	ldr	r2, [r7, #4]
 80159de:	68b9      	ldr	r1, [r7, #8]
 80159e0:	4620      	mov	r0, r4
 80159e2:	f7ff ff03 	bl	80157ec <_ZN9XFTimeoutC1EiiP11IXFReactive>
 80159e6:	617c      	str	r4, [r7, #20]

    if (pTimeout)
 80159e8:	697b      	ldr	r3, [r7, #20]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d003      	beq.n	80159f6 <_ZN16XFTimeoutManager15scheduleTimeoutEiiP11IXFReactive+0x34>
    {
        addTimeout(pTimeout);
 80159ee:	6979      	ldr	r1, [r7, #20]
 80159f0:	68f8      	ldr	r0, [r7, #12]
 80159f2:	f000 f8ab 	bl	8015b4c <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout>
    }
}
 80159f6:	bf00      	nop
 80159f8:	371c      	adds	r7, #28
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd90      	pop	{r4, r7, pc}

080159fe <_ZN16XFTimeoutManager4tickEv>:
/**
 * On each call to this method, XFTimeoutManager::_tickInterval will be removed from the
 * timeouts. When a timeout expires it is injected back to its reactive instance.
 */
void XFTimeoutManager::tick()
{
 80159fe:	b590      	push	{r4, r7, lr}
 8015a00:	b089      	sub	sp, #36	; 0x24
 8015a02:	af00      	add	r7, sp, #0
 8015a04:	6078      	str	r0, [r7, #4]
    _sysTicksInMs += tickInterval();
 8015a06:	6878      	ldr	r0, [r7, #4]
 8015a08:	f7f2 fcb7 	bl	800837a <_ZNK16XFTimeoutManager12tickIntervalEv>
 8015a0c:	4602      	mov	r2, r0
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	695b      	ldr	r3, [r3, #20]
 8015a12:	441a      	add	r2, r3
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	615a      	str	r2, [r3, #20]

    if (!_timeouts.empty())
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	3308      	adds	r3, #8
 8015a1c:	4618      	mov	r0, r3
 8015a1e:	f000 f9d2 	bl	8015dc6 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>
 8015a22:	4603      	mov	r3, r0
 8015a24:	f083 0301 	eor.w	r3, r3, #1
 8015a28:	b2db      	uxtb	r3, r3
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	f000 808a 	beq.w	8015b44 <_ZN16XFTimeoutManager4tickEv+0x146>
    {
        XFTimeout * pFirstTimeout = _timeouts.front();
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	3308      	adds	r3, #8
 8015a34:	4618      	mov	r0, r3
 8015a36:	f000 f9d8 	bl	8015dea <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5frontEv>
 8015a3a:	4603      	mov	r3, r0
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	61fb      	str	r3, [r7, #28]

        // Subtract time elapsed
        pFirstTimeout->_relTicks -= tickInterval();
 8015a40:	6878      	ldr	r0, [r7, #4]
 8015a42:	f7f2 fc9a 	bl	800837a <_ZNK16XFTimeoutManager12tickIntervalEv>
 8015a46:	4602      	mov	r2, r0
 8015a48:	69fb      	ldr	r3, [r7, #28]
 8015a4a:	699b      	ldr	r3, [r3, #24]
 8015a4c:	1a9a      	subs	r2, r3, r2
 8015a4e:	69fb      	ldr	r3, [r7, #28]
 8015a50:	619a      	str	r2, [r3, #24]

        // Check timeout timed out
        if (pFirstTimeout->_relTicks <= 0)
 8015a52:	69fb      	ldr	r3, [r7, #28]
 8015a54:	699b      	ldr	r3, [r3, #24]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	dc74      	bgt.n	8015b44 <_ZN16XFTimeoutManager4tickEv+0x146>
        {
            // Check remaining ticks can be given further
            if (_timeouts.size() > 1)
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	3308      	adds	r3, #8
 8015a5e:	4618      	mov	r0, r3
 8015a60:	f000 f9d6 	bl	8015e10 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE4sizeEv>
 8015a64:	4603      	mov	r3, r0
 8015a66:	2b01      	cmp	r3, #1
 8015a68:	bf8c      	ite	hi
 8015a6a:	2301      	movhi	r3, #1
 8015a6c:	2300      	movls	r3, #0
 8015a6e:	b2db      	uxtb	r3, r3
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d018      	beq.n	8015aa6 <_ZN16XFTimeoutManager4tickEv+0xa8>
            {
                TimeoutList::iterator i = _timeouts.begin();
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	3308      	adds	r3, #8
 8015a78:	4618      	mov	r0, r3
 8015a7a:	f000 f9d5 	bl	8015e28 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8015a7e:	4603      	mov	r3, r0
 8015a80:	613b      	str	r3, [r7, #16]

                // Add ticks overrun to next timeout
                i++;
 8015a82:	f107 0310 	add.w	r3, r7, #16
 8015a86:	2100      	movs	r1, #0
 8015a88:	4618      	mov	r0, r3
 8015a8a:	f000 f9de 	bl	8015e4a <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
                (*i)->_relTicks -= pFirstTimeout->_relTicks;
 8015a8e:	f107 0310 	add.w	r3, r7, #16
 8015a92:	4618      	mov	r0, r3
 8015a94:	f000 f9ed 	bl	8015e72 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8015a98:	4603      	mov	r3, r0
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	6999      	ldr	r1, [r3, #24]
 8015a9e:	69fa      	ldr	r2, [r7, #28]
 8015aa0:	6992      	ldr	r2, [r2, #24]
 8015aa2:	1a8a      	subs	r2, r1, r2
 8015aa4:	619a      	str	r2, [r3, #24]
            }

            // Inject the timeout back to the behavioral class
            returnTimeout(pFirstTimeout);
 8015aa6:	69f9      	ldr	r1, [r7, #28]
 8015aa8:	6878      	ldr	r0, [r7, #4]
 8015aaa:	f000 f941 	bl	8015d30 <_ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout>

            // Remove timeout
            _timeouts.pop_front();
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	3308      	adds	r3, #8
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	f000 f9eb 	bl	8015e8e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9pop_frontEv>

            // Check if timeouts with same timeout value are present
            for (TimeoutList::iterator it = _timeouts.begin(); it != _timeouts.end(); /*Do not increment here!*/)
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	3308      	adds	r3, #8
 8015abc:	4618      	mov	r0, r3
 8015abe:	f000 f9b3 	bl	8015e28 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	60fb      	str	r3, [r7, #12]
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	3308      	adds	r3, #8
 8015aca:	4618      	mov	r0, r3
 8015acc:	f000 f9ef 	bl	8015eae <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8015ad0:	4603      	mov	r3, r0
 8015ad2:	617b      	str	r3, [r7, #20]
 8015ad4:	f107 0214 	add.w	r2, r7, #20
 8015ad8:	f107 030c 	add.w	r3, r7, #12
 8015adc:	4611      	mov	r1, r2
 8015ade:	4618      	mov	r0, r3
 8015ae0:	f000 f9f5 	bl	8015ece <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 8015ae4:	4603      	mov	r3, r0
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d02c      	beq.n	8015b44 <_ZN16XFTimeoutManager4tickEv+0x146>
            {
                if ((*it)->_relTicks == 0)
 8015aea:	f107 030c 	add.w	r3, r7, #12
 8015aee:	4618      	mov	r0, r3
 8015af0:	f000 f9bf 	bl	8015e72 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8015af4:	4603      	mov	r3, r0
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	699b      	ldr	r3, [r3, #24]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	bf0c      	ite	eq
 8015afe:	2301      	moveq	r3, #1
 8015b00:	2300      	movne	r3, #0
 8015b02:	b2db      	uxtb	r3, r3
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d01c      	beq.n	8015b42 <_ZN16XFTimeoutManager4tickEv+0x144>
                {
                    returnTimeout(*it);
 8015b08:	f107 030c 	add.w	r3, r7, #12
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	f000 f9b0 	bl	8015e72 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8015b12:	4603      	mov	r3, r0
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	4619      	mov	r1, r3
 8015b18:	6878      	ldr	r0, [r7, #4]
 8015b1a:	f000 f909 	bl	8015d30 <_ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout>
                    it = _timeouts.erase(it);
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	f103 0408 	add.w	r4, r3, #8
 8015b24:	f107 020c 	add.w	r2, r7, #12
 8015b28:	f107 0318 	add.w	r3, r7, #24
 8015b2c:	4611      	mov	r1, r2
 8015b2e:	4618      	mov	r0, r3
 8015b30:	f000 f9e1 	bl	8015ef6 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 8015b34:	69b9      	ldr	r1, [r7, #24]
 8015b36:	4620      	mov	r0, r4
 8015b38:	f000 f9ed 	bl	8015f16 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	60fb      	str	r3, [r7, #12]
            for (TimeoutList::iterator it = _timeouts.begin(); it != _timeouts.end(); /*Do not increment here!*/)
 8015b40:	e7c1      	b.n	8015ac6 <_ZN16XFTimeoutManager4tickEv+0xc8>
                }
                else
                {
                    break;
 8015b42:	bf00      	nop
                }
            }
        }
    }
}
 8015b44:	bf00      	nop
 8015b46:	3724      	adds	r7, #36	; 0x24
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	bd90      	pop	{r4, r7, pc}

08015b4c <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout>:

void XFTimeoutManager::addTimeout(XFTimeout * pNewTimeout)
{
 8015b4c:	b590      	push	{r4, r7, lr}
 8015b4e:	b089      	sub	sp, #36	; 0x24
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	6078      	str	r0, [r7, #4]
 8015b54:	6039      	str	r1, [r7, #0]
    enterCritical();
 8015b56:	f7fd fe4b 	bl	80137f0 <enterCritical>

    if (!_timeouts.empty())
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	3308      	adds	r3, #8
 8015b5e:	4618      	mov	r0, r3
 8015b60:	f000 f931 	bl	8015dc6 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>
 8015b64:	4603      	mov	r3, r0
 8015b66:	f083 0301 	eor.w	r3, r3, #1
 8015b6a:	b2db      	uxtb	r3, r3
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	f000 80cb 	beq.w	8015d08 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x1bc>
    {
        // Insert timeout before timeout(s) triggering later
        TimeoutList::iterator i = _timeouts.begin();
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	3308      	adds	r3, #8
 8015b76:	4618      	mov	r0, r3
 8015b78:	f000 f956 	bl	8015e28 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8015b7c:	4603      	mov	r3, r0
 8015b7e:	60fb      	str	r3, [r7, #12]

        if ((*i)->_relTicks >= pNewTimeout->_relTicks)
 8015b80:	f107 030c 	add.w	r3, r7, #12
 8015b84:	4618      	mov	r0, r3
 8015b86:	f000 f974 	bl	8015e72 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8015b8a:	4603      	mov	r3, r0
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	699a      	ldr	r2, [r3, #24]
 8015b90:	683b      	ldr	r3, [r7, #0]
 8015b92:	699b      	ldr	r3, [r3, #24]
 8015b94:	429a      	cmp	r2, r3
 8015b96:	bfac      	ite	ge
 8015b98:	2301      	movge	r3, #1
 8015b9a:	2300      	movlt	r3, #0
 8015b9c:	b2db      	uxtb	r3, r3
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d013      	beq.n	8015bca <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x7e>
        {
            // A new timeout at the beginning
            _timeouts.push_front(pNewTimeout);
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	3308      	adds	r3, #8
 8015ba6:	463a      	mov	r2, r7
 8015ba8:	4611      	mov	r1, r2
 8015baa:	4618      	mov	r0, r3
 8015bac:	f000 f9ce 	bl	8015f4c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE10push_frontERKS2_>

            // Remove time from following timeout
            (*i)->_relTicks -= pNewTimeout->_relTicks;
 8015bb0:	f107 030c 	add.w	r3, r7, #12
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	f000 f95c 	bl	8015e72 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8015bba:	4603      	mov	r3, r0
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	6999      	ldr	r1, [r3, #24]
 8015bc0:	683a      	ldr	r2, [r7, #0]
 8015bc2:	6992      	ldr	r2, [r2, #24]
 8015bc4:	1a8a      	subs	r2, r1, r2
 8015bc6:	619a      	str	r2, [r3, #24]
 8015bc8:	e0a5      	b.n	8015d16 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x1ca>
        }
        else
        {
            unsigned int index = 0;
 8015bca:	2300      	movs	r3, #0
 8015bcc:	61fb      	str	r3, [r7, #28]

            // Remove time from new timeout
            pNewTimeout->_relTicks -= (*i)->_relTicks;
 8015bce:	f107 030c 	add.w	r3, r7, #12
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	f000 f94d 	bl	8015e72 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8015bd8:	4603      	mov	r3, r0
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	699a      	ldr	r2, [r3, #24]
 8015bde:	683b      	ldr	r3, [r7, #0]
 8015be0:	6999      	ldr	r1, [r3, #24]
 8015be2:	683b      	ldr	r3, [r7, #0]
 8015be4:	1a8a      	subs	r2, r1, r2
 8015be6:	619a      	str	r2, [r3, #24]
            i++; index++;
 8015be8:	f107 030c 	add.w	r3, r7, #12
 8015bec:	2100      	movs	r1, #0
 8015bee:	4618      	mov	r0, r3
 8015bf0:	f000 f92b 	bl	8015e4a <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
 8015bf4:	69fb      	ldr	r3, [r7, #28]
 8015bf6:	3301      	adds	r3, #1
 8015bf8:	61fb      	str	r3, [r7, #28]

            while (i != _timeouts.end() &&
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	3308      	adds	r3, #8
 8015bfe:	4618      	mov	r0, r3
 8015c00:	f000 f955 	bl	8015eae <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8015c04:	4603      	mov	r3, r0
 8015c06:	613b      	str	r3, [r7, #16]
 8015c08:	f107 0210 	add.w	r2, r7, #16
 8015c0c:	f107 030c 	add.w	r3, r7, #12
 8015c10:	4611      	mov	r1, r2
 8015c12:	4618      	mov	r0, r3
 8015c14:	f000 f95b 	bl	8015ece <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 8015c18:	4603      	mov	r3, r0
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d00d      	beq.n	8015c3a <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0xee>
                   (*i)->_relTicks < pNewTimeout->_relTicks)
 8015c1e:	f107 030c 	add.w	r3, r7, #12
 8015c22:	4618      	mov	r0, r3
 8015c24:	f000 f925 	bl	8015e72 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8015c28:	4603      	mov	r3, r0
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	699a      	ldr	r2, [r3, #24]
 8015c2e:	683b      	ldr	r3, [r7, #0]
 8015c30:	699b      	ldr	r3, [r3, #24]
            while (i != _timeouts.end() &&
 8015c32:	429a      	cmp	r2, r3
 8015c34:	da01      	bge.n	8015c3a <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0xee>
 8015c36:	2301      	movs	r3, #1
 8015c38:	e000      	b.n	8015c3c <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0xf0>
 8015c3a:	2300      	movs	r3, #0
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d016      	beq.n	8015c6e <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x122>
            {
                pNewTimeout->_relTicks -= (*i)->_relTicks;
 8015c40:	f107 030c 	add.w	r3, r7, #12
 8015c44:	4618      	mov	r0, r3
 8015c46:	f000 f914 	bl	8015e72 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	699a      	ldr	r2, [r3, #24]
 8015c50:	683b      	ldr	r3, [r7, #0]
 8015c52:	6999      	ldr	r1, [r3, #24]
 8015c54:	683b      	ldr	r3, [r7, #0]
 8015c56:	1a8a      	subs	r2, r1, r2
 8015c58:	619a      	str	r2, [r3, #24]
                i++; index++;
 8015c5a:	f107 030c 	add.w	r3, r7, #12
 8015c5e:	2100      	movs	r1, #0
 8015c60:	4618      	mov	r0, r3
 8015c62:	f000 f8f2 	bl	8015e4a <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
 8015c66:	69fb      	ldr	r3, [r7, #28]
 8015c68:	3301      	adds	r3, #1
 8015c6a:	61fb      	str	r3, [r7, #28]
            while (i != _timeouts.end() &&
 8015c6c:	e7c5      	b.n	8015bfa <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0xae>
            }
            // Insert new timeout before
            i = _timeouts.insert(i, pNewTimeout);
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	f103 0408 	add.w	r4, r3, #8
 8015c74:	f107 020c 	add.w	r2, r7, #12
 8015c78:	f107 0314 	add.w	r3, r7, #20
 8015c7c:	4611      	mov	r1, r2
 8015c7e:	4618      	mov	r0, r3
 8015c80:	f000 f939 	bl	8015ef6 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 8015c84:	463b      	mov	r3, r7
 8015c86:	461a      	mov	r2, r3
 8015c88:	6979      	ldr	r1, [r7, #20]
 8015c8a:	4620      	mov	r0, r4
 8015c8c:	f000 f970 	bl	8015f70 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
 8015c90:	4603      	mov	r3, r0
 8015c92:	60fb      	str	r3, [r7, #12]

            if (_timeouts.size() > index + 1)
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	3308      	adds	r3, #8
 8015c98:	4618      	mov	r0, r3
 8015c9a:	f000 f8b9 	bl	8015e10 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE4sizeEv>
 8015c9e:	4602      	mov	r2, r0
 8015ca0:	69fb      	ldr	r3, [r7, #28]
 8015ca2:	3301      	adds	r3, #1
 8015ca4:	429a      	cmp	r2, r3
 8015ca6:	bf8c      	ite	hi
 8015ca8:	2301      	movhi	r3, #1
 8015caa:	2300      	movls	r3, #0
 8015cac:	b2db      	uxtb	r3, r3
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d031      	beq.n	8015d16 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x1ca>
            {
                // Remove time from following timeout
                i++;
 8015cb2:	f107 030c 	add.w	r3, r7, #12
 8015cb6:	2100      	movs	r1, #0
 8015cb8:	4618      	mov	r0, r3
 8015cba:	f000 f8c6 	bl	8015e4a <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
                assert(i != _timeouts.end());
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	3308      	adds	r3, #8
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f000 f8f3 	bl	8015eae <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8015cc8:	4603      	mov	r3, r0
 8015cca:	61bb      	str	r3, [r7, #24]
 8015ccc:	f107 0218 	add.w	r2, r7, #24
 8015cd0:	f107 030c 	add.w	r3, r7, #12
 8015cd4:	4611      	mov	r1, r2
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f000 f8f9 	bl	8015ece <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 8015cdc:	4603      	mov	r3, r0
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d105      	bne.n	8015cee <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x1a2>
 8015ce2:	4b10      	ldr	r3, [pc, #64]	; (8015d24 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x1d8>)
 8015ce4:	4a10      	ldr	r2, [pc, #64]	; (8015d28 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x1dc>)
 8015ce6:	21be      	movs	r1, #190	; 0xbe
 8015ce8:	4810      	ldr	r0, [pc, #64]	; (8015d2c <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x1e0>)
 8015cea:	f000 fca7 	bl	801663c <__assert_func>
                (*i)->_relTicks -= pNewTimeout->_relTicks;
 8015cee:	f107 030c 	add.w	r3, r7, #12
 8015cf2:	4618      	mov	r0, r3
 8015cf4:	f000 f8bd 	bl	8015e72 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8015cf8:	4603      	mov	r3, r0
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	6999      	ldr	r1, [r3, #24]
 8015cfe:	683a      	ldr	r2, [r7, #0]
 8015d00:	6992      	ldr	r2, [r2, #24]
 8015d02:	1a8a      	subs	r2, r1, r2
 8015d04:	619a      	str	r2, [r3, #24]
 8015d06:	e006      	b.n	8015d16 <_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout+0x1ca>
            }
        }
    }
    else
    {
        _timeouts.push_front(pNewTimeout);
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	3308      	adds	r3, #8
 8015d0c:	463a      	mov	r2, r7
 8015d0e:	4611      	mov	r1, r2
 8015d10:	4618      	mov	r0, r3
 8015d12:	f000 f91b 	bl	8015f4c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE10push_frontERKS2_>
    }

    exitCritical();
 8015d16:	f7fd fd89 	bl	801382c <exitCritical>
}
 8015d1a:	bf00      	nop
 8015d1c:	3724      	adds	r7, #36	; 0x24
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	bd90      	pop	{r4, r7, pc}
 8015d22:	bf00      	nop
 8015d24:	0801bc6c 	.word	0x0801bc6c
 8015d28:	0801bc84 	.word	0x0801bc84
 8015d2c:	0801bcb4 	.word	0x0801bcb4

08015d30 <_ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout>:
/**
 * Returns the timeout back to the queue of the thread executing
 * the behavioral instance.
 */
void XFTimeoutManager::returnTimeout(XFTimeout * pTimeout)
{
 8015d30:	b580      	push	{r7, lr}
 8015d32:	b082      	sub	sp, #8
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	6078      	str	r0, [r7, #4]
 8015d38:	6039      	str	r1, [r7, #0]
    pTimeout->getBehavior()->pushEvent(pTimeout);
 8015d3a:	683b      	ldr	r3, [r7, #0]
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	f7fe fcff 	bl	8014740 <_ZNK8IXFEvent11getBehaviorEv>
 8015d42:	4603      	mov	r3, r0
 8015d44:	681a      	ldr	r2, [r3, #0]
 8015d46:	320c      	adds	r2, #12
 8015d48:	6812      	ldr	r2, [r2, #0]
 8015d4a:	6839      	ldr	r1, [r7, #0]
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	4790      	blx	r2
}
 8015d50:	bf00      	nop
 8015d52:	3708      	adds	r7, #8
 8015d54:	46bd      	mov	sp, r7
 8015d56:	bd80      	pop	{r7, pc}

08015d58 <_ZN16XFTimeoutManager18startHardwareTimerEi>:
 * in a regular interval given by parameter tickTime
 *
 * \param tickTime Time in milliseconds the hardware timer should call XFTimeoutManager::tick()
 */
void XFTimeoutManager::startHardwareTimer(int tickTime)
{
 8015d58:	b480      	push	{r7}
 8015d5a:	b083      	sub	sp, #12
 8015d5c:	af00      	add	r7, sp, #0
 8015d5e:	6078      	str	r0, [r7, #4]
 8015d60:	6039      	str	r1, [r7, #0]
    startTimer( tickTime );

#endif /**************************************************************************************************************/


}
 8015d62:	bf00      	nop
 8015d64:	370c      	adds	r7, #12
 8015d66:	46bd      	mov	sp, r7
 8015d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6c:	4770      	bx	lr

08015d6e <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 8015d6e:	b580      	push	{r7, lr}
 8015d70:	b082      	sub	sp, #8
 8015d72:	af00      	add	r7, sp, #0
 8015d74:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 8015d76:	6878      	ldr	r0, [r7, #4]
 8015d78:	f000 f920 	bl	8015fbc <_ZNSaISt10_List_nodeIP9XFTimeoutEEC1Ev>
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	4618      	mov	r0, r3
 8015d80:	f7f5 f980 	bl	800b084 <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	4618      	mov	r0, r3
 8015d88:	3708      	adds	r7, #8
 8015d8a:	46bd      	mov	sp, r7
 8015d8c:	bd80      	pop	{r7, pc}

08015d8e <_ZNSaISt10_List_nodeIP9XFTimeoutEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8015d8e:	b580      	push	{r7, lr}
 8015d90:	b082      	sub	sp, #8
 8015d92:	af00      	add	r7, sp, #0
 8015d94:	6078      	str	r0, [r7, #4]
 8015d96:	6878      	ldr	r0, [r7, #4]
 8015d98:	f000 f91c 	bl	8015fd4 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED1Ev>
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	4618      	mov	r0, r3
 8015da0:	3708      	adds	r7, #8
 8015da2:	46bd      	mov	sp, r7
 8015da4:	bd80      	pop	{r7, pc}

08015da6 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 8015da6:	b580      	push	{r7, lr}
 8015da8:	b082      	sub	sp, #8
 8015daa:	af00      	add	r7, sp, #0
 8015dac:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 8015dae:	6878      	ldr	r0, [r7, #4]
 8015db0:	f000 f91b 	bl	8015fea <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	4618      	mov	r0, r3
 8015db8:	f7ff fd58 	bl	801586c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implD1Ev>
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	3708      	adds	r7, #8
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	bd80      	pop	{r7, pc}

08015dc6 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8015dc6:	b480      	push	{r7}
 8015dc8:	b083      	sub	sp, #12
 8015dca:	af00      	add	r7, sp, #0
 8015dcc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	681a      	ldr	r2, [r3, #0]
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	429a      	cmp	r2, r3
 8015dd6:	bf0c      	ite	eq
 8015dd8:	2301      	moveq	r3, #1
 8015dda:	2300      	movne	r3, #0
 8015ddc:	b2db      	uxtb	r3, r3
 8015dde:	4618      	mov	r0, r3
 8015de0:	370c      	adds	r7, #12
 8015de2:	46bd      	mov	sp, r7
 8015de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de8:	4770      	bx	lr

08015dea <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8015dea:	b580      	push	{r7, lr}
 8015dec:	b084      	sub	sp, #16
 8015dee:	af00      	add	r7, sp, #0
 8015df0:	6078      	str	r0, [r7, #4]
      { return *begin(); }
 8015df2:	6878      	ldr	r0, [r7, #4]
 8015df4:	f000 f818 	bl	8015e28 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8015df8:	4603      	mov	r3, r0
 8015dfa:	60fb      	str	r3, [r7, #12]
 8015dfc:	f107 030c 	add.w	r3, r7, #12
 8015e00:	4618      	mov	r0, r3
 8015e02:	f000 f836 	bl	8015e72 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8015e06:	4603      	mov	r3, r0
 8015e08:	4618      	mov	r0, r3
 8015e0a:	3710      	adds	r7, #16
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	bd80      	pop	{r7, pc}

08015e10 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b082      	sub	sp, #8
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
      { return _M_node_count(); }
 8015e18:	6878      	ldr	r0, [r7, #4]
 8015e1a:	f000 f90b 	bl	8016034 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE13_M_node_countEv>
 8015e1e:	4603      	mov	r3, r0
 8015e20:	4618      	mov	r0, r3
 8015e22:	3708      	adds	r7, #8
 8015e24:	46bd      	mov	sp, r7
 8015e26:	bd80      	pop	{r7, pc}

08015e28 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8015e28:	b580      	push	{r7, lr}
 8015e2a:	b084      	sub	sp, #16
 8015e2c:	af00      	add	r7, sp, #0
 8015e2e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	681a      	ldr	r2, [r3, #0]
 8015e34:	f107 030c 	add.w	r3, r7, #12
 8015e38:	4611      	mov	r1, r2
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	f000 f907 	bl	801604e <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 8015e40:	68fb      	ldr	r3, [r7, #12]
 8015e42:	4618      	mov	r0, r3
 8015e44:	3710      	adds	r7, #16
 8015e46:	46bd      	mov	sp, r7
 8015e48:	bd80      	pop	{r7, pc}

08015e4a <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 8015e4a:	b480      	push	{r7}
 8015e4c:	b085      	sub	sp, #20
 8015e4e:	af00      	add	r7, sp, #0
 8015e50:	6078      	str	r0, [r7, #4]
 8015e52:	6039      	str	r1, [r7, #0]
	_Self __tmp = *this;
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	60fb      	str	r3, [r7, #12]
	_M_node = _M_node->_M_next;
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	681a      	ldr	r2, [r3, #0]
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	601a      	str	r2, [r3, #0]
	return __tmp;
 8015e64:	68fb      	ldr	r3, [r7, #12]
      }
 8015e66:	4618      	mov	r0, r3
 8015e68:	3714      	adds	r7, #20
 8015e6a:	46bd      	mov	sp, r7
 8015e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e70:	4770      	bx	lr

08015e72 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8015e72:	b580      	push	{r7, lr}
 8015e74:	b082      	sub	sp, #8
 8015e76:	af00      	add	r7, sp, #0
 8015e78:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	4618      	mov	r0, r3
 8015e80:	f000 f8f4 	bl	801606c <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 8015e84:	4603      	mov	r3, r0
 8015e86:	4618      	mov	r0, r3
 8015e88:	3708      	adds	r7, #8
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	bd80      	pop	{r7, pc}

08015e8e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8015e8e:	b580      	push	{r7, lr}
 8015e90:	b082      	sub	sp, #8
 8015e92:	af00      	add	r7, sp, #0
 8015e94:	6078      	str	r0, [r7, #4]
      { this->_M_erase(begin()); }
 8015e96:	6878      	ldr	r0, [r7, #4]
 8015e98:	f7ff ffc6 	bl	8015e28 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8015e9c:	4603      	mov	r3, r0
 8015e9e:	4619      	mov	r1, r3
 8015ea0:	6878      	ldr	r0, [r7, #4]
 8015ea2:	f000 f8f1 	bl	8016088 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>
 8015ea6:	bf00      	nop
 8015ea8:	3708      	adds	r7, #8
 8015eaa:	46bd      	mov	sp, r7
 8015eac:	bd80      	pop	{r7, pc}

08015eae <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8015eae:	b580      	push	{r7, lr}
 8015eb0:	b084      	sub	sp, #16
 8015eb2:	af00      	add	r7, sp, #0
 8015eb4:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 8015eb6:	687a      	ldr	r2, [r7, #4]
 8015eb8:	f107 030c 	add.w	r3, r7, #12
 8015ebc:	4611      	mov	r1, r2
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	f000 f8c5 	bl	801604e <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	3710      	adds	r7, #16
 8015eca:	46bd      	mov	sp, r7
 8015ecc:	bd80      	pop	{r7, pc}

08015ece <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8015ece:	b480      	push	{r7}
 8015ed0:	b083      	sub	sp, #12
 8015ed2:	af00      	add	r7, sp, #0
 8015ed4:	6078      	str	r0, [r7, #4]
 8015ed6:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	681a      	ldr	r2, [r3, #0]
 8015edc:	683b      	ldr	r3, [r7, #0]
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	429a      	cmp	r2, r3
 8015ee2:	bf14      	ite	ne
 8015ee4:	2301      	movne	r3, #1
 8015ee6:	2300      	moveq	r3, #0
 8015ee8:	b2db      	uxtb	r3, r3
 8015eea:	4618      	mov	r0, r3
 8015eec:	370c      	adds	r7, #12
 8015eee:	46bd      	mov	sp, r7
 8015ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ef4:	4770      	bx	lr

08015ef6 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>:
      _List_const_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 8015ef6:	b480      	push	{r7}
 8015ef8:	b083      	sub	sp, #12
 8015efa:	af00      	add	r7, sp, #0
 8015efc:	6078      	str	r0, [r7, #4]
 8015efe:	6039      	str	r1, [r7, #0]
      : _M_node(__x._M_node) { }
 8015f00:	683b      	ldr	r3, [r7, #0]
 8015f02:	681a      	ldr	r2, [r3, #0]
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	601a      	str	r2, [r3, #0]
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	370c      	adds	r7, #12
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f14:	4770      	bx	lr

08015f16 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>:
      }
#endif

  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::
 8015f16:	b580      	push	{r7, lr}
 8015f18:	b084      	sub	sp, #16
 8015f1a:	af00      	add	r7, sp, #0
 8015f1c:	6078      	str	r0, [r7, #4]
 8015f1e:	6039      	str	r1, [r7, #0]
    erase(const_iterator __position) noexcept
#else
    erase(iterator __position)
#endif
    {
      iterator __ret = iterator(__position._M_node->_M_next);
 8015f20:	683b      	ldr	r3, [r7, #0]
 8015f22:	681a      	ldr	r2, [r3, #0]
 8015f24:	f107 030c 	add.w	r3, r7, #12
 8015f28:	4611      	mov	r1, r2
 8015f2a:	4618      	mov	r0, r3
 8015f2c:	f000 f88f 	bl	801604e <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
      _M_erase(__position._M_const_cast());
 8015f30:	463b      	mov	r3, r7
 8015f32:	4618      	mov	r0, r3
 8015f34:	f000 f8ce 	bl	80160d4 <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>
 8015f38:	4603      	mov	r3, r0
 8015f3a:	4619      	mov	r1, r3
 8015f3c:	6878      	ldr	r0, [r7, #4]
 8015f3e:	f000 f8a3 	bl	8016088 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>
      return __ret;
 8015f42:	68fb      	ldr	r3, [r7, #12]
    }
 8015f44:	4618      	mov	r0, r3
 8015f46:	3710      	adds	r7, #16
 8015f48:	46bd      	mov	sp, r7
 8015f4a:	bd80      	pop	{r7, pc}

08015f4c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE10push_frontERKS2_>:
      push_front(const value_type& __x)
 8015f4c:	b580      	push	{r7, lr}
 8015f4e:	b082      	sub	sp, #8
 8015f50:	af00      	add	r7, sp, #0
 8015f52:	6078      	str	r0, [r7, #4]
 8015f54:	6039      	str	r1, [r7, #0]
      { this->_M_insert(begin(), __x); }
 8015f56:	6878      	ldr	r0, [r7, #4]
 8015f58:	f7ff ff66 	bl	8015e28 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8015f5c:	4603      	mov	r3, r0
 8015f5e:	683a      	ldr	r2, [r7, #0]
 8015f60:	4619      	mov	r1, r3
 8015f62:	6878      	ldr	r0, [r7, #4]
 8015f64:	f000 f8c7 	bl	80160f6 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>
 8015f68:	bf00      	nop
 8015f6a:	3708      	adds	r7, #8
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	bd80      	pop	{r7, pc}

08015f70 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>:
    list<_Tp, _Alloc>::
 8015f70:	b590      	push	{r4, r7, lr}
 8015f72:	b087      	sub	sp, #28
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	60f8      	str	r0, [r7, #12]
 8015f78:	60b9      	str	r1, [r7, #8]
 8015f7a:	607a      	str	r2, [r7, #4]
      _Node* __tmp = _M_create_node(__x);
 8015f7c:	6879      	ldr	r1, [r7, #4]
 8015f7e:	68f8      	ldr	r0, [r7, #12]
 8015f80:	f000 f8d7 	bl	8016132 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>
 8015f84:	6178      	str	r0, [r7, #20]
      __tmp->_M_hook(__position._M_const_cast()._M_node);
 8015f86:	697c      	ldr	r4, [r7, #20]
 8015f88:	f107 0308 	add.w	r3, r7, #8
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	f000 f8a1 	bl	80160d4 <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>
 8015f92:	4603      	mov	r3, r0
 8015f94:	4619      	mov	r1, r3
 8015f96:	4620      	mov	r0, r4
 8015f98:	f000 fa8d 	bl	80164b6 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      this->_M_inc_size(1);
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	2101      	movs	r1, #1
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	f000 f8fa 	bl	801619a <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>
      return iterator(__tmp);
 8015fa6:	f107 0310 	add.w	r3, r7, #16
 8015faa:	6979      	ldr	r1, [r7, #20]
 8015fac:	4618      	mov	r0, r3
 8015fae:	f000 f84e 	bl	801604e <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 8015fb2:	693b      	ldr	r3, [r7, #16]
    }
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	371c      	adds	r7, #28
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	bd90      	pop	{r4, r7, pc}

08015fbc <_ZNSaISt10_List_nodeIP9XFTimeoutEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b082      	sub	sp, #8
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]
 8015fc4:	6878      	ldr	r0, [r7, #4]
 8015fc6:	f000 f8f9 	bl	80161bc <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC1Ev>
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	4618      	mov	r0, r3
 8015fce:	3708      	adds	r7, #8
 8015fd0:	46bd      	mov	sp, r7
 8015fd2:	bd80      	pop	{r7, pc}

08015fd4 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8015fd4:	b480      	push	{r7}
 8015fd6:	b083      	sub	sp, #12
 8015fd8:	af00      	add	r7, sp, #0
 8015fda:	6078      	str	r0, [r7, #4]
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	4618      	mov	r0, r3
 8015fe0:	370c      	adds	r7, #12
 8015fe2:	46bd      	mov	sp, r7
 8015fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe8:	4770      	bx	lr

08015fea <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 8015fea:	b580      	push	{r7, lr}
 8015fec:	b086      	sub	sp, #24
 8015fee:	af00      	add	r7, sp, #0
 8015ff0:	6078      	str	r0, [r7, #4]
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	697a      	ldr	r2, [r7, #20]
 8015ffc:	429a      	cmp	r2, r3
 8015ffe:	d015      	beq.n	801602c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0x42>
	  _Node* __tmp = static_cast<_Node*>(__cur);
 8016000:	697b      	ldr	r3, [r7, #20]
 8016002:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 8016004:	693b      	ldr	r3, [r7, #16]
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 801600a:	6938      	ldr	r0, [r7, #16]
 801600c:	f000 f82e 	bl	801606c <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 8016010:	60f8      	str	r0, [r7, #12]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 8016012:	6878      	ldr	r0, [r7, #4]
 8016014:	f000 f8dd 	bl	80161d2 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 8016018:	4603      	mov	r3, r0
 801601a:	68f9      	ldr	r1, [r7, #12]
 801601c:	4618      	mov	r0, r3
 801601e:	f000 f8e3 	bl	80161e8 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>
	  _M_put_node(__tmp);
 8016022:	6939      	ldr	r1, [r7, #16]
 8016024:	6878      	ldr	r0, [r7, #4]
 8016026:	f000 f8ec 	bl	8016202 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      while (__cur != &_M_impl._M_node)
 801602a:	e7e5      	b.n	8015ff8 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0xe>
    }
 801602c:	bf00      	nop
 801602e:	3718      	adds	r7, #24
 8016030:	46bd      	mov	sp, r7
 8016032:	bd80      	pop	{r7, pc}

08016034 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE13_M_node_countEv>:
      _M_node_count() const
 8016034:	b580      	push	{r7, lr}
 8016036:	b082      	sub	sp, #8
 8016038:	af00      	add	r7, sp, #0
 801603a:	6078      	str	r0, [r7, #4]
      { return this->_M_get_size(); }
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	4618      	mov	r0, r3
 8016040:	f000 f8ee 	bl	8016220 <_ZNKSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_sizeEv>
 8016044:	4603      	mov	r3, r0
 8016046:	4618      	mov	r0, r3
 8016048:	3708      	adds	r7, #8
 801604a:	46bd      	mov	sp, r7
 801604c:	bd80      	pop	{r7, pc}

0801604e <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 801604e:	b480      	push	{r7}
 8016050:	b083      	sub	sp, #12
 8016052:	af00      	add	r7, sp, #0
 8016054:	6078      	str	r0, [r7, #4]
 8016056:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	683a      	ldr	r2, [r7, #0]
 801605c:	601a      	str	r2, [r3, #0]
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	4618      	mov	r0, r3
 8016062:	370c      	adds	r7, #12
 8016064:	46bd      	mov	sp, r7
 8016066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801606a:	4770      	bx	lr

0801606c <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 801606c:	b580      	push	{r7, lr}
 801606e:	b082      	sub	sp, #8
 8016070:	af00      	add	r7, sp, #0
 8016072:	6078      	str	r0, [r7, #4]
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	3308      	adds	r3, #8
 8016078:	4618      	mov	r0, r3
 801607a:	f000 f8dd 	bl	8016238 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE6_M_ptrEv>
 801607e:	4603      	mov	r3, r0
 8016080:	4618      	mov	r0, r3
 8016082:	3708      	adds	r7, #8
 8016084:	46bd      	mov	sp, r7
 8016086:	bd80      	pop	{r7, pc}

08016088 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>:
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
 8016088:	b590      	push	{r4, r7, lr}
 801608a:	b085      	sub	sp, #20
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
 8016090:	6039      	str	r1, [r7, #0]
	this->_M_dec_size(1);
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	2101      	movs	r1, #1
 8016096:	4618      	mov	r0, r3
 8016098:	f000 f8da 	bl	8016250 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_dec_sizeEj>
	__position._M_node->_M_unhook();
 801609c:	683b      	ldr	r3, [r7, #0]
 801609e:	4618      	mov	r0, r3
 80160a0:	f000 fa10 	bl	80164c4 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	_Node* __n = static_cast<_Node*>(__position._M_node);
 80160a4:	683b      	ldr	r3, [r7, #0]
 80160a6:	60fb      	str	r3, [r7, #12]
	_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	4618      	mov	r0, r3
 80160ac:	f000 f891 	bl	80161d2 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 80160b0:	4604      	mov	r4, r0
 80160b2:	68f8      	ldr	r0, [r7, #12]
 80160b4:	f7ff ffda 	bl	801606c <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 80160b8:	4603      	mov	r3, r0
 80160ba:	4619      	mov	r1, r3
 80160bc:	4620      	mov	r0, r4
 80160be:	f000 f893 	bl	80161e8 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>
	_M_put_node(__n);
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	68f9      	ldr	r1, [r7, #12]
 80160c6:	4618      	mov	r0, r3
 80160c8:	f000 f89b 	bl	8016202 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      }
 80160cc:	bf00      	nop
 80160ce:	3714      	adds	r7, #20
 80160d0:	46bd      	mov	sp, r7
 80160d2:	bd90      	pop	{r4, r7, pc}

080160d4 <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b084      	sub	sp, #16
 80160d8:	af00      	add	r7, sp, #0
 80160da:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<__detail::_List_node_base*>(_M_node)); }
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	681a      	ldr	r2, [r3, #0]
 80160e0:	f107 030c 	add.w	r3, r7, #12
 80160e4:	4611      	mov	r1, r2
 80160e6:	4618      	mov	r0, r3
 80160e8:	f7ff ffb1 	bl	801604e <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	4618      	mov	r0, r3
 80160f0:	3710      	adds	r7, #16
 80160f2:	46bd      	mov	sp, r7
 80160f4:	bd80      	pop	{r7, pc}

080160f6 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>:
       _M_insert(iterator __position, _Args&&... __args)
 80160f6:	b580      	push	{r7, lr}
 80160f8:	b086      	sub	sp, #24
 80160fa:	af00      	add	r7, sp, #0
 80160fc:	60f8      	str	r0, [r7, #12]
 80160fe:	60b9      	str	r1, [r7, #8]
 8016100:	607a      	str	r2, [r7, #4]
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 8016102:	6878      	ldr	r0, [r7, #4]
 8016104:	f000 f8b5 	bl	8016272 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 8016108:	4603      	mov	r3, r0
 801610a:	4619      	mov	r1, r3
 801610c:	68f8      	ldr	r0, [r7, #12]
 801610e:	f000 f810 	bl	8016132 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>
 8016112:	6178      	str	r0, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 8016114:	697b      	ldr	r3, [r7, #20]
 8016116:	68ba      	ldr	r2, [r7, #8]
 8016118:	4611      	mov	r1, r2
 801611a:	4618      	mov	r0, r3
 801611c:	f000 f9cb 	bl	80164b6 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	2101      	movs	r1, #1
 8016124:	4618      	mov	r0, r3
 8016126:	f000 f838 	bl	801619a <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>
       }
 801612a:	bf00      	nop
 801612c:	3718      	adds	r7, #24
 801612e:	46bd      	mov	sp, r7
 8016130:	bd80      	pop	{r7, pc}

08016132 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8016132:	b590      	push	{r4, r7, lr}
 8016134:	b087      	sub	sp, #28
 8016136:	af00      	add	r7, sp, #0
 8016138:	6078      	str	r0, [r7, #4]
 801613a:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	4618      	mov	r0, r3
 8016140:	f000 f8a2 	bl	8016288 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_nodeEv>
 8016144:	6178      	str	r0, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	4618      	mov	r0, r3
 801614a:	f000 f842 	bl	80161d2 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 801614e:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8016150:	f107 0308 	add.w	r3, r7, #8
 8016154:	697a      	ldr	r2, [r7, #20]
 8016156:	6939      	ldr	r1, [r7, #16]
 8016158:	4618      	mov	r0, r3
 801615a:	f000 f8a3 	bl	80162a4 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEC1ERS4_PS3_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 801615e:	6978      	ldr	r0, [r7, #20]
 8016160:	f7ff ff84 	bl	801606c <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 8016164:	4604      	mov	r4, r0
 8016166:	6838      	ldr	r0, [r7, #0]
 8016168:	f000 f883 	bl	8016272 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 801616c:	4603      	mov	r3, r0
 801616e:	461a      	mov	r2, r3
 8016170:	4621      	mov	r1, r4
 8016172:	6938      	ldr	r0, [r7, #16]
 8016174:	f000 f8bf 	bl	80162f6 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>
	  __guard = nullptr;
 8016178:	f107 0308 	add.w	r3, r7, #8
 801617c:	2100      	movs	r1, #0
 801617e:	4618      	mov	r0, r3
 8016180:	f000 f8cc 	bl	801631c <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEaSEDn>
	  return __p;
 8016184:	697c      	ldr	r4, [r7, #20]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8016186:	f107 0308 	add.w	r3, r7, #8
 801618a:	4618      	mov	r0, r3
 801618c:	f000 f89e 	bl	80162cc <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev>
	  return __p;
 8016190:	4623      	mov	r3, r4
	}
 8016192:	4618      	mov	r0, r3
 8016194:	371c      	adds	r7, #28
 8016196:	46bd      	mov	sp, r7
 8016198:	bd90      	pop	{r4, r7, pc}

0801619a <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 801619a:	b480      	push	{r7}
 801619c:	b083      	sub	sp, #12
 801619e:	af00      	add	r7, sp, #0
 80161a0:	6078      	str	r0, [r7, #4]
 80161a2:	6039      	str	r1, [r7, #0]
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	689a      	ldr	r2, [r3, #8]
 80161a8:	683b      	ldr	r3, [r7, #0]
 80161aa:	441a      	add	r2, r3
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	609a      	str	r2, [r3, #8]
 80161b0:	bf00      	nop
 80161b2:	370c      	adds	r7, #12
 80161b4:	46bd      	mov	sp, r7
 80161b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ba:	4770      	bx	lr

080161bc <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80161bc:	b480      	push	{r7}
 80161be:	b083      	sub	sp, #12
 80161c0:	af00      	add	r7, sp, #0
 80161c2:	6078      	str	r0, [r7, #4]
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	4618      	mov	r0, r3
 80161c8:	370c      	adds	r7, #12
 80161ca:	46bd      	mov	sp, r7
 80161cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d0:	4770      	bx	lr

080161d2 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80161d2:	b480      	push	{r7}
 80161d4:	b083      	sub	sp, #12
 80161d6:	af00      	add	r7, sp, #0
 80161d8:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	4618      	mov	r0, r3
 80161de:	370c      	adds	r7, #12
 80161e0:	46bd      	mov	sp, r7
 80161e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e6:	4770      	bx	lr

080161e8 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 80161e8:	b580      	push	{r7, lr}
 80161ea:	b082      	sub	sp, #8
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	6078      	str	r0, [r7, #4]
 80161f0:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 80161f2:	6839      	ldr	r1, [r7, #0]
 80161f4:	6878      	ldr	r0, [r7, #4]
 80161f6:	f000 f8a0 	bl	801633a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE7destroyIS3_EEvPT_>
 80161fa:	bf00      	nop
 80161fc:	3708      	adds	r7, #8
 80161fe:	46bd      	mov	sp, r7
 8016200:	bd80      	pop	{r7, pc}

08016202 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 8016202:	b580      	push	{r7, lr}
 8016204:	b082      	sub	sp, #8
 8016206:	af00      	add	r7, sp, #0
 8016208:	6078      	str	r0, [r7, #4]
 801620a:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	2201      	movs	r2, #1
 8016210:	6839      	ldr	r1, [r7, #0]
 8016212:	4618      	mov	r0, r3
 8016214:	f000 f89c 	bl	8016350 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>
 8016218:	bf00      	nop
 801621a:	3708      	adds	r7, #8
 801621c:	46bd      	mov	sp, r7
 801621e:	bd80      	pop	{r7, pc}

08016220 <_ZNKSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_sizeEv>:
      size_t _M_get_size() const { return _M_impl._M_node._M_size; }
 8016220:	b480      	push	{r7}
 8016222:	b083      	sub	sp, #12
 8016224:	af00      	add	r7, sp, #0
 8016226:	6078      	str	r0, [r7, #4]
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	689b      	ldr	r3, [r3, #8]
 801622c:	4618      	mov	r0, r3
 801622e:	370c      	adds	r7, #12
 8016230:	46bd      	mov	sp, r7
 8016232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016236:	4770      	bx	lr

08016238 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE6_M_ptrEv>:
      _M_ptr() noexcept
 8016238:	b580      	push	{r7, lr}
 801623a:	b082      	sub	sp, #8
 801623c:	af00      	add	r7, sp, #0
 801623e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8016240:	6878      	ldr	r0, [r7, #4]
 8016242:	f000 f894 	bl	801636e <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE7_M_addrEv>
 8016246:	4603      	mov	r3, r0
 8016248:	4618      	mov	r0, r3
 801624a:	3708      	adds	r7, #8
 801624c:	46bd      	mov	sp, r7
 801624e:	bd80      	pop	{r7, pc}

08016250 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_dec_sizeEj>:
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8016250:	b480      	push	{r7}
 8016252:	b083      	sub	sp, #12
 8016254:	af00      	add	r7, sp, #0
 8016256:	6078      	str	r0, [r7, #4]
 8016258:	6039      	str	r1, [r7, #0]
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	689a      	ldr	r2, [r3, #8]
 801625e:	683b      	ldr	r3, [r7, #0]
 8016260:	1ad2      	subs	r2, r2, r3
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	609a      	str	r2, [r3, #8]
 8016266:	bf00      	nop
 8016268:	370c      	adds	r7, #12
 801626a:	46bd      	mov	sp, r7
 801626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016270:	4770      	bx	lr

08016272 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8016272:	b480      	push	{r7}
 8016274:	b083      	sub	sp, #12
 8016276:	af00      	add	r7, sp, #0
 8016278:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	4618      	mov	r0, r3
 801627e:	370c      	adds	r7, #12
 8016280:	46bd      	mov	sp, r7
 8016282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016286:	4770      	bx	lr

08016288 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_nodeEv>:
      _M_get_node()
 8016288:	b580      	push	{r7, lr}
 801628a:	b082      	sub	sp, #8
 801628c:	af00      	add	r7, sp, #0
 801628e:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	2101      	movs	r1, #1
 8016294:	4618      	mov	r0, r3
 8016296:	f000 f875 	bl	8016384 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE8allocateERS4_j>
 801629a:	4603      	mov	r3, r0
 801629c:	4618      	mov	r0, r3
 801629e:	3708      	adds	r7, #8
 80162a0:	46bd      	mov	sp, r7
 80162a2:	bd80      	pop	{r7, pc}

080162a4 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEC1ERS4_PS3_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80162a4:	b580      	push	{r7, lr}
 80162a6:	b084      	sub	sp, #16
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	60f8      	str	r0, [r7, #12]
 80162ac:	60b9      	str	r1, [r7, #8]
 80162ae:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80162b0:	68b8      	ldr	r0, [r7, #8]
 80162b2:	f000 f876 	bl	80163a2 <_ZSt11__addressofISaISt10_List_nodeIP9XFTimeoutEEEPT_RS5_>
 80162b6:	4602      	mov	r2, r0
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	601a      	str	r2, [r3, #0]
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	687a      	ldr	r2, [r7, #4]
 80162c0:	605a      	str	r2, [r3, #4]
      { }
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	4618      	mov	r0, r3
 80162c6:	3710      	adds	r7, #16
 80162c8:	46bd      	mov	sp, r7
 80162ca:	bd80      	pop	{r7, pc}

080162cc <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev>:
      ~__allocated_ptr()
 80162cc:	b580      	push	{r7, lr}
 80162ce:	b082      	sub	sp, #8
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	685b      	ldr	r3, [r3, #4]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d007      	beq.n	80162ec <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	6818      	ldr	r0, [r3, #0]
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	685b      	ldr	r3, [r3, #4]
 80162e4:	2201      	movs	r2, #1
 80162e6:	4619      	mov	r1, r3
 80162e8:	f000 f832 	bl	8016350 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>
      }
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	4618      	mov	r0, r3
 80162f0:	3708      	adds	r7, #8
 80162f2:	46bd      	mov	sp, r7
 80162f4:	bd80      	pop	{r7, pc}

080162f6 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80162f6:	b580      	push	{r7, lr}
 80162f8:	b084      	sub	sp, #16
 80162fa:	af00      	add	r7, sp, #0
 80162fc:	60f8      	str	r0, [r7, #12]
 80162fe:	60b9      	str	r1, [r7, #8]
 8016300:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8016302:	6878      	ldr	r0, [r7, #4]
 8016304:	f7ff ffb5 	bl	8016272 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 8016308:	4603      	mov	r3, r0
 801630a:	461a      	mov	r2, r3
 801630c:	68b9      	ldr	r1, [r7, #8]
 801630e:	68f8      	ldr	r0, [r7, #12]
 8016310:	f000 f852 	bl	80163b8 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE9constructIS3_JRKS3_EEEvPT_DpOT0_>
 8016314:	bf00      	nop
 8016316:	3710      	adds	r7, #16
 8016318:	46bd      	mov	sp, r7
 801631a:	bd80      	pop	{r7, pc}

0801631c <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 801631c:	b480      	push	{r7}
 801631e:	b083      	sub	sp, #12
 8016320:	af00      	add	r7, sp, #0
 8016322:	6078      	str	r0, [r7, #4]
 8016324:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	2200      	movs	r2, #0
 801632a:	605a      	str	r2, [r3, #4]
	return *this;
 801632c:	687b      	ldr	r3, [r7, #4]
      }
 801632e:	4618      	mov	r0, r3
 8016330:	370c      	adds	r7, #12
 8016332:	46bd      	mov	sp, r7
 8016334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016338:	4770      	bx	lr

0801633a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE7destroyIS3_EEvPT_>:
	destroy(_Up* __p)
 801633a:	b480      	push	{r7}
 801633c:	b083      	sub	sp, #12
 801633e:	af00      	add	r7, sp, #0
 8016340:	6078      	str	r0, [r7, #4]
 8016342:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8016344:	bf00      	nop
 8016346:	370c      	adds	r7, #12
 8016348:	46bd      	mov	sp, r7
 801634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801634e:	4770      	bx	lr

08016350 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8016350:	b580      	push	{r7, lr}
 8016352:	b084      	sub	sp, #16
 8016354:	af00      	add	r7, sp, #0
 8016356:	60f8      	str	r0, [r7, #12]
 8016358:	60b9      	str	r1, [r7, #8]
 801635a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 801635c:	687a      	ldr	r2, [r7, #4]
 801635e:	68b9      	ldr	r1, [r7, #8]
 8016360:	68f8      	ldr	r0, [r7, #12]
 8016362:	f000 f83f 	bl	80163e4 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j>
 8016366:	bf00      	nop
 8016368:	3710      	adds	r7, #16
 801636a:	46bd      	mov	sp, r7
 801636c:	bd80      	pop	{r7, pc}

0801636e <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE7_M_addrEv>:
      _M_addr() noexcept
 801636e:	b480      	push	{r7}
 8016370:	b083      	sub	sp, #12
 8016372:	af00      	add	r7, sp, #0
 8016374:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	4618      	mov	r0, r3
 801637a:	370c      	adds	r7, #12
 801637c:	46bd      	mov	sp, r7
 801637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016382:	4770      	bx	lr

08016384 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8016384:	b580      	push	{r7, lr}
 8016386:	b082      	sub	sp, #8
 8016388:	af00      	add	r7, sp, #0
 801638a:	6078      	str	r0, [r7, #4]
 801638c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801638e:	2200      	movs	r2, #0
 8016390:	6839      	ldr	r1, [r7, #0]
 8016392:	6878      	ldr	r0, [r7, #4]
 8016394:	f000 f833 	bl	80163fe <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv>
 8016398:	4603      	mov	r3, r0
 801639a:	4618      	mov	r0, r3
 801639c:	3708      	adds	r7, #8
 801639e:	46bd      	mov	sp, r7
 80163a0:	bd80      	pop	{r7, pc}

080163a2 <_ZSt11__addressofISaISt10_List_nodeIP9XFTimeoutEEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80163a2:	b480      	push	{r7}
 80163a4:	b083      	sub	sp, #12
 80163a6:	af00      	add	r7, sp, #0
 80163a8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	4618      	mov	r0, r3
 80163ae:	370c      	adds	r7, #12
 80163b0:	46bd      	mov	sp, r7
 80163b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163b6:	4770      	bx	lr

080163b8 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80163b8:	b590      	push	{r4, r7, lr}
 80163ba:	b085      	sub	sp, #20
 80163bc:	af00      	add	r7, sp, #0
 80163be:	60f8      	str	r0, [r7, #12]
 80163c0:	60b9      	str	r1, [r7, #8]
 80163c2:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80163c4:	6878      	ldr	r0, [r7, #4]
 80163c6:	f7ff ff54 	bl	8016272 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 80163ca:	4603      	mov	r3, r0
 80163cc:	681c      	ldr	r4, [r3, #0]
 80163ce:	68bb      	ldr	r3, [r7, #8]
 80163d0:	4619      	mov	r1, r3
 80163d2:	2004      	movs	r0, #4
 80163d4:	f7f1 f950 	bl	8007678 <_ZnwjPv>
 80163d8:	4603      	mov	r3, r0
 80163da:	601c      	str	r4, [r3, #0]
 80163dc:	bf00      	nop
 80163de:	3714      	adds	r7, #20
 80163e0:	46bd      	mov	sp, r7
 80163e2:	bd90      	pop	{r4, r7, pc}

080163e4 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b084      	sub	sp, #16
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	60f8      	str	r0, [r7, #12]
 80163ec:	60b9      	str	r1, [r7, #8]
 80163ee:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80163f0:	68b8      	ldr	r0, [r7, #8]
 80163f2:	f000 f833 	bl	801645c <_ZdlPv>
      }
 80163f6:	bf00      	nop
 80163f8:	3710      	adds	r7, #16
 80163fa:	46bd      	mov	sp, r7
 80163fc:	bd80      	pop	{r7, pc}

080163fe <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80163fe:	b580      	push	{r7, lr}
 8016400:	b084      	sub	sp, #16
 8016402:	af00      	add	r7, sp, #0
 8016404:	60f8      	str	r0, [r7, #12]
 8016406:	60b9      	str	r1, [r7, #8]
 8016408:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 801640a:	68f8      	ldr	r0, [r7, #12]
 801640c:	f000 f818 	bl	8016440 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8max_sizeEv>
 8016410:	4602      	mov	r2, r0
 8016412:	68bb      	ldr	r3, [r7, #8]
 8016414:	4293      	cmp	r3, r2
 8016416:	bf8c      	ite	hi
 8016418:	2301      	movhi	r3, #1
 801641a:	2300      	movls	r3, #0
 801641c:	b2db      	uxtb	r3, r3
 801641e:	2b00      	cmp	r3, #0
 8016420:	d001      	beq.n	8016426 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8016422:	f000 f854 	bl	80164ce <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8016426:	68ba      	ldr	r2, [r7, #8]
 8016428:	4613      	mov	r3, r2
 801642a:	005b      	lsls	r3, r3, #1
 801642c:	4413      	add	r3, r2
 801642e:	009b      	lsls	r3, r3, #2
 8016430:	4618      	mov	r0, r3
 8016432:	f000 f828 	bl	8016486 <_Znwj>
 8016436:	4603      	mov	r3, r0
      }
 8016438:	4618      	mov	r0, r3
 801643a:	3710      	adds	r7, #16
 801643c:	46bd      	mov	sp, r7
 801643e:	bd80      	pop	{r7, pc}

08016440 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8016440:	b480      	push	{r7}
 8016442:	b083      	sub	sp, #12
 8016444:	af00      	add	r7, sp, #0
 8016446:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8016448:	4b03      	ldr	r3, [pc, #12]	; (8016458 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8max_sizeEv+0x18>)
      }
 801644a:	4618      	mov	r0, r3
 801644c:	370c      	adds	r7, #12
 801644e:	46bd      	mov	sp, r7
 8016450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016454:	4770      	bx	lr
 8016456:	bf00      	nop
 8016458:	0aaaaaaa 	.word	0x0aaaaaaa

0801645c <_ZdlPv>:
 801645c:	f000 b956 	b.w	801670c <free>

08016460 <_ZdlPvj>:
 8016460:	f7ff bffc 	b.w	801645c <_ZdlPv>

08016464 <_ZdaPv>:
 8016464:	f7ff bffa 	b.w	801645c <_ZdlPv>

08016468 <__cxa_guard_acquire>:
 8016468:	6803      	ldr	r3, [r0, #0]
 801646a:	07db      	lsls	r3, r3, #31
 801646c:	d406      	bmi.n	801647c <__cxa_guard_acquire+0x14>
 801646e:	7843      	ldrb	r3, [r0, #1]
 8016470:	b103      	cbz	r3, 8016474 <__cxa_guard_acquire+0xc>
 8016472:	deff      	udf	#255	; 0xff
 8016474:	2301      	movs	r3, #1
 8016476:	7043      	strb	r3, [r0, #1]
 8016478:	4618      	mov	r0, r3
 801647a:	4770      	bx	lr
 801647c:	2000      	movs	r0, #0
 801647e:	4770      	bx	lr

08016480 <__cxa_guard_release>:
 8016480:	2301      	movs	r3, #1
 8016482:	6003      	str	r3, [r0, #0]
 8016484:	4770      	bx	lr

08016486 <_Znwj>:
 8016486:	2801      	cmp	r0, #1
 8016488:	bf38      	it	cc
 801648a:	2001      	movcc	r0, #1
 801648c:	b510      	push	{r4, lr}
 801648e:	4604      	mov	r4, r0
 8016490:	4620      	mov	r0, r4
 8016492:	f000 f933 	bl	80166fc <malloc>
 8016496:	b930      	cbnz	r0, 80164a6 <_Znwj+0x20>
 8016498:	f000 f8c0 	bl	801661c <_ZSt15get_new_handlerv>
 801649c:	b908      	cbnz	r0, 80164a2 <_Znwj+0x1c>
 801649e:	f000 f8c5 	bl	801662c <abort>
 80164a2:	4780      	blx	r0
 80164a4:	e7f4      	b.n	8016490 <_Znwj+0xa>
 80164a6:	bd10      	pop	{r4, pc}

080164a8 <_Znaj>:
 80164a8:	f7ff bfed 	b.w	8016486 <_Znwj>

080164ac <__cxa_pure_virtual>:
 80164ac:	b508      	push	{r3, lr}
 80164ae:	f000 f8af 	bl	8016610 <_ZSt9terminatev>

080164b2 <_ZNSaIcEC1Ev>:
 80164b2:	4770      	bx	lr

080164b4 <_ZNSaIcED1Ev>:
 80164b4:	4770      	bx	lr

080164b6 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 80164b6:	684b      	ldr	r3, [r1, #4]
 80164b8:	6043      	str	r3, [r0, #4]
 80164ba:	684b      	ldr	r3, [r1, #4]
 80164bc:	6001      	str	r1, [r0, #0]
 80164be:	6018      	str	r0, [r3, #0]
 80164c0:	6048      	str	r0, [r1, #4]
 80164c2:	4770      	bx	lr

080164c4 <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 80164c4:	e9d0 3200 	ldrd	r3, r2, [r0]
 80164c8:	6013      	str	r3, [r2, #0]
 80164ca:	605a      	str	r2, [r3, #4]
 80164cc:	4770      	bx	lr

080164ce <_ZSt17__throw_bad_allocv>:
 80164ce:	b508      	push	{r3, lr}
 80164d0:	f000 f8ac 	bl	801662c <abort>

080164d4 <_ZSt19__throw_logic_errorPKc>:
 80164d4:	b508      	push	{r3, lr}
 80164d6:	f000 f8a9 	bl	801662c <abort>

080164da <_ZSt20__throw_length_errorPKc>:
 80164da:	b508      	push	{r3, lr}
 80164dc:	f000 f8a6 	bl	801662c <abort>

080164e0 <_ZSt25__throw_bad_function_callv>:
 80164e0:	b508      	push	{r3, lr}
 80164e2:	f000 f8a3 	bl	801662c <abort>

080164e6 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80164e6:	b10a      	cbz	r2, 80164ec <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80164e8:	f000 b918 	b.w	801671c <memcpy>
 80164ec:	4770      	bx	lr
	...

080164f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80164f0:	b508      	push	{r3, lr}
 80164f2:	680b      	ldr	r3, [r1, #0]
 80164f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80164f8:	d302      	bcc.n	8016500 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80164fa:	480d      	ldr	r0, [pc, #52]	; (8016530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80164fc:	f7ff ffed 	bl	80164da <_ZSt20__throw_length_errorPKc>
 8016500:	4293      	cmp	r3, r2
 8016502:	d90b      	bls.n	801651c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8016504:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8016508:	ea4f 0042 	mov.w	r0, r2, lsl #1
 801650c:	d206      	bcs.n	801651c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801650e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8016512:	bf2a      	itet	cs
 8016514:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8016518:	6008      	strcc	r0, [r1, #0]
 801651a:	600b      	strcs	r3, [r1, #0]
 801651c:	6808      	ldr	r0, [r1, #0]
 801651e:	3001      	adds	r0, #1
 8016520:	d501      	bpl.n	8016526 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8016522:	f7ff ffd4 	bl	80164ce <_ZSt17__throw_bad_allocv>
 8016526:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801652a:	f7ff bfac 	b.w	8016486 <_Znwj>
 801652e:	bf00      	nop
 8016530:	0801e1f8 	.word	0x0801e1f8

08016534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8016534:	f850 3b08 	ldr.w	r3, [r0], #8
 8016538:	4283      	cmp	r3, r0
 801653a:	d002      	beq.n	8016542 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 801653c:	4618      	mov	r0, r3
 801653e:	f7ff bf8d 	b.w	801645c <_ZdlPv>
 8016542:	4770      	bx	lr

08016544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8016544:	2a01      	cmp	r2, #1
 8016546:	b510      	push	{r4, lr}
 8016548:	d102      	bne.n	8016550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 801654a:	780a      	ldrb	r2, [r1, #0]
 801654c:	7002      	strb	r2, [r0, #0]
 801654e:	bd10      	pop	{r4, pc}
 8016550:	f7ff ffc9 	bl	80164e6 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8016554:	e7fb      	b.n	801654e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08016556 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8016556:	b508      	push	{r3, lr}
 8016558:	1a52      	subs	r2, r2, r1
 801655a:	f7ff fff3 	bl	8016544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801655e:	bd08      	pop	{r3, pc}

08016560 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8016560:	b510      	push	{r4, lr}
 8016562:	4604      	mov	r4, r0
 8016564:	f7ff ffe6 	bl	8016534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8016568:	4620      	mov	r0, r4
 801656a:	bd10      	pop	{r4, pc}

0801656c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 801656c:	6840      	ldr	r0, [r0, #4]
 801656e:	4770      	bx	lr

08016570 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 8016570:	6840      	ldr	r0, [r0, #4]
 8016572:	fab0 f080 	clz	r0, r0
 8016576:	0940      	lsrs	r0, r0, #5
 8016578:	4770      	bx	lr

0801657a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 801657a:	6800      	ldr	r0, [r0, #0]
 801657c:	4408      	add	r0, r1
 801657e:	4770      	bx	lr

08016580 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8016580:	6800      	ldr	r0, [r0, #0]
 8016582:	4770      	bx	lr

08016584 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8016584:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016586:	4604      	mov	r4, r0
 8016588:	4616      	mov	r6, r2
 801658a:	460d      	mov	r5, r1
 801658c:	b919      	cbnz	r1, 8016596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 801658e:	b112      	cbz	r2, 8016596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8016590:	480d      	ldr	r0, [pc, #52]	; (80165c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8016592:	f7ff ff9f 	bl	80164d4 <_ZSt19__throw_logic_errorPKc>
 8016596:	1b73      	subs	r3, r6, r5
 8016598:	2b0f      	cmp	r3, #15
 801659a:	9301      	str	r3, [sp, #4]
 801659c:	d907      	bls.n	80165ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 801659e:	2200      	movs	r2, #0
 80165a0:	a901      	add	r1, sp, #4
 80165a2:	4620      	mov	r0, r4
 80165a4:	f7ff ffa4 	bl	80164f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80165a8:	9b01      	ldr	r3, [sp, #4]
 80165aa:	6020      	str	r0, [r4, #0]
 80165ac:	60a3      	str	r3, [r4, #8]
 80165ae:	4632      	mov	r2, r6
 80165b0:	4629      	mov	r1, r5
 80165b2:	6820      	ldr	r0, [r4, #0]
 80165b4:	f7ff ffcf 	bl	8016556 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80165b8:	9b01      	ldr	r3, [sp, #4]
 80165ba:	6822      	ldr	r2, [r4, #0]
 80165bc:	6063      	str	r3, [r4, #4]
 80165be:	2100      	movs	r1, #0
 80165c0:	54d1      	strb	r1, [r2, r3]
 80165c2:	b002      	add	sp, #8
 80165c4:	bd70      	pop	{r4, r5, r6, pc}
 80165c6:	bf00      	nop
 80165c8:	0801e210 	.word	0x0801e210

080165cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80165cc:	b538      	push	{r3, r4, r5, lr}
 80165ce:	f100 0308 	add.w	r3, r0, #8
 80165d2:	4604      	mov	r4, r0
 80165d4:	6003      	str	r3, [r0, #0]
 80165d6:	460d      	mov	r5, r1
 80165d8:	b159      	cbz	r1, 80165f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80165da:	4608      	mov	r0, r1
 80165dc:	f7e9 fe48 	bl	8000270 <strlen>
 80165e0:	182a      	adds	r2, r5, r0
 80165e2:	4620      	mov	r0, r4
 80165e4:	f04f 0300 	mov.w	r3, #0
 80165e8:	4629      	mov	r1, r5
 80165ea:	f7ff ffcb 	bl	8016584 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80165ee:	4620      	mov	r0, r4
 80165f0:	bd38      	pop	{r3, r4, r5, pc}
 80165f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80165f6:	e7f4      	b.n	80165e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080165f8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80165f8:	b508      	push	{r3, lr}
 80165fa:	4780      	blx	r0
 80165fc:	f000 f816 	bl	801662c <abort>

08016600 <_ZSt13get_terminatev>:
 8016600:	4b02      	ldr	r3, [pc, #8]	; (801660c <_ZSt13get_terminatev+0xc>)
 8016602:	6818      	ldr	r0, [r3, #0]
 8016604:	f3bf 8f5b 	dmb	ish
 8016608:	4770      	bx	lr
 801660a:	bf00      	nop
 801660c:	20000014 	.word	0x20000014

08016610 <_ZSt9terminatev>:
 8016610:	b508      	push	{r3, lr}
 8016612:	f7ff fff5 	bl	8016600 <_ZSt13get_terminatev>
 8016616:	f7ff ffef 	bl	80165f8 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0801661c <_ZSt15get_new_handlerv>:
 801661c:	4b02      	ldr	r3, [pc, #8]	; (8016628 <_ZSt15get_new_handlerv+0xc>)
 801661e:	6818      	ldr	r0, [r3, #0]
 8016620:	f3bf 8f5b 	dmb	ish
 8016624:	4770      	bx	lr
 8016626:	bf00      	nop
 8016628:	20001c18 	.word	0x20001c18

0801662c <abort>:
 801662c:	b508      	push	{r3, lr}
 801662e:	2006      	movs	r0, #6
 8016630:	f000 fcea 	bl	8017008 <raise>
 8016634:	2001      	movs	r0, #1
 8016636:	f7ea fdb5 	bl	80011a4 <_exit>
	...

0801663c <__assert_func>:
 801663c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801663e:	4614      	mov	r4, r2
 8016640:	461a      	mov	r2, r3
 8016642:	4b09      	ldr	r3, [pc, #36]	; (8016668 <__assert_func+0x2c>)
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	4605      	mov	r5, r0
 8016648:	68d8      	ldr	r0, [r3, #12]
 801664a:	b14c      	cbz	r4, 8016660 <__assert_func+0x24>
 801664c:	4b07      	ldr	r3, [pc, #28]	; (801666c <__assert_func+0x30>)
 801664e:	9100      	str	r1, [sp, #0]
 8016650:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016654:	4906      	ldr	r1, [pc, #24]	; (8016670 <__assert_func+0x34>)
 8016656:	462b      	mov	r3, r5
 8016658:	f000 f81a 	bl	8016690 <fiprintf>
 801665c:	f7ff ffe6 	bl	801662c <abort>
 8016660:	4b04      	ldr	r3, [pc, #16]	; (8016674 <__assert_func+0x38>)
 8016662:	461c      	mov	r4, r3
 8016664:	e7f3      	b.n	801664e <__assert_func+0x12>
 8016666:	bf00      	nop
 8016668:	20000018 	.word	0x20000018
 801666c:	0801e23a 	.word	0x0801e23a
 8016670:	0801e247 	.word	0x0801e247
 8016674:	0801e275 	.word	0x0801e275

08016678 <atexit>:
 8016678:	2300      	movs	r3, #0
 801667a:	4601      	mov	r1, r0
 801667c:	461a      	mov	r2, r3
 801667e:	4618      	mov	r0, r3
 8016680:	f000 be12 	b.w	80172a8 <__register_exitproc>

08016684 <__errno>:
 8016684:	4b01      	ldr	r3, [pc, #4]	; (801668c <__errno+0x8>)
 8016686:	6818      	ldr	r0, [r3, #0]
 8016688:	4770      	bx	lr
 801668a:	bf00      	nop
 801668c:	20000018 	.word	0x20000018

08016690 <fiprintf>:
 8016690:	b40e      	push	{r1, r2, r3}
 8016692:	b503      	push	{r0, r1, lr}
 8016694:	4601      	mov	r1, r0
 8016696:	ab03      	add	r3, sp, #12
 8016698:	4805      	ldr	r0, [pc, #20]	; (80166b0 <fiprintf+0x20>)
 801669a:	f853 2b04 	ldr.w	r2, [r3], #4
 801669e:	6800      	ldr	r0, [r0, #0]
 80166a0:	9301      	str	r3, [sp, #4]
 80166a2:	f000 f93f 	bl	8016924 <_vfiprintf_r>
 80166a6:	b002      	add	sp, #8
 80166a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80166ac:	b003      	add	sp, #12
 80166ae:	4770      	bx	lr
 80166b0:	20000018 	.word	0x20000018

080166b4 <__libc_init_array>:
 80166b4:	b570      	push	{r4, r5, r6, lr}
 80166b6:	4d0d      	ldr	r5, [pc, #52]	; (80166ec <__libc_init_array+0x38>)
 80166b8:	4c0d      	ldr	r4, [pc, #52]	; (80166f0 <__libc_init_array+0x3c>)
 80166ba:	1b64      	subs	r4, r4, r5
 80166bc:	10a4      	asrs	r4, r4, #2
 80166be:	2600      	movs	r6, #0
 80166c0:	42a6      	cmp	r6, r4
 80166c2:	d109      	bne.n	80166d8 <__libc_init_array+0x24>
 80166c4:	4d0b      	ldr	r5, [pc, #44]	; (80166f4 <__libc_init_array+0x40>)
 80166c6:	4c0c      	ldr	r4, [pc, #48]	; (80166f8 <__libc_init_array+0x44>)
 80166c8:	f001 fab2 	bl	8017c30 <_init>
 80166cc:	1b64      	subs	r4, r4, r5
 80166ce:	10a4      	asrs	r4, r4, #2
 80166d0:	2600      	movs	r6, #0
 80166d2:	42a6      	cmp	r6, r4
 80166d4:	d105      	bne.n	80166e2 <__libc_init_array+0x2e>
 80166d6:	bd70      	pop	{r4, r5, r6, pc}
 80166d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80166dc:	4798      	blx	r3
 80166de:	3601      	adds	r6, #1
 80166e0:	e7ee      	b.n	80166c0 <__libc_init_array+0xc>
 80166e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80166e6:	4798      	blx	r3
 80166e8:	3601      	adds	r6, #1
 80166ea:	e7f2      	b.n	80166d2 <__libc_init_array+0x1e>
 80166ec:	0801e318 	.word	0x0801e318
 80166f0:	0801e318 	.word	0x0801e318
 80166f4:	0801e318 	.word	0x0801e318
 80166f8:	0801e380 	.word	0x0801e380

080166fc <malloc>:
 80166fc:	4b02      	ldr	r3, [pc, #8]	; (8016708 <malloc+0xc>)
 80166fe:	4601      	mov	r1, r0
 8016700:	6818      	ldr	r0, [r3, #0]
 8016702:	f000 b88b 	b.w	801681c <_malloc_r>
 8016706:	bf00      	nop
 8016708:	20000018 	.word	0x20000018

0801670c <free>:
 801670c:	4b02      	ldr	r3, [pc, #8]	; (8016718 <free+0xc>)
 801670e:	4601      	mov	r1, r0
 8016710:	6818      	ldr	r0, [r3, #0]
 8016712:	f000 b833 	b.w	801677c <_free_r>
 8016716:	bf00      	nop
 8016718:	20000018 	.word	0x20000018

0801671c <memcpy>:
 801671c:	440a      	add	r2, r1
 801671e:	4291      	cmp	r1, r2
 8016720:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016724:	d100      	bne.n	8016728 <memcpy+0xc>
 8016726:	4770      	bx	lr
 8016728:	b510      	push	{r4, lr}
 801672a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801672e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016732:	4291      	cmp	r1, r2
 8016734:	d1f9      	bne.n	801672a <memcpy+0xe>
 8016736:	bd10      	pop	{r4, pc}

08016738 <memmove>:
 8016738:	4288      	cmp	r0, r1
 801673a:	b510      	push	{r4, lr}
 801673c:	eb01 0402 	add.w	r4, r1, r2
 8016740:	d902      	bls.n	8016748 <memmove+0x10>
 8016742:	4284      	cmp	r4, r0
 8016744:	4623      	mov	r3, r4
 8016746:	d807      	bhi.n	8016758 <memmove+0x20>
 8016748:	1e43      	subs	r3, r0, #1
 801674a:	42a1      	cmp	r1, r4
 801674c:	d008      	beq.n	8016760 <memmove+0x28>
 801674e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016752:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016756:	e7f8      	b.n	801674a <memmove+0x12>
 8016758:	4402      	add	r2, r0
 801675a:	4601      	mov	r1, r0
 801675c:	428a      	cmp	r2, r1
 801675e:	d100      	bne.n	8016762 <memmove+0x2a>
 8016760:	bd10      	pop	{r4, pc}
 8016762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016766:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801676a:	e7f7      	b.n	801675c <memmove+0x24>

0801676c <memset>:
 801676c:	4402      	add	r2, r0
 801676e:	4603      	mov	r3, r0
 8016770:	4293      	cmp	r3, r2
 8016772:	d100      	bne.n	8016776 <memset+0xa>
 8016774:	4770      	bx	lr
 8016776:	f803 1b01 	strb.w	r1, [r3], #1
 801677a:	e7f9      	b.n	8016770 <memset+0x4>

0801677c <_free_r>:
 801677c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801677e:	2900      	cmp	r1, #0
 8016780:	d048      	beq.n	8016814 <_free_r+0x98>
 8016782:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016786:	9001      	str	r0, [sp, #4]
 8016788:	2b00      	cmp	r3, #0
 801678a:	f1a1 0404 	sub.w	r4, r1, #4
 801678e:	bfb8      	it	lt
 8016790:	18e4      	addlt	r4, r4, r3
 8016792:	f001 f80b 	bl	80177ac <__malloc_lock>
 8016796:	4a20      	ldr	r2, [pc, #128]	; (8016818 <_free_r+0x9c>)
 8016798:	9801      	ldr	r0, [sp, #4]
 801679a:	6813      	ldr	r3, [r2, #0]
 801679c:	4615      	mov	r5, r2
 801679e:	b933      	cbnz	r3, 80167ae <_free_r+0x32>
 80167a0:	6063      	str	r3, [r4, #4]
 80167a2:	6014      	str	r4, [r2, #0]
 80167a4:	b003      	add	sp, #12
 80167a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80167aa:	f001 b805 	b.w	80177b8 <__malloc_unlock>
 80167ae:	42a3      	cmp	r3, r4
 80167b0:	d90b      	bls.n	80167ca <_free_r+0x4e>
 80167b2:	6821      	ldr	r1, [r4, #0]
 80167b4:	1862      	adds	r2, r4, r1
 80167b6:	4293      	cmp	r3, r2
 80167b8:	bf04      	itt	eq
 80167ba:	681a      	ldreq	r2, [r3, #0]
 80167bc:	685b      	ldreq	r3, [r3, #4]
 80167be:	6063      	str	r3, [r4, #4]
 80167c0:	bf04      	itt	eq
 80167c2:	1852      	addeq	r2, r2, r1
 80167c4:	6022      	streq	r2, [r4, #0]
 80167c6:	602c      	str	r4, [r5, #0]
 80167c8:	e7ec      	b.n	80167a4 <_free_r+0x28>
 80167ca:	461a      	mov	r2, r3
 80167cc:	685b      	ldr	r3, [r3, #4]
 80167ce:	b10b      	cbz	r3, 80167d4 <_free_r+0x58>
 80167d0:	42a3      	cmp	r3, r4
 80167d2:	d9fa      	bls.n	80167ca <_free_r+0x4e>
 80167d4:	6811      	ldr	r1, [r2, #0]
 80167d6:	1855      	adds	r5, r2, r1
 80167d8:	42a5      	cmp	r5, r4
 80167da:	d10b      	bne.n	80167f4 <_free_r+0x78>
 80167dc:	6824      	ldr	r4, [r4, #0]
 80167de:	4421      	add	r1, r4
 80167e0:	1854      	adds	r4, r2, r1
 80167e2:	42a3      	cmp	r3, r4
 80167e4:	6011      	str	r1, [r2, #0]
 80167e6:	d1dd      	bne.n	80167a4 <_free_r+0x28>
 80167e8:	681c      	ldr	r4, [r3, #0]
 80167ea:	685b      	ldr	r3, [r3, #4]
 80167ec:	6053      	str	r3, [r2, #4]
 80167ee:	4421      	add	r1, r4
 80167f0:	6011      	str	r1, [r2, #0]
 80167f2:	e7d7      	b.n	80167a4 <_free_r+0x28>
 80167f4:	d902      	bls.n	80167fc <_free_r+0x80>
 80167f6:	230c      	movs	r3, #12
 80167f8:	6003      	str	r3, [r0, #0]
 80167fa:	e7d3      	b.n	80167a4 <_free_r+0x28>
 80167fc:	6825      	ldr	r5, [r4, #0]
 80167fe:	1961      	adds	r1, r4, r5
 8016800:	428b      	cmp	r3, r1
 8016802:	bf04      	itt	eq
 8016804:	6819      	ldreq	r1, [r3, #0]
 8016806:	685b      	ldreq	r3, [r3, #4]
 8016808:	6063      	str	r3, [r4, #4]
 801680a:	bf04      	itt	eq
 801680c:	1949      	addeq	r1, r1, r5
 801680e:	6021      	streq	r1, [r4, #0]
 8016810:	6054      	str	r4, [r2, #4]
 8016812:	e7c7      	b.n	80167a4 <_free_r+0x28>
 8016814:	b003      	add	sp, #12
 8016816:	bd30      	pop	{r4, r5, pc}
 8016818:	20001c1c 	.word	0x20001c1c

0801681c <_malloc_r>:
 801681c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801681e:	1ccd      	adds	r5, r1, #3
 8016820:	f025 0503 	bic.w	r5, r5, #3
 8016824:	3508      	adds	r5, #8
 8016826:	2d0c      	cmp	r5, #12
 8016828:	bf38      	it	cc
 801682a:	250c      	movcc	r5, #12
 801682c:	2d00      	cmp	r5, #0
 801682e:	4606      	mov	r6, r0
 8016830:	db01      	blt.n	8016836 <_malloc_r+0x1a>
 8016832:	42a9      	cmp	r1, r5
 8016834:	d903      	bls.n	801683e <_malloc_r+0x22>
 8016836:	230c      	movs	r3, #12
 8016838:	6033      	str	r3, [r6, #0]
 801683a:	2000      	movs	r0, #0
 801683c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801683e:	f000 ffb5 	bl	80177ac <__malloc_lock>
 8016842:	4921      	ldr	r1, [pc, #132]	; (80168c8 <_malloc_r+0xac>)
 8016844:	680a      	ldr	r2, [r1, #0]
 8016846:	4614      	mov	r4, r2
 8016848:	b99c      	cbnz	r4, 8016872 <_malloc_r+0x56>
 801684a:	4f20      	ldr	r7, [pc, #128]	; (80168cc <_malloc_r+0xb0>)
 801684c:	683b      	ldr	r3, [r7, #0]
 801684e:	b923      	cbnz	r3, 801685a <_malloc_r+0x3e>
 8016850:	4621      	mov	r1, r4
 8016852:	4630      	mov	r0, r6
 8016854:	f000 fba0 	bl	8016f98 <_sbrk_r>
 8016858:	6038      	str	r0, [r7, #0]
 801685a:	4629      	mov	r1, r5
 801685c:	4630      	mov	r0, r6
 801685e:	f000 fb9b 	bl	8016f98 <_sbrk_r>
 8016862:	1c43      	adds	r3, r0, #1
 8016864:	d123      	bne.n	80168ae <_malloc_r+0x92>
 8016866:	230c      	movs	r3, #12
 8016868:	6033      	str	r3, [r6, #0]
 801686a:	4630      	mov	r0, r6
 801686c:	f000 ffa4 	bl	80177b8 <__malloc_unlock>
 8016870:	e7e3      	b.n	801683a <_malloc_r+0x1e>
 8016872:	6823      	ldr	r3, [r4, #0]
 8016874:	1b5b      	subs	r3, r3, r5
 8016876:	d417      	bmi.n	80168a8 <_malloc_r+0x8c>
 8016878:	2b0b      	cmp	r3, #11
 801687a:	d903      	bls.n	8016884 <_malloc_r+0x68>
 801687c:	6023      	str	r3, [r4, #0]
 801687e:	441c      	add	r4, r3
 8016880:	6025      	str	r5, [r4, #0]
 8016882:	e004      	b.n	801688e <_malloc_r+0x72>
 8016884:	6863      	ldr	r3, [r4, #4]
 8016886:	42a2      	cmp	r2, r4
 8016888:	bf0c      	ite	eq
 801688a:	600b      	streq	r3, [r1, #0]
 801688c:	6053      	strne	r3, [r2, #4]
 801688e:	4630      	mov	r0, r6
 8016890:	f000 ff92 	bl	80177b8 <__malloc_unlock>
 8016894:	f104 000b 	add.w	r0, r4, #11
 8016898:	1d23      	adds	r3, r4, #4
 801689a:	f020 0007 	bic.w	r0, r0, #7
 801689e:	1ac2      	subs	r2, r0, r3
 80168a0:	d0cc      	beq.n	801683c <_malloc_r+0x20>
 80168a2:	1a1b      	subs	r3, r3, r0
 80168a4:	50a3      	str	r3, [r4, r2]
 80168a6:	e7c9      	b.n	801683c <_malloc_r+0x20>
 80168a8:	4622      	mov	r2, r4
 80168aa:	6864      	ldr	r4, [r4, #4]
 80168ac:	e7cc      	b.n	8016848 <_malloc_r+0x2c>
 80168ae:	1cc4      	adds	r4, r0, #3
 80168b0:	f024 0403 	bic.w	r4, r4, #3
 80168b4:	42a0      	cmp	r0, r4
 80168b6:	d0e3      	beq.n	8016880 <_malloc_r+0x64>
 80168b8:	1a21      	subs	r1, r4, r0
 80168ba:	4630      	mov	r0, r6
 80168bc:	f000 fb6c 	bl	8016f98 <_sbrk_r>
 80168c0:	3001      	adds	r0, #1
 80168c2:	d1dd      	bne.n	8016880 <_malloc_r+0x64>
 80168c4:	e7cf      	b.n	8016866 <_malloc_r+0x4a>
 80168c6:	bf00      	nop
 80168c8:	20001c1c 	.word	0x20001c1c
 80168cc:	20001c20 	.word	0x20001c20

080168d0 <__sfputc_r>:
 80168d0:	6893      	ldr	r3, [r2, #8]
 80168d2:	3b01      	subs	r3, #1
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	b410      	push	{r4}
 80168d8:	6093      	str	r3, [r2, #8]
 80168da:	da08      	bge.n	80168ee <__sfputc_r+0x1e>
 80168dc:	6994      	ldr	r4, [r2, #24]
 80168de:	42a3      	cmp	r3, r4
 80168e0:	db01      	blt.n	80168e6 <__sfputc_r+0x16>
 80168e2:	290a      	cmp	r1, #10
 80168e4:	d103      	bne.n	80168ee <__sfputc_r+0x1e>
 80168e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80168ea:	f000 bc1d 	b.w	8017128 <__swbuf_r>
 80168ee:	6813      	ldr	r3, [r2, #0]
 80168f0:	1c58      	adds	r0, r3, #1
 80168f2:	6010      	str	r0, [r2, #0]
 80168f4:	7019      	strb	r1, [r3, #0]
 80168f6:	4608      	mov	r0, r1
 80168f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80168fc:	4770      	bx	lr

080168fe <__sfputs_r>:
 80168fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016900:	4606      	mov	r6, r0
 8016902:	460f      	mov	r7, r1
 8016904:	4614      	mov	r4, r2
 8016906:	18d5      	adds	r5, r2, r3
 8016908:	42ac      	cmp	r4, r5
 801690a:	d101      	bne.n	8016910 <__sfputs_r+0x12>
 801690c:	2000      	movs	r0, #0
 801690e:	e007      	b.n	8016920 <__sfputs_r+0x22>
 8016910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016914:	463a      	mov	r2, r7
 8016916:	4630      	mov	r0, r6
 8016918:	f7ff ffda 	bl	80168d0 <__sfputc_r>
 801691c:	1c43      	adds	r3, r0, #1
 801691e:	d1f3      	bne.n	8016908 <__sfputs_r+0xa>
 8016920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016924 <_vfiprintf_r>:
 8016924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016928:	460d      	mov	r5, r1
 801692a:	b09d      	sub	sp, #116	; 0x74
 801692c:	4614      	mov	r4, r2
 801692e:	4698      	mov	r8, r3
 8016930:	4606      	mov	r6, r0
 8016932:	b118      	cbz	r0, 801693c <_vfiprintf_r+0x18>
 8016934:	6983      	ldr	r3, [r0, #24]
 8016936:	b90b      	cbnz	r3, 801693c <_vfiprintf_r+0x18>
 8016938:	f000 fe32 	bl	80175a0 <__sinit>
 801693c:	4b89      	ldr	r3, [pc, #548]	; (8016b64 <_vfiprintf_r+0x240>)
 801693e:	429d      	cmp	r5, r3
 8016940:	d11b      	bne.n	801697a <_vfiprintf_r+0x56>
 8016942:	6875      	ldr	r5, [r6, #4]
 8016944:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016946:	07d9      	lsls	r1, r3, #31
 8016948:	d405      	bmi.n	8016956 <_vfiprintf_r+0x32>
 801694a:	89ab      	ldrh	r3, [r5, #12]
 801694c:	059a      	lsls	r2, r3, #22
 801694e:	d402      	bmi.n	8016956 <_vfiprintf_r+0x32>
 8016950:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016952:	f000 fec3 	bl	80176dc <__retarget_lock_acquire_recursive>
 8016956:	89ab      	ldrh	r3, [r5, #12]
 8016958:	071b      	lsls	r3, r3, #28
 801695a:	d501      	bpl.n	8016960 <_vfiprintf_r+0x3c>
 801695c:	692b      	ldr	r3, [r5, #16]
 801695e:	b9eb      	cbnz	r3, 801699c <_vfiprintf_r+0x78>
 8016960:	4629      	mov	r1, r5
 8016962:	4630      	mov	r0, r6
 8016964:	f000 fc32 	bl	80171cc <__swsetup_r>
 8016968:	b1c0      	cbz	r0, 801699c <_vfiprintf_r+0x78>
 801696a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801696c:	07dc      	lsls	r4, r3, #31
 801696e:	d50e      	bpl.n	801698e <_vfiprintf_r+0x6a>
 8016970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016974:	b01d      	add	sp, #116	; 0x74
 8016976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801697a:	4b7b      	ldr	r3, [pc, #492]	; (8016b68 <_vfiprintf_r+0x244>)
 801697c:	429d      	cmp	r5, r3
 801697e:	d101      	bne.n	8016984 <_vfiprintf_r+0x60>
 8016980:	68b5      	ldr	r5, [r6, #8]
 8016982:	e7df      	b.n	8016944 <_vfiprintf_r+0x20>
 8016984:	4b79      	ldr	r3, [pc, #484]	; (8016b6c <_vfiprintf_r+0x248>)
 8016986:	429d      	cmp	r5, r3
 8016988:	bf08      	it	eq
 801698a:	68f5      	ldreq	r5, [r6, #12]
 801698c:	e7da      	b.n	8016944 <_vfiprintf_r+0x20>
 801698e:	89ab      	ldrh	r3, [r5, #12]
 8016990:	0598      	lsls	r0, r3, #22
 8016992:	d4ed      	bmi.n	8016970 <_vfiprintf_r+0x4c>
 8016994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016996:	f000 fea3 	bl	80176e0 <__retarget_lock_release_recursive>
 801699a:	e7e9      	b.n	8016970 <_vfiprintf_r+0x4c>
 801699c:	2300      	movs	r3, #0
 801699e:	9309      	str	r3, [sp, #36]	; 0x24
 80169a0:	2320      	movs	r3, #32
 80169a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80169a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80169aa:	2330      	movs	r3, #48	; 0x30
 80169ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016b70 <_vfiprintf_r+0x24c>
 80169b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80169b4:	f04f 0901 	mov.w	r9, #1
 80169b8:	4623      	mov	r3, r4
 80169ba:	469a      	mov	sl, r3
 80169bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80169c0:	b10a      	cbz	r2, 80169c6 <_vfiprintf_r+0xa2>
 80169c2:	2a25      	cmp	r2, #37	; 0x25
 80169c4:	d1f9      	bne.n	80169ba <_vfiprintf_r+0x96>
 80169c6:	ebba 0b04 	subs.w	fp, sl, r4
 80169ca:	d00b      	beq.n	80169e4 <_vfiprintf_r+0xc0>
 80169cc:	465b      	mov	r3, fp
 80169ce:	4622      	mov	r2, r4
 80169d0:	4629      	mov	r1, r5
 80169d2:	4630      	mov	r0, r6
 80169d4:	f7ff ff93 	bl	80168fe <__sfputs_r>
 80169d8:	3001      	adds	r0, #1
 80169da:	f000 80aa 	beq.w	8016b32 <_vfiprintf_r+0x20e>
 80169de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80169e0:	445a      	add	r2, fp
 80169e2:	9209      	str	r2, [sp, #36]	; 0x24
 80169e4:	f89a 3000 	ldrb.w	r3, [sl]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	f000 80a2 	beq.w	8016b32 <_vfiprintf_r+0x20e>
 80169ee:	2300      	movs	r3, #0
 80169f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80169f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80169f8:	f10a 0a01 	add.w	sl, sl, #1
 80169fc:	9304      	str	r3, [sp, #16]
 80169fe:	9307      	str	r3, [sp, #28]
 8016a00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016a04:	931a      	str	r3, [sp, #104]	; 0x68
 8016a06:	4654      	mov	r4, sl
 8016a08:	2205      	movs	r2, #5
 8016a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a0e:	4858      	ldr	r0, [pc, #352]	; (8016b70 <_vfiprintf_r+0x24c>)
 8016a10:	f7e9 fbde 	bl	80001d0 <memchr>
 8016a14:	9a04      	ldr	r2, [sp, #16]
 8016a16:	b9d8      	cbnz	r0, 8016a50 <_vfiprintf_r+0x12c>
 8016a18:	06d1      	lsls	r1, r2, #27
 8016a1a:	bf44      	itt	mi
 8016a1c:	2320      	movmi	r3, #32
 8016a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a22:	0713      	lsls	r3, r2, #28
 8016a24:	bf44      	itt	mi
 8016a26:	232b      	movmi	r3, #43	; 0x2b
 8016a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8016a30:	2b2a      	cmp	r3, #42	; 0x2a
 8016a32:	d015      	beq.n	8016a60 <_vfiprintf_r+0x13c>
 8016a34:	9a07      	ldr	r2, [sp, #28]
 8016a36:	4654      	mov	r4, sl
 8016a38:	2000      	movs	r0, #0
 8016a3a:	f04f 0c0a 	mov.w	ip, #10
 8016a3e:	4621      	mov	r1, r4
 8016a40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016a44:	3b30      	subs	r3, #48	; 0x30
 8016a46:	2b09      	cmp	r3, #9
 8016a48:	d94e      	bls.n	8016ae8 <_vfiprintf_r+0x1c4>
 8016a4a:	b1b0      	cbz	r0, 8016a7a <_vfiprintf_r+0x156>
 8016a4c:	9207      	str	r2, [sp, #28]
 8016a4e:	e014      	b.n	8016a7a <_vfiprintf_r+0x156>
 8016a50:	eba0 0308 	sub.w	r3, r0, r8
 8016a54:	fa09 f303 	lsl.w	r3, r9, r3
 8016a58:	4313      	orrs	r3, r2
 8016a5a:	9304      	str	r3, [sp, #16]
 8016a5c:	46a2      	mov	sl, r4
 8016a5e:	e7d2      	b.n	8016a06 <_vfiprintf_r+0xe2>
 8016a60:	9b03      	ldr	r3, [sp, #12]
 8016a62:	1d19      	adds	r1, r3, #4
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	9103      	str	r1, [sp, #12]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	bfbb      	ittet	lt
 8016a6c:	425b      	neglt	r3, r3
 8016a6e:	f042 0202 	orrlt.w	r2, r2, #2
 8016a72:	9307      	strge	r3, [sp, #28]
 8016a74:	9307      	strlt	r3, [sp, #28]
 8016a76:	bfb8      	it	lt
 8016a78:	9204      	strlt	r2, [sp, #16]
 8016a7a:	7823      	ldrb	r3, [r4, #0]
 8016a7c:	2b2e      	cmp	r3, #46	; 0x2e
 8016a7e:	d10c      	bne.n	8016a9a <_vfiprintf_r+0x176>
 8016a80:	7863      	ldrb	r3, [r4, #1]
 8016a82:	2b2a      	cmp	r3, #42	; 0x2a
 8016a84:	d135      	bne.n	8016af2 <_vfiprintf_r+0x1ce>
 8016a86:	9b03      	ldr	r3, [sp, #12]
 8016a88:	1d1a      	adds	r2, r3, #4
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	9203      	str	r2, [sp, #12]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	bfb8      	it	lt
 8016a92:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016a96:	3402      	adds	r4, #2
 8016a98:	9305      	str	r3, [sp, #20]
 8016a9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016b80 <_vfiprintf_r+0x25c>
 8016a9e:	7821      	ldrb	r1, [r4, #0]
 8016aa0:	2203      	movs	r2, #3
 8016aa2:	4650      	mov	r0, sl
 8016aa4:	f7e9 fb94 	bl	80001d0 <memchr>
 8016aa8:	b140      	cbz	r0, 8016abc <_vfiprintf_r+0x198>
 8016aaa:	2340      	movs	r3, #64	; 0x40
 8016aac:	eba0 000a 	sub.w	r0, r0, sl
 8016ab0:	fa03 f000 	lsl.w	r0, r3, r0
 8016ab4:	9b04      	ldr	r3, [sp, #16]
 8016ab6:	4303      	orrs	r3, r0
 8016ab8:	3401      	adds	r4, #1
 8016aba:	9304      	str	r3, [sp, #16]
 8016abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ac0:	482c      	ldr	r0, [pc, #176]	; (8016b74 <_vfiprintf_r+0x250>)
 8016ac2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016ac6:	2206      	movs	r2, #6
 8016ac8:	f7e9 fb82 	bl	80001d0 <memchr>
 8016acc:	2800      	cmp	r0, #0
 8016ace:	d03f      	beq.n	8016b50 <_vfiprintf_r+0x22c>
 8016ad0:	4b29      	ldr	r3, [pc, #164]	; (8016b78 <_vfiprintf_r+0x254>)
 8016ad2:	bb1b      	cbnz	r3, 8016b1c <_vfiprintf_r+0x1f8>
 8016ad4:	9b03      	ldr	r3, [sp, #12]
 8016ad6:	3307      	adds	r3, #7
 8016ad8:	f023 0307 	bic.w	r3, r3, #7
 8016adc:	3308      	adds	r3, #8
 8016ade:	9303      	str	r3, [sp, #12]
 8016ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ae2:	443b      	add	r3, r7
 8016ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8016ae6:	e767      	b.n	80169b8 <_vfiprintf_r+0x94>
 8016ae8:	fb0c 3202 	mla	r2, ip, r2, r3
 8016aec:	460c      	mov	r4, r1
 8016aee:	2001      	movs	r0, #1
 8016af0:	e7a5      	b.n	8016a3e <_vfiprintf_r+0x11a>
 8016af2:	2300      	movs	r3, #0
 8016af4:	3401      	adds	r4, #1
 8016af6:	9305      	str	r3, [sp, #20]
 8016af8:	4619      	mov	r1, r3
 8016afa:	f04f 0c0a 	mov.w	ip, #10
 8016afe:	4620      	mov	r0, r4
 8016b00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b04:	3a30      	subs	r2, #48	; 0x30
 8016b06:	2a09      	cmp	r2, #9
 8016b08:	d903      	bls.n	8016b12 <_vfiprintf_r+0x1ee>
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d0c5      	beq.n	8016a9a <_vfiprintf_r+0x176>
 8016b0e:	9105      	str	r1, [sp, #20]
 8016b10:	e7c3      	b.n	8016a9a <_vfiprintf_r+0x176>
 8016b12:	fb0c 2101 	mla	r1, ip, r1, r2
 8016b16:	4604      	mov	r4, r0
 8016b18:	2301      	movs	r3, #1
 8016b1a:	e7f0      	b.n	8016afe <_vfiprintf_r+0x1da>
 8016b1c:	ab03      	add	r3, sp, #12
 8016b1e:	9300      	str	r3, [sp, #0]
 8016b20:	462a      	mov	r2, r5
 8016b22:	4b16      	ldr	r3, [pc, #88]	; (8016b7c <_vfiprintf_r+0x258>)
 8016b24:	a904      	add	r1, sp, #16
 8016b26:	4630      	mov	r0, r6
 8016b28:	f3af 8000 	nop.w
 8016b2c:	4607      	mov	r7, r0
 8016b2e:	1c78      	adds	r0, r7, #1
 8016b30:	d1d6      	bne.n	8016ae0 <_vfiprintf_r+0x1bc>
 8016b32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016b34:	07d9      	lsls	r1, r3, #31
 8016b36:	d405      	bmi.n	8016b44 <_vfiprintf_r+0x220>
 8016b38:	89ab      	ldrh	r3, [r5, #12]
 8016b3a:	059a      	lsls	r2, r3, #22
 8016b3c:	d402      	bmi.n	8016b44 <_vfiprintf_r+0x220>
 8016b3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016b40:	f000 fdce 	bl	80176e0 <__retarget_lock_release_recursive>
 8016b44:	89ab      	ldrh	r3, [r5, #12]
 8016b46:	065b      	lsls	r3, r3, #25
 8016b48:	f53f af12 	bmi.w	8016970 <_vfiprintf_r+0x4c>
 8016b4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016b4e:	e711      	b.n	8016974 <_vfiprintf_r+0x50>
 8016b50:	ab03      	add	r3, sp, #12
 8016b52:	9300      	str	r3, [sp, #0]
 8016b54:	462a      	mov	r2, r5
 8016b56:	4b09      	ldr	r3, [pc, #36]	; (8016b7c <_vfiprintf_r+0x258>)
 8016b58:	a904      	add	r1, sp, #16
 8016b5a:	4630      	mov	r0, r6
 8016b5c:	f000 f880 	bl	8016c60 <_printf_i>
 8016b60:	e7e4      	b.n	8016b2c <_vfiprintf_r+0x208>
 8016b62:	bf00      	nop
 8016b64:	0801e2d0 	.word	0x0801e2d0
 8016b68:	0801e2f0 	.word	0x0801e2f0
 8016b6c:	0801e2b0 	.word	0x0801e2b0
 8016b70:	0801e27c 	.word	0x0801e27c
 8016b74:	0801e286 	.word	0x0801e286
 8016b78:	00000000 	.word	0x00000000
 8016b7c:	080168ff 	.word	0x080168ff
 8016b80:	0801e282 	.word	0x0801e282

08016b84 <_printf_common>:
 8016b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b88:	4616      	mov	r6, r2
 8016b8a:	4699      	mov	r9, r3
 8016b8c:	688a      	ldr	r2, [r1, #8]
 8016b8e:	690b      	ldr	r3, [r1, #16]
 8016b90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016b94:	4293      	cmp	r3, r2
 8016b96:	bfb8      	it	lt
 8016b98:	4613      	movlt	r3, r2
 8016b9a:	6033      	str	r3, [r6, #0]
 8016b9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016ba0:	4607      	mov	r7, r0
 8016ba2:	460c      	mov	r4, r1
 8016ba4:	b10a      	cbz	r2, 8016baa <_printf_common+0x26>
 8016ba6:	3301      	adds	r3, #1
 8016ba8:	6033      	str	r3, [r6, #0]
 8016baa:	6823      	ldr	r3, [r4, #0]
 8016bac:	0699      	lsls	r1, r3, #26
 8016bae:	bf42      	ittt	mi
 8016bb0:	6833      	ldrmi	r3, [r6, #0]
 8016bb2:	3302      	addmi	r3, #2
 8016bb4:	6033      	strmi	r3, [r6, #0]
 8016bb6:	6825      	ldr	r5, [r4, #0]
 8016bb8:	f015 0506 	ands.w	r5, r5, #6
 8016bbc:	d106      	bne.n	8016bcc <_printf_common+0x48>
 8016bbe:	f104 0a19 	add.w	sl, r4, #25
 8016bc2:	68e3      	ldr	r3, [r4, #12]
 8016bc4:	6832      	ldr	r2, [r6, #0]
 8016bc6:	1a9b      	subs	r3, r3, r2
 8016bc8:	42ab      	cmp	r3, r5
 8016bca:	dc26      	bgt.n	8016c1a <_printf_common+0x96>
 8016bcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016bd0:	1e13      	subs	r3, r2, #0
 8016bd2:	6822      	ldr	r2, [r4, #0]
 8016bd4:	bf18      	it	ne
 8016bd6:	2301      	movne	r3, #1
 8016bd8:	0692      	lsls	r2, r2, #26
 8016bda:	d42b      	bmi.n	8016c34 <_printf_common+0xb0>
 8016bdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016be0:	4649      	mov	r1, r9
 8016be2:	4638      	mov	r0, r7
 8016be4:	47c0      	blx	r8
 8016be6:	3001      	adds	r0, #1
 8016be8:	d01e      	beq.n	8016c28 <_printf_common+0xa4>
 8016bea:	6823      	ldr	r3, [r4, #0]
 8016bec:	68e5      	ldr	r5, [r4, #12]
 8016bee:	6832      	ldr	r2, [r6, #0]
 8016bf0:	f003 0306 	and.w	r3, r3, #6
 8016bf4:	2b04      	cmp	r3, #4
 8016bf6:	bf08      	it	eq
 8016bf8:	1aad      	subeq	r5, r5, r2
 8016bfa:	68a3      	ldr	r3, [r4, #8]
 8016bfc:	6922      	ldr	r2, [r4, #16]
 8016bfe:	bf0c      	ite	eq
 8016c00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016c04:	2500      	movne	r5, #0
 8016c06:	4293      	cmp	r3, r2
 8016c08:	bfc4      	itt	gt
 8016c0a:	1a9b      	subgt	r3, r3, r2
 8016c0c:	18ed      	addgt	r5, r5, r3
 8016c0e:	2600      	movs	r6, #0
 8016c10:	341a      	adds	r4, #26
 8016c12:	42b5      	cmp	r5, r6
 8016c14:	d11a      	bne.n	8016c4c <_printf_common+0xc8>
 8016c16:	2000      	movs	r0, #0
 8016c18:	e008      	b.n	8016c2c <_printf_common+0xa8>
 8016c1a:	2301      	movs	r3, #1
 8016c1c:	4652      	mov	r2, sl
 8016c1e:	4649      	mov	r1, r9
 8016c20:	4638      	mov	r0, r7
 8016c22:	47c0      	blx	r8
 8016c24:	3001      	adds	r0, #1
 8016c26:	d103      	bne.n	8016c30 <_printf_common+0xac>
 8016c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c30:	3501      	adds	r5, #1
 8016c32:	e7c6      	b.n	8016bc2 <_printf_common+0x3e>
 8016c34:	18e1      	adds	r1, r4, r3
 8016c36:	1c5a      	adds	r2, r3, #1
 8016c38:	2030      	movs	r0, #48	; 0x30
 8016c3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016c3e:	4422      	add	r2, r4
 8016c40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016c44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016c48:	3302      	adds	r3, #2
 8016c4a:	e7c7      	b.n	8016bdc <_printf_common+0x58>
 8016c4c:	2301      	movs	r3, #1
 8016c4e:	4622      	mov	r2, r4
 8016c50:	4649      	mov	r1, r9
 8016c52:	4638      	mov	r0, r7
 8016c54:	47c0      	blx	r8
 8016c56:	3001      	adds	r0, #1
 8016c58:	d0e6      	beq.n	8016c28 <_printf_common+0xa4>
 8016c5a:	3601      	adds	r6, #1
 8016c5c:	e7d9      	b.n	8016c12 <_printf_common+0x8e>
	...

08016c60 <_printf_i>:
 8016c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016c64:	460c      	mov	r4, r1
 8016c66:	4691      	mov	r9, r2
 8016c68:	7e27      	ldrb	r7, [r4, #24]
 8016c6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016c6c:	2f78      	cmp	r7, #120	; 0x78
 8016c6e:	4680      	mov	r8, r0
 8016c70:	469a      	mov	sl, r3
 8016c72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016c76:	d807      	bhi.n	8016c88 <_printf_i+0x28>
 8016c78:	2f62      	cmp	r7, #98	; 0x62
 8016c7a:	d80a      	bhi.n	8016c92 <_printf_i+0x32>
 8016c7c:	2f00      	cmp	r7, #0
 8016c7e:	f000 80d8 	beq.w	8016e32 <_printf_i+0x1d2>
 8016c82:	2f58      	cmp	r7, #88	; 0x58
 8016c84:	f000 80a3 	beq.w	8016dce <_printf_i+0x16e>
 8016c88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016c8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016c90:	e03a      	b.n	8016d08 <_printf_i+0xa8>
 8016c92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016c96:	2b15      	cmp	r3, #21
 8016c98:	d8f6      	bhi.n	8016c88 <_printf_i+0x28>
 8016c9a:	a001      	add	r0, pc, #4	; (adr r0, 8016ca0 <_printf_i+0x40>)
 8016c9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016ca0:	08016cf9 	.word	0x08016cf9
 8016ca4:	08016d0d 	.word	0x08016d0d
 8016ca8:	08016c89 	.word	0x08016c89
 8016cac:	08016c89 	.word	0x08016c89
 8016cb0:	08016c89 	.word	0x08016c89
 8016cb4:	08016c89 	.word	0x08016c89
 8016cb8:	08016d0d 	.word	0x08016d0d
 8016cbc:	08016c89 	.word	0x08016c89
 8016cc0:	08016c89 	.word	0x08016c89
 8016cc4:	08016c89 	.word	0x08016c89
 8016cc8:	08016c89 	.word	0x08016c89
 8016ccc:	08016e19 	.word	0x08016e19
 8016cd0:	08016d3d 	.word	0x08016d3d
 8016cd4:	08016dfb 	.word	0x08016dfb
 8016cd8:	08016c89 	.word	0x08016c89
 8016cdc:	08016c89 	.word	0x08016c89
 8016ce0:	08016e3b 	.word	0x08016e3b
 8016ce4:	08016c89 	.word	0x08016c89
 8016ce8:	08016d3d 	.word	0x08016d3d
 8016cec:	08016c89 	.word	0x08016c89
 8016cf0:	08016c89 	.word	0x08016c89
 8016cf4:	08016e03 	.word	0x08016e03
 8016cf8:	680b      	ldr	r3, [r1, #0]
 8016cfa:	1d1a      	adds	r2, r3, #4
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	600a      	str	r2, [r1, #0]
 8016d00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016d08:	2301      	movs	r3, #1
 8016d0a:	e0a3      	b.n	8016e54 <_printf_i+0x1f4>
 8016d0c:	6825      	ldr	r5, [r4, #0]
 8016d0e:	6808      	ldr	r0, [r1, #0]
 8016d10:	062e      	lsls	r6, r5, #24
 8016d12:	f100 0304 	add.w	r3, r0, #4
 8016d16:	d50a      	bpl.n	8016d2e <_printf_i+0xce>
 8016d18:	6805      	ldr	r5, [r0, #0]
 8016d1a:	600b      	str	r3, [r1, #0]
 8016d1c:	2d00      	cmp	r5, #0
 8016d1e:	da03      	bge.n	8016d28 <_printf_i+0xc8>
 8016d20:	232d      	movs	r3, #45	; 0x2d
 8016d22:	426d      	negs	r5, r5
 8016d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016d28:	485e      	ldr	r0, [pc, #376]	; (8016ea4 <_printf_i+0x244>)
 8016d2a:	230a      	movs	r3, #10
 8016d2c:	e019      	b.n	8016d62 <_printf_i+0x102>
 8016d2e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016d32:	6805      	ldr	r5, [r0, #0]
 8016d34:	600b      	str	r3, [r1, #0]
 8016d36:	bf18      	it	ne
 8016d38:	b22d      	sxthne	r5, r5
 8016d3a:	e7ef      	b.n	8016d1c <_printf_i+0xbc>
 8016d3c:	680b      	ldr	r3, [r1, #0]
 8016d3e:	6825      	ldr	r5, [r4, #0]
 8016d40:	1d18      	adds	r0, r3, #4
 8016d42:	6008      	str	r0, [r1, #0]
 8016d44:	0628      	lsls	r0, r5, #24
 8016d46:	d501      	bpl.n	8016d4c <_printf_i+0xec>
 8016d48:	681d      	ldr	r5, [r3, #0]
 8016d4a:	e002      	b.n	8016d52 <_printf_i+0xf2>
 8016d4c:	0669      	lsls	r1, r5, #25
 8016d4e:	d5fb      	bpl.n	8016d48 <_printf_i+0xe8>
 8016d50:	881d      	ldrh	r5, [r3, #0]
 8016d52:	4854      	ldr	r0, [pc, #336]	; (8016ea4 <_printf_i+0x244>)
 8016d54:	2f6f      	cmp	r7, #111	; 0x6f
 8016d56:	bf0c      	ite	eq
 8016d58:	2308      	moveq	r3, #8
 8016d5a:	230a      	movne	r3, #10
 8016d5c:	2100      	movs	r1, #0
 8016d5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016d62:	6866      	ldr	r6, [r4, #4]
 8016d64:	60a6      	str	r6, [r4, #8]
 8016d66:	2e00      	cmp	r6, #0
 8016d68:	bfa2      	ittt	ge
 8016d6a:	6821      	ldrge	r1, [r4, #0]
 8016d6c:	f021 0104 	bicge.w	r1, r1, #4
 8016d70:	6021      	strge	r1, [r4, #0]
 8016d72:	b90d      	cbnz	r5, 8016d78 <_printf_i+0x118>
 8016d74:	2e00      	cmp	r6, #0
 8016d76:	d04d      	beq.n	8016e14 <_printf_i+0x1b4>
 8016d78:	4616      	mov	r6, r2
 8016d7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8016d7e:	fb03 5711 	mls	r7, r3, r1, r5
 8016d82:	5dc7      	ldrb	r7, [r0, r7]
 8016d84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016d88:	462f      	mov	r7, r5
 8016d8a:	42bb      	cmp	r3, r7
 8016d8c:	460d      	mov	r5, r1
 8016d8e:	d9f4      	bls.n	8016d7a <_printf_i+0x11a>
 8016d90:	2b08      	cmp	r3, #8
 8016d92:	d10b      	bne.n	8016dac <_printf_i+0x14c>
 8016d94:	6823      	ldr	r3, [r4, #0]
 8016d96:	07df      	lsls	r7, r3, #31
 8016d98:	d508      	bpl.n	8016dac <_printf_i+0x14c>
 8016d9a:	6923      	ldr	r3, [r4, #16]
 8016d9c:	6861      	ldr	r1, [r4, #4]
 8016d9e:	4299      	cmp	r1, r3
 8016da0:	bfde      	ittt	le
 8016da2:	2330      	movle	r3, #48	; 0x30
 8016da4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016da8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8016dac:	1b92      	subs	r2, r2, r6
 8016dae:	6122      	str	r2, [r4, #16]
 8016db0:	f8cd a000 	str.w	sl, [sp]
 8016db4:	464b      	mov	r3, r9
 8016db6:	aa03      	add	r2, sp, #12
 8016db8:	4621      	mov	r1, r4
 8016dba:	4640      	mov	r0, r8
 8016dbc:	f7ff fee2 	bl	8016b84 <_printf_common>
 8016dc0:	3001      	adds	r0, #1
 8016dc2:	d14c      	bne.n	8016e5e <_printf_i+0x1fe>
 8016dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016dc8:	b004      	add	sp, #16
 8016dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dce:	4835      	ldr	r0, [pc, #212]	; (8016ea4 <_printf_i+0x244>)
 8016dd0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016dd4:	6823      	ldr	r3, [r4, #0]
 8016dd6:	680e      	ldr	r6, [r1, #0]
 8016dd8:	061f      	lsls	r7, r3, #24
 8016dda:	f856 5b04 	ldr.w	r5, [r6], #4
 8016dde:	600e      	str	r6, [r1, #0]
 8016de0:	d514      	bpl.n	8016e0c <_printf_i+0x1ac>
 8016de2:	07d9      	lsls	r1, r3, #31
 8016de4:	bf44      	itt	mi
 8016de6:	f043 0320 	orrmi.w	r3, r3, #32
 8016dea:	6023      	strmi	r3, [r4, #0]
 8016dec:	b91d      	cbnz	r5, 8016df6 <_printf_i+0x196>
 8016dee:	6823      	ldr	r3, [r4, #0]
 8016df0:	f023 0320 	bic.w	r3, r3, #32
 8016df4:	6023      	str	r3, [r4, #0]
 8016df6:	2310      	movs	r3, #16
 8016df8:	e7b0      	b.n	8016d5c <_printf_i+0xfc>
 8016dfa:	6823      	ldr	r3, [r4, #0]
 8016dfc:	f043 0320 	orr.w	r3, r3, #32
 8016e00:	6023      	str	r3, [r4, #0]
 8016e02:	2378      	movs	r3, #120	; 0x78
 8016e04:	4828      	ldr	r0, [pc, #160]	; (8016ea8 <_printf_i+0x248>)
 8016e06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016e0a:	e7e3      	b.n	8016dd4 <_printf_i+0x174>
 8016e0c:	065e      	lsls	r6, r3, #25
 8016e0e:	bf48      	it	mi
 8016e10:	b2ad      	uxthmi	r5, r5
 8016e12:	e7e6      	b.n	8016de2 <_printf_i+0x182>
 8016e14:	4616      	mov	r6, r2
 8016e16:	e7bb      	b.n	8016d90 <_printf_i+0x130>
 8016e18:	680b      	ldr	r3, [r1, #0]
 8016e1a:	6826      	ldr	r6, [r4, #0]
 8016e1c:	6960      	ldr	r0, [r4, #20]
 8016e1e:	1d1d      	adds	r5, r3, #4
 8016e20:	600d      	str	r5, [r1, #0]
 8016e22:	0635      	lsls	r5, r6, #24
 8016e24:	681b      	ldr	r3, [r3, #0]
 8016e26:	d501      	bpl.n	8016e2c <_printf_i+0x1cc>
 8016e28:	6018      	str	r0, [r3, #0]
 8016e2a:	e002      	b.n	8016e32 <_printf_i+0x1d2>
 8016e2c:	0671      	lsls	r1, r6, #25
 8016e2e:	d5fb      	bpl.n	8016e28 <_printf_i+0x1c8>
 8016e30:	8018      	strh	r0, [r3, #0]
 8016e32:	2300      	movs	r3, #0
 8016e34:	6123      	str	r3, [r4, #16]
 8016e36:	4616      	mov	r6, r2
 8016e38:	e7ba      	b.n	8016db0 <_printf_i+0x150>
 8016e3a:	680b      	ldr	r3, [r1, #0]
 8016e3c:	1d1a      	adds	r2, r3, #4
 8016e3e:	600a      	str	r2, [r1, #0]
 8016e40:	681e      	ldr	r6, [r3, #0]
 8016e42:	6862      	ldr	r2, [r4, #4]
 8016e44:	2100      	movs	r1, #0
 8016e46:	4630      	mov	r0, r6
 8016e48:	f7e9 f9c2 	bl	80001d0 <memchr>
 8016e4c:	b108      	cbz	r0, 8016e52 <_printf_i+0x1f2>
 8016e4e:	1b80      	subs	r0, r0, r6
 8016e50:	6060      	str	r0, [r4, #4]
 8016e52:	6863      	ldr	r3, [r4, #4]
 8016e54:	6123      	str	r3, [r4, #16]
 8016e56:	2300      	movs	r3, #0
 8016e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016e5c:	e7a8      	b.n	8016db0 <_printf_i+0x150>
 8016e5e:	6923      	ldr	r3, [r4, #16]
 8016e60:	4632      	mov	r2, r6
 8016e62:	4649      	mov	r1, r9
 8016e64:	4640      	mov	r0, r8
 8016e66:	47d0      	blx	sl
 8016e68:	3001      	adds	r0, #1
 8016e6a:	d0ab      	beq.n	8016dc4 <_printf_i+0x164>
 8016e6c:	6823      	ldr	r3, [r4, #0]
 8016e6e:	079b      	lsls	r3, r3, #30
 8016e70:	d413      	bmi.n	8016e9a <_printf_i+0x23a>
 8016e72:	68e0      	ldr	r0, [r4, #12]
 8016e74:	9b03      	ldr	r3, [sp, #12]
 8016e76:	4298      	cmp	r0, r3
 8016e78:	bfb8      	it	lt
 8016e7a:	4618      	movlt	r0, r3
 8016e7c:	e7a4      	b.n	8016dc8 <_printf_i+0x168>
 8016e7e:	2301      	movs	r3, #1
 8016e80:	4632      	mov	r2, r6
 8016e82:	4649      	mov	r1, r9
 8016e84:	4640      	mov	r0, r8
 8016e86:	47d0      	blx	sl
 8016e88:	3001      	adds	r0, #1
 8016e8a:	d09b      	beq.n	8016dc4 <_printf_i+0x164>
 8016e8c:	3501      	adds	r5, #1
 8016e8e:	68e3      	ldr	r3, [r4, #12]
 8016e90:	9903      	ldr	r1, [sp, #12]
 8016e92:	1a5b      	subs	r3, r3, r1
 8016e94:	42ab      	cmp	r3, r5
 8016e96:	dcf2      	bgt.n	8016e7e <_printf_i+0x21e>
 8016e98:	e7eb      	b.n	8016e72 <_printf_i+0x212>
 8016e9a:	2500      	movs	r5, #0
 8016e9c:	f104 0619 	add.w	r6, r4, #25
 8016ea0:	e7f5      	b.n	8016e8e <_printf_i+0x22e>
 8016ea2:	bf00      	nop
 8016ea4:	0801e28d 	.word	0x0801e28d
 8016ea8:	0801e29e 	.word	0x0801e29e

08016eac <_puts_r>:
 8016eac:	b570      	push	{r4, r5, r6, lr}
 8016eae:	460e      	mov	r6, r1
 8016eb0:	4605      	mov	r5, r0
 8016eb2:	b118      	cbz	r0, 8016ebc <_puts_r+0x10>
 8016eb4:	6983      	ldr	r3, [r0, #24]
 8016eb6:	b90b      	cbnz	r3, 8016ebc <_puts_r+0x10>
 8016eb8:	f000 fb72 	bl	80175a0 <__sinit>
 8016ebc:	69ab      	ldr	r3, [r5, #24]
 8016ebe:	68ac      	ldr	r4, [r5, #8]
 8016ec0:	b913      	cbnz	r3, 8016ec8 <_puts_r+0x1c>
 8016ec2:	4628      	mov	r0, r5
 8016ec4:	f000 fb6c 	bl	80175a0 <__sinit>
 8016ec8:	4b2c      	ldr	r3, [pc, #176]	; (8016f7c <_puts_r+0xd0>)
 8016eca:	429c      	cmp	r4, r3
 8016ecc:	d120      	bne.n	8016f10 <_puts_r+0x64>
 8016ece:	686c      	ldr	r4, [r5, #4]
 8016ed0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016ed2:	07db      	lsls	r3, r3, #31
 8016ed4:	d405      	bmi.n	8016ee2 <_puts_r+0x36>
 8016ed6:	89a3      	ldrh	r3, [r4, #12]
 8016ed8:	0598      	lsls	r0, r3, #22
 8016eda:	d402      	bmi.n	8016ee2 <_puts_r+0x36>
 8016edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016ede:	f000 fbfd 	bl	80176dc <__retarget_lock_acquire_recursive>
 8016ee2:	89a3      	ldrh	r3, [r4, #12]
 8016ee4:	0719      	lsls	r1, r3, #28
 8016ee6:	d51d      	bpl.n	8016f24 <_puts_r+0x78>
 8016ee8:	6923      	ldr	r3, [r4, #16]
 8016eea:	b1db      	cbz	r3, 8016f24 <_puts_r+0x78>
 8016eec:	3e01      	subs	r6, #1
 8016eee:	68a3      	ldr	r3, [r4, #8]
 8016ef0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016ef4:	3b01      	subs	r3, #1
 8016ef6:	60a3      	str	r3, [r4, #8]
 8016ef8:	bb39      	cbnz	r1, 8016f4a <_puts_r+0x9e>
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	da38      	bge.n	8016f70 <_puts_r+0xc4>
 8016efe:	4622      	mov	r2, r4
 8016f00:	210a      	movs	r1, #10
 8016f02:	4628      	mov	r0, r5
 8016f04:	f000 f910 	bl	8017128 <__swbuf_r>
 8016f08:	3001      	adds	r0, #1
 8016f0a:	d011      	beq.n	8016f30 <_puts_r+0x84>
 8016f0c:	250a      	movs	r5, #10
 8016f0e:	e011      	b.n	8016f34 <_puts_r+0x88>
 8016f10:	4b1b      	ldr	r3, [pc, #108]	; (8016f80 <_puts_r+0xd4>)
 8016f12:	429c      	cmp	r4, r3
 8016f14:	d101      	bne.n	8016f1a <_puts_r+0x6e>
 8016f16:	68ac      	ldr	r4, [r5, #8]
 8016f18:	e7da      	b.n	8016ed0 <_puts_r+0x24>
 8016f1a:	4b1a      	ldr	r3, [pc, #104]	; (8016f84 <_puts_r+0xd8>)
 8016f1c:	429c      	cmp	r4, r3
 8016f1e:	bf08      	it	eq
 8016f20:	68ec      	ldreq	r4, [r5, #12]
 8016f22:	e7d5      	b.n	8016ed0 <_puts_r+0x24>
 8016f24:	4621      	mov	r1, r4
 8016f26:	4628      	mov	r0, r5
 8016f28:	f000 f950 	bl	80171cc <__swsetup_r>
 8016f2c:	2800      	cmp	r0, #0
 8016f2e:	d0dd      	beq.n	8016eec <_puts_r+0x40>
 8016f30:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016f34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016f36:	07da      	lsls	r2, r3, #31
 8016f38:	d405      	bmi.n	8016f46 <_puts_r+0x9a>
 8016f3a:	89a3      	ldrh	r3, [r4, #12]
 8016f3c:	059b      	lsls	r3, r3, #22
 8016f3e:	d402      	bmi.n	8016f46 <_puts_r+0x9a>
 8016f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f42:	f000 fbcd 	bl	80176e0 <__retarget_lock_release_recursive>
 8016f46:	4628      	mov	r0, r5
 8016f48:	bd70      	pop	{r4, r5, r6, pc}
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	da04      	bge.n	8016f58 <_puts_r+0xac>
 8016f4e:	69a2      	ldr	r2, [r4, #24]
 8016f50:	429a      	cmp	r2, r3
 8016f52:	dc06      	bgt.n	8016f62 <_puts_r+0xb6>
 8016f54:	290a      	cmp	r1, #10
 8016f56:	d004      	beq.n	8016f62 <_puts_r+0xb6>
 8016f58:	6823      	ldr	r3, [r4, #0]
 8016f5a:	1c5a      	adds	r2, r3, #1
 8016f5c:	6022      	str	r2, [r4, #0]
 8016f5e:	7019      	strb	r1, [r3, #0]
 8016f60:	e7c5      	b.n	8016eee <_puts_r+0x42>
 8016f62:	4622      	mov	r2, r4
 8016f64:	4628      	mov	r0, r5
 8016f66:	f000 f8df 	bl	8017128 <__swbuf_r>
 8016f6a:	3001      	adds	r0, #1
 8016f6c:	d1bf      	bne.n	8016eee <_puts_r+0x42>
 8016f6e:	e7df      	b.n	8016f30 <_puts_r+0x84>
 8016f70:	6823      	ldr	r3, [r4, #0]
 8016f72:	250a      	movs	r5, #10
 8016f74:	1c5a      	adds	r2, r3, #1
 8016f76:	6022      	str	r2, [r4, #0]
 8016f78:	701d      	strb	r5, [r3, #0]
 8016f7a:	e7db      	b.n	8016f34 <_puts_r+0x88>
 8016f7c:	0801e2d0 	.word	0x0801e2d0
 8016f80:	0801e2f0 	.word	0x0801e2f0
 8016f84:	0801e2b0 	.word	0x0801e2b0

08016f88 <puts>:
 8016f88:	4b02      	ldr	r3, [pc, #8]	; (8016f94 <puts+0xc>)
 8016f8a:	4601      	mov	r1, r0
 8016f8c:	6818      	ldr	r0, [r3, #0]
 8016f8e:	f7ff bf8d 	b.w	8016eac <_puts_r>
 8016f92:	bf00      	nop
 8016f94:	20000018 	.word	0x20000018

08016f98 <_sbrk_r>:
 8016f98:	b538      	push	{r3, r4, r5, lr}
 8016f9a:	4d06      	ldr	r5, [pc, #24]	; (8016fb4 <_sbrk_r+0x1c>)
 8016f9c:	2300      	movs	r3, #0
 8016f9e:	4604      	mov	r4, r0
 8016fa0:	4608      	mov	r0, r1
 8016fa2:	602b      	str	r3, [r5, #0]
 8016fa4:	f7ea f96c 	bl	8001280 <_sbrk>
 8016fa8:	1c43      	adds	r3, r0, #1
 8016faa:	d102      	bne.n	8016fb2 <_sbrk_r+0x1a>
 8016fac:	682b      	ldr	r3, [r5, #0]
 8016fae:	b103      	cbz	r3, 8016fb2 <_sbrk_r+0x1a>
 8016fb0:	6023      	str	r3, [r4, #0]
 8016fb2:	bd38      	pop	{r3, r4, r5, pc}
 8016fb4:	20001f2c 	.word	0x20001f2c

08016fb8 <_raise_r>:
 8016fb8:	291f      	cmp	r1, #31
 8016fba:	b538      	push	{r3, r4, r5, lr}
 8016fbc:	4604      	mov	r4, r0
 8016fbe:	460d      	mov	r5, r1
 8016fc0:	d904      	bls.n	8016fcc <_raise_r+0x14>
 8016fc2:	2316      	movs	r3, #22
 8016fc4:	6003      	str	r3, [r0, #0]
 8016fc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016fca:	bd38      	pop	{r3, r4, r5, pc}
 8016fcc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016fce:	b112      	cbz	r2, 8016fd6 <_raise_r+0x1e>
 8016fd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016fd4:	b94b      	cbnz	r3, 8016fea <_raise_r+0x32>
 8016fd6:	4620      	mov	r0, r4
 8016fd8:	f000 f830 	bl	801703c <_getpid_r>
 8016fdc:	462a      	mov	r2, r5
 8016fde:	4601      	mov	r1, r0
 8016fe0:	4620      	mov	r0, r4
 8016fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016fe6:	f000 b817 	b.w	8017018 <_kill_r>
 8016fea:	2b01      	cmp	r3, #1
 8016fec:	d00a      	beq.n	8017004 <_raise_r+0x4c>
 8016fee:	1c59      	adds	r1, r3, #1
 8016ff0:	d103      	bne.n	8016ffa <_raise_r+0x42>
 8016ff2:	2316      	movs	r3, #22
 8016ff4:	6003      	str	r3, [r0, #0]
 8016ff6:	2001      	movs	r0, #1
 8016ff8:	e7e7      	b.n	8016fca <_raise_r+0x12>
 8016ffa:	2400      	movs	r4, #0
 8016ffc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017000:	4628      	mov	r0, r5
 8017002:	4798      	blx	r3
 8017004:	2000      	movs	r0, #0
 8017006:	e7e0      	b.n	8016fca <_raise_r+0x12>

08017008 <raise>:
 8017008:	4b02      	ldr	r3, [pc, #8]	; (8017014 <raise+0xc>)
 801700a:	4601      	mov	r1, r0
 801700c:	6818      	ldr	r0, [r3, #0]
 801700e:	f7ff bfd3 	b.w	8016fb8 <_raise_r>
 8017012:	bf00      	nop
 8017014:	20000018 	.word	0x20000018

08017018 <_kill_r>:
 8017018:	b538      	push	{r3, r4, r5, lr}
 801701a:	4d07      	ldr	r5, [pc, #28]	; (8017038 <_kill_r+0x20>)
 801701c:	2300      	movs	r3, #0
 801701e:	4604      	mov	r4, r0
 8017020:	4608      	mov	r0, r1
 8017022:	4611      	mov	r1, r2
 8017024:	602b      	str	r3, [r5, #0]
 8017026:	f7ea f8ad 	bl	8001184 <_kill>
 801702a:	1c43      	adds	r3, r0, #1
 801702c:	d102      	bne.n	8017034 <_kill_r+0x1c>
 801702e:	682b      	ldr	r3, [r5, #0]
 8017030:	b103      	cbz	r3, 8017034 <_kill_r+0x1c>
 8017032:	6023      	str	r3, [r4, #0]
 8017034:	bd38      	pop	{r3, r4, r5, pc}
 8017036:	bf00      	nop
 8017038:	20001f2c 	.word	0x20001f2c

0801703c <_getpid_r>:
 801703c:	f7ea b89a 	b.w	8001174 <_getpid>

08017040 <sniprintf>:
 8017040:	b40c      	push	{r2, r3}
 8017042:	b530      	push	{r4, r5, lr}
 8017044:	4b17      	ldr	r3, [pc, #92]	; (80170a4 <sniprintf+0x64>)
 8017046:	1e0c      	subs	r4, r1, #0
 8017048:	681d      	ldr	r5, [r3, #0]
 801704a:	b09d      	sub	sp, #116	; 0x74
 801704c:	da08      	bge.n	8017060 <sniprintf+0x20>
 801704e:	238b      	movs	r3, #139	; 0x8b
 8017050:	602b      	str	r3, [r5, #0]
 8017052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017056:	b01d      	add	sp, #116	; 0x74
 8017058:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801705c:	b002      	add	sp, #8
 801705e:	4770      	bx	lr
 8017060:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017064:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017068:	bf14      	ite	ne
 801706a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801706e:	4623      	moveq	r3, r4
 8017070:	9304      	str	r3, [sp, #16]
 8017072:	9307      	str	r3, [sp, #28]
 8017074:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017078:	9002      	str	r0, [sp, #8]
 801707a:	9006      	str	r0, [sp, #24]
 801707c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017080:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017082:	ab21      	add	r3, sp, #132	; 0x84
 8017084:	a902      	add	r1, sp, #8
 8017086:	4628      	mov	r0, r5
 8017088:	9301      	str	r3, [sp, #4]
 801708a:	f000 fc1d 	bl	80178c8 <_svfiprintf_r>
 801708e:	1c43      	adds	r3, r0, #1
 8017090:	bfbc      	itt	lt
 8017092:	238b      	movlt	r3, #139	; 0x8b
 8017094:	602b      	strlt	r3, [r5, #0]
 8017096:	2c00      	cmp	r4, #0
 8017098:	d0dd      	beq.n	8017056 <sniprintf+0x16>
 801709a:	9b02      	ldr	r3, [sp, #8]
 801709c:	2200      	movs	r2, #0
 801709e:	701a      	strb	r2, [r3, #0]
 80170a0:	e7d9      	b.n	8017056 <sniprintf+0x16>
 80170a2:	bf00      	nop
 80170a4:	20000018 	.word	0x20000018

080170a8 <siprintf>:
 80170a8:	b40e      	push	{r1, r2, r3}
 80170aa:	b500      	push	{lr}
 80170ac:	b09c      	sub	sp, #112	; 0x70
 80170ae:	ab1d      	add	r3, sp, #116	; 0x74
 80170b0:	9002      	str	r0, [sp, #8]
 80170b2:	9006      	str	r0, [sp, #24]
 80170b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80170b8:	4809      	ldr	r0, [pc, #36]	; (80170e0 <siprintf+0x38>)
 80170ba:	9107      	str	r1, [sp, #28]
 80170bc:	9104      	str	r1, [sp, #16]
 80170be:	4909      	ldr	r1, [pc, #36]	; (80170e4 <siprintf+0x3c>)
 80170c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80170c4:	9105      	str	r1, [sp, #20]
 80170c6:	6800      	ldr	r0, [r0, #0]
 80170c8:	9301      	str	r3, [sp, #4]
 80170ca:	a902      	add	r1, sp, #8
 80170cc:	f000 fbfc 	bl	80178c8 <_svfiprintf_r>
 80170d0:	9b02      	ldr	r3, [sp, #8]
 80170d2:	2200      	movs	r2, #0
 80170d4:	701a      	strb	r2, [r3, #0]
 80170d6:	b01c      	add	sp, #112	; 0x70
 80170d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80170dc:	b003      	add	sp, #12
 80170de:	4770      	bx	lr
 80170e0:	20000018 	.word	0x20000018
 80170e4:	ffff0208 	.word	0xffff0208

080170e8 <_vsiprintf_r>:
 80170e8:	b500      	push	{lr}
 80170ea:	b09b      	sub	sp, #108	; 0x6c
 80170ec:	9100      	str	r1, [sp, #0]
 80170ee:	9104      	str	r1, [sp, #16]
 80170f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80170f4:	9105      	str	r1, [sp, #20]
 80170f6:	9102      	str	r1, [sp, #8]
 80170f8:	4905      	ldr	r1, [pc, #20]	; (8017110 <_vsiprintf_r+0x28>)
 80170fa:	9103      	str	r1, [sp, #12]
 80170fc:	4669      	mov	r1, sp
 80170fe:	f000 fbe3 	bl	80178c8 <_svfiprintf_r>
 8017102:	9b00      	ldr	r3, [sp, #0]
 8017104:	2200      	movs	r2, #0
 8017106:	701a      	strb	r2, [r3, #0]
 8017108:	b01b      	add	sp, #108	; 0x6c
 801710a:	f85d fb04 	ldr.w	pc, [sp], #4
 801710e:	bf00      	nop
 8017110:	ffff0208 	.word	0xffff0208

08017114 <vsiprintf>:
 8017114:	4613      	mov	r3, r2
 8017116:	460a      	mov	r2, r1
 8017118:	4601      	mov	r1, r0
 801711a:	4802      	ldr	r0, [pc, #8]	; (8017124 <vsiprintf+0x10>)
 801711c:	6800      	ldr	r0, [r0, #0]
 801711e:	f7ff bfe3 	b.w	80170e8 <_vsiprintf_r>
 8017122:	bf00      	nop
 8017124:	20000018 	.word	0x20000018

08017128 <__swbuf_r>:
 8017128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801712a:	460e      	mov	r6, r1
 801712c:	4614      	mov	r4, r2
 801712e:	4605      	mov	r5, r0
 8017130:	b118      	cbz	r0, 801713a <__swbuf_r+0x12>
 8017132:	6983      	ldr	r3, [r0, #24]
 8017134:	b90b      	cbnz	r3, 801713a <__swbuf_r+0x12>
 8017136:	f000 fa33 	bl	80175a0 <__sinit>
 801713a:	4b21      	ldr	r3, [pc, #132]	; (80171c0 <__swbuf_r+0x98>)
 801713c:	429c      	cmp	r4, r3
 801713e:	d12b      	bne.n	8017198 <__swbuf_r+0x70>
 8017140:	686c      	ldr	r4, [r5, #4]
 8017142:	69a3      	ldr	r3, [r4, #24]
 8017144:	60a3      	str	r3, [r4, #8]
 8017146:	89a3      	ldrh	r3, [r4, #12]
 8017148:	071a      	lsls	r2, r3, #28
 801714a:	d52f      	bpl.n	80171ac <__swbuf_r+0x84>
 801714c:	6923      	ldr	r3, [r4, #16]
 801714e:	b36b      	cbz	r3, 80171ac <__swbuf_r+0x84>
 8017150:	6923      	ldr	r3, [r4, #16]
 8017152:	6820      	ldr	r0, [r4, #0]
 8017154:	1ac0      	subs	r0, r0, r3
 8017156:	6963      	ldr	r3, [r4, #20]
 8017158:	b2f6      	uxtb	r6, r6
 801715a:	4283      	cmp	r3, r0
 801715c:	4637      	mov	r7, r6
 801715e:	dc04      	bgt.n	801716a <__swbuf_r+0x42>
 8017160:	4621      	mov	r1, r4
 8017162:	4628      	mov	r0, r5
 8017164:	f000 f988 	bl	8017478 <_fflush_r>
 8017168:	bb30      	cbnz	r0, 80171b8 <__swbuf_r+0x90>
 801716a:	68a3      	ldr	r3, [r4, #8]
 801716c:	3b01      	subs	r3, #1
 801716e:	60a3      	str	r3, [r4, #8]
 8017170:	6823      	ldr	r3, [r4, #0]
 8017172:	1c5a      	adds	r2, r3, #1
 8017174:	6022      	str	r2, [r4, #0]
 8017176:	701e      	strb	r6, [r3, #0]
 8017178:	6963      	ldr	r3, [r4, #20]
 801717a:	3001      	adds	r0, #1
 801717c:	4283      	cmp	r3, r0
 801717e:	d004      	beq.n	801718a <__swbuf_r+0x62>
 8017180:	89a3      	ldrh	r3, [r4, #12]
 8017182:	07db      	lsls	r3, r3, #31
 8017184:	d506      	bpl.n	8017194 <__swbuf_r+0x6c>
 8017186:	2e0a      	cmp	r6, #10
 8017188:	d104      	bne.n	8017194 <__swbuf_r+0x6c>
 801718a:	4621      	mov	r1, r4
 801718c:	4628      	mov	r0, r5
 801718e:	f000 f973 	bl	8017478 <_fflush_r>
 8017192:	b988      	cbnz	r0, 80171b8 <__swbuf_r+0x90>
 8017194:	4638      	mov	r0, r7
 8017196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017198:	4b0a      	ldr	r3, [pc, #40]	; (80171c4 <__swbuf_r+0x9c>)
 801719a:	429c      	cmp	r4, r3
 801719c:	d101      	bne.n	80171a2 <__swbuf_r+0x7a>
 801719e:	68ac      	ldr	r4, [r5, #8]
 80171a0:	e7cf      	b.n	8017142 <__swbuf_r+0x1a>
 80171a2:	4b09      	ldr	r3, [pc, #36]	; (80171c8 <__swbuf_r+0xa0>)
 80171a4:	429c      	cmp	r4, r3
 80171a6:	bf08      	it	eq
 80171a8:	68ec      	ldreq	r4, [r5, #12]
 80171aa:	e7ca      	b.n	8017142 <__swbuf_r+0x1a>
 80171ac:	4621      	mov	r1, r4
 80171ae:	4628      	mov	r0, r5
 80171b0:	f000 f80c 	bl	80171cc <__swsetup_r>
 80171b4:	2800      	cmp	r0, #0
 80171b6:	d0cb      	beq.n	8017150 <__swbuf_r+0x28>
 80171b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80171bc:	e7ea      	b.n	8017194 <__swbuf_r+0x6c>
 80171be:	bf00      	nop
 80171c0:	0801e2d0 	.word	0x0801e2d0
 80171c4:	0801e2f0 	.word	0x0801e2f0
 80171c8:	0801e2b0 	.word	0x0801e2b0

080171cc <__swsetup_r>:
 80171cc:	4b32      	ldr	r3, [pc, #200]	; (8017298 <__swsetup_r+0xcc>)
 80171ce:	b570      	push	{r4, r5, r6, lr}
 80171d0:	681d      	ldr	r5, [r3, #0]
 80171d2:	4606      	mov	r6, r0
 80171d4:	460c      	mov	r4, r1
 80171d6:	b125      	cbz	r5, 80171e2 <__swsetup_r+0x16>
 80171d8:	69ab      	ldr	r3, [r5, #24]
 80171da:	b913      	cbnz	r3, 80171e2 <__swsetup_r+0x16>
 80171dc:	4628      	mov	r0, r5
 80171de:	f000 f9df 	bl	80175a0 <__sinit>
 80171e2:	4b2e      	ldr	r3, [pc, #184]	; (801729c <__swsetup_r+0xd0>)
 80171e4:	429c      	cmp	r4, r3
 80171e6:	d10f      	bne.n	8017208 <__swsetup_r+0x3c>
 80171e8:	686c      	ldr	r4, [r5, #4]
 80171ea:	89a3      	ldrh	r3, [r4, #12]
 80171ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80171f0:	0719      	lsls	r1, r3, #28
 80171f2:	d42c      	bmi.n	801724e <__swsetup_r+0x82>
 80171f4:	06dd      	lsls	r5, r3, #27
 80171f6:	d411      	bmi.n	801721c <__swsetup_r+0x50>
 80171f8:	2309      	movs	r3, #9
 80171fa:	6033      	str	r3, [r6, #0]
 80171fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017200:	81a3      	strh	r3, [r4, #12]
 8017202:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017206:	e03e      	b.n	8017286 <__swsetup_r+0xba>
 8017208:	4b25      	ldr	r3, [pc, #148]	; (80172a0 <__swsetup_r+0xd4>)
 801720a:	429c      	cmp	r4, r3
 801720c:	d101      	bne.n	8017212 <__swsetup_r+0x46>
 801720e:	68ac      	ldr	r4, [r5, #8]
 8017210:	e7eb      	b.n	80171ea <__swsetup_r+0x1e>
 8017212:	4b24      	ldr	r3, [pc, #144]	; (80172a4 <__swsetup_r+0xd8>)
 8017214:	429c      	cmp	r4, r3
 8017216:	bf08      	it	eq
 8017218:	68ec      	ldreq	r4, [r5, #12]
 801721a:	e7e6      	b.n	80171ea <__swsetup_r+0x1e>
 801721c:	0758      	lsls	r0, r3, #29
 801721e:	d512      	bpl.n	8017246 <__swsetup_r+0x7a>
 8017220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017222:	b141      	cbz	r1, 8017236 <__swsetup_r+0x6a>
 8017224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017228:	4299      	cmp	r1, r3
 801722a:	d002      	beq.n	8017232 <__swsetup_r+0x66>
 801722c:	4630      	mov	r0, r6
 801722e:	f7ff faa5 	bl	801677c <_free_r>
 8017232:	2300      	movs	r3, #0
 8017234:	6363      	str	r3, [r4, #52]	; 0x34
 8017236:	89a3      	ldrh	r3, [r4, #12]
 8017238:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801723c:	81a3      	strh	r3, [r4, #12]
 801723e:	2300      	movs	r3, #0
 8017240:	6063      	str	r3, [r4, #4]
 8017242:	6923      	ldr	r3, [r4, #16]
 8017244:	6023      	str	r3, [r4, #0]
 8017246:	89a3      	ldrh	r3, [r4, #12]
 8017248:	f043 0308 	orr.w	r3, r3, #8
 801724c:	81a3      	strh	r3, [r4, #12]
 801724e:	6923      	ldr	r3, [r4, #16]
 8017250:	b94b      	cbnz	r3, 8017266 <__swsetup_r+0x9a>
 8017252:	89a3      	ldrh	r3, [r4, #12]
 8017254:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801725c:	d003      	beq.n	8017266 <__swsetup_r+0x9a>
 801725e:	4621      	mov	r1, r4
 8017260:	4630      	mov	r0, r6
 8017262:	f000 fa63 	bl	801772c <__smakebuf_r>
 8017266:	89a0      	ldrh	r0, [r4, #12]
 8017268:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801726c:	f010 0301 	ands.w	r3, r0, #1
 8017270:	d00a      	beq.n	8017288 <__swsetup_r+0xbc>
 8017272:	2300      	movs	r3, #0
 8017274:	60a3      	str	r3, [r4, #8]
 8017276:	6963      	ldr	r3, [r4, #20]
 8017278:	425b      	negs	r3, r3
 801727a:	61a3      	str	r3, [r4, #24]
 801727c:	6923      	ldr	r3, [r4, #16]
 801727e:	b943      	cbnz	r3, 8017292 <__swsetup_r+0xc6>
 8017280:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017284:	d1ba      	bne.n	80171fc <__swsetup_r+0x30>
 8017286:	bd70      	pop	{r4, r5, r6, pc}
 8017288:	0781      	lsls	r1, r0, #30
 801728a:	bf58      	it	pl
 801728c:	6963      	ldrpl	r3, [r4, #20]
 801728e:	60a3      	str	r3, [r4, #8]
 8017290:	e7f4      	b.n	801727c <__swsetup_r+0xb0>
 8017292:	2000      	movs	r0, #0
 8017294:	e7f7      	b.n	8017286 <__swsetup_r+0xba>
 8017296:	bf00      	nop
 8017298:	20000018 	.word	0x20000018
 801729c:	0801e2d0 	.word	0x0801e2d0
 80172a0:	0801e2f0 	.word	0x0801e2f0
 80172a4:	0801e2b0 	.word	0x0801e2b0

080172a8 <__register_exitproc>:
 80172a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80172ac:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8017368 <__register_exitproc+0xc0>
 80172b0:	4606      	mov	r6, r0
 80172b2:	f8d8 0000 	ldr.w	r0, [r8]
 80172b6:	461f      	mov	r7, r3
 80172b8:	460d      	mov	r5, r1
 80172ba:	4691      	mov	r9, r2
 80172bc:	f000 fa0e 	bl	80176dc <__retarget_lock_acquire_recursive>
 80172c0:	4b25      	ldr	r3, [pc, #148]	; (8017358 <__register_exitproc+0xb0>)
 80172c2:	681c      	ldr	r4, [r3, #0]
 80172c4:	b934      	cbnz	r4, 80172d4 <__register_exitproc+0x2c>
 80172c6:	4c25      	ldr	r4, [pc, #148]	; (801735c <__register_exitproc+0xb4>)
 80172c8:	601c      	str	r4, [r3, #0]
 80172ca:	4b25      	ldr	r3, [pc, #148]	; (8017360 <__register_exitproc+0xb8>)
 80172cc:	b113      	cbz	r3, 80172d4 <__register_exitproc+0x2c>
 80172ce:	681b      	ldr	r3, [r3, #0]
 80172d0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80172d4:	6863      	ldr	r3, [r4, #4]
 80172d6:	2b1f      	cmp	r3, #31
 80172d8:	dd07      	ble.n	80172ea <__register_exitproc+0x42>
 80172da:	f8d8 0000 	ldr.w	r0, [r8]
 80172de:	f000 f9ff 	bl	80176e0 <__retarget_lock_release_recursive>
 80172e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80172e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80172ea:	b34e      	cbz	r6, 8017340 <__register_exitproc+0x98>
 80172ec:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80172f0:	b988      	cbnz	r0, 8017316 <__register_exitproc+0x6e>
 80172f2:	4b1c      	ldr	r3, [pc, #112]	; (8017364 <__register_exitproc+0xbc>)
 80172f4:	b923      	cbnz	r3, 8017300 <__register_exitproc+0x58>
 80172f6:	f8d8 0000 	ldr.w	r0, [r8]
 80172fa:	f000 f9f0 	bl	80176de <__retarget_lock_release>
 80172fe:	e7f0      	b.n	80172e2 <__register_exitproc+0x3a>
 8017300:	f44f 7084 	mov.w	r0, #264	; 0x108
 8017304:	f7ff f9fa 	bl	80166fc <malloc>
 8017308:	2800      	cmp	r0, #0
 801730a:	d0f4      	beq.n	80172f6 <__register_exitproc+0x4e>
 801730c:	2300      	movs	r3, #0
 801730e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8017312:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8017316:	6863      	ldr	r3, [r4, #4]
 8017318:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801731c:	2201      	movs	r2, #1
 801731e:	409a      	lsls	r2, r3
 8017320:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8017324:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8017328:	4313      	orrs	r3, r2
 801732a:	2e02      	cmp	r6, #2
 801732c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8017330:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8017334:	bf02      	ittt	eq
 8017336:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801733a:	431a      	orreq	r2, r3
 801733c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8017340:	6863      	ldr	r3, [r4, #4]
 8017342:	f8d8 0000 	ldr.w	r0, [r8]
 8017346:	1c5a      	adds	r2, r3, #1
 8017348:	3302      	adds	r3, #2
 801734a:	6062      	str	r2, [r4, #4]
 801734c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8017350:	f000 f9c6 	bl	80176e0 <__retarget_lock_release_recursive>
 8017354:	2000      	movs	r0, #0
 8017356:	e7c6      	b.n	80172e6 <__register_exitproc+0x3e>
 8017358:	20001cb0 	.word	0x20001cb0
 801735c:	20001c24 	.word	0x20001c24
 8017360:	00000000 	.word	0x00000000
 8017364:	080166fd 	.word	0x080166fd
 8017368:	2000007c 	.word	0x2000007c

0801736c <__sflush_r>:
 801736c:	898a      	ldrh	r2, [r1, #12]
 801736e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017372:	4605      	mov	r5, r0
 8017374:	0710      	lsls	r0, r2, #28
 8017376:	460c      	mov	r4, r1
 8017378:	d458      	bmi.n	801742c <__sflush_r+0xc0>
 801737a:	684b      	ldr	r3, [r1, #4]
 801737c:	2b00      	cmp	r3, #0
 801737e:	dc05      	bgt.n	801738c <__sflush_r+0x20>
 8017380:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017382:	2b00      	cmp	r3, #0
 8017384:	dc02      	bgt.n	801738c <__sflush_r+0x20>
 8017386:	2000      	movs	r0, #0
 8017388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801738c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801738e:	2e00      	cmp	r6, #0
 8017390:	d0f9      	beq.n	8017386 <__sflush_r+0x1a>
 8017392:	2300      	movs	r3, #0
 8017394:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017398:	682f      	ldr	r7, [r5, #0]
 801739a:	602b      	str	r3, [r5, #0]
 801739c:	d032      	beq.n	8017404 <__sflush_r+0x98>
 801739e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80173a0:	89a3      	ldrh	r3, [r4, #12]
 80173a2:	075a      	lsls	r2, r3, #29
 80173a4:	d505      	bpl.n	80173b2 <__sflush_r+0x46>
 80173a6:	6863      	ldr	r3, [r4, #4]
 80173a8:	1ac0      	subs	r0, r0, r3
 80173aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80173ac:	b10b      	cbz	r3, 80173b2 <__sflush_r+0x46>
 80173ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80173b0:	1ac0      	subs	r0, r0, r3
 80173b2:	2300      	movs	r3, #0
 80173b4:	4602      	mov	r2, r0
 80173b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80173b8:	6a21      	ldr	r1, [r4, #32]
 80173ba:	4628      	mov	r0, r5
 80173bc:	47b0      	blx	r6
 80173be:	1c43      	adds	r3, r0, #1
 80173c0:	89a3      	ldrh	r3, [r4, #12]
 80173c2:	d106      	bne.n	80173d2 <__sflush_r+0x66>
 80173c4:	6829      	ldr	r1, [r5, #0]
 80173c6:	291d      	cmp	r1, #29
 80173c8:	d82c      	bhi.n	8017424 <__sflush_r+0xb8>
 80173ca:	4a2a      	ldr	r2, [pc, #168]	; (8017474 <__sflush_r+0x108>)
 80173cc:	40ca      	lsrs	r2, r1
 80173ce:	07d6      	lsls	r6, r2, #31
 80173d0:	d528      	bpl.n	8017424 <__sflush_r+0xb8>
 80173d2:	2200      	movs	r2, #0
 80173d4:	6062      	str	r2, [r4, #4]
 80173d6:	04d9      	lsls	r1, r3, #19
 80173d8:	6922      	ldr	r2, [r4, #16]
 80173da:	6022      	str	r2, [r4, #0]
 80173dc:	d504      	bpl.n	80173e8 <__sflush_r+0x7c>
 80173de:	1c42      	adds	r2, r0, #1
 80173e0:	d101      	bne.n	80173e6 <__sflush_r+0x7a>
 80173e2:	682b      	ldr	r3, [r5, #0]
 80173e4:	b903      	cbnz	r3, 80173e8 <__sflush_r+0x7c>
 80173e6:	6560      	str	r0, [r4, #84]	; 0x54
 80173e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80173ea:	602f      	str	r7, [r5, #0]
 80173ec:	2900      	cmp	r1, #0
 80173ee:	d0ca      	beq.n	8017386 <__sflush_r+0x1a>
 80173f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80173f4:	4299      	cmp	r1, r3
 80173f6:	d002      	beq.n	80173fe <__sflush_r+0x92>
 80173f8:	4628      	mov	r0, r5
 80173fa:	f7ff f9bf 	bl	801677c <_free_r>
 80173fe:	2000      	movs	r0, #0
 8017400:	6360      	str	r0, [r4, #52]	; 0x34
 8017402:	e7c1      	b.n	8017388 <__sflush_r+0x1c>
 8017404:	6a21      	ldr	r1, [r4, #32]
 8017406:	2301      	movs	r3, #1
 8017408:	4628      	mov	r0, r5
 801740a:	47b0      	blx	r6
 801740c:	1c41      	adds	r1, r0, #1
 801740e:	d1c7      	bne.n	80173a0 <__sflush_r+0x34>
 8017410:	682b      	ldr	r3, [r5, #0]
 8017412:	2b00      	cmp	r3, #0
 8017414:	d0c4      	beq.n	80173a0 <__sflush_r+0x34>
 8017416:	2b1d      	cmp	r3, #29
 8017418:	d001      	beq.n	801741e <__sflush_r+0xb2>
 801741a:	2b16      	cmp	r3, #22
 801741c:	d101      	bne.n	8017422 <__sflush_r+0xb6>
 801741e:	602f      	str	r7, [r5, #0]
 8017420:	e7b1      	b.n	8017386 <__sflush_r+0x1a>
 8017422:	89a3      	ldrh	r3, [r4, #12]
 8017424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017428:	81a3      	strh	r3, [r4, #12]
 801742a:	e7ad      	b.n	8017388 <__sflush_r+0x1c>
 801742c:	690f      	ldr	r7, [r1, #16]
 801742e:	2f00      	cmp	r7, #0
 8017430:	d0a9      	beq.n	8017386 <__sflush_r+0x1a>
 8017432:	0793      	lsls	r3, r2, #30
 8017434:	680e      	ldr	r6, [r1, #0]
 8017436:	bf08      	it	eq
 8017438:	694b      	ldreq	r3, [r1, #20]
 801743a:	600f      	str	r7, [r1, #0]
 801743c:	bf18      	it	ne
 801743e:	2300      	movne	r3, #0
 8017440:	eba6 0807 	sub.w	r8, r6, r7
 8017444:	608b      	str	r3, [r1, #8]
 8017446:	f1b8 0f00 	cmp.w	r8, #0
 801744a:	dd9c      	ble.n	8017386 <__sflush_r+0x1a>
 801744c:	6a21      	ldr	r1, [r4, #32]
 801744e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017450:	4643      	mov	r3, r8
 8017452:	463a      	mov	r2, r7
 8017454:	4628      	mov	r0, r5
 8017456:	47b0      	blx	r6
 8017458:	2800      	cmp	r0, #0
 801745a:	dc06      	bgt.n	801746a <__sflush_r+0xfe>
 801745c:	89a3      	ldrh	r3, [r4, #12]
 801745e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017462:	81a3      	strh	r3, [r4, #12]
 8017464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017468:	e78e      	b.n	8017388 <__sflush_r+0x1c>
 801746a:	4407      	add	r7, r0
 801746c:	eba8 0800 	sub.w	r8, r8, r0
 8017470:	e7e9      	b.n	8017446 <__sflush_r+0xda>
 8017472:	bf00      	nop
 8017474:	20400001 	.word	0x20400001

08017478 <_fflush_r>:
 8017478:	b538      	push	{r3, r4, r5, lr}
 801747a:	690b      	ldr	r3, [r1, #16]
 801747c:	4605      	mov	r5, r0
 801747e:	460c      	mov	r4, r1
 8017480:	b913      	cbnz	r3, 8017488 <_fflush_r+0x10>
 8017482:	2500      	movs	r5, #0
 8017484:	4628      	mov	r0, r5
 8017486:	bd38      	pop	{r3, r4, r5, pc}
 8017488:	b118      	cbz	r0, 8017492 <_fflush_r+0x1a>
 801748a:	6983      	ldr	r3, [r0, #24]
 801748c:	b90b      	cbnz	r3, 8017492 <_fflush_r+0x1a>
 801748e:	f000 f887 	bl	80175a0 <__sinit>
 8017492:	4b14      	ldr	r3, [pc, #80]	; (80174e4 <_fflush_r+0x6c>)
 8017494:	429c      	cmp	r4, r3
 8017496:	d11b      	bne.n	80174d0 <_fflush_r+0x58>
 8017498:	686c      	ldr	r4, [r5, #4]
 801749a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d0ef      	beq.n	8017482 <_fflush_r+0xa>
 80174a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80174a4:	07d0      	lsls	r0, r2, #31
 80174a6:	d404      	bmi.n	80174b2 <_fflush_r+0x3a>
 80174a8:	0599      	lsls	r1, r3, #22
 80174aa:	d402      	bmi.n	80174b2 <_fflush_r+0x3a>
 80174ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80174ae:	f000 f915 	bl	80176dc <__retarget_lock_acquire_recursive>
 80174b2:	4628      	mov	r0, r5
 80174b4:	4621      	mov	r1, r4
 80174b6:	f7ff ff59 	bl	801736c <__sflush_r>
 80174ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80174bc:	07da      	lsls	r2, r3, #31
 80174be:	4605      	mov	r5, r0
 80174c0:	d4e0      	bmi.n	8017484 <_fflush_r+0xc>
 80174c2:	89a3      	ldrh	r3, [r4, #12]
 80174c4:	059b      	lsls	r3, r3, #22
 80174c6:	d4dd      	bmi.n	8017484 <_fflush_r+0xc>
 80174c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80174ca:	f000 f909 	bl	80176e0 <__retarget_lock_release_recursive>
 80174ce:	e7d9      	b.n	8017484 <_fflush_r+0xc>
 80174d0:	4b05      	ldr	r3, [pc, #20]	; (80174e8 <_fflush_r+0x70>)
 80174d2:	429c      	cmp	r4, r3
 80174d4:	d101      	bne.n	80174da <_fflush_r+0x62>
 80174d6:	68ac      	ldr	r4, [r5, #8]
 80174d8:	e7df      	b.n	801749a <_fflush_r+0x22>
 80174da:	4b04      	ldr	r3, [pc, #16]	; (80174ec <_fflush_r+0x74>)
 80174dc:	429c      	cmp	r4, r3
 80174de:	bf08      	it	eq
 80174e0:	68ec      	ldreq	r4, [r5, #12]
 80174e2:	e7da      	b.n	801749a <_fflush_r+0x22>
 80174e4:	0801e2d0 	.word	0x0801e2d0
 80174e8:	0801e2f0 	.word	0x0801e2f0
 80174ec:	0801e2b0 	.word	0x0801e2b0

080174f0 <std>:
 80174f0:	2300      	movs	r3, #0
 80174f2:	b510      	push	{r4, lr}
 80174f4:	4604      	mov	r4, r0
 80174f6:	e9c0 3300 	strd	r3, r3, [r0]
 80174fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80174fe:	6083      	str	r3, [r0, #8]
 8017500:	8181      	strh	r1, [r0, #12]
 8017502:	6643      	str	r3, [r0, #100]	; 0x64
 8017504:	81c2      	strh	r2, [r0, #14]
 8017506:	6183      	str	r3, [r0, #24]
 8017508:	4619      	mov	r1, r3
 801750a:	2208      	movs	r2, #8
 801750c:	305c      	adds	r0, #92	; 0x5c
 801750e:	f7ff f92d 	bl	801676c <memset>
 8017512:	4b05      	ldr	r3, [pc, #20]	; (8017528 <std+0x38>)
 8017514:	6263      	str	r3, [r4, #36]	; 0x24
 8017516:	4b05      	ldr	r3, [pc, #20]	; (801752c <std+0x3c>)
 8017518:	62a3      	str	r3, [r4, #40]	; 0x28
 801751a:	4b05      	ldr	r3, [pc, #20]	; (8017530 <std+0x40>)
 801751c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801751e:	4b05      	ldr	r3, [pc, #20]	; (8017534 <std+0x44>)
 8017520:	6224      	str	r4, [r4, #32]
 8017522:	6323      	str	r3, [r4, #48]	; 0x30
 8017524:	bd10      	pop	{r4, pc}
 8017526:	bf00      	nop
 8017528:	08017ac9 	.word	0x08017ac9
 801752c:	08017aeb 	.word	0x08017aeb
 8017530:	08017b23 	.word	0x08017b23
 8017534:	08017b47 	.word	0x08017b47

08017538 <_cleanup_r>:
 8017538:	4901      	ldr	r1, [pc, #4]	; (8017540 <_cleanup_r+0x8>)
 801753a:	f000 b8af 	b.w	801769c <_fwalk_reent>
 801753e:	bf00      	nop
 8017540:	08017479 	.word	0x08017479

08017544 <__sfmoreglue>:
 8017544:	b570      	push	{r4, r5, r6, lr}
 8017546:	1e4a      	subs	r2, r1, #1
 8017548:	2568      	movs	r5, #104	; 0x68
 801754a:	4355      	muls	r5, r2
 801754c:	460e      	mov	r6, r1
 801754e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017552:	f7ff f963 	bl	801681c <_malloc_r>
 8017556:	4604      	mov	r4, r0
 8017558:	b140      	cbz	r0, 801756c <__sfmoreglue+0x28>
 801755a:	2100      	movs	r1, #0
 801755c:	e9c0 1600 	strd	r1, r6, [r0]
 8017560:	300c      	adds	r0, #12
 8017562:	60a0      	str	r0, [r4, #8]
 8017564:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017568:	f7ff f900 	bl	801676c <memset>
 801756c:	4620      	mov	r0, r4
 801756e:	bd70      	pop	{r4, r5, r6, pc}

08017570 <__sfp_lock_acquire>:
 8017570:	4801      	ldr	r0, [pc, #4]	; (8017578 <__sfp_lock_acquire+0x8>)
 8017572:	f000 b8b3 	b.w	80176dc <__retarget_lock_acquire_recursive>
 8017576:	bf00      	nop
 8017578:	20001f28 	.word	0x20001f28

0801757c <__sfp_lock_release>:
 801757c:	4801      	ldr	r0, [pc, #4]	; (8017584 <__sfp_lock_release+0x8>)
 801757e:	f000 b8af 	b.w	80176e0 <__retarget_lock_release_recursive>
 8017582:	bf00      	nop
 8017584:	20001f28 	.word	0x20001f28

08017588 <__sinit_lock_acquire>:
 8017588:	4801      	ldr	r0, [pc, #4]	; (8017590 <__sinit_lock_acquire+0x8>)
 801758a:	f000 b8a7 	b.w	80176dc <__retarget_lock_acquire_recursive>
 801758e:	bf00      	nop
 8017590:	20001f23 	.word	0x20001f23

08017594 <__sinit_lock_release>:
 8017594:	4801      	ldr	r0, [pc, #4]	; (801759c <__sinit_lock_release+0x8>)
 8017596:	f000 b8a3 	b.w	80176e0 <__retarget_lock_release_recursive>
 801759a:	bf00      	nop
 801759c:	20001f23 	.word	0x20001f23

080175a0 <__sinit>:
 80175a0:	b510      	push	{r4, lr}
 80175a2:	4604      	mov	r4, r0
 80175a4:	f7ff fff0 	bl	8017588 <__sinit_lock_acquire>
 80175a8:	69a3      	ldr	r3, [r4, #24]
 80175aa:	b11b      	cbz	r3, 80175b4 <__sinit+0x14>
 80175ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80175b0:	f7ff bff0 	b.w	8017594 <__sinit_lock_release>
 80175b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80175b8:	6523      	str	r3, [r4, #80]	; 0x50
 80175ba:	4b13      	ldr	r3, [pc, #76]	; (8017608 <__sinit+0x68>)
 80175bc:	4a13      	ldr	r2, [pc, #76]	; (801760c <__sinit+0x6c>)
 80175be:	681b      	ldr	r3, [r3, #0]
 80175c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80175c2:	42a3      	cmp	r3, r4
 80175c4:	bf04      	itt	eq
 80175c6:	2301      	moveq	r3, #1
 80175c8:	61a3      	streq	r3, [r4, #24]
 80175ca:	4620      	mov	r0, r4
 80175cc:	f000 f820 	bl	8017610 <__sfp>
 80175d0:	6060      	str	r0, [r4, #4]
 80175d2:	4620      	mov	r0, r4
 80175d4:	f000 f81c 	bl	8017610 <__sfp>
 80175d8:	60a0      	str	r0, [r4, #8]
 80175da:	4620      	mov	r0, r4
 80175dc:	f000 f818 	bl	8017610 <__sfp>
 80175e0:	2200      	movs	r2, #0
 80175e2:	60e0      	str	r0, [r4, #12]
 80175e4:	2104      	movs	r1, #4
 80175e6:	6860      	ldr	r0, [r4, #4]
 80175e8:	f7ff ff82 	bl	80174f0 <std>
 80175ec:	68a0      	ldr	r0, [r4, #8]
 80175ee:	2201      	movs	r2, #1
 80175f0:	2109      	movs	r1, #9
 80175f2:	f7ff ff7d 	bl	80174f0 <std>
 80175f6:	68e0      	ldr	r0, [r4, #12]
 80175f8:	2202      	movs	r2, #2
 80175fa:	2112      	movs	r1, #18
 80175fc:	f7ff ff78 	bl	80174f0 <std>
 8017600:	2301      	movs	r3, #1
 8017602:	61a3      	str	r3, [r4, #24]
 8017604:	e7d2      	b.n	80175ac <__sinit+0xc>
 8017606:	bf00      	nop
 8017608:	0801e278 	.word	0x0801e278
 801760c:	08017539 	.word	0x08017539

08017610 <__sfp>:
 8017610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017612:	4607      	mov	r7, r0
 8017614:	f7ff ffac 	bl	8017570 <__sfp_lock_acquire>
 8017618:	4b1e      	ldr	r3, [pc, #120]	; (8017694 <__sfp+0x84>)
 801761a:	681e      	ldr	r6, [r3, #0]
 801761c:	69b3      	ldr	r3, [r6, #24]
 801761e:	b913      	cbnz	r3, 8017626 <__sfp+0x16>
 8017620:	4630      	mov	r0, r6
 8017622:	f7ff ffbd 	bl	80175a0 <__sinit>
 8017626:	3648      	adds	r6, #72	; 0x48
 8017628:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801762c:	3b01      	subs	r3, #1
 801762e:	d503      	bpl.n	8017638 <__sfp+0x28>
 8017630:	6833      	ldr	r3, [r6, #0]
 8017632:	b30b      	cbz	r3, 8017678 <__sfp+0x68>
 8017634:	6836      	ldr	r6, [r6, #0]
 8017636:	e7f7      	b.n	8017628 <__sfp+0x18>
 8017638:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801763c:	b9d5      	cbnz	r5, 8017674 <__sfp+0x64>
 801763e:	4b16      	ldr	r3, [pc, #88]	; (8017698 <__sfp+0x88>)
 8017640:	60e3      	str	r3, [r4, #12]
 8017642:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017646:	6665      	str	r5, [r4, #100]	; 0x64
 8017648:	f000 f847 	bl	80176da <__retarget_lock_init_recursive>
 801764c:	f7ff ff96 	bl	801757c <__sfp_lock_release>
 8017650:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017654:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017658:	6025      	str	r5, [r4, #0]
 801765a:	61a5      	str	r5, [r4, #24]
 801765c:	2208      	movs	r2, #8
 801765e:	4629      	mov	r1, r5
 8017660:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017664:	f7ff f882 	bl	801676c <memset>
 8017668:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801766c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017670:	4620      	mov	r0, r4
 8017672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017674:	3468      	adds	r4, #104	; 0x68
 8017676:	e7d9      	b.n	801762c <__sfp+0x1c>
 8017678:	2104      	movs	r1, #4
 801767a:	4638      	mov	r0, r7
 801767c:	f7ff ff62 	bl	8017544 <__sfmoreglue>
 8017680:	4604      	mov	r4, r0
 8017682:	6030      	str	r0, [r6, #0]
 8017684:	2800      	cmp	r0, #0
 8017686:	d1d5      	bne.n	8017634 <__sfp+0x24>
 8017688:	f7ff ff78 	bl	801757c <__sfp_lock_release>
 801768c:	230c      	movs	r3, #12
 801768e:	603b      	str	r3, [r7, #0]
 8017690:	e7ee      	b.n	8017670 <__sfp+0x60>
 8017692:	bf00      	nop
 8017694:	0801e278 	.word	0x0801e278
 8017698:	ffff0001 	.word	0xffff0001

0801769c <_fwalk_reent>:
 801769c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80176a0:	4606      	mov	r6, r0
 80176a2:	4688      	mov	r8, r1
 80176a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80176a8:	2700      	movs	r7, #0
 80176aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80176ae:	f1b9 0901 	subs.w	r9, r9, #1
 80176b2:	d505      	bpl.n	80176c0 <_fwalk_reent+0x24>
 80176b4:	6824      	ldr	r4, [r4, #0]
 80176b6:	2c00      	cmp	r4, #0
 80176b8:	d1f7      	bne.n	80176aa <_fwalk_reent+0xe>
 80176ba:	4638      	mov	r0, r7
 80176bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80176c0:	89ab      	ldrh	r3, [r5, #12]
 80176c2:	2b01      	cmp	r3, #1
 80176c4:	d907      	bls.n	80176d6 <_fwalk_reent+0x3a>
 80176c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80176ca:	3301      	adds	r3, #1
 80176cc:	d003      	beq.n	80176d6 <_fwalk_reent+0x3a>
 80176ce:	4629      	mov	r1, r5
 80176d0:	4630      	mov	r0, r6
 80176d2:	47c0      	blx	r8
 80176d4:	4307      	orrs	r7, r0
 80176d6:	3568      	adds	r5, #104	; 0x68
 80176d8:	e7e9      	b.n	80176ae <_fwalk_reent+0x12>

080176da <__retarget_lock_init_recursive>:
 80176da:	4770      	bx	lr

080176dc <__retarget_lock_acquire_recursive>:
 80176dc:	4770      	bx	lr

080176de <__retarget_lock_release>:
 80176de:	4770      	bx	lr

080176e0 <__retarget_lock_release_recursive>:
 80176e0:	4770      	bx	lr

080176e2 <__swhatbuf_r>:
 80176e2:	b570      	push	{r4, r5, r6, lr}
 80176e4:	460e      	mov	r6, r1
 80176e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176ea:	2900      	cmp	r1, #0
 80176ec:	b096      	sub	sp, #88	; 0x58
 80176ee:	4614      	mov	r4, r2
 80176f0:	461d      	mov	r5, r3
 80176f2:	da07      	bge.n	8017704 <__swhatbuf_r+0x22>
 80176f4:	2300      	movs	r3, #0
 80176f6:	602b      	str	r3, [r5, #0]
 80176f8:	89b3      	ldrh	r3, [r6, #12]
 80176fa:	061a      	lsls	r2, r3, #24
 80176fc:	d410      	bmi.n	8017720 <__swhatbuf_r+0x3e>
 80176fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017702:	e00e      	b.n	8017722 <__swhatbuf_r+0x40>
 8017704:	466a      	mov	r2, sp
 8017706:	f000 fa45 	bl	8017b94 <_fstat_r>
 801770a:	2800      	cmp	r0, #0
 801770c:	dbf2      	blt.n	80176f4 <__swhatbuf_r+0x12>
 801770e:	9a01      	ldr	r2, [sp, #4]
 8017710:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017714:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017718:	425a      	negs	r2, r3
 801771a:	415a      	adcs	r2, r3
 801771c:	602a      	str	r2, [r5, #0]
 801771e:	e7ee      	b.n	80176fe <__swhatbuf_r+0x1c>
 8017720:	2340      	movs	r3, #64	; 0x40
 8017722:	2000      	movs	r0, #0
 8017724:	6023      	str	r3, [r4, #0]
 8017726:	b016      	add	sp, #88	; 0x58
 8017728:	bd70      	pop	{r4, r5, r6, pc}
	...

0801772c <__smakebuf_r>:
 801772c:	898b      	ldrh	r3, [r1, #12]
 801772e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017730:	079d      	lsls	r5, r3, #30
 8017732:	4606      	mov	r6, r0
 8017734:	460c      	mov	r4, r1
 8017736:	d507      	bpl.n	8017748 <__smakebuf_r+0x1c>
 8017738:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801773c:	6023      	str	r3, [r4, #0]
 801773e:	6123      	str	r3, [r4, #16]
 8017740:	2301      	movs	r3, #1
 8017742:	6163      	str	r3, [r4, #20]
 8017744:	b002      	add	sp, #8
 8017746:	bd70      	pop	{r4, r5, r6, pc}
 8017748:	ab01      	add	r3, sp, #4
 801774a:	466a      	mov	r2, sp
 801774c:	f7ff ffc9 	bl	80176e2 <__swhatbuf_r>
 8017750:	9900      	ldr	r1, [sp, #0]
 8017752:	4605      	mov	r5, r0
 8017754:	4630      	mov	r0, r6
 8017756:	f7ff f861 	bl	801681c <_malloc_r>
 801775a:	b948      	cbnz	r0, 8017770 <__smakebuf_r+0x44>
 801775c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017760:	059a      	lsls	r2, r3, #22
 8017762:	d4ef      	bmi.n	8017744 <__smakebuf_r+0x18>
 8017764:	f023 0303 	bic.w	r3, r3, #3
 8017768:	f043 0302 	orr.w	r3, r3, #2
 801776c:	81a3      	strh	r3, [r4, #12]
 801776e:	e7e3      	b.n	8017738 <__smakebuf_r+0xc>
 8017770:	4b0d      	ldr	r3, [pc, #52]	; (80177a8 <__smakebuf_r+0x7c>)
 8017772:	62b3      	str	r3, [r6, #40]	; 0x28
 8017774:	89a3      	ldrh	r3, [r4, #12]
 8017776:	6020      	str	r0, [r4, #0]
 8017778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801777c:	81a3      	strh	r3, [r4, #12]
 801777e:	9b00      	ldr	r3, [sp, #0]
 8017780:	6163      	str	r3, [r4, #20]
 8017782:	9b01      	ldr	r3, [sp, #4]
 8017784:	6120      	str	r0, [r4, #16]
 8017786:	b15b      	cbz	r3, 80177a0 <__smakebuf_r+0x74>
 8017788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801778c:	4630      	mov	r0, r6
 801778e:	f000 fa13 	bl	8017bb8 <_isatty_r>
 8017792:	b128      	cbz	r0, 80177a0 <__smakebuf_r+0x74>
 8017794:	89a3      	ldrh	r3, [r4, #12]
 8017796:	f023 0303 	bic.w	r3, r3, #3
 801779a:	f043 0301 	orr.w	r3, r3, #1
 801779e:	81a3      	strh	r3, [r4, #12]
 80177a0:	89a0      	ldrh	r0, [r4, #12]
 80177a2:	4305      	orrs	r5, r0
 80177a4:	81a5      	strh	r5, [r4, #12]
 80177a6:	e7cd      	b.n	8017744 <__smakebuf_r+0x18>
 80177a8:	08017539 	.word	0x08017539

080177ac <__malloc_lock>:
 80177ac:	4801      	ldr	r0, [pc, #4]	; (80177b4 <__malloc_lock+0x8>)
 80177ae:	f7ff bf95 	b.w	80176dc <__retarget_lock_acquire_recursive>
 80177b2:	bf00      	nop
 80177b4:	20001f24 	.word	0x20001f24

080177b8 <__malloc_unlock>:
 80177b8:	4801      	ldr	r0, [pc, #4]	; (80177c0 <__malloc_unlock+0x8>)
 80177ba:	f7ff bf91 	b.w	80176e0 <__retarget_lock_release_recursive>
 80177be:	bf00      	nop
 80177c0:	20001f24 	.word	0x20001f24

080177c4 <_realloc_r>:
 80177c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177c6:	4607      	mov	r7, r0
 80177c8:	4614      	mov	r4, r2
 80177ca:	460e      	mov	r6, r1
 80177cc:	b921      	cbnz	r1, 80177d8 <_realloc_r+0x14>
 80177ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80177d2:	4611      	mov	r1, r2
 80177d4:	f7ff b822 	b.w	801681c <_malloc_r>
 80177d8:	b922      	cbnz	r2, 80177e4 <_realloc_r+0x20>
 80177da:	f7fe ffcf 	bl	801677c <_free_r>
 80177de:	4625      	mov	r5, r4
 80177e0:	4628      	mov	r0, r5
 80177e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177e4:	f000 fa0a 	bl	8017bfc <_malloc_usable_size_r>
 80177e8:	42a0      	cmp	r0, r4
 80177ea:	d20f      	bcs.n	801780c <_realloc_r+0x48>
 80177ec:	4621      	mov	r1, r4
 80177ee:	4638      	mov	r0, r7
 80177f0:	f7ff f814 	bl	801681c <_malloc_r>
 80177f4:	4605      	mov	r5, r0
 80177f6:	2800      	cmp	r0, #0
 80177f8:	d0f2      	beq.n	80177e0 <_realloc_r+0x1c>
 80177fa:	4631      	mov	r1, r6
 80177fc:	4622      	mov	r2, r4
 80177fe:	f7fe ff8d 	bl	801671c <memcpy>
 8017802:	4631      	mov	r1, r6
 8017804:	4638      	mov	r0, r7
 8017806:	f7fe ffb9 	bl	801677c <_free_r>
 801780a:	e7e9      	b.n	80177e0 <_realloc_r+0x1c>
 801780c:	4635      	mov	r5, r6
 801780e:	e7e7      	b.n	80177e0 <_realloc_r+0x1c>

08017810 <__ssputs_r>:
 8017810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017814:	688e      	ldr	r6, [r1, #8]
 8017816:	429e      	cmp	r6, r3
 8017818:	4682      	mov	sl, r0
 801781a:	460c      	mov	r4, r1
 801781c:	4690      	mov	r8, r2
 801781e:	461f      	mov	r7, r3
 8017820:	d838      	bhi.n	8017894 <__ssputs_r+0x84>
 8017822:	898a      	ldrh	r2, [r1, #12]
 8017824:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017828:	d032      	beq.n	8017890 <__ssputs_r+0x80>
 801782a:	6825      	ldr	r5, [r4, #0]
 801782c:	6909      	ldr	r1, [r1, #16]
 801782e:	eba5 0901 	sub.w	r9, r5, r1
 8017832:	6965      	ldr	r5, [r4, #20]
 8017834:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017838:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801783c:	3301      	adds	r3, #1
 801783e:	444b      	add	r3, r9
 8017840:	106d      	asrs	r5, r5, #1
 8017842:	429d      	cmp	r5, r3
 8017844:	bf38      	it	cc
 8017846:	461d      	movcc	r5, r3
 8017848:	0553      	lsls	r3, r2, #21
 801784a:	d531      	bpl.n	80178b0 <__ssputs_r+0xa0>
 801784c:	4629      	mov	r1, r5
 801784e:	f7fe ffe5 	bl	801681c <_malloc_r>
 8017852:	4606      	mov	r6, r0
 8017854:	b950      	cbnz	r0, 801786c <__ssputs_r+0x5c>
 8017856:	230c      	movs	r3, #12
 8017858:	f8ca 3000 	str.w	r3, [sl]
 801785c:	89a3      	ldrh	r3, [r4, #12]
 801785e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017862:	81a3      	strh	r3, [r4, #12]
 8017864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801786c:	6921      	ldr	r1, [r4, #16]
 801786e:	464a      	mov	r2, r9
 8017870:	f7fe ff54 	bl	801671c <memcpy>
 8017874:	89a3      	ldrh	r3, [r4, #12]
 8017876:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801787a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801787e:	81a3      	strh	r3, [r4, #12]
 8017880:	6126      	str	r6, [r4, #16]
 8017882:	6165      	str	r5, [r4, #20]
 8017884:	444e      	add	r6, r9
 8017886:	eba5 0509 	sub.w	r5, r5, r9
 801788a:	6026      	str	r6, [r4, #0]
 801788c:	60a5      	str	r5, [r4, #8]
 801788e:	463e      	mov	r6, r7
 8017890:	42be      	cmp	r6, r7
 8017892:	d900      	bls.n	8017896 <__ssputs_r+0x86>
 8017894:	463e      	mov	r6, r7
 8017896:	4632      	mov	r2, r6
 8017898:	6820      	ldr	r0, [r4, #0]
 801789a:	4641      	mov	r1, r8
 801789c:	f7fe ff4c 	bl	8016738 <memmove>
 80178a0:	68a3      	ldr	r3, [r4, #8]
 80178a2:	6822      	ldr	r2, [r4, #0]
 80178a4:	1b9b      	subs	r3, r3, r6
 80178a6:	4432      	add	r2, r6
 80178a8:	60a3      	str	r3, [r4, #8]
 80178aa:	6022      	str	r2, [r4, #0]
 80178ac:	2000      	movs	r0, #0
 80178ae:	e7db      	b.n	8017868 <__ssputs_r+0x58>
 80178b0:	462a      	mov	r2, r5
 80178b2:	f7ff ff87 	bl	80177c4 <_realloc_r>
 80178b6:	4606      	mov	r6, r0
 80178b8:	2800      	cmp	r0, #0
 80178ba:	d1e1      	bne.n	8017880 <__ssputs_r+0x70>
 80178bc:	6921      	ldr	r1, [r4, #16]
 80178be:	4650      	mov	r0, sl
 80178c0:	f7fe ff5c 	bl	801677c <_free_r>
 80178c4:	e7c7      	b.n	8017856 <__ssputs_r+0x46>
	...

080178c8 <_svfiprintf_r>:
 80178c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178cc:	4698      	mov	r8, r3
 80178ce:	898b      	ldrh	r3, [r1, #12]
 80178d0:	061b      	lsls	r3, r3, #24
 80178d2:	b09d      	sub	sp, #116	; 0x74
 80178d4:	4607      	mov	r7, r0
 80178d6:	460d      	mov	r5, r1
 80178d8:	4614      	mov	r4, r2
 80178da:	d50e      	bpl.n	80178fa <_svfiprintf_r+0x32>
 80178dc:	690b      	ldr	r3, [r1, #16]
 80178de:	b963      	cbnz	r3, 80178fa <_svfiprintf_r+0x32>
 80178e0:	2140      	movs	r1, #64	; 0x40
 80178e2:	f7fe ff9b 	bl	801681c <_malloc_r>
 80178e6:	6028      	str	r0, [r5, #0]
 80178e8:	6128      	str	r0, [r5, #16]
 80178ea:	b920      	cbnz	r0, 80178f6 <_svfiprintf_r+0x2e>
 80178ec:	230c      	movs	r3, #12
 80178ee:	603b      	str	r3, [r7, #0]
 80178f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80178f4:	e0d1      	b.n	8017a9a <_svfiprintf_r+0x1d2>
 80178f6:	2340      	movs	r3, #64	; 0x40
 80178f8:	616b      	str	r3, [r5, #20]
 80178fa:	2300      	movs	r3, #0
 80178fc:	9309      	str	r3, [sp, #36]	; 0x24
 80178fe:	2320      	movs	r3, #32
 8017900:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017904:	f8cd 800c 	str.w	r8, [sp, #12]
 8017908:	2330      	movs	r3, #48	; 0x30
 801790a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017ab4 <_svfiprintf_r+0x1ec>
 801790e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017912:	f04f 0901 	mov.w	r9, #1
 8017916:	4623      	mov	r3, r4
 8017918:	469a      	mov	sl, r3
 801791a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801791e:	b10a      	cbz	r2, 8017924 <_svfiprintf_r+0x5c>
 8017920:	2a25      	cmp	r2, #37	; 0x25
 8017922:	d1f9      	bne.n	8017918 <_svfiprintf_r+0x50>
 8017924:	ebba 0b04 	subs.w	fp, sl, r4
 8017928:	d00b      	beq.n	8017942 <_svfiprintf_r+0x7a>
 801792a:	465b      	mov	r3, fp
 801792c:	4622      	mov	r2, r4
 801792e:	4629      	mov	r1, r5
 8017930:	4638      	mov	r0, r7
 8017932:	f7ff ff6d 	bl	8017810 <__ssputs_r>
 8017936:	3001      	adds	r0, #1
 8017938:	f000 80aa 	beq.w	8017a90 <_svfiprintf_r+0x1c8>
 801793c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801793e:	445a      	add	r2, fp
 8017940:	9209      	str	r2, [sp, #36]	; 0x24
 8017942:	f89a 3000 	ldrb.w	r3, [sl]
 8017946:	2b00      	cmp	r3, #0
 8017948:	f000 80a2 	beq.w	8017a90 <_svfiprintf_r+0x1c8>
 801794c:	2300      	movs	r3, #0
 801794e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017952:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017956:	f10a 0a01 	add.w	sl, sl, #1
 801795a:	9304      	str	r3, [sp, #16]
 801795c:	9307      	str	r3, [sp, #28]
 801795e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017962:	931a      	str	r3, [sp, #104]	; 0x68
 8017964:	4654      	mov	r4, sl
 8017966:	2205      	movs	r2, #5
 8017968:	f814 1b01 	ldrb.w	r1, [r4], #1
 801796c:	4851      	ldr	r0, [pc, #324]	; (8017ab4 <_svfiprintf_r+0x1ec>)
 801796e:	f7e8 fc2f 	bl	80001d0 <memchr>
 8017972:	9a04      	ldr	r2, [sp, #16]
 8017974:	b9d8      	cbnz	r0, 80179ae <_svfiprintf_r+0xe6>
 8017976:	06d0      	lsls	r0, r2, #27
 8017978:	bf44      	itt	mi
 801797a:	2320      	movmi	r3, #32
 801797c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017980:	0711      	lsls	r1, r2, #28
 8017982:	bf44      	itt	mi
 8017984:	232b      	movmi	r3, #43	; 0x2b
 8017986:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801798a:	f89a 3000 	ldrb.w	r3, [sl]
 801798e:	2b2a      	cmp	r3, #42	; 0x2a
 8017990:	d015      	beq.n	80179be <_svfiprintf_r+0xf6>
 8017992:	9a07      	ldr	r2, [sp, #28]
 8017994:	4654      	mov	r4, sl
 8017996:	2000      	movs	r0, #0
 8017998:	f04f 0c0a 	mov.w	ip, #10
 801799c:	4621      	mov	r1, r4
 801799e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80179a2:	3b30      	subs	r3, #48	; 0x30
 80179a4:	2b09      	cmp	r3, #9
 80179a6:	d94e      	bls.n	8017a46 <_svfiprintf_r+0x17e>
 80179a8:	b1b0      	cbz	r0, 80179d8 <_svfiprintf_r+0x110>
 80179aa:	9207      	str	r2, [sp, #28]
 80179ac:	e014      	b.n	80179d8 <_svfiprintf_r+0x110>
 80179ae:	eba0 0308 	sub.w	r3, r0, r8
 80179b2:	fa09 f303 	lsl.w	r3, r9, r3
 80179b6:	4313      	orrs	r3, r2
 80179b8:	9304      	str	r3, [sp, #16]
 80179ba:	46a2      	mov	sl, r4
 80179bc:	e7d2      	b.n	8017964 <_svfiprintf_r+0x9c>
 80179be:	9b03      	ldr	r3, [sp, #12]
 80179c0:	1d19      	adds	r1, r3, #4
 80179c2:	681b      	ldr	r3, [r3, #0]
 80179c4:	9103      	str	r1, [sp, #12]
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	bfbb      	ittet	lt
 80179ca:	425b      	neglt	r3, r3
 80179cc:	f042 0202 	orrlt.w	r2, r2, #2
 80179d0:	9307      	strge	r3, [sp, #28]
 80179d2:	9307      	strlt	r3, [sp, #28]
 80179d4:	bfb8      	it	lt
 80179d6:	9204      	strlt	r2, [sp, #16]
 80179d8:	7823      	ldrb	r3, [r4, #0]
 80179da:	2b2e      	cmp	r3, #46	; 0x2e
 80179dc:	d10c      	bne.n	80179f8 <_svfiprintf_r+0x130>
 80179de:	7863      	ldrb	r3, [r4, #1]
 80179e0:	2b2a      	cmp	r3, #42	; 0x2a
 80179e2:	d135      	bne.n	8017a50 <_svfiprintf_r+0x188>
 80179e4:	9b03      	ldr	r3, [sp, #12]
 80179e6:	1d1a      	adds	r2, r3, #4
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	9203      	str	r2, [sp, #12]
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	bfb8      	it	lt
 80179f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80179f4:	3402      	adds	r4, #2
 80179f6:	9305      	str	r3, [sp, #20]
 80179f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017ac4 <_svfiprintf_r+0x1fc>
 80179fc:	7821      	ldrb	r1, [r4, #0]
 80179fe:	2203      	movs	r2, #3
 8017a00:	4650      	mov	r0, sl
 8017a02:	f7e8 fbe5 	bl	80001d0 <memchr>
 8017a06:	b140      	cbz	r0, 8017a1a <_svfiprintf_r+0x152>
 8017a08:	2340      	movs	r3, #64	; 0x40
 8017a0a:	eba0 000a 	sub.w	r0, r0, sl
 8017a0e:	fa03 f000 	lsl.w	r0, r3, r0
 8017a12:	9b04      	ldr	r3, [sp, #16]
 8017a14:	4303      	orrs	r3, r0
 8017a16:	3401      	adds	r4, #1
 8017a18:	9304      	str	r3, [sp, #16]
 8017a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a1e:	4826      	ldr	r0, [pc, #152]	; (8017ab8 <_svfiprintf_r+0x1f0>)
 8017a20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017a24:	2206      	movs	r2, #6
 8017a26:	f7e8 fbd3 	bl	80001d0 <memchr>
 8017a2a:	2800      	cmp	r0, #0
 8017a2c:	d038      	beq.n	8017aa0 <_svfiprintf_r+0x1d8>
 8017a2e:	4b23      	ldr	r3, [pc, #140]	; (8017abc <_svfiprintf_r+0x1f4>)
 8017a30:	bb1b      	cbnz	r3, 8017a7a <_svfiprintf_r+0x1b2>
 8017a32:	9b03      	ldr	r3, [sp, #12]
 8017a34:	3307      	adds	r3, #7
 8017a36:	f023 0307 	bic.w	r3, r3, #7
 8017a3a:	3308      	adds	r3, #8
 8017a3c:	9303      	str	r3, [sp, #12]
 8017a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a40:	4433      	add	r3, r6
 8017a42:	9309      	str	r3, [sp, #36]	; 0x24
 8017a44:	e767      	b.n	8017916 <_svfiprintf_r+0x4e>
 8017a46:	fb0c 3202 	mla	r2, ip, r2, r3
 8017a4a:	460c      	mov	r4, r1
 8017a4c:	2001      	movs	r0, #1
 8017a4e:	e7a5      	b.n	801799c <_svfiprintf_r+0xd4>
 8017a50:	2300      	movs	r3, #0
 8017a52:	3401      	adds	r4, #1
 8017a54:	9305      	str	r3, [sp, #20]
 8017a56:	4619      	mov	r1, r3
 8017a58:	f04f 0c0a 	mov.w	ip, #10
 8017a5c:	4620      	mov	r0, r4
 8017a5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017a62:	3a30      	subs	r2, #48	; 0x30
 8017a64:	2a09      	cmp	r2, #9
 8017a66:	d903      	bls.n	8017a70 <_svfiprintf_r+0x1a8>
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d0c5      	beq.n	80179f8 <_svfiprintf_r+0x130>
 8017a6c:	9105      	str	r1, [sp, #20]
 8017a6e:	e7c3      	b.n	80179f8 <_svfiprintf_r+0x130>
 8017a70:	fb0c 2101 	mla	r1, ip, r1, r2
 8017a74:	4604      	mov	r4, r0
 8017a76:	2301      	movs	r3, #1
 8017a78:	e7f0      	b.n	8017a5c <_svfiprintf_r+0x194>
 8017a7a:	ab03      	add	r3, sp, #12
 8017a7c:	9300      	str	r3, [sp, #0]
 8017a7e:	462a      	mov	r2, r5
 8017a80:	4b0f      	ldr	r3, [pc, #60]	; (8017ac0 <_svfiprintf_r+0x1f8>)
 8017a82:	a904      	add	r1, sp, #16
 8017a84:	4638      	mov	r0, r7
 8017a86:	f3af 8000 	nop.w
 8017a8a:	1c42      	adds	r2, r0, #1
 8017a8c:	4606      	mov	r6, r0
 8017a8e:	d1d6      	bne.n	8017a3e <_svfiprintf_r+0x176>
 8017a90:	89ab      	ldrh	r3, [r5, #12]
 8017a92:	065b      	lsls	r3, r3, #25
 8017a94:	f53f af2c 	bmi.w	80178f0 <_svfiprintf_r+0x28>
 8017a98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017a9a:	b01d      	add	sp, #116	; 0x74
 8017a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017aa0:	ab03      	add	r3, sp, #12
 8017aa2:	9300      	str	r3, [sp, #0]
 8017aa4:	462a      	mov	r2, r5
 8017aa6:	4b06      	ldr	r3, [pc, #24]	; (8017ac0 <_svfiprintf_r+0x1f8>)
 8017aa8:	a904      	add	r1, sp, #16
 8017aaa:	4638      	mov	r0, r7
 8017aac:	f7ff f8d8 	bl	8016c60 <_printf_i>
 8017ab0:	e7eb      	b.n	8017a8a <_svfiprintf_r+0x1c2>
 8017ab2:	bf00      	nop
 8017ab4:	0801e27c 	.word	0x0801e27c
 8017ab8:	0801e286 	.word	0x0801e286
 8017abc:	00000000 	.word	0x00000000
 8017ac0:	08017811 	.word	0x08017811
 8017ac4:	0801e282 	.word	0x0801e282

08017ac8 <__sread>:
 8017ac8:	b510      	push	{r4, lr}
 8017aca:	460c      	mov	r4, r1
 8017acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ad0:	f000 f89c 	bl	8017c0c <_read_r>
 8017ad4:	2800      	cmp	r0, #0
 8017ad6:	bfab      	itete	ge
 8017ad8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017ada:	89a3      	ldrhlt	r3, [r4, #12]
 8017adc:	181b      	addge	r3, r3, r0
 8017ade:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017ae2:	bfac      	ite	ge
 8017ae4:	6563      	strge	r3, [r4, #84]	; 0x54
 8017ae6:	81a3      	strhlt	r3, [r4, #12]
 8017ae8:	bd10      	pop	{r4, pc}

08017aea <__swrite>:
 8017aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017aee:	461f      	mov	r7, r3
 8017af0:	898b      	ldrh	r3, [r1, #12]
 8017af2:	05db      	lsls	r3, r3, #23
 8017af4:	4605      	mov	r5, r0
 8017af6:	460c      	mov	r4, r1
 8017af8:	4616      	mov	r6, r2
 8017afa:	d505      	bpl.n	8017b08 <__swrite+0x1e>
 8017afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b00:	2302      	movs	r3, #2
 8017b02:	2200      	movs	r2, #0
 8017b04:	f000 f868 	bl	8017bd8 <_lseek_r>
 8017b08:	89a3      	ldrh	r3, [r4, #12]
 8017b0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017b0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017b12:	81a3      	strh	r3, [r4, #12]
 8017b14:	4632      	mov	r2, r6
 8017b16:	463b      	mov	r3, r7
 8017b18:	4628      	mov	r0, r5
 8017b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b1e:	f000 b817 	b.w	8017b50 <_write_r>

08017b22 <__sseek>:
 8017b22:	b510      	push	{r4, lr}
 8017b24:	460c      	mov	r4, r1
 8017b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b2a:	f000 f855 	bl	8017bd8 <_lseek_r>
 8017b2e:	1c43      	adds	r3, r0, #1
 8017b30:	89a3      	ldrh	r3, [r4, #12]
 8017b32:	bf15      	itete	ne
 8017b34:	6560      	strne	r0, [r4, #84]	; 0x54
 8017b36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017b3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017b3e:	81a3      	strheq	r3, [r4, #12]
 8017b40:	bf18      	it	ne
 8017b42:	81a3      	strhne	r3, [r4, #12]
 8017b44:	bd10      	pop	{r4, pc}

08017b46 <__sclose>:
 8017b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b4a:	f000 b813 	b.w	8017b74 <_close_r>
	...

08017b50 <_write_r>:
 8017b50:	b538      	push	{r3, r4, r5, lr}
 8017b52:	4d07      	ldr	r5, [pc, #28]	; (8017b70 <_write_r+0x20>)
 8017b54:	4604      	mov	r4, r0
 8017b56:	4608      	mov	r0, r1
 8017b58:	4611      	mov	r1, r2
 8017b5a:	2200      	movs	r2, #0
 8017b5c:	602a      	str	r2, [r5, #0]
 8017b5e:	461a      	mov	r2, r3
 8017b60:	f7e9 fb4a 	bl	80011f8 <_write>
 8017b64:	1c43      	adds	r3, r0, #1
 8017b66:	d102      	bne.n	8017b6e <_write_r+0x1e>
 8017b68:	682b      	ldr	r3, [r5, #0]
 8017b6a:	b103      	cbz	r3, 8017b6e <_write_r+0x1e>
 8017b6c:	6023      	str	r3, [r4, #0]
 8017b6e:	bd38      	pop	{r3, r4, r5, pc}
 8017b70:	20001f2c 	.word	0x20001f2c

08017b74 <_close_r>:
 8017b74:	b538      	push	{r3, r4, r5, lr}
 8017b76:	4d06      	ldr	r5, [pc, #24]	; (8017b90 <_close_r+0x1c>)
 8017b78:	2300      	movs	r3, #0
 8017b7a:	4604      	mov	r4, r0
 8017b7c:	4608      	mov	r0, r1
 8017b7e:	602b      	str	r3, [r5, #0]
 8017b80:	f7e9 fb49 	bl	8001216 <_close>
 8017b84:	1c43      	adds	r3, r0, #1
 8017b86:	d102      	bne.n	8017b8e <_close_r+0x1a>
 8017b88:	682b      	ldr	r3, [r5, #0]
 8017b8a:	b103      	cbz	r3, 8017b8e <_close_r+0x1a>
 8017b8c:	6023      	str	r3, [r4, #0]
 8017b8e:	bd38      	pop	{r3, r4, r5, pc}
 8017b90:	20001f2c 	.word	0x20001f2c

08017b94 <_fstat_r>:
 8017b94:	b538      	push	{r3, r4, r5, lr}
 8017b96:	4d07      	ldr	r5, [pc, #28]	; (8017bb4 <_fstat_r+0x20>)
 8017b98:	2300      	movs	r3, #0
 8017b9a:	4604      	mov	r4, r0
 8017b9c:	4608      	mov	r0, r1
 8017b9e:	4611      	mov	r1, r2
 8017ba0:	602b      	str	r3, [r5, #0]
 8017ba2:	f7e9 fb44 	bl	800122e <_fstat>
 8017ba6:	1c43      	adds	r3, r0, #1
 8017ba8:	d102      	bne.n	8017bb0 <_fstat_r+0x1c>
 8017baa:	682b      	ldr	r3, [r5, #0]
 8017bac:	b103      	cbz	r3, 8017bb0 <_fstat_r+0x1c>
 8017bae:	6023      	str	r3, [r4, #0]
 8017bb0:	bd38      	pop	{r3, r4, r5, pc}
 8017bb2:	bf00      	nop
 8017bb4:	20001f2c 	.word	0x20001f2c

08017bb8 <_isatty_r>:
 8017bb8:	b538      	push	{r3, r4, r5, lr}
 8017bba:	4d06      	ldr	r5, [pc, #24]	; (8017bd4 <_isatty_r+0x1c>)
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	4604      	mov	r4, r0
 8017bc0:	4608      	mov	r0, r1
 8017bc2:	602b      	str	r3, [r5, #0]
 8017bc4:	f7e9 fb43 	bl	800124e <_isatty>
 8017bc8:	1c43      	adds	r3, r0, #1
 8017bca:	d102      	bne.n	8017bd2 <_isatty_r+0x1a>
 8017bcc:	682b      	ldr	r3, [r5, #0]
 8017bce:	b103      	cbz	r3, 8017bd2 <_isatty_r+0x1a>
 8017bd0:	6023      	str	r3, [r4, #0]
 8017bd2:	bd38      	pop	{r3, r4, r5, pc}
 8017bd4:	20001f2c 	.word	0x20001f2c

08017bd8 <_lseek_r>:
 8017bd8:	b538      	push	{r3, r4, r5, lr}
 8017bda:	4d07      	ldr	r5, [pc, #28]	; (8017bf8 <_lseek_r+0x20>)
 8017bdc:	4604      	mov	r4, r0
 8017bde:	4608      	mov	r0, r1
 8017be0:	4611      	mov	r1, r2
 8017be2:	2200      	movs	r2, #0
 8017be4:	602a      	str	r2, [r5, #0]
 8017be6:	461a      	mov	r2, r3
 8017be8:	f7e9 fb3c 	bl	8001264 <_lseek>
 8017bec:	1c43      	adds	r3, r0, #1
 8017bee:	d102      	bne.n	8017bf6 <_lseek_r+0x1e>
 8017bf0:	682b      	ldr	r3, [r5, #0]
 8017bf2:	b103      	cbz	r3, 8017bf6 <_lseek_r+0x1e>
 8017bf4:	6023      	str	r3, [r4, #0]
 8017bf6:	bd38      	pop	{r3, r4, r5, pc}
 8017bf8:	20001f2c 	.word	0x20001f2c

08017bfc <_malloc_usable_size_r>:
 8017bfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017c00:	1f18      	subs	r0, r3, #4
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	bfbc      	itt	lt
 8017c06:	580b      	ldrlt	r3, [r1, r0]
 8017c08:	18c0      	addlt	r0, r0, r3
 8017c0a:	4770      	bx	lr

08017c0c <_read_r>:
 8017c0c:	b538      	push	{r3, r4, r5, lr}
 8017c0e:	4d07      	ldr	r5, [pc, #28]	; (8017c2c <_read_r+0x20>)
 8017c10:	4604      	mov	r4, r0
 8017c12:	4608      	mov	r0, r1
 8017c14:	4611      	mov	r1, r2
 8017c16:	2200      	movs	r2, #0
 8017c18:	602a      	str	r2, [r5, #0]
 8017c1a:	461a      	mov	r2, r3
 8017c1c:	f7e9 facf 	bl	80011be <_read>
 8017c20:	1c43      	adds	r3, r0, #1
 8017c22:	d102      	bne.n	8017c2a <_read_r+0x1e>
 8017c24:	682b      	ldr	r3, [r5, #0]
 8017c26:	b103      	cbz	r3, 8017c2a <_read_r+0x1e>
 8017c28:	6023      	str	r3, [r4, #0]
 8017c2a:	bd38      	pop	{r3, r4, r5, pc}
 8017c2c:	20001f2c 	.word	0x20001f2c

08017c30 <_init>:
 8017c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c32:	bf00      	nop
 8017c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c36:	bc08      	pop	{r3}
 8017c38:	469e      	mov	lr, r3
 8017c3a:	4770      	bx	lr

08017c3c <_fini>:
 8017c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c3e:	bf00      	nop
 8017c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c42:	bc08      	pop	{r3}
 8017c44:	469e      	mov	lr, r3
 8017c46:	4770      	bx	lr
